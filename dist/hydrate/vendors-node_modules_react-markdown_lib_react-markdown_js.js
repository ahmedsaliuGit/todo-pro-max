(self["webpackChunktodo_pro_max"] = self["webpackChunktodo_pro_max"] || []).push([["vendors-node_modules_react-markdown_lib_react-markdown_js"],{

/***/ "./node_modules/debug/src/browser.js":
/*!*******************************************!*\
  !*** ./node_modules/debug/src/browser.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */

exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (() => {
  let warned = false;
  return () => {
    if (!warned) {
      warned = true;
      console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    }
  };
})();

/**
 * Colors.
 */

exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

// eslint-disable-next-line complexity
function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  }

  // Is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||
  // Is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) ||
  // Is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 ||
  // Double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);
  if (!this.useColors) {
    return;
  }
  const c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit');

  // The final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  let index = 0;
  let lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, match => {
    if (match === '%%') {
      return;
    }
    index++;
    if (match === '%c') {
      // We only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */
exports.log = console.debug || console.log || (() => {});

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
  try {
    if (namespaces) {
      exports.storage.setItem('debug', namespaces);
    } else {
      exports.storage.removeItem('debug');
    }
  } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
  }
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */
function load() {
  let r;
  try {
    r = exports.storage.getItem('debug');
  } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
  }

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }
  return r;
}

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    // The Browser also has localStorage in the global context.
    return localStorage;
  } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
  }
}
module.exports = __webpack_require__(/*! ./common */ "./node_modules/debug/src/common.js")(exports);
const {
  formatters
} = module.exports;

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (error) {
    return '[UnexpectedJSONParseError]: ' + error.message;
  }
};

/***/ }),

/***/ "./node_modules/debug/src/common.js":
/*!******************************************!*\
  !*** ./node_modules/debug/src/common.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
  createDebug.debug = createDebug;
  createDebug.default = createDebug;
  createDebug.coerce = coerce;
  createDebug.disable = disable;
  createDebug.enable = enable;
  createDebug.enabled = enabled;
  createDebug.humanize = __webpack_require__(/*! ms */ "./node_modules/ms/index.js");
  createDebug.destroy = destroy;
  Object.keys(env).forEach(key => {
    createDebug[key] = env[key];
  });

  /**
  * The currently active debug mode names, and names to skip.
  */

  createDebug.names = [];
  createDebug.skips = [];

  /**
  * Map of special "%n" handling functions, for the debug "format" argument.
  *
  * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  */
  createDebug.formatters = {};

  /**
  * Selects a color for a debug namespace
  * @param {String} namespace The namespace string for the debug instance to be colored
  * @return {Number|String} An ANSI color code for the given namespace
  * @api private
  */
  function selectColor(namespace) {
    let hash = 0;
    for (let i = 0; i < namespace.length; i++) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  }
  createDebug.selectColor = selectColor;

  /**
  * Create a debugger with the given `namespace`.
  *
  * @param {String} namespace
  * @return {Function}
  * @api public
  */
  function createDebug(namespace) {
    let prevTime;
    let enableOverride = null;
    let namespacesCache;
    let enabledCache;
    function debug() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      // Disabled?
      if (!debug.enabled) {
        return;
      }
      const self = debug;

      // Set `diff` timestamp
      const curr = Number(new Date());
      const ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      args[0] = createDebug.coerce(args[0]);
      if (typeof args[0] !== 'string') {
        // Anything else let's inspect with %O
        args.unshift('%O');
      }

      // Apply any `formatters` transformations
      let index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
        // If we encounter an escaped % then don't increase the array index
        if (match === '%%') {
          return '%';
        }
        index++;
        const formatter = createDebug.formatters[format];
        if (typeof formatter === 'function') {
          const val = args[index];
          match = formatter.call(self, val);

          // Now we need to remove `args[index]` since it's inlined in the `format`
          args.splice(index, 1);
          index--;
        }
        return match;
      });

      // Apply env-specific formatting (colors, etc.)
      createDebug.formatArgs.call(self, args);
      const logFn = self.log || createDebug.log;
      logFn.apply(self, args);
    }
    debug.namespace = namespace;
    debug.useColors = createDebug.useColors();
    debug.color = createDebug.selectColor(namespace);
    debug.extend = extend;
    debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

    Object.defineProperty(debug, 'enabled', {
      enumerable: true,
      configurable: false,
      get: () => {
        if (enableOverride !== null) {
          return enableOverride;
        }
        if (namespacesCache !== createDebug.namespaces) {
          namespacesCache = createDebug.namespaces;
          enabledCache = createDebug.enabled(namespace);
        }
        return enabledCache;
      },
      set: v => {
        enableOverride = v;
      }
    });

    // Env-specific initialization logic for debug instances
    if (typeof createDebug.init === 'function') {
      createDebug.init(debug);
    }
    return debug;
  }
  function extend(namespace, delimiter) {
    const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
    newDebug.log = this.log;
    return newDebug;
  }

  /**
  * Enables a debug mode by namespaces. This can include modes
  * separated by a colon and wildcards.
  *
  * @param {String} namespaces
  * @api public
  */
  function enable(namespaces) {
    createDebug.save(namespaces);
    createDebug.namespaces = namespaces;
    createDebug.names = [];
    createDebug.skips = [];
    let i;
    const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    const len = split.length;
    for (i = 0; i < len; i++) {
      if (!split[i]) {
        // ignore empty strings
        continue;
      }
      namespaces = split[i].replace(/\*/g, '.*?');
      if (namespaces[0] === '-') {
        createDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));
      } else {
        createDebug.names.push(new RegExp('^' + namespaces + '$'));
      }
    }
  }

  /**
  * Disable debug output.
  *
  * @return {String} namespaces
  * @api public
  */
  function disable() {
    const namespaces = [...createDebug.names.map(toNamespace), ...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)].join(',');
    createDebug.enable('');
    return namespaces;
  }

  /**
  * Returns true if the given mode name is enabled, false otherwise.
  *
  * @param {String} name
  * @return {Boolean}
  * @api public
  */
  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }
    let i;
    let len;
    for (i = 0, len = createDebug.skips.length; i < len; i++) {
      if (createDebug.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = createDebug.names.length; i < len; i++) {
      if (createDebug.names[i].test(name)) {
        return true;
      }
    }
    return false;
  }

  /**
  * Convert regexp to namespace
  *
  * @param {RegExp} regxep
  * @return {String} namespace
  * @api private
  */
  function toNamespace(regexp) {
    return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
  }

  /**
  * Coerce `val`.
  *
  * @param {Mixed} val
  * @return {Mixed}
  * @api private
  */
  function coerce(val) {
    if (val instanceof Error) {
      return val.stack || val.message;
    }
    return val;
  }

  /**
  * XXX DO NOT USE. This is a temporary stub function.
  * XXX It WILL be removed in the next major release.
  */
  function destroy() {
    console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
  }
  createDebug.enable(createDebug.load());
  return createDebug;
}
module.exports = setup;

/***/ }),

/***/ "./node_modules/extend/index.js":
/*!**************************************!*\
  !*** ./node_modules/extend/index.js ***!
  \**************************************/
/***/ (function(module) {

"use strict";


var hasOwn = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var defineProperty = Object.defineProperty;
var gOPD = Object.getOwnPropertyDescriptor;
var isArray = function isArray(arr) {
  if (typeof Array.isArray === 'function') {
    return Array.isArray(arr);
  }
  return toStr.call(arr) === '[object Array]';
};
var isPlainObject = function isPlainObject(obj) {
  if (!obj || toStr.call(obj) !== '[object Object]') {
    return false;
  }
  var hasOwnConstructor = hasOwn.call(obj, 'constructor');
  var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
  // Not own constructor property must be Object
  if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
    return false;
  }

  // Own properties are enumerated firstly, so to speed up,
  // if last one is own, then all properties are own.
  var key;
  for (key in obj) {/**/}
  return typeof key === 'undefined' || hasOwn.call(obj, key);
};

// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
var setProperty = function setProperty(target, options) {
  if (defineProperty && options.name === '__proto__') {
    defineProperty(target, options.name, {
      enumerable: true,
      configurable: true,
      value: options.newValue,
      writable: true
    });
  } else {
    target[options.name] = options.newValue;
  }
};

// Return undefined instead of __proto__ if '__proto__' is not an own property
var getProperty = function getProperty(obj, name) {
  if (name === '__proto__') {
    if (!hasOwn.call(obj, name)) {
      return void 0;
    } else if (gOPD) {
      // In early versions of node, obj['__proto__'] is buggy when obj has
      // __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
      return gOPD(obj, name).value;
    }
  }
  return obj[name];
};
module.exports = function extend() {
  var options, name, src, copy, copyIsArray, clone;
  var target = arguments[0];
  var i = 1;
  var length = arguments.length;
  var deep = false;

  // Handle a deep copy situation
  if (typeof target === 'boolean') {
    deep = target;
    target = arguments[1] || {};
    // skip the boolean and the target
    i = 2;
  }
  if (target == null || typeof target !== 'object' && typeof target !== 'function') {
    target = {};
  }
  for (; i < length; ++i) {
    options = arguments[i];
    // Only deal with non-null/undefined values
    if (options != null) {
      // Extend the base object
      for (name in options) {
        src = getProperty(target, name);
        copy = getProperty(options, name);

        // Prevent never-ending loop
        if (target !== copy) {
          // Recurse if we're merging plain objects or arrays
          if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
            if (copyIsArray) {
              copyIsArray = false;
              clone = src && isArray(src) ? src : [];
            } else {
              clone = src && isPlainObject(src) ? src : {};
            }

            // Never move original objects, clone them
            setProperty(target, {
              name: name,
              newValue: extend(deep, clone, copy)
            });

            // Don't bring in undefined values
          } else if (typeof copy !== 'undefined') {
            setProperty(target, {
              name: name,
              newValue: copy
            });
          }
        }
      }
    }
  }

  // Return the modified object
  return target;
};

/***/ }),

/***/ "./node_modules/inline-style-parser/index.js":
/*!***************************************************!*\
  !*** ./node_modules/inline-style-parser/index.js ***!
  \***************************************************/
/***/ (function(module) {

// http://www.w3.org/TR/CSS21/grammar.html
// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027
var COMMENT_REGEX = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
var NEWLINE_REGEX = /\n/g;
var WHITESPACE_REGEX = /^\s*/;

// declaration
var PROPERTY_REGEX = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/;
var COLON_REGEX = /^:\s*/;
var VALUE_REGEX = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/;
var SEMICOLON_REGEX = /^[;\s]*/;

// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill
var TRIM_REGEX = /^\s+|\s+$/g;

// strings
var NEWLINE = '\n';
var FORWARD_SLASH = '/';
var ASTERISK = '*';
var EMPTY_STRING = '';

// types
var TYPE_COMMENT = 'comment';
var TYPE_DECLARATION = 'declaration';

/**
 * @param {String} style
 * @param {Object} [options]
 * @return {Object[]}
 * @throws {TypeError}
 * @throws {Error}
 */
module.exports = function (style, options) {
  if (typeof style !== 'string') {
    throw new TypeError('First argument must be a string');
  }
  if (!style) return [];
  options = options || {};

  /**
   * Positional.
   */
  var lineno = 1;
  var column = 1;

  /**
   * Update lineno and column based on `str`.
   *
   * @param {String} str
   */
  function updatePosition(str) {
    var lines = str.match(NEWLINE_REGEX);
    if (lines) lineno += lines.length;
    var i = str.lastIndexOf(NEWLINE);
    column = ~i ? str.length - i : column + str.length;
  }

  /**
   * Mark position and patch `node.position`.
   *
   * @return {Function}
   */
  function position() {
    var start = {
      line: lineno,
      column: column
    };
    return function (node) {
      node.position = new Position(start);
      whitespace();
      return node;
    };
  }

  /**
   * Store position information for a node.
   *
   * @constructor
   * @property {Object} start
   * @property {Object} end
   * @property {undefined|String} source
   */
  function Position(start) {
    this.start = start;
    this.end = {
      line: lineno,
      column: column
    };
    this.source = options.source;
  }

  /**
   * Non-enumerable source string.
   */
  Position.prototype.content = style;
  var errorsList = [];

  /**
   * Error `msg`.
   *
   * @param {String} msg
   * @throws {Error}
   */
  function error(msg) {
    var err = new Error(options.source + ':' + lineno + ':' + column + ': ' + msg);
    err.reason = msg;
    err.filename = options.source;
    err.line = lineno;
    err.column = column;
    err.source = style;
    if (options.silent) {
      errorsList.push(err);
    } else {
      throw err;
    }
  }

  /**
   * Match `re` and return captures.
   *
   * @param {RegExp} re
   * @return {undefined|Array}
   */
  function match(re) {
    var m = re.exec(style);
    if (!m) return;
    var str = m[0];
    updatePosition(str);
    style = style.slice(str.length);
    return m;
  }

  /**
   * Parse whitespace.
   */
  function whitespace() {
    match(WHITESPACE_REGEX);
  }

  /**
   * Parse comments.
   *
   * @param {Object[]} [rules]
   * @return {Object[]}
   */
  function comments(rules) {
    var c;
    rules = rules || [];
    while (c = comment()) {
      if (c !== false) {
        rules.push(c);
      }
    }
    return rules;
  }

  /**
   * Parse comment.
   *
   * @return {Object}
   * @throws {Error}
   */
  function comment() {
    var pos = position();
    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;
    var i = 2;
    while (EMPTY_STRING != style.charAt(i) && (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))) {
      ++i;
    }
    i += 2;
    if (EMPTY_STRING === style.charAt(i - 1)) {
      return error('End of comment missing');
    }
    var str = style.slice(2, i - 2);
    column += 2;
    updatePosition(str);
    style = style.slice(i);
    column += 2;
    return pos({
      type: TYPE_COMMENT,
      comment: str
    });
  }

  /**
   * Parse declaration.
   *
   * @return {Object}
   * @throws {Error}
   */
  function declaration() {
    var pos = position();

    // prop
    var prop = match(PROPERTY_REGEX);
    if (!prop) return;
    comment();

    // :
    if (!match(COLON_REGEX)) return error("property missing ':'");

    // val
    var val = match(VALUE_REGEX);
    var ret = pos({
      type: TYPE_DECLARATION,
      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),
      value: val ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING)) : EMPTY_STRING
    });

    // ;
    match(SEMICOLON_REGEX);
    return ret;
  }

  /**
   * Parse declarations.
   *
   * @return {Object[]}
   */
  function declarations() {
    var decls = [];
    comments(decls);

    // declarations
    var decl;
    while (decl = declaration()) {
      if (decl !== false) {
        decls.push(decl);
        comments(decls);
      }
    }
    return decls;
  }
  whitespace();
  return declarations();
};

/**
 * Trim `str`.
 *
 * @param {String} str
 * @return {String}
 */
function trim(str) {
  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;
}

/***/ }),

/***/ "./node_modules/is-buffer/index.js":
/*!*****************************************!*\
  !*** ./node_modules/is-buffer/index.js ***!
  \*****************************************/
/***/ (function(module) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

module.exports = function isBuffer(obj) {
  return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
};

/***/ }),

/***/ "./node_modules/ms/index.js":
/*!**********************************!*\
  !*** ./node_modules/ms/index.js ***!
  \**********************************/
/***/ (function(module) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

/***/ }),

/***/ "./node_modules/object-assign/index.js":
/*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
/***/ (function(module) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/



/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }
  return Object(val);
}
function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }

    // Detect buggy property enumeration order in older V8 versions.

    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
    test1[5] = 'de';
    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    }

    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
    var test2 = {};
    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });
    if (order2.join('') !== '0123456789') {
      return false;
    }

    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }
    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}
module.exports = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;
  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);
    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);
      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }
  return to;
};

/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var printWarning = function () {};
if (true) {
  var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");
  var loggedTypeFailures = {};
  var has = __webpack_require__(/*! ./lib/has */ "./node_modules/prop-types/lib/has.js");
  printWarning = function (text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {/**/}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (true) {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;
          var stack = getStack ? getStack() : '';
          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function () {
  if (true) {
    loggedTypeFailures = {};
  }
};
module.exports = checkPropTypes;

/***/ }),

/***/ "./node_modules/prop-types/factoryWithTypeCheckers.js":
/*!************************************************************!*\
  !*** ./node_modules/prop-types/factoryWithTypeCheckers.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactIs = __webpack_require__(/*! react-is */ "./node_modules/prop-types/node_modules/react-is/index.js");
var assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");
var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");
var has = __webpack_require__(/*! ./lib/has */ "./node_modules/prop-types/lib/has.js");
var checkPropTypes = __webpack_require__(/*! ./checkPropTypes */ "./node_modules/prop-types/checkPropTypes.js");
var printWarning = function () {};
if (true) {
  printWarning = function (text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}
function emptyFunctionThatReturnsNull() {
  return null;
}
module.exports = function (isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bigint: createPrimitiveTypeChecker('bigint'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),
    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message, data) {
    this.message = message;
    this.data = data && typeof data === 'object' ? data : {};
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;
  function createChainableTypeChecker(validate) {
    if (true) {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;
      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
          err.name = 'Invariant Violation';
          throw err;
        } else if ( true && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (!manualPropTypeCallCache[cacheKey] &&
          // Avoid spamming the console because they are often not actionable except for lib authors
          manualPropTypeWarningCount < 3) {
            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }
    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }
  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
          expectedType: expectedType
        });
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }
  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!ReactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (true) {
        if (arguments.length > 1) {
          printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }
      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }
  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
       true ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : 0;
      return emptyFunctionThatReturnsNull;
    }
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
        return emptyFunctionThatReturnsNull;
      }
    }
    function validate(props, propName, componentName, location, propFullName) {
      var expectedTypes = [];
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
        if (checkerResult == null) {
          return null;
        }
        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
          expectedTypes.push(checkerResult.data.expectedType);
        }
      }
      var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
    }
    return createChainableTypeChecker(validate);
  }
  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function invalidValidatorError(componentName, location, propFullName, key, type) {
    return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
  }
  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (typeof checker !== 'function') {
          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (has(shapeTypes, key) && typeof checker !== 'function') {
          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
        }
        if (!checker) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }
        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }
        return true;
      default:
        return false;
    }
  }
  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }
    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }
  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};

/***/ }),

/***/ "./node_modules/prop-types/index.js":
/*!******************************************!*\
  !*** ./node_modules/prop-types/index.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (true) {
  var ReactIs = __webpack_require__(/*! react-is */ "./node_modules/prop-types/node_modules/react-is/index.js");

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(/*! ./factoryWithTypeCheckers */ "./node_modules/prop-types/factoryWithTypeCheckers.js")(ReactIs.isElement, throwOnDirectAccess);
} else {}

/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/***/ (function(module) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;

/***/ }),

/***/ "./node_modules/prop-types/lib/has.js":
/*!********************************************!*\
  !*** ./node_modules/prop-types/lib/has.js ***!
  \********************************************/
/***/ (function(module) {

module.exports = Function.call.bind(Object.prototype.hasOwnProperty);

/***/ }),

/***/ "./node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function () {
    'use strict';

    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?

    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' ||
      // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }
    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;
        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;
            switch (type) {
              case REACT_ASYNC_MODE_TYPE:
              case REACT_CONCURRENT_MODE_TYPE:
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
                return type;
              default:
                var $$typeofType = type && type.$$typeof;
                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;
                  default:
                    return $$typeof;
                }
            }
          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }
      return undefined;
    } // AsyncMode is deprecated along with isAsyncMode

    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
        }
      }
      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
  })();
}

/***/ }),

/***/ "./node_modules/prop-types/node_modules/react-is/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/prop-types/node_modules/react-is/index.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ "./node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js");
}

/***/ }),

/***/ "./node_modules/react-markdown/node_modules/react-is/cjs/react-is.development.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/react-markdown/node_modules/react-is/cjs/react-is.development.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
/**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function () {
    'use strict';

    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
    var REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');
    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');

    // -----------------------------------------------------------------------------

    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing

    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.

    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

    var REACT_MODULE_REFERENCE;
    {
      REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
    }
    function isValidElementType(type) {
      if (typeof type === 'string' || typeof type === 'function') {
        return true;
      } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).

      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
        return true;
      }
      if (typeof type === 'object' && type !== null) {
        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE ||
        // This needs to include all possible module reference object
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
          return true;
        }
      }
      return false;
    }
    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;
        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;
            switch (type) {
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
              case REACT_SUSPENSE_LIST_TYPE:
                return type;
              default:
                var $$typeofType = type && type.$$typeof;
                switch ($$typeofType) {
                  case REACT_SERVER_CONTEXT_TYPE:
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_LAZY_TYPE:
                  case REACT_MEMO_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;
                  default:
                    return $$typeof;
                }
            }
          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }
      return undefined;
    }
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false;
    var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

          console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
        }
      }
      return false;
    }
    function isConcurrentMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
          hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

          console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
        }
      }
      return false;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    function isSuspenseList(object) {
      return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
    }
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.SuspenseList = SuspenseList;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isSuspenseList = isSuspenseList;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
  })();
}

/***/ }),

/***/ "./node_modules/react-markdown/node_modules/react-is/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-markdown/node_modules/react-is/index.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ "./node_modules/react-markdown/node_modules/react-is/cjs/react-is.development.js");
}

/***/ }),

/***/ "./node_modules/style-to-object/index.js":
/*!***********************************************!*\
  !*** ./node_modules/style-to-object/index.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var parse = __webpack_require__(/*! inline-style-parser */ "./node_modules/inline-style-parser/index.js");

/**
 * Parses inline style to object.
 *
 * @example
 * // returns { 'line-height': '42' }
 * StyleToObject('line-height: 42;');
 *
 * @param  {String}      style      - The inline style.
 * @param  {Function}    [iterator] - The iterator function.
 * @return {null|Object}
 */
function StyleToObject(style, iterator) {
  var output = null;
  if (!style || typeof style !== 'string') {
    return output;
  }
  var declaration;
  var declarations = parse(style);
  var hasIterator = typeof iterator === 'function';
  var property;
  var value;
  for (var i = 0, len = declarations.length; i < len; i++) {
    declaration = declarations[i];
    property = declaration.property;
    value = declaration.value;
    if (hasIterator) {
      iterator(property, value, declaration);
    } else if (value) {
      output || (output = {});
      output[property] = value;
    }
  }
  return output;
}
module.exports = StyleToObject;
module.exports["default"] = StyleToObject; // ESM support

/***/ }),

/***/ "./node_modules/bail/index.js":
/*!************************************!*\
  !*** ./node_modules/bail/index.js ***!
  \************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bail": function() { return /* binding */ bail; }
/* harmony export */ });
/**
 * Throw a given error.
 *
 * @param {Error|null|undefined} [error]
 *   Maybe error.
 * @returns {asserts error is null|undefined}
 */
function bail(error) {
  if (error) {
    throw error;
  }
}

/***/ }),

/***/ "./node_modules/comma-separated-tokens/index.js":
/*!******************************************************!*\
  !*** ./node_modules/comma-separated-tokens/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parse": function() { return /* binding */ parse; },
/* harmony export */   "stringify": function() { return /* binding */ stringify; }
/* harmony export */ });
/**
 * @typedef Options
 *   Configuration for `stringify`.
 * @property {boolean} [padLeft=true]
 *   Whether to pad a space before a token.
 * @property {boolean} [padRight=false]
 *   Whether to pad a space after a token.
 */

/**
 * @typedef {Options} StringifyOptions
 *   Please use `StringifyOptions` instead.
 */

/**
 * Parse comma-separated tokens to an array.
 *
 * @param {string} value
 *   Comma-separated tokens.
 * @returns {Array<string>}
 *   List of tokens.
 */
function parse(value) {
  /** @type {Array<string>} */
  const tokens = [];
  const input = String(value || '');
  let index = input.indexOf(',');
  let start = 0;
  /** @type {boolean} */
  let end = false;
  while (!end) {
    if (index === -1) {
      index = input.length;
      end = true;
    }
    const token = input.slice(start, index).trim();
    if (token || !end) {
      tokens.push(token);
    }
    start = index + 1;
    index = input.indexOf(',', start);
  }
  return tokens;
}

/**
 * Serialize an array of strings or numbers to comma-separated tokens.
 *
 * @param {Array<string|number>} values
 *   List of tokens.
 * @param {Options} [options]
 *   Configuration for `stringify` (optional).
 * @returns {string}
 *   Comma-separated tokens.
 */
function stringify(values, options) {
  const settings = options || {};

  // Ensure the last empty entry is seen.
  const input = values[values.length - 1] === '' ? [...values, ''] : values;
  return input.join((settings.padRight ? ' ' : '') + ',' + (settings.padLeft === false ? '' : ' ')).trim();
}

/***/ }),

/***/ "./node_modules/decode-named-character-reference/index.dom.js":
/*!********************************************************************!*\
  !*** ./node_modules/decode-named-character-reference/index.dom.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decodeNamedCharacterReference": function() { return /* binding */ decodeNamedCharacterReference; }
/* harmony export */ });
/// <reference lib="dom" />

/* eslint-env browser */

const element = document.createElement('i');

/**
 * @param {string} value
 * @returns {string|false}
 */
function decodeNamedCharacterReference(value) {
  const characterReference = '&' + value + ';';
  element.innerHTML = characterReference;
  const char = element.textContent;

  // Some named character references do not require the closing semicolon
  // (`&not`, for instance), which leads to situations where parsing the assumed
  // named reference of `&notit;` will result in the string `¬it;`.
  // When we encounter a trailing semicolon after parsing, and the character
  // reference to decode was not a semicolon (`&semi;`), we can assume that the
  // matching was not complete.
  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can
  // yield `null`.
  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {
    return false;
  }

  // If the decoded string is equal to the input, the character reference was
  // not valid.
  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can
  // yield `null`.
  return char === characterReference ? false : char;
}

/***/ }),

/***/ "./node_modules/hast-util-whitespace/index.js":
/*!****************************************************!*\
  !*** ./node_modules/hast-util-whitespace/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "whitespace": function() { return /* binding */ whitespace; }
/* harmony export */ });
/**
 * Check if the given value is *inter-element whitespace*.
 *
 * @param {unknown} thing
 *   Thing to check (typically `Node` or `string`).
 * @returns {boolean}
 *   Whether the `value` is inter-element whitespace (`boolean`): consisting of
 *   zero or more of space, tab (`\t`), line feed (`\n`), carriage return
 *   (`\r`), or form feed (`\f`).
 *   If a node is passed it must be a `Text` node, whose `value` field is
 *   checked.
 */
function whitespace(thing) {
  /** @type {string} */
  const value =
  // @ts-expect-error looks like a node.
  thing && typeof thing === 'object' && thing.type === 'text' ?
  // @ts-expect-error looks like a text.
  thing.value || '' : thing;

  // HTML whitespace expression.
  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.
  return typeof value === 'string' && value.replace(/[ \t\n\f\r]/g, '') === '';
}

/***/ }),

/***/ "./node_modules/mdast-util-definitions/lib/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/mdast-util-definitions/lib/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "definitions": function() { return /* binding */ definitions; }
/* harmony export */ });
/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-visit */ "./node_modules/unist-util-visit/lib/index.js");
/**
 * @typedef {import('mdast').Root} Root
 * @typedef {import('mdast').Content} Content
 * @typedef {import('mdast').Definition} Definition
 */

/**
 * @typedef {Root | Content} Node
 *
 * @callback GetDefinition
 *   Get a definition by identifier.
 * @param {string | null | undefined} [identifier]
 *   Identifier of definition.
 * @returns {Definition | null}
 *   Definition corresponding to `identifier` or `null`.
 */


const own = {}.hasOwnProperty;

/**
 * Find definitions in `tree`.
 *
 * Uses CommonMark precedence, which means that earlier definitions are
 * preferred over duplicate later definitions.
 *
 * @param {Node} tree
 *   Tree to check.
 * @returns {GetDefinition}
 *   Getter.
 */
function definitions(tree) {
  /** @type {Record<string, Definition>} */
  const cache = Object.create(null);
  if (!tree || !tree.type) {
    throw new Error('mdast-util-definitions expected node');
  }
  (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, 'definition', definition => {
    const id = clean(definition.identifier);
    if (id && !own.call(cache, id)) {
      cache[id] = definition;
    }
  });
  return definition;

  /** @type {GetDefinition} */
  function definition(identifier) {
    const id = clean(identifier);
    // To do: next major: return `undefined` when not found.
    return id && own.call(cache, id) ? cache[id] : null;
  }
}

/**
 * @param {string | null | undefined} [value]
 * @returns {string}
 */
function clean(value) {
  return String(value || '').toUpperCase();
}

/***/ }),

/***/ "./node_modules/mdast-util-from-markdown/dev/lib/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/mdast-util-from-markdown/dev/lib/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromMarkdown": function() { return /* binding */ fromMarkdown; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var mdast_util_to_string__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! mdast-util-to-string */ "./node_modules/mdast-util-to-string/lib/index.js");
/* harmony import */ var micromark_lib_parse_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark/lib/parse.js */ "./node_modules/micromark/dev/lib/parse.js");
/* harmony import */ var micromark_lib_preprocess_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark/lib/preprocess.js */ "./node_modules/micromark/dev/lib/preprocess.js");
/* harmony import */ var micromark_lib_postprocess_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark/lib/postprocess.js */ "./node_modules/micromark/dev/lib/postprocess.js");
/* harmony import */ var micromark_util_decode_numeric_character_reference__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! micromark-util-decode-numeric-character-reference */ "./node_modules/micromark-util-decode-numeric-character-reference/dev/index.js");
/* harmony import */ var micromark_util_decode_string__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! micromark-util-decode-string */ "./node_modules/micromark-util-decode-string/dev/index.js");
/* harmony import */ var micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! micromark-util-normalize-identifier */ "./node_modules/micromark-util-normalize-identifier/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/* harmony import */ var decode_named_character_reference__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! decode-named-character-reference */ "./node_modules/decode-named-character-reference/index.dom.js");
/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! unist-util-stringify-position */ "./node_modules/unist-util-stringify-position/lib/index.js");
/**
 * @typedef {import('micromark-util-types').Encoding} Encoding
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').ParseOptions} ParseOptions
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Value} Value
 *
 * @typedef {import('unist').Parent} UnistParent
 * @typedef {import('unist').Point} Point
 *
 * @typedef {import('mdast').PhrasingContent} PhrasingContent
 * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent
 * @typedef {import('mdast').Content} Content
 * @typedef {import('mdast').Break} Break
 * @typedef {import('mdast').Blockquote} Blockquote
 * @typedef {import('mdast').Code} Code
 * @typedef {import('mdast').Definition} Definition
 * @typedef {import('mdast').Emphasis} Emphasis
 * @typedef {import('mdast').Heading} Heading
 * @typedef {import('mdast').HTML} HTML
 * @typedef {import('mdast').Image} Image
 * @typedef {import('mdast').ImageReference} ImageReference
 * @typedef {import('mdast').InlineCode} InlineCode
 * @typedef {import('mdast').Link} Link
 * @typedef {import('mdast').LinkReference} LinkReference
 * @typedef {import('mdast').List} List
 * @typedef {import('mdast').ListItem} ListItem
 * @typedef {import('mdast').Paragraph} Paragraph
 * @typedef {import('mdast').Root} Root
 * @typedef {import('mdast').Strong} Strong
 * @typedef {import('mdast').Text} Text
 * @typedef {import('mdast').ThematicBreak} ThematicBreak
 * @typedef {import('mdast').ReferenceType} ReferenceType
 * @typedef {import('../index.js').CompileData} CompileData
 */

/**
 * @typedef {Root | Content} Node
 * @typedef {Extract<Node, UnistParent>} Parent
 *
 * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment
 */

/**
 * @callback Transform
 *   Extra transform, to change the AST afterwards.
 * @param {Root} tree
 *   Tree to transform.
 * @returns {Root | undefined | null | void}
 *   New tree or nothing (in which case the current tree is used).
 *
 * @callback Handle
 *   Handle a token.
 * @param {CompileContext} this
 *   Context.
 * @param {Token} token
 *   Current token.
 * @returns {void}
 *   Nothing.
 *
 * @typedef {Record<string, Handle>} Handles
 *   Token types mapping to handles
 *
 * @callback OnEnterError
 *   Handle the case where the `right` token is open, but it is closed (by the
 *   `left` token) or because we reached the end of the document.
 * @param {Omit<CompileContext, 'sliceSerialize'>} this
 *   Context.
 * @param {Token | undefined} left
 *   Left token.
 * @param {Token} right
 *   Right token.
 * @returns {void}
 *   Nothing.
 *
 * @callback OnExitError
 *   Handle the case where the `right` token is open but it is closed by
 *   exiting the `left` token.
 * @param {Omit<CompileContext, 'sliceSerialize'>} this
 *   Context.
 * @param {Token} left
 *   Left token.
 * @param {Token} right
 *   Right token.
 * @returns {void}
 *   Nothing.
 *
 * @typedef {[Token, OnEnterError | undefined]} TokenTuple
 *   Open token on the stack, with an optional error handler for when
 *   that token isn’t closed properly.
 */

/**
 * @typedef Config
 *   Configuration.
 *
 *   We have our defaults, but extensions will add more.
 * @property {Array<string>} canContainEols
 *   Token types where line endings are used.
 * @property {Handles} enter
 *   Opening handles.
 * @property {Handles} exit
 *   Closing handles.
 * @property {Array<Transform>} transforms
 *   Tree transforms.
 *
 * @typedef {Partial<Config>} Extension
 *   Change how markdown tokens from micromark are turned into mdast.
 *
 * @typedef CompileContext
 *   mdast compiler context.
 * @property {Array<Node | Fragment>} stack
 *   Stack of nodes.
 * @property {Array<TokenTuple>} tokenStack
 *   Stack of tokens.
 * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData
 *   Get data from the key/value store.
 * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData
 *   Set data into the key/value store.
 * @property {(this: CompileContext) => void} buffer
 *   Capture some of the output data.
 * @property {(this: CompileContext) => string} resume
 *   Stop capturing and access the output data.
 * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter
 *   Enter a token.
 * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit
 *   Exit a token.
 * @property {TokenizeContext['sliceSerialize']} sliceSerialize
 *   Get the string value of a token.
 * @property {Config} config
 *   Configuration.
 *
 * @typedef FromMarkdownOptions
 *   Configuration for how to build mdast.
 * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]
 *   Extensions for this utility to change how tokens are turned into a tree.
 *
 * @typedef {ParseOptions & FromMarkdownOptions} Options
 *   Configuration.
 */

// To do: micromark: create a registry of tokens?
// To do: next major: don’t return given `Node` from `enter`.
// To do: next major: remove setter/getter.














const own = {}.hasOwnProperty;

/**
 * @param value
 *   Markdown to parse.
 * @param encoding
 *   Character encoding for when `value` is `Buffer`.
 * @param options
 *   Configuration.
 * @returns
 *   mdast tree.
 */
const fromMarkdown =
/**
 * @type {(
 *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &
 *   ((value: Value, options?: Options | null | undefined) => Root)
 * )}
 */

/**
 * @param {Value} value
 * @param {Encoding | Options | null | undefined} [encoding]
 * @param {Options | null | undefined} [options]
 * @returns {Root}
 */
function (value, encoding, options) {
  if (typeof encoding !== 'string') {
    options = encoding;
    encoding = undefined;
  }
  return compiler(options)((0,micromark_lib_postprocess_js__WEBPACK_IMPORTED_MODULE_1__.postprocess)(
  // @ts-expect-error: micromark types need to accept `null`.
  (0,micromark_lib_parse_js__WEBPACK_IMPORTED_MODULE_2__.parse)(options).document().write((0,micromark_lib_preprocess_js__WEBPACK_IMPORTED_MODULE_3__.preprocess)()(value, encoding, true))));
};

/**
 * Note this compiler only understand complete buffering, not streaming.
 *
 * @param {Options | null | undefined} [options]
 */
function compiler(options) {
  /** @type {Config} */
  const config = {
    transforms: [],
    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],
    enter: {
      autolink: opener(link),
      autolinkProtocol: onenterdata,
      autolinkEmail: onenterdata,
      atxHeading: opener(heading),
      blockQuote: opener(blockQuote),
      characterEscape: onenterdata,
      characterReference: onenterdata,
      codeFenced: opener(codeFlow),
      codeFencedFenceInfo: buffer,
      codeFencedFenceMeta: buffer,
      codeIndented: opener(codeFlow, buffer),
      codeText: opener(codeText, buffer),
      codeTextData: onenterdata,
      data: onenterdata,
      codeFlowValue: onenterdata,
      definition: opener(definition),
      definitionDestinationString: buffer,
      definitionLabelString: buffer,
      definitionTitleString: buffer,
      emphasis: opener(emphasis),
      hardBreakEscape: opener(hardBreak),
      hardBreakTrailing: opener(hardBreak),
      htmlFlow: opener(html, buffer),
      htmlFlowData: onenterdata,
      htmlText: opener(html, buffer),
      htmlTextData: onenterdata,
      image: opener(image),
      label: buffer,
      link: opener(link),
      listItem: opener(listItem),
      listItemValue: onenterlistitemvalue,
      listOrdered: opener(list, onenterlistordered),
      listUnordered: opener(list),
      paragraph: opener(paragraph),
      reference: onenterreference,
      referenceString: buffer,
      resourceDestinationString: buffer,
      resourceTitleString: buffer,
      setextHeading: opener(heading),
      strong: opener(strong),
      thematicBreak: opener(thematicBreak)
    },
    exit: {
      atxHeading: closer(),
      atxHeadingSequence: onexitatxheadingsequence,
      autolink: closer(),
      autolinkEmail: onexitautolinkemail,
      autolinkProtocol: onexitautolinkprotocol,
      blockQuote: closer(),
      characterEscapeValue: onexitdata,
      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
      characterReferenceValue: onexitcharacterreferencevalue,
      codeFenced: closer(onexitcodefenced),
      codeFencedFence: onexitcodefencedfence,
      codeFencedFenceInfo: onexitcodefencedfenceinfo,
      codeFencedFenceMeta: onexitcodefencedfencemeta,
      codeFlowValue: onexitdata,
      codeIndented: closer(onexitcodeindented),
      codeText: closer(onexitcodetext),
      codeTextData: onexitdata,
      data: onexitdata,
      definition: closer(),
      definitionDestinationString: onexitdefinitiondestinationstring,
      definitionLabelString: onexitdefinitionlabelstring,
      definitionTitleString: onexitdefinitiontitlestring,
      emphasis: closer(),
      hardBreakEscape: closer(onexithardbreak),
      hardBreakTrailing: closer(onexithardbreak),
      htmlFlow: closer(onexithtmlflow),
      htmlFlowData: onexitdata,
      htmlText: closer(onexithtmltext),
      htmlTextData: onexitdata,
      image: closer(onexitimage),
      label: onexitlabel,
      labelText: onexitlabeltext,
      lineEnding: onexitlineending,
      link: closer(onexitlink),
      listItem: closer(),
      listOrdered: closer(),
      listUnordered: closer(),
      paragraph: closer(),
      referenceString: onexitreferencestring,
      resourceDestinationString: onexitresourcedestinationstring,
      resourceTitleString: onexitresourcetitlestring,
      resource: onexitresource,
      setextHeading: closer(onexitsetextheading),
      setextHeadingLineSequence: onexitsetextheadinglinesequence,
      setextHeadingText: onexitsetextheadingtext,
      strong: closer(),
      thematicBreak: closer()
    }
  };
  configure(config, (options || {}).mdastExtensions || []);

  /** @type {CompileData} */
  const data = {};
  return compile;

  /**
   * Turn micromark events into an mdast tree.
   *
   * @param {Array<Event>} events
   *   Events.
   * @returns {Root}
   *   mdast tree.
   */
  function compile(events) {
    /** @type {Root} */
    let tree = {
      type: 'root',
      children: []
    };
    /** @type {Omit<CompileContext, 'sliceSerialize'>} */
    const context = {
      stack: [tree],
      tokenStack: [],
      config,
      enter,
      exit,
      buffer,
      resume,
      setData,
      getData
    };
    /** @type {Array<number>} */
    const listStack = [];
    let index = -1;
    while (++index < events.length) {
      // We preprocess lists to add `listItem` tokens, and to infer whether
      // items the list itself are spread out.
      if (events[index][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.listOrdered || events[index][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.listUnordered) {
        if (events[index][0] === 'enter') {
          listStack.push(index);
        } else {
          const tail = listStack.pop();
          (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(typeof tail === 'number', 'expected list ot be open');
          index = prepareList(events, tail, index);
        }
      }
    }
    index = -1;
    while (++index < events.length) {
      const handler = config[events[index][0]];
      if (own.call(handler, events[index][1].type)) {
        handler[events[index][1].type].call(Object.assign({
          sliceSerialize: events[index][2].sliceSerialize
        }, context), events[index][1]);
      }
    }

    // Handle tokens still being open.
    if (context.tokenStack.length > 0) {
      const tail = context.tokenStack[context.tokenStack.length - 1];
      const handler = tail[1] || defaultOnError;
      handler.call(context, undefined, tail[0]);
    }

    // Figure out `root` position.
    tree.position = {
      start: point(events.length > 0 ? events[0][1].start : {
        line: 1,
        column: 1,
        offset: 0
      }),
      end: point(events.length > 0 ? events[events.length - 2][1].end : {
        line: 1,
        column: 1,
        offset: 0
      })
    };

    // Call transforms.
    index = -1;
    while (++index < config.transforms.length) {
      tree = config.transforms[index](tree) || tree;
    }
    return tree;
  }

  /**
   * @param {Array<Event>} events
   * @param {number} start
   * @param {number} length
   * @returns {number}
   */
  function prepareList(events, start, length) {
    let index = start - 1;
    let containerBalance = -1;
    let listSpread = false;
    /** @type {Token | undefined} */
    let listItem;
    /** @type {number | undefined} */
    let lineIndex;
    /** @type {number | undefined} */
    let firstBlankLineIndex;
    /** @type {boolean | undefined} */
    let atMarker;
    while (++index <= length) {
      const event = events[index];
      if (event[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.listUnordered || event[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.listOrdered || event[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.blockQuote) {
        if (event[0] === 'enter') {
          containerBalance++;
        } else {
          containerBalance--;
        }
        atMarker = undefined;
      } else if (event[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.lineEndingBlank) {
        if (event[0] === 'enter') {
          if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {
            firstBlankLineIndex = index;
          }
          atMarker = undefined;
        }
      } else if (event[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.linePrefix || event[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.listItemValue || event[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.listItemMarker || event[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.listItemPrefix || event[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.listItemPrefixWhitespace) {
        // Empty.
      } else {
        atMarker = undefined;
      }
      if (!containerBalance && event[0] === 'enter' && event[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.listItemPrefix || containerBalance === -1 && event[0] === 'exit' && (event[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.listUnordered || event[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.listOrdered)) {
        if (listItem) {
          let tailIndex = index;
          lineIndex = undefined;
          while (tailIndex--) {
            const tailEvent = events[tailIndex];
            if (tailEvent[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.lineEnding || tailEvent[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.lineEndingBlank) {
              if (tailEvent[0] === 'exit') continue;
              if (lineIndex) {
                events[lineIndex][1].type = micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.lineEndingBlank;
                listSpread = true;
              }
              tailEvent[1].type = micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.lineEnding;
              lineIndex = tailIndex;
            } else if (tailEvent[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.linePrefix || tailEvent[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.blockQuotePrefix || tailEvent[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.blockQuotePrefixWhitespace || tailEvent[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.blockQuoteMarker || tailEvent[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.listItemIndent) {
              // Empty
            } else {
              break;
            }
          }
          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {
            // @ts-expect-error Patched.
            listItem._spread = true;
          }

          // Fix position.
          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);
          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);
          index++;
          length++;
        }

        // Create a new list item.
        if (event[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.listItemPrefix) {
          listItem = {
            type: 'listItem',
            // @ts-expect-error Patched
            _spread: false,
            start: Object.assign({}, event[1].start)
          };
          // @ts-expect-error: `listItem` is most definitely defined, TS...
          events.splice(index, 0, ['enter', listItem, event[2]]);
          index++;
          length++;
          firstBlankLineIndex = undefined;
          atMarker = true;
        }
      }
    }

    // @ts-expect-error Patched.
    events[start][1]._spread = listSpread;
    return length;
  }

  /**
   * Set data.
   *
   * @template {keyof CompileData} Key
   *   Field type.
   * @param {Key} key
   *   Key of field.
   * @param {CompileData[Key]} [value]
   *   New value.
   * @returns {void}
   *   Nothing.
   */
  function setData(key, value) {
    data[key] = value;
  }

  /**
   * Get data.
   *
   * @template {keyof CompileData} Key
   *   Field type.
   * @param {Key} key
   *   Key of field.
   * @returns {CompileData[Key]}
   *   Value.
   */
  function getData(key) {
    return data[key];
  }

  /**
   * Create an opener handle.
   *
   * @param {(token: Token) => Node} create
   *   Create a node.
   * @param {Handle} [and]
   *   Optional function to also run.
   * @returns {Handle}
   *   Handle.
   */
  function opener(create, and) {
    return open;

    /**
     * @this {CompileContext}
     * @param {Token} token
     * @returns {void}
     */
    function open(token) {
      enter.call(this, create(token), token);
      if (and) and.call(this, token);
    }
  }

  /**
   * @this {CompileContext}
   * @returns {void}
   */
  function buffer() {
    this.stack.push({
      type: 'fragment',
      children: []
    });
  }

  /**
   * @template {Node} Kind
   *   Node type.
   * @this {CompileContext}
   *   Context.
   * @param {Kind} node
   *   Node to enter.
   * @param {Token} token
   *   Corresponding token.
   * @param {OnEnterError | undefined} [errorHandler]
   *   Handle the case where this token is open, but it is closed by something else.
   * @returns {Kind}
   *   The given node.
   */
  function enter(node, token, errorHandler) {
    const parent = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(parent, 'expected `parent`');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)('children' in parent, 'expected `parent`');
    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.
    parent.children.push(node);
    this.stack.push(node);
    this.tokenStack.push([token, errorHandler]);
    // @ts-expect-error: `end` will be patched later.
    node.position = {
      start: point(token.start)
    };
    return node;
  }

  /**
   * Create a closer handle.
   *
   * @param {Handle} [and]
   *   Optional function to also run.
   * @returns {Handle}
   *   Handle.
   */
  function closer(and) {
    return close;

    /**
     * @this {CompileContext}
     * @param {Token} token
     * @returns {void}
     */
    function close(token) {
      if (and) and.call(this, token);
      exit.call(this, token);
    }
  }

  /**
   * @this {CompileContext}
   *   Context.
   * @param {Token} token
   *   Corresponding token.
   * @param {OnExitError | undefined} [onExitError]
   *   Handle the case where another token is open.
   * @returns {Node}
   *   The closed node.
   */
  function exit(token, onExitError) {
    const node = this.stack.pop();
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected `node`');
    const open = this.tokenStack.pop();
    if (!open) {
      throw new Error('Cannot close `' + token.type + '` (' + (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_5__.stringifyPosition)({
        start: token.start,
        end: token.end
      }) + '): it’s not open');
    } else if (open[0].type !== token.type) {
      if (onExitError) {
        onExitError.call(this, token, open[0]);
      } else {
        const handler = open[1] || defaultOnError;
        handler.call(this, token, open[0]);
      }
    }
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type !== 'fragment', 'unexpected fragment `exit`ed');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.position, 'expected `position` to be defined');
    node.position.end = point(token.end);
    return node;
  }

  /**
   * @this {CompileContext}
   * @returns {string}
   */
  function resume() {
    return (0,mdast_util_to_string__WEBPACK_IMPORTED_MODULE_6__.toString)(this.stack.pop());
  }

  //
  // Handlers.
  //

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onenterlistordered() {
    setData('expectingFirstListItemValue', true);
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onenterlistitemvalue(token) {
    if (getData('expectingFirstListItemValue')) {
      const ancestor = this.stack[this.stack.length - 2];
      (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(ancestor, 'expected nodes on stack');
      (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(ancestor.type === 'list', 'expected list on stack');
      ancestor.start = Number.parseInt(this.sliceSerialize(token), micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_7__.constants.numericBaseDecimal);
      setData('expectingFirstListItemValue');
    }
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitcodefencedfenceinfo() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'code', 'expected code on stack');
    node.lang = data;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitcodefencedfencemeta() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'code', 'expected code on stack');
    node.meta = data;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitcodefencedfence() {
    // Exit if this is the closing fence.
    if (getData('flowCodeInside')) return;
    this.buffer();
    setData('flowCodeInside', true);
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitcodefenced() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'code', 'expected code on stack');
    node.value = data.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, '');
    setData('flowCodeInside');
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitcodeindented() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'code', 'expected code on stack');
    node.value = data.replace(/(\r?\n|\r)$/g, '');
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitdefinitionlabelstring(token) {
    const label = this.resume();
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'definition', 'expected definition on stack');
    node.label = label;
    node.identifier = (0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_8__.normalizeIdentifier)(this.sliceSerialize(token)).toLowerCase();
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitdefinitiontitlestring() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'definition', 'expected definition on stack');
    node.title = data;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitdefinitiondestinationstring() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'definition', 'expected definition on stack');
    node.url = data;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitatxheadingsequence(token) {
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'heading', 'expected heading on stack');
    if (!node.depth) {
      const depth = this.sliceSerialize(token).length;
      (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(depth === 1 || depth === 2 || depth === 3 || depth === 4 || depth === 5 || depth === 6, 'expected `depth` between `1` and `6`');
      node.depth = depth;
    }
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitsetextheadingtext() {
    setData('setextHeadingSlurpLineEnding', true);
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitsetextheadinglinesequence(token) {
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'heading', 'expected heading on stack');
    node.depth = this.sliceSerialize(token).charCodeAt(0) === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_9__.codes.equalsTo ? 1 : 2;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitsetextheading() {
    setData('setextHeadingSlurpLineEnding');
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onenterdata(token) {
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)('children' in node, 'expected parent on stack');
    let tail = node.children[node.children.length - 1];
    if (!tail || tail.type !== 'text') {
      // Add a new text node.
      tail = text();
      // @ts-expect-error: we’ll add `end` later.
      tail.position = {
        start: point(token.start)
      };
      // @ts-expect-error: Assume `parent` accepts `text`.
      node.children.push(tail);
    }
    this.stack.push(tail);
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitdata(token) {
    const tail = this.stack.pop();
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(tail, 'expected a `node` to be on the stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)('value' in tail, 'expected a `literal` to be on the stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(tail.position, 'expected `node` to have an open position');
    tail.value += this.sliceSerialize(token);
    tail.position.end = point(token.end);
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitlineending(token) {
    const context = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(context, 'expected `node`');

    // If we’re at a hard break, include the line ending in there.
    if (getData('atHardBreak')) {
      (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)('children' in context, 'expected `parent`');
      const tail = context.children[context.children.length - 1];
      (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(tail.position, 'expected tail to have a starting position');
      tail.position.end = point(token.end);
      setData('atHardBreak');
      return;
    }
    if (!getData('setextHeadingSlurpLineEnding') && config.canContainEols.includes(context.type)) {
      onenterdata.call(this, token);
      onexitdata.call(this, token);
    }
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexithardbreak() {
    setData('atHardBreak', true);
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexithtmlflow() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'html', 'expected html on stack');
    node.value = data;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexithtmltext() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'html', 'expected html on stack');
    node.value = data;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitcodetext() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'inlineCode', 'expected inline code on stack');
    node.value = data;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitlink() {
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'link', 'expected link on stack');

    // Note: there are also `identifier` and `label` fields on this link node!
    // These are used / cleaned here.

    // To do: clean.
    if (getData('inReference')) {
      /** @type {ReferenceType} */
      const referenceType = getData('referenceType') || 'shortcut';
      node.type += 'Reference';
      // @ts-expect-error: mutate.
      node.referenceType = referenceType;
      // @ts-expect-error: mutate.
      delete node.url;
      delete node.title;
    } else {
      // @ts-expect-error: mutate.
      delete node.identifier;
      // @ts-expect-error: mutate.
      delete node.label;
    }
    setData('referenceType');
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitimage() {
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'image', 'expected image on stack');

    // Note: there are also `identifier` and `label` fields on this link node!
    // These are used / cleaned here.

    // To do: clean.
    if (getData('inReference')) {
      /** @type {ReferenceType} */
      const referenceType = getData('referenceType') || 'shortcut';
      node.type += 'Reference';
      // @ts-expect-error: mutate.
      node.referenceType = referenceType;
      // @ts-expect-error: mutate.
      delete node.url;
      delete node.title;
    } else {
      // @ts-expect-error: mutate.
      delete node.identifier;
      // @ts-expect-error: mutate.
      delete node.label;
    }
    setData('referenceType');
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitlabeltext(token) {
    const string = this.sliceSerialize(token);
    const ancestor = this.stack[this.stack.length - 2];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(ancestor, 'expected ancestor on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(ancestor.type === 'image' || ancestor.type === 'link', 'expected image or link on stack');

    // @ts-expect-error: stash this on the node, as it might become a reference
    // later.
    ancestor.label = (0,micromark_util_decode_string__WEBPACK_IMPORTED_MODULE_10__.decodeString)(string);
    // @ts-expect-error: same as above.
    ancestor.identifier = (0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_8__.normalizeIdentifier)(string).toLowerCase();
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitlabel() {
    const fragment = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(fragment, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(fragment.type === 'fragment', 'expected fragment on stack');
    const value = this.resume();
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'image' || node.type === 'link', 'expected image or link on stack');

    // Assume a reference.
    setData('inReference', true);
    if (node.type === 'link') {
      /** @type {Array<StaticPhrasingContent>} */
      // @ts-expect-error: Assume static phrasing content.
      const children = fragment.children;
      node.children = children;
    } else {
      node.alt = value;
    }
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitresourcedestinationstring() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'image' || node.type === 'link', 'expected image or link on stack');
    node.url = data;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitresourcetitlestring() {
    const data = this.resume();
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'image' || node.type === 'link', 'expected image or link on stack');
    node.title = data;
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitresource() {
    setData('inReference');
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onenterreference() {
    setData('referenceType', 'collapsed');
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitreferencestring(token) {
    const label = this.resume();
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'image' || node.type === 'link', 'expected image reference or link reference on stack');

    // @ts-expect-error: stash this on the node, as it might become a reference
    // later.
    node.label = label;
    // @ts-expect-error: same as above.
    node.identifier = (0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_8__.normalizeIdentifier)(this.sliceSerialize(token)).toLowerCase();
    setData('referenceType', 'full');
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */

  function onexitcharacterreferencemarker(token) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(token.type === 'characterReferenceMarkerNumeric' || token.type === 'characterReferenceMarkerHexadecimal');
    setData('characterReferenceType', token.type);
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitcharacterreferencevalue(token) {
    const data = this.sliceSerialize(token);
    const type = getData('characterReferenceType');
    /** @type {string} */
    let value;
    if (type) {
      value = (0,micromark_util_decode_numeric_character_reference__WEBPACK_IMPORTED_MODULE_11__.decodeNumericCharacterReference)(data, type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.characterReferenceMarkerNumeric ? micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_7__.constants.numericBaseDecimal : micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_7__.constants.numericBaseHexadecimal);
      setData('characterReferenceType');
    } else {
      const result = (0,decode_named_character_reference__WEBPACK_IMPORTED_MODULE_12__.decodeNamedCharacterReference)(data);
      (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(result !== false, 'expected reference to decode');
      value = result;
    }
    const tail = this.stack.pop();
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(tail, 'expected `node`');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(tail.position, 'expected `node.position`');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)('value' in tail, 'expected `node.value`');
    tail.value += value;
    tail.position.end = point(token.end);
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitautolinkprotocol(token) {
    onexitdata.call(this, token);
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'link', 'expected link on stack');
    node.url = this.sliceSerialize(token);
  }

  /**
   * @this {CompileContext}
   * @type {Handle}
   */
  function onexitautolinkemail(token) {
    onexitdata.call(this, token);
    const node = this.stack[this.stack.length - 1];
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node, 'expected node on stack');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'link', 'expected link on stack');
    node.url = 'mailto:' + this.sliceSerialize(token);
  }

  //
  // Creaters.
  //

  /** @returns {Blockquote} */
  function blockQuote() {
    return {
      type: 'blockquote',
      children: []
    };
  }

  /** @returns {Code} */
  function codeFlow() {
    return {
      type: 'code',
      lang: null,
      meta: null,
      value: ''
    };
  }

  /** @returns {InlineCode} */
  function codeText() {
    return {
      type: 'inlineCode',
      value: ''
    };
  }

  /** @returns {Definition} */
  function definition() {
    return {
      type: 'definition',
      identifier: '',
      label: null,
      title: null,
      url: ''
    };
  }

  /** @returns {Emphasis} */
  function emphasis() {
    return {
      type: 'emphasis',
      children: []
    };
  }

  /** @returns {Heading} */
  function heading() {
    // @ts-expect-error `depth` will be set later.
    return {
      type: 'heading',
      depth: undefined,
      children: []
    };
  }

  /** @returns {Break} */
  function hardBreak() {
    return {
      type: 'break'
    };
  }

  /** @returns {HTML} */
  function html() {
    return {
      type: 'html',
      value: ''
    };
  }

  /** @returns {Image} */
  function image() {
    return {
      type: 'image',
      title: null,
      url: '',
      alt: null
    };
  }

  /** @returns {Link} */
  function link() {
    return {
      type: 'link',
      title: null,
      url: '',
      children: []
    };
  }

  /**
   * @param {Token} token
   * @returns {List}
   */
  function list(token) {
    return {
      type: 'list',
      ordered: token.type === 'listOrdered',
      start: null,
      // @ts-expect-error Patched.
      spread: token._spread,
      children: []
    };
  }

  /**
   * @param {Token} token
   * @returns {ListItem}
   */
  function listItem(token) {
    return {
      type: 'listItem',
      // @ts-expect-error Patched.
      spread: token._spread,
      checked: null,
      children: []
    };
  }

  /** @returns {Paragraph} */
  function paragraph() {
    return {
      type: 'paragraph',
      children: []
    };
  }

  /** @returns {Strong} */
  function strong() {
    return {
      type: 'strong',
      children: []
    };
  }

  /** @returns {Text} */
  function text() {
    return {
      type: 'text',
      value: ''
    };
  }

  /** @returns {ThematicBreak} */
  function thematicBreak() {
    return {
      type: 'thematicBreak'
    };
  }
}

/**
 * Copy a point-like value.
 *
 * @param {Point} d
 *   Point-like value.
 * @returns {Point}
 *   unist point.
 */
function point(d) {
  return {
    line: d.line,
    column: d.column,
    offset: d.offset
  };
}

/**
 * @param {Config} combined
 * @param {Array<Extension | Array<Extension>>} extensions
 * @returns {void}
 */
function configure(combined, extensions) {
  let index = -1;
  while (++index < extensions.length) {
    const value = extensions[index];
    if (Array.isArray(value)) {
      configure(combined, value);
    } else {
      extension(combined, value);
    }
  }
}

/**
 * @param {Config} combined
 * @param {Extension} extension
 * @returns {void}
 */
function extension(combined, extension) {
  /** @type {keyof Extension} */
  let key;
  for (key in extension) {
    if (own.call(extension, key)) {
      if (key === 'canContainEols') {
        const right = extension[key];
        if (right) {
          combined[key].push(...right);
        }
      } else if (key === 'transforms') {
        const right = extension[key];
        if (right) {
          combined[key].push(...right);
        }
      } else if (key === 'enter' || key === 'exit') {
        const right = extension[key];
        if (right) {
          Object.assign(combined[key], right);
        }
      }
    }
  }
}

/** @type {OnEnterError} */
function defaultOnError(left, right) {
  if (left) {
    throw new Error('Cannot close `' + left.type + '` (' + (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_5__.stringifyPosition)({
      start: left.start,
      end: left.end
    }) + '): a different token (`' + right.type + '`, ' + (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_5__.stringifyPosition)({
      start: right.start,
      end: right.end
    }) + ') is open');
  } else {
    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_5__.stringifyPosition)({
      start: right.start,
      end: right.end
    }) + ') is still open');
  }
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/footer.js":
/*!*******************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/footer.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "footer": function() { return /* binding */ footer; }
/* harmony export */ });
/* harmony import */ var micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-sanitize-uri */ "./node_modules/micromark-util-sanitize-uri/dev/index.js");
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 *
 * @typedef {import('./state.js').State} State
 */



/**
 * Generate a hast footer for called footnote definitions.
 *
 * @param {State} state
 *   Info passed around.
 * @returns {Element | undefined}
 *   `section` element or `undefined`.
 */
function footer(state) {
  /** @type {Array<ElementContent>} */
  const listItems = [];
  let index = -1;
  while (++index < state.footnoteOrder.length) {
    const def = state.footnoteById[state.footnoteOrder[index]];
    if (!def) {
      continue;
    }
    const content = state.all(def);
    const id = String(def.identifier).toUpperCase();
    const safeId = (0,micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_0__.normalizeUri)(id.toLowerCase());
    let referenceIndex = 0;
    /** @type {Array<ElementContent>} */
    const backReferences = [];
    while (++referenceIndex <= state.footnoteCounts[id]) {
      /** @type {Element} */
      const backReference = {
        type: 'element',
        tagName: 'a',
        properties: {
          href: '#' + state.clobberPrefix + 'fnref-' + safeId + (referenceIndex > 1 ? '-' + referenceIndex : ''),
          dataFootnoteBackref: true,
          className: ['data-footnote-backref'],
          ariaLabel: state.footnoteBackLabel
        },
        children: [{
          type: 'text',
          value: '↩'
        }]
      };
      if (referenceIndex > 1) {
        backReference.children.push({
          type: 'element',
          tagName: 'sup',
          children: [{
            type: 'text',
            value: String(referenceIndex)
          }]
        });
      }
      if (backReferences.length > 0) {
        backReferences.push({
          type: 'text',
          value: ' '
        });
      }
      backReferences.push(backReference);
    }
    const tail = content[content.length - 1];
    if (tail && tail.type === 'element' && tail.tagName === 'p') {
      const tailTail = tail.children[tail.children.length - 1];
      if (tailTail && tailTail.type === 'text') {
        tailTail.value += ' ';
      } else {
        tail.children.push({
          type: 'text',
          value: ' '
        });
      }
      tail.children.push(...backReferences);
    } else {
      content.push(...backReferences);
    }

    /** @type {Element} */
    const listItem = {
      type: 'element',
      tagName: 'li',
      properties: {
        id: state.clobberPrefix + 'fn-' + safeId
      },
      children: state.wrap(content, true)
    };
    state.patch(def, listItem);
    listItems.push(listItem);
  }
  if (listItems.length === 0) {
    return;
  }
  return {
    type: 'element',
    tagName: 'section',
    properties: {
      dataFootnotes: true,
      className: ['footnotes']
    },
    children: [{
      type: 'element',
      tagName: state.footnoteLabelTagName,
      properties: {
        // To do: use structured clone.
        ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),
        id: 'footnote-label'
      },
      children: [{
        type: 'text',
        value: state.footnoteLabel
      }]
    }, {
      type: 'text',
      value: '\n'
    }, {
      type: 'element',
      tagName: 'ol',
      properties: {},
      children: state.wrap(listItems, true)
    }, {
      type: 'text',
      value: '\n'
    }]
  };
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/blockquote.js":
/*!********************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/blockquote.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "blockquote": function() { return /* binding */ blockquote; }
/* harmony export */ });
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Blockquote} Blockquote
 * @typedef {import('../state.js').State} State
 */

/**
 * Turn an mdast `blockquote` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Blockquote} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function blockquote(state, node) {
  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'blockquote',
    properties: {},
    children: state.wrap(state.all(node), true)
  };
  state.patch(node, result);
  return state.applyData(node, result);
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/break.js":
/*!***************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/break.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hardBreak": function() { return /* binding */ hardBreak; }
/* harmony export */ });
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Text} Text
 * @typedef {import('mdast').Break} Break
 * @typedef {import('../state.js').State} State
 */

/**
 * Turn an mdast `break` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Break} node
 *   mdast node.
 * @returns {Array<Element | Text>}
 *   hast element content.
 */
function hardBreak(state, node) {
  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'br',
    properties: {},
    children: []
  };
  state.patch(node, result);
  return [state.applyData(node, result), {
    type: 'text',
    value: '\n'
  }];
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/code.js":
/*!**************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/code.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "code": function() { return /* binding */ code; }
/* harmony export */ });
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').Code} Code
 * @typedef {import('../state.js').State} State

 */

/**
 * Turn an mdast `code` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Code} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function code(state, node) {
  const value = node.value ? node.value + '\n' : '';
  // To do: next major, use `node.lang` w/o regex, the splitting’s been going
  // on for years in remark now.
  const lang = node.lang ? node.lang.match(/^[^ \t]+(?=[ \t]|$)/) : null;
  /** @type {Properties} */
  const properties = {};
  if (lang) {
    properties.className = ['language-' + lang];
  }

  // Create `<code>`.
  /** @type {Element} */
  let result = {
    type: 'element',
    tagName: 'code',
    properties,
    children: [{
      type: 'text',
      value
    }]
  };
  if (node.meta) {
    result.data = {
      meta: node.meta
    };
  }
  state.patch(node, result);
  result = state.applyData(node, result);

  // Create `<pre>`.
  result = {
    type: 'element',
    tagName: 'pre',
    properties: {},
    children: [result]
  };
  state.patch(node, result);
  return result;
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/delete.js":
/*!****************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/delete.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "strikethrough": function() { return /* binding */ strikethrough; }
/* harmony export */ });
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Delete} Delete
 * @typedef {import('../state.js').State} State

 */

/**
 * Turn an mdast `delete` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Delete} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function strikethrough(state, node) {
  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'del',
    properties: {},
    children: state.all(node)
  };
  state.patch(node, result);
  return state.applyData(node, result);
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/emphasis.js":
/*!******************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/emphasis.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "emphasis": function() { return /* binding */ emphasis; }
/* harmony export */ });
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Emphasis} Emphasis
 * @typedef {import('../state.js').State} State
 */

/**
 * Turn an mdast `emphasis` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Emphasis} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function emphasis(state, node) {
  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'em',
    properties: {},
    children: state.all(node)
  };
  state.patch(node, result);
  return state.applyData(node, result);
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "footnoteReference": function() { return /* binding */ footnoteReference; }
/* harmony export */ });
/* harmony import */ var micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-sanitize-uri */ "./node_modules/micromark-util-sanitize-uri/dev/index.js");
/**
 * @typedef {import('mdast').FootnoteReference} FootnoteReference
 * @typedef {import('hast').Element} Element
 * @typedef {import('../state.js').State} State
 */



/**
 * Turn an mdast `footnoteReference` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {FootnoteReference} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function footnoteReference(state, node) {
  const id = String(node.identifier).toUpperCase();
  const safeId = (0,micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_0__.normalizeUri)(id.toLowerCase());
  const index = state.footnoteOrder.indexOf(id);
  /** @type {number} */
  let counter;
  if (index === -1) {
    state.footnoteOrder.push(id);
    state.footnoteCounts[id] = 1;
    counter = state.footnoteOrder.length;
  } else {
    state.footnoteCounts[id]++;
    counter = index + 1;
  }
  const reuseCounter = state.footnoteCounts[id];

  /** @type {Element} */
  const link = {
    type: 'element',
    tagName: 'a',
    properties: {
      href: '#' + state.clobberPrefix + 'fn-' + safeId,
      id: state.clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : ''),
      dataFootnoteRef: true,
      ariaDescribedBy: ['footnote-label']
    },
    children: [{
      type: 'text',
      value: String(counter)
    }]
  };
  state.patch(node, link);

  /** @type {Element} */
  const sup = {
    type: 'element',
    tagName: 'sup',
    properties: {},
    children: [link]
  };
  state.patch(node, sup);
  return state.applyData(node, sup);
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/footnote.js":
/*!******************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/footnote.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "footnote": function() { return /* binding */ footnote; }
/* harmony export */ });
/* harmony import */ var _footnote_reference_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./footnote-reference.js */ "./node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js");
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Footnote} Footnote
 * @typedef {import('../state.js').State} State
 */



// To do: when both:
// * <https://github.com/micromark/micromark-extension-footnote>
// * <https://github.com/syntax-tree/mdast-util-footnote>
// …are archived, remove this (also from mdast).
// These inline notes are not used in GFM.

/**
 * Turn an mdast `footnote` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Footnote} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function footnote(state, node) {
  const footnoteById = state.footnoteById;
  let no = 1;
  while (no in footnoteById) no++;
  const identifier = String(no);
  footnoteById[identifier] = {
    type: 'footnoteDefinition',
    identifier,
    children: [{
      type: 'paragraph',
      children: node.children
    }],
    position: node.position
  };
  return (0,_footnote_reference_js__WEBPACK_IMPORTED_MODULE_0__.footnoteReference)(state, {
    type: 'footnoteReference',
    identifier,
    position: node.position
  });
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/heading.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/heading.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "heading": function() { return /* binding */ heading; }
/* harmony export */ });
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Heading} Heading
 * @typedef {import('../state.js').State} State
 */

/**
 * Turn an mdast `heading` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Heading} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function heading(state, node) {
  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'h' + node.depth,
    properties: {},
    children: state.all(node)
  };
  state.patch(node, result);
  return state.applyData(node, result);
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/html.js":
/*!**************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/html.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "html": function() { return /* binding */ html; }
/* harmony export */ });
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').HTML} Html
 * @typedef {import('../state.js').State} State
 * @typedef {import('../../index.js').Raw} Raw
 */

/**
 * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise
 * nothing).
 *
 * @param {State} state
 *   Info passed around.
 * @param {Html} node
 *   mdast node.
 * @returns {Raw | Element | null}
 *   hast node.
 */
function html(state, node) {
  if (state.dangerous) {
    /** @type {Raw} */
    const result = {
      type: 'raw',
      value: node.value
    };
    state.patch(node, result);
    return state.applyData(node, result);
  }

  // To do: next major: return `undefined`.
  return null;
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/image-reference.js":
/*!*************************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/image-reference.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "imageReference": function() { return /* binding */ imageReference; }
/* harmony export */ });
/* harmony import */ var micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-sanitize-uri */ "./node_modules/micromark-util-sanitize-uri/dev/index.js");
/* harmony import */ var _revert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../revert.js */ "./node_modules/mdast-util-to-hast/lib/revert.js");
/**
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').ImageReference} ImageReference
 * @typedef {import('../state.js').State} State
 */




/**
 * Turn an mdast `imageReference` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {ImageReference} node
 *   mdast node.
 * @returns {ElementContent | Array<ElementContent>}
 *   hast node.
 */
function imageReference(state, node) {
  const def = state.definition(node.identifier);
  if (!def) {
    return (0,_revert_js__WEBPACK_IMPORTED_MODULE_0__.revert)(state, node);
  }

  /** @type {Properties} */
  const properties = {
    src: (0,micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_1__.normalizeUri)(def.url || ''),
    alt: node.alt
  };
  if (def.title !== null && def.title !== undefined) {
    properties.title = def.title;
  }

  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'img',
    properties,
    children: []
  };
  state.patch(node, result);
  return state.applyData(node, result);
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/image.js":
/*!***************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/image.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "image": function() { return /* binding */ image; }
/* harmony export */ });
/* harmony import */ var micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-sanitize-uri */ "./node_modules/micromark-util-sanitize-uri/dev/index.js");
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').Image} Image
 * @typedef {import('../state.js').State} State
 */



/**
 * Turn an mdast `image` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Image} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function image(state, node) {
  /** @type {Properties} */
  const properties = {
    src: (0,micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_0__.normalizeUri)(node.url)
  };
  if (node.alt !== null && node.alt !== undefined) {
    properties.alt = node.alt;
  }
  if (node.title !== null && node.title !== undefined) {
    properties.title = node.title;
  }

  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'img',
    properties,
    children: []
  };
  state.patch(node, result);
  return state.applyData(node, result);
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "handlers": function() { return /* binding */ handlers; }
/* harmony export */ });
/* harmony import */ var _blockquote_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./blockquote.js */ "./node_modules/mdast-util-to-hast/lib/handlers/blockquote.js");
/* harmony import */ var _break_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./break.js */ "./node_modules/mdast-util-to-hast/lib/handlers/break.js");
/* harmony import */ var _code_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./code.js */ "./node_modules/mdast-util-to-hast/lib/handlers/code.js");
/* harmony import */ var _delete_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./delete.js */ "./node_modules/mdast-util-to-hast/lib/handlers/delete.js");
/* harmony import */ var _emphasis_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./emphasis.js */ "./node_modules/mdast-util-to-hast/lib/handlers/emphasis.js");
/* harmony import */ var _footnote_reference_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./footnote-reference.js */ "./node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js");
/* harmony import */ var _footnote_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./footnote.js */ "./node_modules/mdast-util-to-hast/lib/handlers/footnote.js");
/* harmony import */ var _heading_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./heading.js */ "./node_modules/mdast-util-to-hast/lib/handlers/heading.js");
/* harmony import */ var _html_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./html.js */ "./node_modules/mdast-util-to-hast/lib/handlers/html.js");
/* harmony import */ var _image_reference_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./image-reference.js */ "./node_modules/mdast-util-to-hast/lib/handlers/image-reference.js");
/* harmony import */ var _image_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./image.js */ "./node_modules/mdast-util-to-hast/lib/handlers/image.js");
/* harmony import */ var _inline_code_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./inline-code.js */ "./node_modules/mdast-util-to-hast/lib/handlers/inline-code.js");
/* harmony import */ var _link_reference_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./link-reference.js */ "./node_modules/mdast-util-to-hast/lib/handlers/link-reference.js");
/* harmony import */ var _link_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./link.js */ "./node_modules/mdast-util-to-hast/lib/handlers/link.js");
/* harmony import */ var _list_item_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./list-item.js */ "./node_modules/mdast-util-to-hast/lib/handlers/list-item.js");
/* harmony import */ var _list_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./list.js */ "./node_modules/mdast-util-to-hast/lib/handlers/list.js");
/* harmony import */ var _paragraph_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./paragraph.js */ "./node_modules/mdast-util-to-hast/lib/handlers/paragraph.js");
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./root.js */ "./node_modules/mdast-util-to-hast/lib/handlers/root.js");
/* harmony import */ var _strong_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./strong.js */ "./node_modules/mdast-util-to-hast/lib/handlers/strong.js");
/* harmony import */ var _table_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./table.js */ "./node_modules/mdast-util-to-hast/lib/handlers/table.js");
/* harmony import */ var _table_row_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./table-row.js */ "./node_modules/mdast-util-to-hast/lib/handlers/table-row.js");
/* harmony import */ var _table_cell_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./table-cell.js */ "./node_modules/mdast-util-to-hast/lib/handlers/table-cell.js");
/* harmony import */ var _text_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./text.js */ "./node_modules/mdast-util-to-hast/lib/handlers/text.js");
/* harmony import */ var _thematic_break_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./thematic-break.js */ "./node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js");

























/**
 * Default handlers for nodes.
 */
const handlers = {
  blockquote: _blockquote_js__WEBPACK_IMPORTED_MODULE_0__.blockquote,
  break: _break_js__WEBPACK_IMPORTED_MODULE_1__.hardBreak,
  code: _code_js__WEBPACK_IMPORTED_MODULE_2__.code,
  delete: _delete_js__WEBPACK_IMPORTED_MODULE_3__.strikethrough,
  emphasis: _emphasis_js__WEBPACK_IMPORTED_MODULE_4__.emphasis,
  footnoteReference: _footnote_reference_js__WEBPACK_IMPORTED_MODULE_5__.footnoteReference,
  footnote: _footnote_js__WEBPACK_IMPORTED_MODULE_6__.footnote,
  heading: _heading_js__WEBPACK_IMPORTED_MODULE_7__.heading,
  html: _html_js__WEBPACK_IMPORTED_MODULE_8__.html,
  imageReference: _image_reference_js__WEBPACK_IMPORTED_MODULE_9__.imageReference,
  image: _image_js__WEBPACK_IMPORTED_MODULE_10__.image,
  inlineCode: _inline_code_js__WEBPACK_IMPORTED_MODULE_11__.inlineCode,
  linkReference: _link_reference_js__WEBPACK_IMPORTED_MODULE_12__.linkReference,
  link: _link_js__WEBPACK_IMPORTED_MODULE_13__.link,
  listItem: _list_item_js__WEBPACK_IMPORTED_MODULE_14__.listItem,
  list: _list_js__WEBPACK_IMPORTED_MODULE_15__.list,
  paragraph: _paragraph_js__WEBPACK_IMPORTED_MODULE_16__.paragraph,
  root: _root_js__WEBPACK_IMPORTED_MODULE_17__.root,
  strong: _strong_js__WEBPACK_IMPORTED_MODULE_18__.strong,
  table: _table_js__WEBPACK_IMPORTED_MODULE_19__.table,
  tableCell: _table_cell_js__WEBPACK_IMPORTED_MODULE_20__.tableCell,
  tableRow: _table_row_js__WEBPACK_IMPORTED_MODULE_21__.tableRow,
  text: _text_js__WEBPACK_IMPORTED_MODULE_22__.text,
  thematicBreak: _thematic_break_js__WEBPACK_IMPORTED_MODULE_23__.thematicBreak,
  toml: ignore,
  yaml: ignore,
  definition: ignore,
  footnoteDefinition: ignore
};

// Return nothing for nodes that are ignored.
function ignore() {
  // To do: next major: return `undefined`.
  return null;
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/inline-code.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/inline-code.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "inlineCode": function() { return /* binding */ inlineCode; }
/* harmony export */ });
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Text} Text
 * @typedef {import('mdast').InlineCode} InlineCode
 * @typedef {import('../state.js').State} State
 */

/**
 * Turn an mdast `inlineCode` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {InlineCode} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function inlineCode(state, node) {
  /** @type {Text} */
  const text = {
    type: 'text',
    value: node.value.replace(/\r?\n|\r/g, ' ')
  };
  state.patch(node, text);

  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'code',
    properties: {},
    children: [text]
  };
  state.patch(node, result);
  return state.applyData(node, result);
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/link-reference.js":
/*!************************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/link-reference.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "linkReference": function() { return /* binding */ linkReference; }
/* harmony export */ });
/* harmony import */ var micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-sanitize-uri */ "./node_modules/micromark-util-sanitize-uri/dev/index.js");
/* harmony import */ var _revert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../revert.js */ "./node_modules/mdast-util-to-hast/lib/revert.js");
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').LinkReference} LinkReference
 * @typedef {import('../state.js').State} State
 */




/**
 * Turn an mdast `linkReference` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {LinkReference} node
 *   mdast node.
 * @returns {ElementContent | Array<ElementContent>}
 *   hast node.
 */
function linkReference(state, node) {
  const def = state.definition(node.identifier);
  if (!def) {
    return (0,_revert_js__WEBPACK_IMPORTED_MODULE_0__.revert)(state, node);
  }

  /** @type {Properties} */
  const properties = {
    href: (0,micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_1__.normalizeUri)(def.url || '')
  };
  if (def.title !== null && def.title !== undefined) {
    properties.title = def.title;
  }

  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'a',
    properties,
    children: state.all(node)
  };
  state.patch(node, result);
  return state.applyData(node, result);
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/link.js":
/*!**************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/link.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "link": function() { return /* binding */ link; }
/* harmony export */ });
/* harmony import */ var micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-sanitize-uri */ "./node_modules/micromark-util-sanitize-uri/dev/index.js");
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').Link} Link
 * @typedef {import('../state.js').State} State
 */



/**
 * Turn an mdast `link` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Link} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function link(state, node) {
  /** @type {Properties} */
  const properties = {
    href: (0,micromark_util_sanitize_uri__WEBPACK_IMPORTED_MODULE_0__.normalizeUri)(node.url)
  };
  if (node.title !== null && node.title !== undefined) {
    properties.title = node.title;
  }

  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'a',
    properties,
    children: state.all(node)
  };
  state.patch(node, result);
  return state.applyData(node, result);
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/list-item.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/list-item.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "listItem": function() { return /* binding */ listItem; }
/* harmony export */ });
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').Content} Content
 * @typedef {import('mdast').ListItem} ListItem
 * @typedef {import('mdast').Parent} Parent
 * @typedef {import('mdast').Root} Root
 * @typedef {import('../state.js').State} State
 */

/**
 * @typedef {Root | Content} Nodes
 * @typedef {Extract<Nodes, Parent>} Parents
 */

/**
 * Turn an mdast `listItem` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {ListItem} node
 *   mdast node.
 * @param {Parents | null | undefined} parent
 *   Parent of `node`.
 * @returns {Element}
 *   hast node.
 */
function listItem(state, node, parent) {
  const results = state.all(node);
  const loose = parent ? listLoose(parent) : listItemLoose(node);
  /** @type {Properties} */
  const properties = {};
  /** @type {Array<ElementContent>} */
  const children = [];
  if (typeof node.checked === 'boolean') {
    const head = results[0];
    /** @type {Element} */
    let paragraph;
    if (head && head.type === 'element' && head.tagName === 'p') {
      paragraph = head;
    } else {
      paragraph = {
        type: 'element',
        tagName: 'p',
        properties: {},
        children: []
      };
      results.unshift(paragraph);
    }
    if (paragraph.children.length > 0) {
      paragraph.children.unshift({
        type: 'text',
        value: ' '
      });
    }
    paragraph.children.unshift({
      type: 'element',
      tagName: 'input',
      properties: {
        type: 'checkbox',
        checked: node.checked,
        disabled: true
      },
      children: []
    });

    // According to github-markdown-css, this class hides bullet.
    // See: <https://github.com/sindresorhus/github-markdown-css>.
    properties.className = ['task-list-item'];
  }
  let index = -1;
  while (++index < results.length) {
    const child = results[index];

    // Add eols before nodes, except if this is a loose, first paragraph.
    if (loose || index !== 0 || child.type !== 'element' || child.tagName !== 'p') {
      children.push({
        type: 'text',
        value: '\n'
      });
    }
    if (child.type === 'element' && child.tagName === 'p' && !loose) {
      children.push(...child.children);
    } else {
      children.push(child);
    }
  }
  const tail = results[results.length - 1];

  // Add a final eol.
  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {
    children.push({
      type: 'text',
      value: '\n'
    });
  }

  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'li',
    properties,
    children
  };
  state.patch(node, result);
  return state.applyData(node, result);
}

/**
 * @param {Parents} node
 * @return {Boolean}
 */
function listLoose(node) {
  let loose = false;
  if (node.type === 'list') {
    loose = node.spread || false;
    const children = node.children;
    let index = -1;
    while (!loose && ++index < children.length) {
      loose = listItemLoose(children[index]);
    }
  }
  return loose;
}

/**
 * @param {ListItem} node
 * @return {Boolean}
 */
function listItemLoose(node) {
  const spread = node.spread;
  return spread === undefined || spread === null ? node.children.length > 1 : spread;
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/list.js":
/*!**************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/list.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "list": function() { return /* binding */ list; }
/* harmony export */ });
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('mdast').List} List
 * @typedef {import('../state.js').State} State
 */

/**
 * Turn an mdast `list` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {List} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function list(state, node) {
  /** @type {Properties} */
  const properties = {};
  const results = state.all(node);
  let index = -1;
  if (typeof node.start === 'number' && node.start !== 1) {
    properties.start = node.start;
  }

  // Like GitHub, add a class for custom styling.
  while (++index < results.length) {
    const child = results[index];
    if (child.type === 'element' && child.tagName === 'li' && child.properties && Array.isArray(child.properties.className) && child.properties.className.includes('task-list-item')) {
      properties.className = ['contains-task-list'];
      break;
    }
  }

  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: node.ordered ? 'ol' : 'ul',
    properties,
    children: state.wrap(results, true)
  };
  state.patch(node, result);
  return state.applyData(node, result);
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/paragraph.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/paragraph.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "paragraph": function() { return /* binding */ paragraph; }
/* harmony export */ });
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Paragraph} Paragraph
 * @typedef {import('../state.js').State} State
 */

/**
 * Turn an mdast `paragraph` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Paragraph} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function paragraph(state, node) {
  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'p',
    properties: {},
    children: state.all(node)
  };
  state.patch(node, result);
  return state.applyData(node, result);
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/root.js":
/*!**************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/root.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "root": function() { return /* binding */ root; }
/* harmony export */ });
/**
 * @typedef {import('hast').Root} HastRoot
 * @typedef {import('hast').Element} HastElement
 * @typedef {import('mdast').Root} MdastRoot
 * @typedef {import('../state.js').State} State
 */

/**
 * Turn an mdast `root` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {MdastRoot} node
 *   mdast node.
 * @returns {HastRoot | HastElement}
 *   hast node.
 */
function root(state, node) {
  /** @type {HastRoot} */
  const result = {
    type: 'root',
    children: state.wrap(state.all(node))
  };
  state.patch(node, result);
  return state.applyData(node, result);
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/strong.js":
/*!****************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/strong.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "strong": function() { return /* binding */ strong; }
/* harmony export */ });
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Strong} Strong
 * @typedef {import('../state.js').State} State
 */

/**
 * Turn an mdast `strong` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Strong} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function strong(state, node) {
  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'strong',
    properties: {},
    children: state.all(node)
  };
  state.patch(node, result);
  return state.applyData(node, result);
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/table-cell.js":
/*!********************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/table-cell.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tableCell": function() { return /* binding */ tableCell; }
/* harmony export */ });
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').TableCell} TableCell
 * @typedef {import('../state.js').State} State
 */

/**
 * Turn an mdast `tableCell` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {TableCell} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function tableCell(state, node) {
  // Note: this function is normally not called: see `table-row` for how rows
  // and their cells are compiled.
  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'td',
    // Assume body cell.
    properties: {},
    children: state.all(node)
  };
  state.patch(node, result);
  return state.applyData(node, result);
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/table-row.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/table-row.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "tableRow": function() { return /* binding */ tableRow; }
/* harmony export */ });
/**
 * @typedef {import('hast').Properties} Properties
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('mdast').Content} Content
 * @typedef {import('mdast').Parent} Parent
 * @typedef {import('mdast').Root} Root
 * @typedef {import('mdast').TableRow} TableRow
 * @typedef {import('../state.js').State} State
 */

/**
 * @typedef {Root | Content} Nodes
 * @typedef {Extract<Nodes, Parent>} Parents
 */

/**
 * Turn an mdast `tableRow` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {TableRow} node
 *   mdast node.
 * @param {Parents | null | undefined} parent
 *   Parent of `node`.
 * @returns {Element}
 *   hast node.
 */
function tableRow(state, node, parent) {
  const siblings = parent ? parent.children : undefined;
  // Generate a body row when without parent.
  const rowIndex = siblings ? siblings.indexOf(node) : 1;
  const tagName = rowIndex === 0 ? 'th' : 'td';
  const align = parent && parent.type === 'table' ? parent.align : undefined;
  const length = align ? align.length : node.children.length;
  let cellIndex = -1;
  /** @type {Array<ElementContent>} */
  const cells = [];
  while (++cellIndex < length) {
    // Note: can also be undefined.
    const cell = node.children[cellIndex];
    /** @type {Properties} */
    const properties = {};
    const alignValue = align ? align[cellIndex] : undefined;
    if (alignValue) {
      properties.align = alignValue;
    }

    /** @type {Element} */
    let result = {
      type: 'element',
      tagName,
      properties,
      children: []
    };
    if (cell) {
      result.children = state.all(cell);
      state.patch(cell, result);
      result = state.applyData(node, result);
    }
    cells.push(result);
  }

  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'tr',
    properties: {},
    children: state.wrap(cells, true)
  };
  state.patch(node, result);
  return state.applyData(node, result);
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/table.js":
/*!***************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/table.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "table": function() { return /* binding */ table; }
/* harmony export */ });
/* harmony import */ var unist_util_position__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-position */ "./node_modules/unist-util-position/lib/index.js");
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').Table} Table
 * @typedef {import('../state.js').State} State
 */



/**
 * Turn an mdast `table` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {Table} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function table(state, node) {
  const rows = state.all(node);
  const firstRow = rows.shift();
  /** @type {Array<Element>} */
  const tableContent = [];
  if (firstRow) {
    /** @type {Element} */
    const head = {
      type: 'element',
      tagName: 'thead',
      properties: {},
      children: state.wrap([firstRow], true)
    };
    state.patch(node.children[0], head);
    tableContent.push(head);
  }
  if (rows.length > 0) {
    /** @type {Element} */
    const body = {
      type: 'element',
      tagName: 'tbody',
      properties: {},
      children: state.wrap(rows, true)
    };
    const start = (0,unist_util_position__WEBPACK_IMPORTED_MODULE_0__.pointStart)(node.children[1]);
    const end = (0,unist_util_position__WEBPACK_IMPORTED_MODULE_0__.pointEnd)(node.children[node.children.length - 1]);
    if (start.line && end.line) body.position = {
      start,
      end
    };
    tableContent.push(body);
  }

  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'table',
    properties: {},
    children: state.wrap(tableContent, true)
  };
  state.patch(node, result);
  return state.applyData(node, result);
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/text.js":
/*!**************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/text.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "text": function() { return /* binding */ text; }
/* harmony export */ });
/* harmony import */ var trim_lines__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! trim-lines */ "./node_modules/trim-lines/index.js");
/**
 * @typedef {import('hast').Element} HastElement
 * @typedef {import('hast').Text} HastText
 * @typedef {import('mdast').Text} MdastText
 * @typedef {import('../state.js').State} State
 */



/**
 * Turn an mdast `text` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {MdastText} node
 *   mdast node.
 * @returns {HastText | HastElement}
 *   hast node.
 */
function text(state, node) {
  /** @type {HastText} */
  const result = {
    type: 'text',
    value: (0,trim_lines__WEBPACK_IMPORTED_MODULE_0__.trimLines)(String(node.value))
  };
  state.patch(node, result);
  return state.applyData(node, result);
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js":
/*!************************************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "thematicBreak": function() { return /* binding */ thematicBreak; }
/* harmony export */ });
/**
 * @typedef {import('hast').Element} Element
 * @typedef {import('mdast').ThematicBreak} ThematicBreak
 * @typedef {import('../state.js').State} State
 */

/**
 * Turn an mdast `thematicBreak` node into hast.
 *
 * @param {State} state
 *   Info passed around.
 * @param {ThematicBreak} node
 *   mdast node.
 * @returns {Element}
 *   hast node.
 */
function thematicBreak(state, node) {
  /** @type {Element} */
  const result = {
    type: 'element',
    tagName: 'hr',
    properties: {},
    children: []
  };
  state.patch(node, result);
  return state.applyData(node, result);
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toHast": function() { return /* binding */ toHast; }
/* harmony export */ });
/* harmony import */ var _footer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./footer.js */ "./node_modules/mdast-util-to-hast/lib/footer.js");
/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ "./node_modules/mdast-util-to-hast/lib/state.js");
/**
 * @typedef {import('hast').Content} HastContent
 * @typedef {import('hast').Root} HastRoot
 *
 * @typedef {import('mdast').Content} MdastContent
 * @typedef {import('mdast').Root} MdastRoot
 *
 * @typedef {import('./state.js').Options} Options
 */

/**
 * @typedef {HastRoot | HastContent} HastNodes
 * @typedef {MdastRoot | MdastContent} MdastNodes
 */




/**
 * Transform mdast to hast.
 *
 * ##### Notes
 *
 * ###### HTML
 *
 * Raw HTML is available in mdast as `html` nodes and can be embedded in hast
 * as semistandard `raw` nodes.
 * Most utilities ignore `raw` nodes but two notable ones don’t:
 *
 * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will
 *     output the raw HTML.
 *     This is typically discouraged as noted by the option name but is useful
 *     if you completely trust authors
 * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them
 *     into standard hast nodes (`element`, `text`, etc).
 *     This is a heavy task as it needs a full HTML parser, but it is the only
 *     way to support untrusted content
 *
 * ###### Footnotes
 *
 * Many options supported here relate to footnotes.
 * Footnotes are not specified by CommonMark, which we follow by default.
 * They are supported by GitHub, so footnotes can be enabled in markdown with
 * `mdast-util-gfm`.
 *
 * The options `footnoteBackLabel` and `footnoteLabel` define natural language
 * that explains footnotes, which is hidden for sighted users but shown to
 * assistive technology.
 * When your page is not in English, you must define translated values.
 *
 * Back references use ARIA attributes, but the section label itself uses a
 * heading that is hidden with an `sr-only` class.
 * To show it to sighted users, define different attributes in
 * `footnoteLabelProperties`.
 *
 * ###### Clobbering
 *
 * Footnotes introduces a problem, as it links footnote calls to footnote
 * definitions on the page through `id` attributes generated from user content,
 * which results in DOM clobbering.
 *
 * DOM clobbering is this:
 *
 * ```html
 * <p id=x></p>
 * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>
 * ```
 *
 * Elements by their ID are made available by browsers on the `window` object,
 * which is a security risk.
 * Using a prefix solves this problem.
 *
 * More information on how to handle clobbering and the prefix is explained in
 * Example: headings (DOM clobbering) in `rehype-sanitize`.
 *
 * ###### Unknown nodes
 *
 * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.
 * The default behavior for unknown nodes is:
 *
 * *   when the node has a `value` (and doesn’t have `data.hName`,
 *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`
 *     node
 * *   otherwise, create a `<div>` element (which could be changed with
 *     `data.hName`), with its children mapped from mdast to hast as well
 *
 * This behavior can be changed by passing an `unknownHandler`.
 *
 * @param {MdastNodes} tree
 *   mdast tree.
 * @param {Options | null | undefined} [options]
 *   Configuration.
 * @returns {HastNodes | null | undefined}
 *   hast tree.
 */
// To do: next major: always return a single `root`.
function toHast(tree, options) {
  const state = (0,_state_js__WEBPACK_IMPORTED_MODULE_0__.createState)(tree, options);
  const node = state.one(tree, null);
  const foot = (0,_footer_js__WEBPACK_IMPORTED_MODULE_1__.footer)(state);
  if (foot) {
    // @ts-expect-error If there’s a footer, there were definitions, meaning block
    // content.
    // So assume `node` is a parent node.
    node.children.push({
      type: 'text',
      value: '\n'
    }, foot);
  }

  // To do: next major: always return root?
  return Array.isArray(node) ? {
    type: 'root',
    children: node
  } : node;
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/revert.js":
/*!*******************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/revert.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "revert": function() { return /* binding */ revert; }
/* harmony export */ });
/**
 * @typedef {import('hast').ElementContent} ElementContent
 *
 * @typedef {import('mdast').Content} Content
 * @typedef {import('mdast').Reference} Reference
 * @typedef {import('mdast').Root} Root
 *
 * @typedef {import('./state.js').State} State
 */

/**
 * @typedef {Root | Content} Nodes
 * @typedef {Extract<Nodes, Reference>} References
 */

// To do: next major: always return array.

/**
 * Return the content of a reference without definition as plain text.
 *
 * @param {State} state
 *   Info passed around.
 * @param {References} node
 *   Reference node (image, link).
 * @returns {ElementContent | Array<ElementContent>}
 *   hast content.
 */
function revert(state, node) {
  const subtype = node.referenceType;
  let suffix = ']';
  if (subtype === 'collapsed') {
    suffix += '[]';
  } else if (subtype === 'full') {
    suffix += '[' + (node.label || node.identifier) + ']';
  }
  if (node.type === 'imageReference') {
    return {
      type: 'text',
      value: '![' + node.alt + suffix
    };
  }
  const contents = state.all(node);
  const head = contents[0];
  if (head && head.type === 'text') {
    head.value = '[' + head.value;
  } else {
    contents.unshift({
      type: 'text',
      value: '['
    });
  }
  const tail = contents[contents.length - 1];
  if (tail && tail.type === 'text') {
    tail.value += suffix;
  } else {
    contents.push({
      type: 'text',
      value: suffix
    });
  }
  return contents;
}

/***/ }),

/***/ "./node_modules/mdast-util-to-hast/lib/state.js":
/*!******************************************************!*\
  !*** ./node_modules/mdast-util-to-hast/lib/state.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "all": function() { return /* binding */ all; },
/* harmony export */   "createState": function() { return /* binding */ createState; },
/* harmony export */   "one": function() { return /* binding */ one; },
/* harmony export */   "wrap": function() { return /* binding */ wrap; }
/* harmony export */ });
/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unist-util-visit */ "./node_modules/unist-util-visit/lib/index.js");
/* harmony import */ var unist_util_position__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! unist-util-position */ "./node_modules/unist-util-position/lib/index.js");
/* harmony import */ var unist_util_generated__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! unist-util-generated */ "./node_modules/unist-util-generated/lib/index.js");
/* harmony import */ var mdast_util_definitions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mdast-util-definitions */ "./node_modules/mdast-util-definitions/lib/index.js");
/* harmony import */ var _handlers_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./handlers/index.js */ "./node_modules/mdast-util-to-hast/lib/handlers/index.js");
/**
 * @typedef {import('hast').Content} HastContent
 * @typedef {import('hast').Element} HastElement
 * @typedef {import('hast').ElementContent} HastElementContent
 * @typedef {import('hast').Properties} HastProperties
 * @typedef {import('hast').Root} HastRoot
 * @typedef {import('hast').Text} HastText
 *
 * @typedef {import('mdast').Content} MdastContent
 * @typedef {import('mdast').Definition} MdastDefinition
 * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition
 * @typedef {import('mdast').Parent} MdastParent
 * @typedef {import('mdast').Root} MdastRoot
 */

/**
 * @typedef {HastRoot | HastContent} HastNodes
 * @typedef {MdastRoot | MdastContent} MdastNodes
 * @typedef {Extract<MdastNodes, MdastParent>} MdastParents
 *
 * @typedef EmbeddedHastFields
 *   hast fields.
 * @property {string | null | undefined} [hName]
 *   Generate a specific element with this tag name instead.
 * @property {HastProperties | null | undefined} [hProperties]
 *   Generate an element with these properties instead.
 * @property {Array<HastElementContent> | null | undefined} [hChildren]
 *   Generate an element with this content instead.
 *
 * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData
 *   mdast data with embedded hast fields.
 *
 * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData
 *   mdast node with embedded hast data.
 *
 * @typedef PointLike
 *   Point-like value.
 * @property {number | null | undefined} [line]
 *   Line.
 * @property {number | null | undefined} [column]
 *   Column.
 * @property {number | null | undefined} [offset]
 *   Offset.
 *
 * @typedef PositionLike
 *   Position-like value.
 * @property {PointLike | null | undefined} [start]
 *   Point-like value.
 * @property {PointLike | null | undefined} [end]
 *   Point-like value.
 *
 * @callback Handler
 *   Handle a node.
 * @param {State} state
 *   Info passed around.
 * @param {any} node
 *   mdast node to handle.
 * @param {MdastParents | null | undefined} parent
 *   Parent of `node`.
 * @returns {HastElementContent | Array<HastElementContent> | null | undefined}
 *   hast node.
 *
 * @callback HFunctionProps
 *   Signature of `state` for when props are passed.
 * @param {MdastNodes | PositionLike | null | undefined} node
 *   mdast node or unist position.
 * @param {string} tagName
 *   HTML tag name.
 * @param {HastProperties} props
 *   Properties.
 * @param {Array<HastElementContent> | null | undefined} [children]
 *   hast content.
 * @returns {HastElement}
 *   Compiled element.
 *
 * @callback HFunctionNoProps
 *   Signature of `state` for when no props are passed.
 * @param {MdastNodes | PositionLike | null | undefined} node
 *   mdast node or unist position.
 * @param {string} tagName
 *   HTML tag name.
 * @param {Array<HastElementContent> | null | undefined} [children]
 *   hast content.
 * @returns {HastElement}
 *   Compiled element.
 *
 * @typedef HFields
 *   Info on `state`.
 * @property {boolean} dangerous
 *   Whether HTML is allowed.
 * @property {string} clobberPrefix
 *   Prefix to use to prevent DOM clobbering.
 * @property {string} footnoteLabel
 *   Label to use to introduce the footnote section.
 * @property {string} footnoteLabelTagName
 *   HTML used for the footnote label.
 * @property {HastProperties} footnoteLabelProperties
 *   Properties on the HTML tag used for the footnote label.
 * @property {string} footnoteBackLabel
 *   Label to use from backreferences back to their footnote call.
 * @property {(identifier: string) => MdastDefinition | null} definition
 *   Definition cache.
 * @property {Record<string, MdastFootnoteDefinition>} footnoteById
 *   Footnote definitions by their identifier.
 * @property {Array<string>} footnoteOrder
 *   Identifiers of order when footnote calls first appear in tree order.
 * @property {Record<string, number>} footnoteCounts
 *   Counts for how often the same footnote was called.
 * @property {Handlers} handlers
 *   Applied handlers.
 * @property {Handler} unknownHandler
 *   Handler for any none not in `passThrough` or otherwise handled.
 * @property {(from: MdastNodes, node: HastNodes) => void} patch
 *   Copy a node’s positional info.
 * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData
 *   Honor the `data` of `from`, and generate an element instead of `node`.
 * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one
 *   Transform an mdast node to hast.
 * @property {(node: MdastNodes) => Array<HastElementContent>} all
 *   Transform the children of an mdast parent to hast.
 * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap
 *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.
 * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment
 *   Like `state` but lower-level and usable on non-elements.
 *   Deprecated: use `patch` and `applyData`.
 * @property {Array<string>} passThrough
 *   List of node types to pass through untouched (except for their children).
 *
 * @typedef Options
 *   Configuration (optional).
 * @property {boolean | null | undefined} [allowDangerousHtml=false]
 *   Whether to persist raw HTML in markdown in the hast tree.
 * @property {string | null | undefined} [clobberPrefix='user-content-']
 *   Prefix to use before the `id` attribute on footnotes to prevent it from
 *   *clobbering*.
 * @property {string | null | undefined} [footnoteBackLabel='Back to content']
 *   Label to use from backreferences back to their footnote call (affects
 *   screen readers).
 * @property {string | null | undefined} [footnoteLabel='Footnotes']
 *   Label to use for the footnotes section (affects screen readers).
 * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]
 *   Properties to use on the footnote label (note that `id: 'footnote-label'`
 *   is always added as footnote calls use it with `aria-describedby` to
 *   provide an accessible label).
 * @property {string | null | undefined} [footnoteLabelTagName='h2']
 *   Tag name to use for the footnote label.
 * @property {Handlers | null | undefined} [handlers]
 *   Extra handlers for nodes.
 * @property {Array<string> | null | undefined} [passThrough]
 *   List of custom mdast node types to pass through (keep) in hast (note that
 *   the node itself is passed, but eventual children are transformed).
 * @property {Handler | null | undefined} [unknownHandler]
 *   Handler for all unknown nodes.
 *
 * @typedef {Record<string, Handler>} Handlers
 *   Handle nodes.
 *
 * @typedef {HFunctionProps & HFunctionNoProps & HFields} State
 *   Info passed around.
 */






const own = {}.hasOwnProperty;

/**
 * Create `state` from an mdast tree.
 *
 * @param {MdastNodes} tree
 *   mdast node to transform.
 * @param {Options | null | undefined} [options]
 *   Configuration.
 * @returns {State}
 *   `state` function.
 */
function createState(tree, options) {
  const settings = options || {};
  const dangerous = settings.allowDangerousHtml || false;
  /** @type {Record<string, MdastFootnoteDefinition>} */
  const footnoteById = {};

  // To do: next major: add `options` to state, remove:
  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,
  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,
  // `unknownHandler`.

  // To do: next major: move to `state.options.allowDangerousHtml`.
  state.dangerous = dangerous;
  // To do: next major: move to `state.options`.
  state.clobberPrefix = settings.clobberPrefix === undefined || settings.clobberPrefix === null ? 'user-content-' : settings.clobberPrefix;
  // To do: next major: move to `state.options`.
  state.footnoteLabel = settings.footnoteLabel || 'Footnotes';
  // To do: next major: move to `state.options`.
  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2';
  // To do: next major: move to `state.options`.
  state.footnoteLabelProperties = settings.footnoteLabelProperties || {
    className: ['sr-only']
  };
  // To do: next major: move to `state.options`.
  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content';
  // To do: next major: move to `state.options`.
  state.unknownHandler = settings.unknownHandler;
  // To do: next major: move to `state.options`.
  state.passThrough = settings.passThrough;
  state.handlers = {
    ..._handlers_index_js__WEBPACK_IMPORTED_MODULE_0__.handlers,
    ...settings.handlers
  };

  // To do: next major: replace utility with `definitionById` object, so we
  // only walk once (as we need footnotes too).
  state.definition = (0,mdast_util_definitions__WEBPACK_IMPORTED_MODULE_1__.definitions)(tree);
  state.footnoteById = footnoteById;
  /** @type {Array<string>} */
  state.footnoteOrder = [];
  /** @type {Record<string, number>} */
  state.footnoteCounts = {};
  state.patch = patch;
  state.applyData = applyData;
  state.one = oneBound;
  state.all = allBound;
  state.wrap = wrap;
  // To do: next major: remove `augment`.
  state.augment = augment;
  (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_2__.visit)(tree, 'footnoteDefinition', definition => {
    const id = String(definition.identifier).toUpperCase();

    // Mimick CM behavior of link definitions.
    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.
    if (!own.call(footnoteById, id)) {
      footnoteById[id] = definition;
    }
  });

  // @ts-expect-error Hush, it’s fine!
  return state;

  /**
   * Finalise the created `right`, a hast node, from `left`, an mdast node.
   *
   * @param {MdastNodeWithData | PositionLike | null | undefined} left
   * @param {HastElementContent} right
   * @returns {HastElementContent}
   */
  /* c8 ignore start */
  // To do: next major: remove.
  function augment(left, right) {
    // Handle `data.hName`, `data.hProperties, `data.hChildren`.
    if (left && 'data' in left && left.data) {
      /** @type {MdastData} */
      const data = left.data;
      if (data.hName) {
        if (right.type !== 'element') {
          right = {
            type: 'element',
            tagName: '',
            properties: {},
            children: []
          };
        }
        right.tagName = data.hName;
      }
      if (right.type === 'element' && data.hProperties) {
        right.properties = {
          ...right.properties,
          ...data.hProperties
        };
      }
      if ('children' in right && right.children && data.hChildren) {
        right.children = data.hChildren;
      }
    }
    if (left) {
      const ctx = 'type' in left ? left : {
        position: left
      };
      if (!(0,unist_util_generated__WEBPACK_IMPORTED_MODULE_3__.generated)(ctx)) {
        // @ts-expect-error: fine.
        right.position = {
          start: (0,unist_util_position__WEBPACK_IMPORTED_MODULE_4__.pointStart)(ctx),
          end: (0,unist_util_position__WEBPACK_IMPORTED_MODULE_4__.pointEnd)(ctx)
        };
      }
    }
    return right;
  }
  /* c8 ignore stop */

  /**
   * Create an element for `node`.
   *
   * @type {HFunctionProps}
   */
  /* c8 ignore start */
  // To do: next major: remove.
  function state(node, tagName, props, children) {
    if (Array.isArray(props)) {
      children = props;
      props = {};
    }

    // @ts-expect-error augmenting an element yields an element.
    return augment(node, {
      type: 'element',
      tagName,
      properties: props || {},
      children: children || []
    });
  }
  /* c8 ignore stop */

  /**
   * Transform an mdast node into a hast node.
   *
   * @param {MdastNodes} node
   *   mdast node.
   * @param {MdastParents | null | undefined} [parent]
   *   Parent of `node`.
   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}
   *   Resulting hast node.
   */
  function oneBound(node, parent) {
    // @ts-expect-error: that’s a state :)
    return one(state, node, parent);
  }

  /**
   * Transform the children of an mdast node into hast nodes.
   *
   * @param {MdastNodes} parent
   *   mdast node to compile
   * @returns {Array<HastElementContent>}
   *   Resulting hast nodes.
   */
  function allBound(parent) {
    // @ts-expect-error: that’s a state :)
    return all(state, parent);
  }
}

/**
 * Copy a node’s positional info.
 *
 * @param {MdastNodes} from
 *   mdast node to copy from.
 * @param {HastNodes} to
 *   hast node to copy into.
 * @returns {void}
 *   Nothing.
 */
function patch(from, to) {
  if (from.position) to.position = (0,unist_util_position__WEBPACK_IMPORTED_MODULE_4__.position)(from);
}

/**
 * Honor the `data` of `from` and maybe generate an element instead of `to`.
 *
 * @template {HastNodes} Type
 *   Node type.
 * @param {MdastNodes} from
 *   mdast node to use data from.
 * @param {Type} to
 *   hast node to change.
 * @returns {Type | HastElement}
 *   Nothing.
 */
function applyData(from, to) {
  /** @type {Type | HastElement} */
  let result = to;

  // Handle `data.hName`, `data.hProperties, `data.hChildren`.
  if (from && from.data) {
    const hName = from.data.hName;
    const hChildren = from.data.hChildren;
    const hProperties = from.data.hProperties;
    if (typeof hName === 'string') {
      // Transforming the node resulted in an element with a different name
      // than wanted:
      if (result.type === 'element') {
        result.tagName = hName;
      }
      // Transforming the node resulted in a non-element, which happens for
      // raw, text, and root nodes (unless custom handlers are passed).
      // The intent is likely to keep the content around (otherwise: pass
      // `hChildren`).
      else {
        result = {
          type: 'element',
          tagName: hName,
          properties: {},
          children: []
        };

        // To do: next major: take the children from the `root`, or inject the
        // raw/text/comment or so into the element?
        // if ('children' in node) {
        //   // @ts-expect-error: assume `children` are allowed in elements.
        //   result.children = node.children
        // } else {
        //   // @ts-expect-error: assume `node` is allowed in elements.
        //   result.children.push(node)
        // }
      }
    }

    if (result.type === 'element' && hProperties) {
      result.properties = {
        ...result.properties,
        ...hProperties
      };
    }
    if ('children' in result && result.children && hChildren !== null && hChildren !== undefined) {
      // @ts-expect-error: assume valid children are defined.
      result.children = hChildren;
    }
  }
  return result;
}

/**
 * Transform an mdast node into a hast node.
 *
 * @param {State} state
 *   Info passed around.
 * @param {MdastNodes} node
 *   mdast node.
 * @param {MdastParents | null | undefined} [parent]
 *   Parent of `node`.
 * @returns {HastElementContent | Array<HastElementContent> | null | undefined}
 *   Resulting hast node.
 */
// To do: next major: do not expose, keep bound.
function one(state, node, parent) {
  const type = node && node.type;

  // Fail on non-nodes.
  if (!type) {
    throw new Error('Expected node, got `' + node + '`');
  }
  if (own.call(state.handlers, type)) {
    return state.handlers[type](state, node, parent);
  }
  if (state.passThrough && state.passThrough.includes(type)) {
    // To do: next major: deep clone.
    // @ts-expect-error: types of passed through nodes are expected to be added manually.
    return 'children' in node ? {
      ...node,
      children: all(state, node)
    } : node;
  }
  if (state.unknownHandler) {
    return state.unknownHandler(state, node, parent);
  }
  return defaultUnknownHandler(state, node);
}

/**
 * Transform the children of an mdast node into hast nodes.
 *
 * @param {State} state
 *   Info passed around.
 * @param {MdastNodes} parent
 *   mdast node to compile
 * @returns {Array<HastElementContent>}
 *   Resulting hast nodes.
 */
// To do: next major: do not expose, keep bound.
function all(state, parent) {
  /** @type {Array<HastElementContent>} */
  const values = [];
  if ('children' in parent) {
    const nodes = parent.children;
    let index = -1;
    while (++index < nodes.length) {
      const result = one(state, nodes[index], parent);

      // To do: see if we van clean this? Can we merge texts?
      if (result) {
        if (index && nodes[index - 1].type === 'break') {
          if (!Array.isArray(result) && result.type === 'text') {
            result.value = result.value.replace(/^\s+/, '');
          }
          if (!Array.isArray(result) && result.type === 'element') {
            const head = result.children[0];
            if (head && head.type === 'text') {
              head.value = head.value.replace(/^\s+/, '');
            }
          }
        }
        if (Array.isArray(result)) {
          values.push(...result);
        } else {
          values.push(result);
        }
      }
    }
  }
  return values;
}

/**
 * Transform an unknown node.
 *
 * @param {State} state
 *   Info passed around.
 * @param {MdastNodes} node
 *   Unknown mdast node.
 * @returns {HastText | HastElement}
 *   Resulting hast node.
 */
function defaultUnknownHandler(state, node) {
  const data = node.data || {};
  /** @type {HastText | HastElement} */
  const result = 'value' in node && !(own.call(data, 'hProperties') || own.call(data, 'hChildren')) ? {
    type: 'text',
    value: node.value
  } : {
    type: 'element',
    tagName: 'div',
    properties: {},
    children: all(state, node)
  };
  state.patch(node, result);
  return state.applyData(node, result);
}

/**
 * Wrap `nodes` with line endings between each node.
 *
 * @template {HastContent} Type
 *   Node type.
 * @param {Array<Type>} nodes
 *   List of nodes to wrap.
 * @param {boolean | null | undefined} [loose=false]
 *   Whether to add line endings at start and end.
 * @returns {Array<Type | HastText>}
 *   Wrapped nodes.
 */
function wrap(nodes, loose) {
  /** @type {Array<Type | HastText>} */
  const result = [];
  let index = -1;
  if (loose) {
    result.push({
      type: 'text',
      value: '\n'
    });
  }
  while (++index < nodes.length) {
    if (index) result.push({
      type: 'text',
      value: '\n'
    });
    result.push(nodes[index]);
  }
  if (loose && nodes.length > 0) {
    result.push({
      type: 'text',
      value: '\n'
    });
  }
  return result;
}

/***/ }),

/***/ "./node_modules/mdast-util-to-string/lib/index.js":
/*!********************************************************!*\
  !*** ./node_modules/mdast-util-to-string/lib/index.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "toString": function() { return /* binding */ toString; }
/* harmony export */ });
/**
 * @typedef {import('mdast').Root|import('mdast').Content} Node
 *
 * @typedef Options
 *   Configuration (optional).
 * @property {boolean | null | undefined} [includeImageAlt=true]
 *   Whether to use `alt` for `image`s.
 */

/**
 * Get the text content of a node or list of nodes.
 *
 * Prefers the node’s plain-text fields, otherwise serializes its children,
 * and if the given value is an array, serialize the nodes in it.
 *
 * @param {unknown} value
 *   Thing to serialize, typically `Node`.
 * @param {Options | null | undefined} [options]
 *   Configuration (optional).
 * @returns {string}
 *   Serialized `value`.
 */
function toString(value, options) {
  const includeImageAlt = (options || {}).includeImageAlt;
  return one(value, typeof includeImageAlt === 'boolean' ? includeImageAlt : true);
}

/**
 * One node or several nodes.
 *
 * @param {unknown} value
 *   Thing to serialize.
 * @param {boolean} includeImageAlt
 *   Include image `alt`s.
 * @returns {string}
 *   Serialized node.
 */
function one(value, includeImageAlt) {
  return node(value) && ('value' in value && value.value || includeImageAlt && 'alt' in value && value.alt || 'children' in value && all(value.children, includeImageAlt)) || Array.isArray(value) && all(value, includeImageAlt) || '';
}

/**
 * Serialize a list of nodes.
 *
 * @param {Array<unknown>} values
 *   Thing to serialize.
 * @param {boolean} includeImageAlt
 *   Include image `alt`s.
 * @returns {string}
 *   Serialized nodes.
 */
function all(values, includeImageAlt) {
  /** @type {Array<string>} */
  const result = [];
  let index = -1;
  while (++index < values.length) {
    result[index] = one(values[index], includeImageAlt);
  }
  return result.join('');
}

/**
 * Check if `value` looks like a node.
 *
 * @param {unknown} value
 *   Thing.
 * @returns {value is Node}
 *   Whether `value` is a node.
 */
function node(value) {
  return Boolean(value && typeof value === 'object');
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/attention.js":
/*!*********************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/attention.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "attention": function() { return /* binding */ attention; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-chunked */ "./node_modules/micromark-util-chunked/dev/index.js");
/* harmony import */ var micromark_util_classify_character__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-classify-character */ "./node_modules/micromark-util-classify-character/dev/index.js");
/* harmony import */ var micromark_util_resolve_all__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-resolve-all */ "./node_modules/micromark-util-resolve-all/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').Point} Point
 */









/** @type {Construct} */
const attention = {
  name: 'attention',
  tokenize: tokenizeAttention,
  resolveAll: resolveAllAttention
};

/**
 * Take all events and resolve attention to emphasis or strong.
 *
 * @type {Resolver}
 */
function resolveAllAttention(events, context) {
  let index = -1;
  /** @type {number} */
  let open;
  /** @type {Token} */
  let group;
  /** @type {Token} */
  let text;
  /** @type {Token} */
  let openingSequence;
  /** @type {Token} */
  let closingSequence;
  /** @type {number} */
  let use;
  /** @type {Event[]} */
  let nextEvents;
  /** @type {number} */
  let offset;

  // Walk through all events.
  //
  // Note: performance of this is fine on an mb of normal markdown, but it’s
  // a bottleneck for malicious stuff.
  while (++index < events.length) {
    // Find a token that can close.
    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {
      open = index;

      // Now walk back to find an opener.
      while (open--) {
        // Find a token that can open the closer.
        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&
        // If the markers are the same:
        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {
          // If the opening can close or the closing can open,
          // and the close size *is not* a multiple of three,
          // but the sum of the opening and closing size *is* multiple of three,
          // then don’t match.
          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {
            continue;
          }

          // Number of markers to use from the sequence.
          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;
          const start = Object.assign({}, events[open][1].end);
          const end = Object.assign({}, events[index][1].start);
          movePoint(start, -use);
          movePoint(end, use);
          openingSequence = {
            type: use > 1 ? micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.strongSequence : micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.emphasisSequence,
            start,
            end: Object.assign({}, events[open][1].end)
          };
          closingSequence = {
            type: use > 1 ? micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.strongSequence : micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.emphasisSequence,
            start: Object.assign({}, events[index][1].start),
            end
          };
          text = {
            type: use > 1 ? micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.strongText : micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.emphasisText,
            start: Object.assign({}, events[open][1].end),
            end: Object.assign({}, events[index][1].start)
          };
          group = {
            type: use > 1 ? micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.strong : micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.emphasis,
            start: Object.assign({}, openingSequence.start),
            end: Object.assign({}, closingSequence.end)
          };
          events[open][1].end = Object.assign({}, openingSequence.start);
          events[index][1].start = Object.assign({}, closingSequence.end);
          nextEvents = [];

          // If there are more markers in the opening, add them before.
          if (events[open][1].end.offset - events[open][1].start.offset) {
            nextEvents = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.push)(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);
          }

          // Opening.
          nextEvents = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.push)(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);

          // Between.
          nextEvents = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.push)(nextEvents, (0,micromark_util_resolve_all__WEBPACK_IMPORTED_MODULE_3__.resolveAll)(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));

          // Closing.
          nextEvents = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.push)(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);

          // If there are more markers in the closing, add them after.
          if (events[index][1].end.offset - events[index][1].start.offset) {
            offset = 2;
            nextEvents = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.push)(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);
          } else {
            offset = 0;
          }
          (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.splice)(events, open - 1, index - open + 3, nextEvents);
          index = open + nextEvents.length - offset - 2;
          break;
        }
      }
    }
  }

  // Remove remaining sequences.
  index = -1;
  while (++index < events.length) {
    if (events[index][1].type === 'attentionSequence') {
      events[index][1].type = 'data';
    }
  }
  return events;
}

/** @type {Tokenizer} */
function tokenizeAttention(effects, ok) {
  const attentionMarkers = this.parser.constructs.attentionMarkers.null;
  const previous = this.previous;
  const before = (0,micromark_util_classify_character__WEBPACK_IMPORTED_MODULE_4__.classifyCharacter)(previous);

  /** @type {NonNullable<Code>} */
  let marker;
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_5__.codes.asterisk || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_5__.codes.underscore, 'expected asterisk or underscore');
    effects.enter('attentionSequence');
    marker = code;
    return sequence(code);
  }

  /** @type {State} */
  function sequence(code) {
    if (code === marker) {
      effects.consume(code);
      return sequence;
    }
    const token = effects.exit('attentionSequence');
    const after = (0,micromark_util_classify_character__WEBPACK_IMPORTED_MODULE_4__.classifyCharacter)(code);
    const open = !after || after === micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_6__.constants.characterGroupPunctuation && before || attentionMarkers.includes(code);
    const close = !before || before === micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_6__.constants.characterGroupPunctuation && after || attentionMarkers.includes(previous);
    token._open = Boolean(marker === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_5__.codes.asterisk ? open : open && (before || !close));
    token._close = Boolean(marker === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_5__.codes.asterisk ? close : close && (after || !open));
    return ok(code);
  }
}

/**
 * Move a point a bit.
 *
 * Note: `move` only works inside lines! It’s not possible to move past other
 * chunks (replacement characters, tabs, or line endings).
 *
 * @param {Point} point
 * @param {number} offset
 * @returns {void}
 */
function movePoint(point, offset) {
  point.column += offset;
  point.offset += offset;
  point._bufferIndex += offset;
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/autolink.js":
/*!********************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/autolink.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "autolink": function() { return /* binding */ autolink; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 */







/** @type {Construct} */
const autolink = {
  name: 'autolink',
  tokenize: tokenizeAutolink
};

/** @type {Tokenizer} */
function tokenizeAutolink(effects, ok, nok) {
  let size = 1;
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan, 'expected `<`');
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.autolink);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.autolinkMarker);
    effects.consume(code);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.autolinkMarker);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.autolinkProtocol);
    return open;
  }

  /** @type {State} */
  function open(code) {
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlpha)(code)) {
      effects.consume(code);
      return schemeOrEmailAtext;
    }
    return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAtext)(code) ? emailAtext(code) : nok(code);
  }

  /** @type {State} */
  function schemeOrEmailAtext(code) {
    return code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.plusSign || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dash || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dot || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code) ? schemeInsideOrEmailAtext(code) : emailAtext(code);
  }

  /** @type {State} */
  function schemeInsideOrEmailAtext(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.colon) {
      effects.consume(code);
      return urlInside;
    }
    if ((code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.plusSign || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dash || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dot || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code)) && size++ < micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_4__.constants.autolinkSchemeSizeMax) {
      effects.consume(code);
      return schemeInsideOrEmailAtext;
    }
    return emailAtext(code);
  }

  /** @type {State} */
  function urlInside(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.autolinkProtocol);
      return end(code);
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.space || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiControl)(code)) {
      return nok(code);
    }
    effects.consume(code);
    return urlInside;
  }

  /** @type {State} */
  function emailAtext(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.atSign) {
      effects.consume(code);
      size = 0;
      return emailAtSignOrDot;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAtext)(code)) {
      effects.consume(code);
      return emailAtext;
    }
    return nok(code);
  }

  /** @type {State} */
  function emailAtSignOrDot(code) {
    return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code) ? emailLabel(code) : nok(code);
  }

  /** @type {State} */
  function emailLabel(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dot) {
      effects.consume(code);
      size = 0;
      return emailAtSignOrDot;
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {
      // Exit, then change the type.
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.autolinkProtocol).type = micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.autolinkEmail;
      return end(code);
    }
    return emailValue(code);
  }

  /** @type {State} */
  function emailValue(code) {
    if ((code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dash || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code)) && size++ < micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_4__.constants.autolinkDomainSizeMax) {
      effects.consume(code);
      return code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dash ? emailValue : emailLabel;
    }
    return nok(code);
  }

  /** @type {State} */
  function end(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan, 'expected `>`');
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.autolinkMarker);
    effects.consume(code);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.autolinkMarker);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.autolink);
    return ok;
  }
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/blank-line.js":
/*!**********************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/blank-line.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "blankLine": function() { return /* binding */ blankLine; }
/* harmony export */ });
/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-factory-space */ "./node_modules/micromark-factory-space/dev/index.js");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 */






/** @type {Construct} */
const blankLine = {
  tokenize: tokenizeBlankLine,
  partial: true
};

/** @type {Tokenizer} */
function tokenizeBlankLine(effects, ok, nok) {
  return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_0__.factorySpace)(effects, afterWhitespace, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.linePrefix);

  /** @type {State} */
  function afterWhitespace(code) {
    return code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code) ? ok(code) : nok(code);
  }
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/block-quote.js":
/*!***********************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/block-quote.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "blockQuote": function() { return /* binding */ blockQuote; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-factory-space */ "./node_modules/micromark-factory-space/dev/index.js");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Exiter} Exiter
 * @typedef {import('micromark-util-types').State} State
 */








/** @type {Construct} */
const blockQuote = {
  name: 'blockQuote',
  tokenize: tokenizeBlockQuoteStart,
  continuation: {
    tokenize: tokenizeBlockQuoteContinuation
  },
  exit
};

/** @type {Tokenizer} */
function tokenizeBlockQuoteStart(effects, ok, nok) {
  const self = this;
  return start;

  /** @type {State} */
  function start(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {
      const state = self.containerState;
      (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(state, 'expected `containerState` to be defined in container');
      if (!state.open) {
        effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.blockQuote, {
          _container: true
        });
        state.open = true;
      }
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.blockQuotePrefix);
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.blockQuoteMarker);
      effects.consume(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.blockQuoteMarker);
      return after;
    }
    return nok(code);
  }

  /** @type {State} */
  function after(code) {
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.blockQuotePrefixWhitespace);
      effects.consume(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.blockQuotePrefixWhitespace);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.blockQuotePrefix);
      return ok;
    }
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.blockQuotePrefix);
    return ok(code);
  }
}

/** @type {Tokenizer} */
function tokenizeBlockQuoteContinuation(effects, ok, nok) {
  return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__.factorySpace)(effects, effects.attempt(blockQuote, ok, nok), micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix, this.parser.constructs.disable.null.includes('codeIndented') ? undefined : micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_5__.constants.tabSize);
}

/** @type {Exiter} */
function exit(effects) {
  effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.blockQuote);
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/character-escape.js":
/*!****************************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/character-escape.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "characterEscape": function() { return /* binding */ characterEscape; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 */






/** @type {Construct} */
const characterEscape = {
  name: 'characterEscape',
  tokenize: tokenizeCharacterEscape
};

/** @type {Tokenizer} */
function tokenizeCharacterEscape(effects, ok, nok) {
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.backslash, 'expected `\\`');
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.characterEscape);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.escapeMarker);
    effects.consume(code);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.escapeMarker);
    return open;
  }

  /** @type {State} */
  function open(code) {
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiPunctuation)(code)) {
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.characterEscapeValue);
      effects.consume(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.characterEscapeValue);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.characterEscape);
      return ok;
    }
    return nok(code);
  }
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/character-reference.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/character-reference.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "characterReference": function() { return /* binding */ characterReference; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var decode_named_character_reference__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! decode-named-character-reference */ "./node_modules/decode-named-character-reference/index.dom.js");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Code} Code
 */








/** @type {Construct} */
const characterReference = {
  name: 'characterReference',
  tokenize: tokenizeCharacterReference
};

/** @type {Tokenizer} */
function tokenizeCharacterReference(effects, ok, nok) {
  const self = this;
  let size = 0;
  /** @type {number} */
  let max;
  /** @type {(code: Code) => code is number} */
  let test;
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.ampersand, 'expected `&`');
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.characterReference);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarker);
    effects.consume(code);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarker);
    return open;
  }

  /** @type {State} */
  function open(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.numberSign) {
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarkerNumeric);
      effects.consume(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarkerNumeric);
      return numeric;
    }
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceValue);
    max = micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.characterReferenceNamedSizeMax;
    test = micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlphanumeric;
    return value(code);
  }

  /** @type {State} */
  function numeric(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.uppercaseX || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.lowercaseX) {
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarkerHexadecimal);
      effects.consume(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarkerHexadecimal);
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceValue);
      max = micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.characterReferenceHexadecimalSizeMax;
      test = micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiHexDigit;
      return value;
    }
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceValue);
    max = micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.characterReferenceDecimalSizeMax;
    test = micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiDigit;
    return value(code);
  }

  /** @type {State} */
  function value(code) {
    /** @type {Token} */
    let token;
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.semicolon && size) {
      token = effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceValue);
      if (test === micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlphanumeric && !(0,decode_named_character_reference__WEBPACK_IMPORTED_MODULE_5__.decodeNamedCharacterReference)(self.sliceSerialize(token))) {
        return nok(code);
      }
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarker);
      effects.consume(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.characterReferenceMarker);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.characterReference);
      return ok;
    }
    if (test(code) && size++ < max) {
      effects.consume(code);
      return value;
    }
    return nok(code);
  }
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/code-fenced.js":
/*!***********************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/code-fenced.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "codeFenced": function() { return /* binding */ codeFenced; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-factory-space */ "./node_modules/micromark-factory-space/dev/index.js");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Code} Code
 */








/** @type {Construct} */
const codeFenced = {
  name: 'codeFenced',
  tokenize: tokenizeCodeFenced,
  concrete: true
};

/** @type {Tokenizer} */
function tokenizeCodeFenced(effects, ok, nok) {
  const self = this;
  /** @type {Construct} */
  const closingFenceConstruct = {
    tokenize: tokenizeClosingFence,
    partial: true
  };
  /** @type {Construct} */
  const nonLazyLine = {
    tokenize: tokenizeNonLazyLine,
    partial: true
  };
  const tail = this.events[this.events.length - 1];
  const initialPrefix = tail && tail[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.linePrefix ? tail[2].sliceSerialize(tail[1], true).length : 0;
  let sizeOpen = 0;
  /** @type {NonNullable<Code>} */
  let marker;
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.graveAccent || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.tilde, 'expected `` ` `` or `~`');
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeFenced);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeFencedFence);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeFencedFenceSequence);
    marker = code;
    return sequenceOpen(code);
  }

  /** @type {State} */
  function sequenceOpen(code) {
    if (code === marker) {
      effects.consume(code);
      sizeOpen++;
      return sequenceOpen;
    }
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeFencedFenceSequence);
    return sizeOpen < micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.codeFencedSequenceSizeMin ? nok(code) : (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__.factorySpace)(effects, infoOpen, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.whitespace)(code);
  }

  /** @type {State} */
  function infoOpen(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEnding)(code)) {
      return openAfter(code);
    }
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeFencedFenceInfo);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.chunkString, {
      contentType: micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.contentTypeString
    });
    return info(code);
  }

  /** @type {State} */
  function info(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEndingOrSpace)(code)) {
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.chunkString);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeFencedFenceInfo);
      return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__.factorySpace)(effects, infoAfter, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.whitespace)(code);
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.graveAccent && code === marker) return nok(code);
    effects.consume(code);
    return info;
  }

  /** @type {State} */
  function infoAfter(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEnding)(code)) {
      return openAfter(code);
    }
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeFencedFenceMeta);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.chunkString, {
      contentType: micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.contentTypeString
    });
    return meta(code);
  }

  /** @type {State} */
  function meta(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEnding)(code)) {
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.chunkString);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeFencedFenceMeta);
      return openAfter(code);
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.graveAccent && code === marker) return nok(code);
    effects.consume(code);
    return meta;
  }

  /** @type {State} */
  function openAfter(code) {
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeFencedFence);
    return self.interrupt ? ok(code) : contentStart(code);
  }

  /** @type {State} */
  function contentStart(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof) {
      return after(code);
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEnding)(code)) {
      return effects.attempt(nonLazyLine, effects.attempt(closingFenceConstruct, after, initialPrefix ? (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__.factorySpace)(effects, contentStart, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.linePrefix, initialPrefix + 1) : contentStart), after)(code);
    }
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeFlowValue);
    return contentContinue(code);
  }

  /** @type {State} */
  function contentContinue(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEnding)(code)) {
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeFlowValue);
      return contentStart(code);
    }
    effects.consume(code);
    return contentContinue;
  }

  /** @type {State} */
  function after(code) {
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeFenced);
    return ok(code);
  }

  /** @type {Tokenizer} */
  function tokenizeNonLazyLine(effects, ok, nok) {
    const self = this;
    return start;

    /** @type {State} */
    function start(code) {
      (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEnding)(code), 'expected eol');
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding);
      effects.consume(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding);
      return lineStart;
    }

    /** @type {State} */
    function lineStart(code) {
      return self.parser.lazy[self.now().line] ? nok(code) : ok(code);
    }
  }

  /** @type {Tokenizer} */
  function tokenizeClosingFence(effects, ok, nok) {
    let size = 0;
    return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__.factorySpace)(effects, closingSequenceStart, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.linePrefix, this.parser.constructs.disable.null.includes('codeIndented') ? undefined : micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.tabSize);

    /** @type {State} */
    function closingSequenceStart(code) {
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeFencedFence);
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeFencedFenceSequence);
      return closingSequence(code);
    }

    /** @type {State} */
    function closingSequence(code) {
      if (code === marker) {
        effects.consume(code);
        size++;
        return closingSequence;
      }
      if (size < sizeOpen) return nok(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeFencedFenceSequence);
      return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__.factorySpace)(effects, closingSequenceEnd, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.whitespace)(code);
    }

    /** @type {State} */
    function closingSequenceEnd(code) {
      if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEnding)(code)) {
        effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeFencedFence);
        return ok(code);
      }
      return nok(code);
    }
  }
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/code-indented.js":
/*!*************************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/code-indented.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "codeIndented": function() { return /* binding */ codeIndented; }
/* harmony export */ });
/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-factory-space */ "./node_modules/micromark-factory-space/dev/index.js");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').State} State
 */







/** @type {Construct} */
const codeIndented = {
  name: 'codeIndented',
  tokenize: tokenizeCodeIndented
};

/** @type {Construct} */
const indentedContent = {
  tokenize: tokenizeIndentedContent,
  partial: true
};

/** @type {Tokenizer} */
function tokenizeCodeIndented(effects, ok, nok) {
  const self = this;
  return start;

  /** @type {State} */
  function start(code) {
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_0__.types.codeIndented);
    return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_1__.factorySpace)(effects, afterStartPrefix, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_0__.types.linePrefix, micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__.constants.tabSize + 1)(code);
  }

  /** @type {State} */
  function afterStartPrefix(code) {
    const tail = self.events[self.events.length - 1];
    return tail && tail[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_0__.types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__.constants.tabSize ? afterPrefix(code) : nok(code);
  }

  /** @type {State} */
  function afterPrefix(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof) {
      return after(code);
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {
      return effects.attempt(indentedContent, afterPrefix, after)(code);
    }
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_0__.types.codeFlowValue);
    return content(code);
  }

  /** @type {State} */
  function content(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_0__.types.codeFlowValue);
      return afterPrefix(code);
    }
    effects.consume(code);
    return content;
  }

  /** @type {State} */
  function after(code) {
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_0__.types.codeIndented);
    return ok(code);
  }
}

/** @type {Tokenizer} */
function tokenizeIndentedContent(effects, ok, nok) {
  const self = this;
  return start;

  /** @type {State} */
  function start(code) {
    // If this is a lazy line, it can’t be code.
    if (self.parser.lazy[self.now().line]) {
      return nok(code);
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding);
      effects.consume(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_0__.types.lineEnding);
      return start;
    }
    return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_1__.factorySpace)(effects, afterPrefix, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_0__.types.linePrefix, micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__.constants.tabSize + 1)(code);
  }

  /** @type {State} */
  function afterPrefix(code) {
    const tail = self.events[self.events.length - 1];
    return tail && tail[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_0__.types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__.constants.tabSize ? ok(code) : (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code) ? start(code) : nok(code);
  }
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/code-text.js":
/*!*********************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/code-text.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "codeText": function() { return /* binding */ codeText; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Previous} Previous
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').State} State
 */






/** @type {Construct} */
const codeText = {
  name: 'codeText',
  tokenize: tokenizeCodeText,
  resolve: resolveCodeText,
  previous
};

/** @type {Resolver} */
function resolveCodeText(events) {
  let tailExitIndex = events.length - 4;
  let headEnterIndex = 3;
  /** @type {number} */
  let index;
  /** @type {number|undefined} */
  let enter;

  // If we start and end with an EOL or a space.
  if ((events[headEnterIndex][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding || events[tailExitIndex][1].type === 'space')) {
    index = headEnterIndex;

    // And we have data.
    while (++index < tailExitIndex) {
      if (events[index][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeTextData) {
        // Then we have padding.
        events[headEnterIndex][1].type = micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeTextPadding;
        events[tailExitIndex][1].type = micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeTextPadding;
        headEnterIndex += 2;
        tailExitIndex -= 2;
        break;
      }
    }
  }

  // Merge adjacent spaces and data.
  index = headEnterIndex - 1;
  tailExitIndex++;
  while (++index <= tailExitIndex) {
    if (enter === undefined) {
      if (index !== tailExitIndex && events[index][1].type !== micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding) {
        enter = index;
      }
    } else if (index === tailExitIndex || events[index][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding) {
      events[enter][1].type = micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeTextData;
      if (index !== enter + 2) {
        events[enter][1].end = events[index - 1][1].end;
        events.splice(enter + 2, index - enter - 2);
        tailExitIndex -= index - enter - 2;
        index = enter + 2;
      }
      enter = undefined;
    }
  }
  return events;
}

/** @type {Previous} */
function previous(code) {
  // If there is a previous code, there will always be a tail.
  return code !== micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.graveAccent || this.events[this.events.length - 1][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.characterEscape;
}

/** @type {Tokenizer} */
function tokenizeCodeText(effects, ok, nok) {
  const self = this;
  let sizeOpen = 0;
  /** @type {number} */
  let size;
  /** @type {Token} */
  let token;
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.graveAccent, 'expected `` ` ``');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(previous.call(self, self.previous), 'expected correct previous');
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeText);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeTextSequence);
    return openingSequence(code);
  }

  /** @type {State} */
  function openingSequence(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.graveAccent) {
      effects.consume(code);
      sizeOpen++;
      return openingSequence;
    }
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeTextSequence);
    return gap(code);
  }

  /** @type {State} */
  function gap(code) {
    // EOF.
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof) {
      return nok(code);
    }

    // Closing fence?
    // Could also be data.
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.graveAccent) {
      token = effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeTextSequence);
      size = 0;
      return closingSequence(code);
    }

    // Tabs don’t work, and virtual spaces don’t make sense.
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.space) {
      effects.enter('space');
      effects.consume(code);
      effects.exit('space');
      return gap;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding);
      effects.consume(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding);
      return gap;
    }

    // Data.
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeTextData);
    return data(code);
  }

  // In code.
  /** @type {State} */
  function data(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.space || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.graveAccent || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeTextData);
      return gap(code);
    }
    effects.consume(code);
    return data;
  }

  // Closing fence.
  /** @type {State} */
  function closingSequence(code) {
    // More.
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.graveAccent) {
      effects.consume(code);
      size++;
      return closingSequence;
    }

    // Done!
    if (size === sizeOpen) {
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeTextSequence);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeText);
      return ok(code);
    }

    // More or less accents: mark as data.
    token.type = micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.codeTextData;
    return data(code);
  }
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/content.js":
/*!*******************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/content.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "content": function() { return /* binding */ content; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-factory-space */ "./node_modules/micromark-factory-space/dev/index.js");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_subtokenize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-subtokenize */ "./node_modules/micromark-util-subtokenize/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').State} State
 */









/**
 * No name because it must not be turned off.
 * @type {Construct}
 */
const content = {
  tokenize: tokenizeContent,
  resolve: resolveContent
};

/** @type {Construct} */
const continuationConstruct = {
  tokenize: tokenizeContinuation,
  partial: true
};

/**
 * Content is transparent: it’s parsed right now. That way, definitions are also
 * parsed right now: before text in paragraphs (specifically, media) are parsed.
 *
 * @type {Resolver}
 */
function resolveContent(events) {
  (0,micromark_util_subtokenize__WEBPACK_IMPORTED_MODULE_1__.subtokenize)(events);
  return events;
}

/** @type {Tokenizer} */
function tokenizeContent(effects, ok) {
  /** @type {Token} */
  let previous;
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code !== micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof && !(0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code), 'expected no eof or eol');
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.content);
    previous = effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.chunkContent, {
      contentType: micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_5__.constants.contentTypeContent
    });
    return data(code);
  }

  /** @type {State} */
  function data(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof) {
      return contentEnd(code);
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {
      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);
    }

    // Data.
    effects.consume(code);
    return data;
  }

  /** @type {State} */
  function contentEnd(code) {
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.chunkContent);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.content);
    return ok(code);
  }

  /** @type {State} */
  function contentContinue(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code), 'expected eol');
    effects.consume(code);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.chunkContent);
    previous.next = effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.chunkContent, {
      contentType: micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_5__.constants.contentTypeContent,
      previous
    });
    previous = previous.next;
    return data;
  }
}

/** @type {Tokenizer} */
function tokenizeContinuation(effects, ok, nok) {
  const self = this;
  return startLookahead;

  /** @type {State} */
  function startLookahead(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code), 'expected a line ending');
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.chunkContent);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.lineEnding);
    effects.consume(code);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.lineEnding);
    return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__.factorySpace)(effects, prefixed, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.linePrefix);
  }

  /** @type {State} */
  function prefixed(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {
      return nok(code);
    }
    const tail = self.events[self.events.length - 1];
    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_5__.constants.tabSize) {
      return ok(code);
    }
    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);
  }
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/definition.js":
/*!**********************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/definition.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "definition": function() { return /* binding */ definition; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_factory_destination__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-factory-destination */ "./node_modules/micromark-factory-destination/dev/index.js");
/* harmony import */ var micromark_factory_label__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-factory-label */ "./node_modules/micromark-factory-label/dev/index.js");
/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! micromark-factory-space */ "./node_modules/micromark-factory-space/dev/index.js");
/* harmony import */ var micromark_factory_title__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! micromark-factory-title */ "./node_modules/micromark-factory-title/dev/index.js");
/* harmony import */ var micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-factory-whitespace */ "./node_modules/micromark-factory-whitespace/dev/index.js");
/* harmony import */ var micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-normalize-identifier */ "./node_modules/micromark-util-normalize-identifier/dev/index.js");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 */












/** @type {Construct} */
const definition = {
  name: 'definition',
  tokenize: tokenizeDefinition
};

/** @type {Construct} */
const titleConstruct = {
  tokenize: tokenizeTitle,
  partial: true
};

/** @type {Tokenizer} */
function tokenizeDefinition(effects, ok, nok) {
  const self = this;
  /** @type {string} */
  let identifier;
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket, 'expected `[`');
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.definition);
    return micromark_factory_label__WEBPACK_IMPORTED_MODULE_3__.factoryLabel.call(self, effects, labelAfter, nok, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.definitionLabel, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.definitionLabelMarker, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.definitionLabelString)(code);
  }

  /** @type {State} */
  function labelAfter(code) {
    identifier = (0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_4__.normalizeIdentifier)(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.colon) {
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.definitionMarker);
      effects.consume(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.definitionMarker);

      // Note: blank lines can’t exist in content.
      return (0,micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_5__.factoryWhitespace)(effects, (0,micromark_factory_destination__WEBPACK_IMPORTED_MODULE_6__.factoryDestination)(effects, effects.attempt(titleConstruct, (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_7__.factorySpace)(effects, after, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.whitespace), (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_7__.factorySpace)(effects, after, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.whitespace)), nok, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.definitionDestination, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.definitionDestinationLiteral, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.definitionDestinationLiteralMarker, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.definitionDestinationRaw, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.definitionDestinationString));
    }
    return nok(code);
  }

  /** @type {State} */
  function after(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_8__.markdownLineEnding)(code)) {
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.definition);
      if (!self.parser.defined.includes(identifier)) {
        self.parser.defined.push(identifier);
      }
      return ok(code);
    }
    return nok(code);
  }
}

/** @type {Tokenizer} */
function tokenizeTitle(effects, ok, nok) {
  return start;

  /** @type {State} */
  function start(code) {
    return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_8__.markdownLineEndingOrSpace)(code) ? (0,micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_5__.factoryWhitespace)(effects, before)(code) : nok(code);
  }

  /** @type {State} */
  function before(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.quotationMark || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.apostrophe || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.leftParenthesis) {
      return (0,micromark_factory_title__WEBPACK_IMPORTED_MODULE_9__.factoryTitle)(effects, (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_7__.factorySpace)(effects, after, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.whitespace), nok, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.definitionTitle, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.definitionTitleMarker, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.definitionTitleString)(code);
    }
    return nok(code);
  }

  /** @type {State} */
  function after(code) {
    return code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_8__.markdownLineEnding)(code) ? ok(code) : nok(code);
  }
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/hard-break-escape.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/hard-break-escape.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hardBreakEscape": function() { return /* binding */ hardBreakEscape; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 */






/** @type {Construct} */
const hardBreakEscape = {
  name: 'hardBreakEscape',
  tokenize: tokenizeHardBreakEscape
};

/** @type {Tokenizer} */
function tokenizeHardBreakEscape(effects, ok, nok) {
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.backslash, 'expected `\\`');
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.hardBreakEscape);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.escapeMarker);
    effects.consume(code);
    return open;
  }

  /** @type {State} */
  function open(code) {
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.escapeMarker);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.hardBreakEscape);
      return ok(code);
    }
    return nok(code);
  }
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/heading-atx.js":
/*!***********************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/heading-atx.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "headingAtx": function() { return /* binding */ headingAtx; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-factory-space */ "./node_modules/micromark-factory-space/dev/index.js");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_chunked__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-chunked */ "./node_modules/micromark-util-chunked/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').State} State
 */









/** @type {Construct} */
const headingAtx = {
  name: 'headingAtx',
  tokenize: tokenizeHeadingAtx,
  resolve: resolveHeadingAtx
};

/** @type {Resolver} */
function resolveHeadingAtx(events, context) {
  let contentEnd = events.length - 2;
  let contentStart = 3;
  /** @type {Token} */
  let content;
  /** @type {Token} */
  let text;

  // Prefix whitespace, part of the opening.
  if (events[contentStart][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.whitespace) {
    contentStart += 2;
  }

  // Suffix whitespace, part of the closing.
  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.whitespace) {
    contentEnd -= 2;
  }
  if (events[contentEnd][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.atxHeadingSequence && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.whitespace)) {
    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
  }
  if (contentEnd > contentStart) {
    content = {
      type: micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.atxHeadingText,
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end
    };
    text = {
      type: micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.chunkText,
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end,
      // @ts-expect-error Constants are fine to assign.
      contentType: micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__.constants.contentTypeText
    };
    (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_3__.splice)(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);
  }
  return events;
}

/** @type {Tokenizer} */
function tokenizeHeadingAtx(effects, ok, nok) {
  const self = this;
  let size = 0;
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__.codes.numberSign, 'expected `#`');
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.atxHeading);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.atxHeadingSequence);
    return fenceOpenInside(code);
  }

  /** @type {State} */
  function fenceOpenInside(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__.codes.numberSign && size++ < micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__.constants.atxHeadingOpeningFenceSizeMax) {
      effects.consume(code);
      return fenceOpenInside;
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEndingOrSpace)(code)) {
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.atxHeadingSequence);
      return self.interrupt ? ok(code) : headingBreak(code);
    }
    return nok(code);
  }

  /** @type {State} */
  function headingBreak(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__.codes.numberSign) {
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.atxHeadingSequence);
      return sequence(code);
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEnding)(code)) {
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.atxHeading);
      return ok(code);
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownSpace)(code)) {
      return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__.factorySpace)(effects, headingBreak, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.whitespace)(code);
    }
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.atxHeadingText);
    return data(code);
  }

  /** @type {State} */
  function sequence(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__.codes.numberSign) {
      effects.consume(code);
      return sequence;
    }
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.atxHeadingSequence);
    return headingBreak(code);
  }

  /** @type {State} */
  function data(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__.codes.eof || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__.codes.numberSign || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEndingOrSpace)(code)) {
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.atxHeadingText);
      return headingBreak(code);
    }
    effects.consume(code);
    return data;
  }
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/html-flow.js":
/*!*********************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/html-flow.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "htmlFlow": function() { return /* binding */ htmlFlow; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_html_tag_name__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-html-tag-name */ "./node_modules/micromark-util-html-tag-name/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/* harmony import */ var _blank_line_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./blank-line.js */ "./node_modules/micromark-core-commonmark/dev/lib/blank-line.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Code} Code
 */









/** @type {Construct} */
const htmlFlow = {
  name: 'htmlFlow',
  tokenize: tokenizeHtmlFlow,
  resolveTo: resolveToHtmlFlow,
  concrete: true
};

/** @type {Construct} */
const nextBlankConstruct = {
  tokenize: tokenizeNextBlank,
  partial: true
};

/** @type {Resolver} */
function resolveToHtmlFlow(events) {
  let index = events.length;
  while (index--) {
    if (events[index][0] === 'enter' && events[index][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.htmlFlow) {
      break;
    }
  }
  if (index > 1 && events[index - 2][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.linePrefix) {
    // Add the prefix start to the HTML token.
    events[index][1].start = events[index - 2][1].start;
    // Add the prefix start to the HTML line token.
    events[index + 1][1].start = events[index - 2][1].start;
    // Remove the line prefix.
    events.splice(index - 2, 2);
  }
  return events;
}

/** @type {Tokenizer} */
function tokenizeHtmlFlow(effects, ok, nok) {
  const self = this;
  /** @type {number} */
  let kind;
  /** @type {boolean} */
  let startTag;
  /** @type {string} */
  let buffer;
  /** @type {number} */
  let index;
  /** @type {Code} */
  let marker;
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.lessThan, 'expected `<`');
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.htmlFlow);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.htmlFlowData);
    effects.consume(code);
    return open;
  }

  /** @type {State} */
  function open(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.exclamationMark) {
      effects.consume(code);
      return declarationStart;
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.slash) {
      effects.consume(code);
      return tagCloseStart;
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.questionMark) {
      effects.consume(code);
      kind = micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.htmlInstruction;
      // While we’re in an instruction instead of a declaration, we’re on a `?`
      // right now, so we do need to search for `>`, similar to declarations.
      return self.interrupt ? ok : continuationDeclarationInside;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlpha)(code)) {
      effects.consume(code);
      buffer = String.fromCharCode(code);
      startTag = true;
      return tagName;
    }
    return nok(code);
  }

  /** @type {State} */
  function declarationStart(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.dash) {
      effects.consume(code);
      kind = micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.htmlComment;
      return commentOpenInside;
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.leftSquareBracket) {
      effects.consume(code);
      kind = micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.htmlCdata;
      buffer = micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.cdataOpeningString;
      index = 0;
      return cdataOpenInside;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlpha)(code)) {
      effects.consume(code);
      kind = micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.htmlDeclaration;
      return self.interrupt ? ok : continuationDeclarationInside;
    }
    return nok(code);
  }

  /** @type {State} */
  function commentOpenInside(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.dash) {
      effects.consume(code);
      return self.interrupt ? ok : continuationDeclarationInside;
    }
    return nok(code);
  }

  /** @type {State} */
  function cdataOpenInside(code) {
    if (code === buffer.charCodeAt(index++)) {
      effects.consume(code);
      return index === buffer.length ? self.interrupt ? ok : continuation : cdataOpenInside;
    }
    return nok(code);
  }

  /** @type {State} */
  function tagCloseStart(code) {
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlpha)(code)) {
      effects.consume(code);
      buffer = String.fromCharCode(code);
      return tagName;
    }
    return nok(code);
  }

  /** @type {State} */
  function tagName(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.slash || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEndingOrSpace)(code)) {
      if (code !== micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.slash && startTag && micromark_util_html_tag_name__WEBPACK_IMPORTED_MODULE_5__.htmlRawNames.includes(buffer.toLowerCase())) {
        kind = micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.htmlRaw;
        return self.interrupt ? ok(code) : continuation(code);
      }
      if (micromark_util_html_tag_name__WEBPACK_IMPORTED_MODULE_5__.htmlBlockNames.includes(buffer.toLowerCase())) {
        kind = micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.htmlBasic;
        if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.slash) {
          effects.consume(code);
          return basicSelfClosing;
        }
        return self.interrupt ? ok(code) : continuation(code);
      }
      kind = micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.htmlComplete;
      // Do not support complete HTML when interrupting
      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : startTag ? completeAttributeNameBefore(code) : completeClosingTagAfter(code);
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.dash || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlphanumeric)(code)) {
      effects.consume(code);
      buffer += String.fromCharCode(code);
      return tagName;
    }
    return nok(code);
  }

  /** @type {State} */
  function basicSelfClosing(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan) {
      effects.consume(code);
      return self.interrupt ? ok : continuation;
    }
    return nok(code);
  }

  /** @type {State} */
  function completeClosingTagAfter(code) {
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {
      effects.consume(code);
      return completeClosingTagAfter;
    }
    return completeEnd(code);
  }

  /** @type {State} */
  function completeAttributeNameBefore(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.slash) {
      effects.consume(code);
      return completeEnd;
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.colon || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.underscore || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlpha)(code)) {
      effects.consume(code);
      return completeAttributeName;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {
      effects.consume(code);
      return completeAttributeNameBefore;
    }
    return completeEnd(code);
  }

  /** @type {State} */
  function completeAttributeName(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.dash || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.dot || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.colon || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.underscore || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlphanumeric)(code)) {
      effects.consume(code);
      return completeAttributeName;
    }
    return completeAttributeNameAfter(code);
  }

  /** @type {State} */
  function completeAttributeNameAfter(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.equalsTo) {
      effects.consume(code);
      return completeAttributeValueBefore;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {
      effects.consume(code);
      return completeAttributeNameAfter;
    }
    return completeAttributeNameBefore(code);
  }

  /** @type {State} */
  function completeAttributeValueBefore(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.lessThan || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.equalsTo || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.graveAccent) {
      return nok(code);
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.quotationMark || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.apostrophe) {
      effects.consume(code);
      marker = code;
      return completeAttributeValueQuoted;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {
      effects.consume(code);
      return completeAttributeValueBefore;
    }
    marker = null;
    return completeAttributeValueUnquoted(code);
  }

  /** @type {State} */
  function completeAttributeValueQuoted(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {
      return nok(code);
    }
    if (code === marker) {
      effects.consume(code);
      return completeAttributeValueQuotedAfter;
    }
    effects.consume(code);
    return completeAttributeValueQuoted;
  }

  /** @type {State} */
  function completeAttributeValueUnquoted(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.quotationMark || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.apostrophe || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.lessThan || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.equalsTo || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.graveAccent || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEndingOrSpace)(code)) {
      return completeAttributeNameAfter(code);
    }
    effects.consume(code);
    return completeAttributeValueUnquoted;
  }

  /** @type {State} */
  function completeAttributeValueQuotedAfter(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.slash || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {
      return completeAttributeNameBefore(code);
    }
    return nok(code);
  }

  /** @type {State} */
  function completeEnd(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan) {
      effects.consume(code);
      return completeAfter;
    }
    return nok(code);
  }

  /** @type {State} */
  function completeAfter(code) {
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownSpace)(code)) {
      effects.consume(code);
      return completeAfter;
    }
    return code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code) ? continuation(code) : nok(code);
  }

  /** @type {State} */
  function continuation(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.dash && kind === micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.htmlComment) {
      effects.consume(code);
      return continuationCommentInside;
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.lessThan && kind === micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.htmlRaw) {
      effects.consume(code);
      return continuationRawTagOpen;
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan && kind === micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.htmlDeclaration) {
      effects.consume(code);
      return continuationClose;
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.questionMark && kind === micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.htmlInstruction) {
      effects.consume(code);
      return continuationDeclarationInside;
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.rightSquareBracket && kind === micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.htmlCdata) {
      effects.consume(code);
      return continuationCharacterDataInside;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code) && (kind === micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.htmlBasic || kind === micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.htmlComplete)) {
      return effects.check(nextBlankConstruct, continuationClose, continuationAtLineEnding)(code);
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {
      return continuationAtLineEnding(code);
    }
    effects.consume(code);
    return continuation;
  }

  /** @type {State} */
  function continuationAtLineEnding(code) {
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.htmlFlowData);
    return htmlContinueStart(code);
  }

  /** @type {State} */
  function htmlContinueStart(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof) {
      return done(code);
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {
      return effects.attempt({
        tokenize: htmlLineEnd,
        partial: true
      }, htmlContinueStart, done)(code);
    }
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.htmlFlowData);
    return continuation(code);
  }

  /** @type {Tokenizer} */
  function htmlLineEnd(effects, ok, nok) {
    return start;

    /** @type {State} */
    function start(code) {
      (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code), 'expected eol');
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding);
      effects.consume(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding);
      return lineStart;
    }

    /** @type {State} */
    function lineStart(code) {
      return self.parser.lazy[self.now().line] ? nok(code) : ok(code);
    }
  }

  /** @type {State} */
  function continuationCommentInside(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.dash) {
      effects.consume(code);
      return continuationDeclarationInside;
    }
    return continuation(code);
  }

  /** @type {State} */
  function continuationRawTagOpen(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.slash) {
      effects.consume(code);
      buffer = '';
      return continuationRawEndTag;
    }
    return continuation(code);
  }

  /** @type {State} */
  function continuationRawEndTag(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan && micromark_util_html_tag_name__WEBPACK_IMPORTED_MODULE_5__.htmlRawNames.includes(buffer.toLowerCase())) {
      effects.consume(code);
      return continuationClose;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.asciiAlpha)(code) && buffer.length < micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.htmlRawSizeMax) {
      effects.consume(code);
      buffer += String.fromCharCode(code);
      return continuationRawEndTag;
    }
    return continuation(code);
  }

  /** @type {State} */
  function continuationCharacterDataInside(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.rightSquareBracket) {
      effects.consume(code);
      return continuationDeclarationInside;
    }
    return continuation(code);
  }

  /** @type {State} */
  function continuationDeclarationInside(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.greaterThan) {
      effects.consume(code);
      return continuationClose;
    }

    // More dashes.
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.dash && kind === micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.htmlComment) {
      effects.consume(code);
      return continuationDeclarationInside;
    }
    return continuation(code);
  }

  /** @type {State} */
  function continuationClose(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.htmlFlowData);
      return done(code);
    }
    effects.consume(code);
    return continuationClose;
  }

  /** @type {State} */
  function done(code) {
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.htmlFlow);
    return ok(code);
  }
}

/** @type {Tokenizer} */
function tokenizeNextBlank(effects, ok, nok) {
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code), 'expected a line ending');
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.htmlFlowData);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEndingBlank);
    effects.consume(code);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEndingBlank);
    return effects.attempt(_blank_line_js__WEBPACK_IMPORTED_MODULE_6__.blankLine, ok, nok);
  }
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/html-text.js":
/*!*********************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/html-text.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "htmlText": function() { return /* binding */ htmlText; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-factory-space */ "./node_modules/micromark-factory-space/dev/index.js");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Code} Code
 */








/** @type {Construct} */
const htmlText = {
  name: 'htmlText',
  tokenize: tokenizeHtmlText
};

/** @type {Tokenizer} */
function tokenizeHtmlText(effects, ok, nok) {
  const self = this;
  /** @type {NonNullable<Code>|undefined} */
  let marker;
  /** @type {string} */
  let buffer;
  /** @type {number} */
  let index;
  /** @type {State} */
  let returnState;
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan, 'expected `<`');
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.htmlText);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.htmlTextData);
    effects.consume(code);
    return open;
  }

  /** @type {State} */
  function open(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.exclamationMark) {
      effects.consume(code);
      return declarationOpen;
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.slash) {
      effects.consume(code);
      return tagCloseStart;
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.questionMark) {
      effects.consume(code);
      return instruction;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlpha)(code)) {
      effects.consume(code);
      return tagOpen;
    }
    return nok(code);
  }

  /** @type {State} */
  function declarationOpen(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dash) {
      effects.consume(code);
      return commentOpen;
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket) {
      effects.consume(code);
      buffer = micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_4__.constants.cdataOpeningString;
      index = 0;
      return cdataOpen;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlpha)(code)) {
      effects.consume(code);
      return declaration;
    }
    return nok(code);
  }

  /** @type {State} */
  function commentOpen(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dash) {
      effects.consume(code);
      return commentStart;
    }
    return nok(code);
  }

  /** @type {State} */
  function commentStart(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {
      return nok(code);
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dash) {
      effects.consume(code);
      return commentStartDash;
    }
    return comment(code);
  }

  /** @type {State} */
  function commentStartDash(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {
      return nok(code);
    }
    return comment(code);
  }

  /** @type {State} */
  function comment(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {
      return nok(code);
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dash) {
      effects.consume(code);
      return commentClose;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {
      returnState = comment;
      return atLineEnding(code);
    }
    effects.consume(code);
    return comment;
  }

  /** @type {State} */
  function commentClose(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dash) {
      effects.consume(code);
      return end;
    }
    return comment(code);
  }

  /** @type {State} */
  function cdataOpen(code) {
    if (code === buffer.charCodeAt(index++)) {
      effects.consume(code);
      return index === buffer.length ? cdata : cdataOpen;
    }
    return nok(code);
  }

  /** @type {State} */
  function cdata(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {
      return nok(code);
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket) {
      effects.consume(code);
      return cdataClose;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {
      returnState = cdata;
      return atLineEnding(code);
    }
    effects.consume(code);
    return cdata;
  }

  /** @type {State} */
  function cdataClose(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket) {
      effects.consume(code);
      return cdataEnd;
    }
    return cdata(code);
  }

  /** @type {State} */
  function cdataEnd(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {
      return end(code);
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket) {
      effects.consume(code);
      return cdataEnd;
    }
    return cdata(code);
  }

  /** @type {State} */
  function declaration(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {
      return end(code);
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {
      returnState = declaration;
      return atLineEnding(code);
    }
    effects.consume(code);
    return declaration;
  }

  /** @type {State} */
  function instruction(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {
      return nok(code);
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.questionMark) {
      effects.consume(code);
      return instructionClose;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {
      returnState = instruction;
      return atLineEnding(code);
    }
    effects.consume(code);
    return instruction;
  }

  /** @type {State} */
  function instructionClose(code) {
    return code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan ? end(code) : instruction(code);
  }

  /** @type {State} */
  function tagCloseStart(code) {
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlpha)(code)) {
      effects.consume(code);
      return tagClose;
    }
    return nok(code);
  }

  /** @type {State} */
  function tagClose(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dash || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code)) {
      effects.consume(code);
      return tagClose;
    }
    return tagCloseBetween(code);
  }

  /** @type {State} */
  function tagCloseBetween(code) {
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {
      returnState = tagCloseBetween;
      return atLineEnding(code);
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {
      effects.consume(code);
      return tagCloseBetween;
    }
    return end(code);
  }

  /** @type {State} */
  function tagOpen(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dash || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code)) {
      effects.consume(code);
      return tagOpen;
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.slash || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEndingOrSpace)(code)) {
      return tagOpenBetween(code);
    }
    return nok(code);
  }

  /** @type {State} */
  function tagOpenBetween(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.slash) {
      effects.consume(code);
      return end;
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.colon || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.underscore || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlpha)(code)) {
      effects.consume(code);
      return tagOpenAttributeName;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {
      returnState = tagOpenBetween;
      return atLineEnding(code);
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {
      effects.consume(code);
      return tagOpenBetween;
    }
    return end(code);
  }

  /** @type {State} */
  function tagOpenAttributeName(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dash || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dot || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.colon || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.underscore || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiAlphanumeric)(code)) {
      effects.consume(code);
      return tagOpenAttributeName;
    }
    return tagOpenAttributeNameAfter(code);
  }

  /** @type {State} */
  function tagOpenAttributeNameAfter(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo) {
      effects.consume(code);
      return tagOpenAttributeValueBefore;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {
      returnState = tagOpenAttributeNameAfter;
      return atLineEnding(code);
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {
      effects.consume(code);
      return tagOpenAttributeNameAfter;
    }
    return tagOpenBetween(code);
  }

  /** @type {State} */
  function tagOpenAttributeValueBefore(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent) {
      return nok(code);
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.quotationMark || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.apostrophe) {
      effects.consume(code);
      marker = code;
      return tagOpenAttributeValueQuoted;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {
      returnState = tagOpenAttributeValueBefore;
      return atLineEnding(code);
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {
      effects.consume(code);
      return tagOpenAttributeValueBefore;
    }
    effects.consume(code);
    marker = undefined;
    return tagOpenAttributeValueUnquoted;
  }

  /** @type {State} */
  function tagOpenAttributeValueQuoted(code) {
    if (code === marker) {
      effects.consume(code);
      return tagOpenAttributeValueQuotedAfter;
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {
      return nok(code);
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {
      returnState = tagOpenAttributeValueQuoted;
      return atLineEnding(code);
    }
    effects.consume(code);
    return tagOpenAttributeValueQuoted;
  }

  /** @type {State} */
  function tagOpenAttributeValueQuotedAfter(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.slash || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEndingOrSpace)(code)) {
      return tagOpenBetween(code);
    }
    return nok(code);
  }

  /** @type {State} */
  function tagOpenAttributeValueUnquoted(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.quotationMark || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.apostrophe || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.lessThan || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.equalsTo || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.graveAccent) {
      return nok(code);
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEndingOrSpace)(code)) {
      return tagOpenBetween(code);
    }
    effects.consume(code);
    return tagOpenAttributeValueUnquoted;
  }

  // We can’t have blank lines in content, so no need to worry about empty
  // tokens.
  /** @type {State} */
  function atLineEnding(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(returnState, 'expected return state');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code), 'expected eol');
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.htmlTextData);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);
    effects.consume(code);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);
    return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_5__.factorySpace)(effects, afterPrefix, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix, self.parser.constructs.disable.null.includes('codeIndented') ? undefined : micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_4__.constants.tabSize);
  }

  /** @type {State} */
  function afterPrefix(code) {
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.htmlTextData);
    return returnState(code);
  }

  /** @type {State} */
  function end(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.greaterThan) {
      effects.consume(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.htmlTextData);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.htmlText);
      return ok;
    }
    return nok(code);
  }
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/label-end.js":
/*!*********************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/label-end.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "labelEnd": function() { return /* binding */ labelEnd; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_factory_destination__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! micromark-factory-destination */ "./node_modules/micromark-factory-destination/dev/index.js");
/* harmony import */ var micromark_factory_label__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! micromark-factory-label */ "./node_modules/micromark-factory-label/dev/index.js");
/* harmony import */ var micromark_factory_title__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! micromark-factory-title */ "./node_modules/micromark-factory-title/dev/index.js");
/* harmony import */ var micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-factory-whitespace */ "./node_modules/micromark-factory-whitespace/dev/index.js");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-chunked */ "./node_modules/micromark-util-chunked/dev/index.js");
/* harmony import */ var micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-normalize-identifier */ "./node_modules/micromark-util-normalize-identifier/dev/index.js");
/* harmony import */ var micromark_util_resolve_all__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-resolve-all */ "./node_modules/micromark-util-resolve-all/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Code} Code
 */














/** @type {Construct} */
const labelEnd = {
  name: 'labelEnd',
  tokenize: tokenizeLabelEnd,
  resolveTo: resolveToLabelEnd,
  resolveAll: resolveAllLabelEnd
};

/** @type {Construct} */
const resourceConstruct = {
  tokenize: tokenizeResource
};
/** @type {Construct} */
const fullReferenceConstruct = {
  tokenize: tokenizeFullReference
};
/** @type {Construct} */
const collapsedReferenceConstruct = {
  tokenize: tokenizeCollapsedReference
};

/** @type {Resolver} */
function resolveAllLabelEnd(events) {
  let index = -1;
  /** @type {Token} */
  let token;
  while (++index < events.length) {
    token = events[index][1];
    if (token.type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.labelImage || token.type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.labelLink || token.type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.labelEnd) {
      // Remove the marker.
      events.splice(index + 1, token.type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.labelImage ? 4 : 2);
      token.type = micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.data;
      index++;
    }
  }
  return events;
}

/** @type {Resolver} */
function resolveToLabelEnd(events, context) {
  let index = events.length;
  let offset = 0;
  /** @type {Token} */
  let token;
  /** @type {number|undefined} */
  let open;
  /** @type {number|undefined} */
  let close;
  /** @type {Event[]} */
  let media;

  // Find an opening.
  while (index--) {
    token = events[index][1];
    if (open) {
      // If we see another link, or inactive link label, we’ve been here before.
      if (token.type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.link || token.type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.labelLink && token._inactive) {
        break;
      }

      // Mark other link openings as inactive, as we can’t have links in
      // links.
      if (events[index][0] === 'enter' && token.type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.labelLink) {
        token._inactive = true;
      }
    } else if (close) {
      if (events[index][0] === 'enter' && (token.type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.labelImage || token.type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.labelLink) && !token._balanced) {
        open = index;
        if (token.type !== micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.labelLink) {
          offset = 2;
          break;
        }
      }
    } else if (token.type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.labelEnd) {
      close = index;
    }
  }
  (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(open !== undefined, '`open` is supposed to be found');
  (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(close !== undefined, '`close` is supposed to be found');
  const group = {
    type: events[open][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.labelLink ? micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.link : micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.image,
    start: Object.assign({}, events[open][1].start),
    end: Object.assign({}, events[events.length - 1][1].end)
  };
  const label = {
    type: micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.label,
    start: Object.assign({}, events[open][1].start),
    end: Object.assign({}, events[close][1].end)
  };
  const text = {
    type: micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.labelText,
    start: Object.assign({}, events[open + offset + 2][1].end),
    end: Object.assign({}, events[close - 2][1].start)
  };
  media = [['enter', group, context], ['enter', label, context]];

  // Opening marker.
  media = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.push)(media, events.slice(open + 1, open + offset + 3));

  // Text open.
  media = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.push)(media, [['enter', text, context]]);

  // Between.
  media = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.push)(media, (0,micromark_util_resolve_all__WEBPACK_IMPORTED_MODULE_3__.resolveAll)(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));

  // Text close, marker close, label close.
  media = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.push)(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);

  // Reference, resource, or so.
  media = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.push)(media, events.slice(close + 1));

  // Media close.
  media = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.push)(media, [['exit', group, context]]);
  (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.splice)(events, open, events.length, media);
  return events;
}

/** @type {Tokenizer} */
function tokenizeLabelEnd(effects, ok, nok) {
  const self = this;
  let index = self.events.length;
  /** @type {Token} */
  let labelStart;
  /** @type {boolean} */
  let defined;

  // Find an opening.
  while (index--) {
    if ((self.events[index][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.labelImage || self.events[index][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.labelLink) && !self.events[index][1]._balanced) {
      labelStart = self.events[index][1];
      break;
    }
  }
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__.codes.rightSquareBracket, 'expected `]`');
    if (!labelStart) {
      return nok(code);
    }

    // It’s a balanced bracket, but contains a link.
    if (labelStart._inactive) return balanced(code);
    defined = self.parser.defined.includes((0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_5__.normalizeIdentifier)(self.sliceSerialize({
      start: labelStart.end,
      end: self.now()
    })));
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.labelEnd);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.labelMarker);
    effects.consume(code);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.labelMarker);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.labelEnd);
    return afterLabelEnd;
  }

  /** @type {State} */
  function afterLabelEnd(code) {
    // Resource: `[asd](fgh)`.
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__.codes.leftParenthesis) {
      return effects.attempt(resourceConstruct, ok, defined ? ok : balanced)(code);
    }

    // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__.codes.leftSquareBracket) {
      return effects.attempt(fullReferenceConstruct, ok, defined ? effects.attempt(collapsedReferenceConstruct, ok, balanced) : balanced)(code);
    }

    // Shortcut reference: `[asd]`?
    return defined ? ok(code) : balanced(code);
  }

  /** @type {State} */
  function balanced(code) {
    labelStart._balanced = true;
    return nok(code);
  }
}

/** @type {Tokenizer} */
function tokenizeResource(effects, ok, nok) {
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__.codes.leftParenthesis, 'expected left paren');
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.resource);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.resourceMarker);
    effects.consume(code);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.resourceMarker);
    return (0,micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_6__.factoryWhitespace)(effects, open);
  }

  /** @type {State} */
  function open(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__.codes.rightParenthesis) {
      return end(code);
    }
    return (0,micromark_factory_destination__WEBPACK_IMPORTED_MODULE_7__.factoryDestination)(effects, destinationAfter, nok, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.resourceDestination, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.resourceDestinationLiteral, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.resourceDestinationLiteralMarker, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.resourceDestinationRaw, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.resourceDestinationString, micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_8__.constants.linkResourceDestinationBalanceMax)(code);
  }

  /** @type {State} */
  function destinationAfter(code) {
    return (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_9__.markdownLineEndingOrSpace)(code) ? (0,micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_6__.factoryWhitespace)(effects, between)(code) : end(code);
  }

  /** @type {State} */
  function between(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__.codes.quotationMark || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__.codes.apostrophe || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__.codes.leftParenthesis) {
      return (0,micromark_factory_title__WEBPACK_IMPORTED_MODULE_10__.factoryTitle)(effects, (0,micromark_factory_whitespace__WEBPACK_IMPORTED_MODULE_6__.factoryWhitespace)(effects, end), nok, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.resourceTitle, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.resourceTitleMarker, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.resourceTitleString)(code);
    }
    return end(code);
  }

  /** @type {State} */
  function end(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__.codes.rightParenthesis) {
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.resourceMarker);
      effects.consume(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.resourceMarker);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.resource);
      return ok;
    }
    return nok(code);
  }
}

/** @type {Tokenizer} */
function tokenizeFullReference(effects, ok, nok) {
  const self = this;
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__.codes.leftSquareBracket, 'expected left bracket');
    return micromark_factory_label__WEBPACK_IMPORTED_MODULE_11__.factoryLabel.call(self, effects, afterLabel, nok, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.reference, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.referenceMarker, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.referenceString)(code);
  }

  /** @type {State} */
  function afterLabel(code) {
    return self.parser.defined.includes((0,micromark_util_normalize_identifier__WEBPACK_IMPORTED_MODULE_5__.normalizeIdentifier)(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);
  }
}

/** @type {Tokenizer} */
function tokenizeCollapsedReference(effects, ok, nok) {
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__.codes.leftSquareBracket, 'expected left bracket');
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.reference);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.referenceMarker);
    effects.consume(code);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.referenceMarker);
    return open;
  }

  /** @type {State} */
  function open(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_4__.codes.rightSquareBracket) {
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.referenceMarker);
      effects.consume(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.referenceMarker);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.reference);
      return ok;
    }
    return nok(code);
  }
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/label-start-image.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/label-start-image.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "labelStartImage": function() { return /* binding */ labelStartImage; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/* harmony import */ var _label_end_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./label-end.js */ "./node_modules/micromark-core-commonmark/dev/lib/label-end.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 */






/** @type {Construct} */
const labelStartImage = {
  name: 'labelStartImage',
  tokenize: tokenizeLabelStartImage,
  resolveAll: _label_end_js__WEBPACK_IMPORTED_MODULE_1__.labelEnd.resolveAll
};

/** @type {Tokenizer} */
function tokenizeLabelStartImage(effects, ok, nok) {
  const self = this;
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.exclamationMark, 'expected `!`');
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.labelImage);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.labelImageMarker);
    effects.consume(code);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.labelImageMarker);
    return open;
  }

  /** @type {State} */
  function open(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.leftSquareBracket) {
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.labelMarker);
      effects.consume(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.labelMarker);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.labelImage);
      return after;
    }
    return nok(code);
  }

  /** @type {State} */
  function after(code) {
    /* To do: remove in the future once we’ve switched from
     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
     * which doesn’t need this */
    /* Hidden footnotes hook */
    /* c8 ignore next 3 */
    return code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.caret && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);
  }
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/label-start-link.js":
/*!****************************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/label-start-link.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "labelStartLink": function() { return /* binding */ labelStartLink; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/* harmony import */ var _label_end_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./label-end.js */ "./node_modules/micromark-core-commonmark/dev/lib/label-end.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 */






/** @type {Construct} */
const labelStartLink = {
  name: 'labelStartLink',
  tokenize: tokenizeLabelStartLink,
  resolveAll: _label_end_js__WEBPACK_IMPORTED_MODULE_1__.labelEnd.resolveAll
};

/** @type {Tokenizer} */
function tokenizeLabelStartLink(effects, ok, nok) {
  const self = this;
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.leftSquareBracket, 'expected `[`');
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.labelLink);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.labelMarker);
    effects.consume(code);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.labelMarker);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.labelLink);
    return after;
  }

  /** @type {State} */
  function after(code) {
    /* To do: remove in the future once we’ve switched from
     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
     * which doesn’t need this */
    /* Hidden footnotes hook. */
    /* c8 ignore next 3 */
    return code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.caret && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);
  }
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/line-ending.js":
/*!***********************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/line-ending.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "lineEnding": function() { return /* binding */ lineEnding; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-factory-space */ "./node_modules/micromark-factory-space/dev/index.js");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 */






/** @type {Construct} */
const lineEnding = {
  name: 'lineEnding',
  tokenize: tokenizeLineEnding
};

/** @type {Tokenizer} */
function tokenizeLineEnding(effects, ok) {
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code), 'expected eol');
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);
    effects.consume(code);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.lineEnding);
    return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__.factorySpace)(effects, ok, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.linePrefix);
  }
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/list.js":
/*!****************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/list.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "list": function() { return /* binding */ list; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! micromark-factory-space */ "./node_modules/micromark-factory-space/dev/index.js");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/* harmony import */ var _blank_line_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./blank-line.js */ "./node_modules/micromark-core-commonmark/dev/lib/blank-line.js");
/* harmony import */ var _thematic_break_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./thematic-break.js */ "./node_modules/micromark-core-commonmark/dev/lib/thematic-break.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Exiter} Exiter
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Code} Code
 */

/**
 * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState
 * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState
 */










/** @type {Construct} */
const list = {
  name: 'list',
  tokenize: tokenizeListStart,
  continuation: {
    tokenize: tokenizeListContinuation
  },
  exit: tokenizeListEnd
};

/** @type {Construct} */
const listItemPrefixWhitespaceConstruct = {
  tokenize: tokenizeListItemPrefixWhitespace,
  partial: true
};

/** @type {Construct} */
const indentConstruct = {
  tokenize: tokenizeIndent,
  partial: true
};

/**
 * @type {Tokenizer}
 * @this {TokenizeContextWithState}
 */
function tokenizeListStart(effects, ok, nok) {
  const self = this;
  const tail = self.events[self.events.length - 1];
  let initialSize = tail && tail[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.linePrefix ? tail[2].sliceSerialize(tail[1], true).length : 0;
  let size = 0;
  return start;

  /** @type {State} */
  function start(code) {
    const kind = self.containerState.type || (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.asterisk || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.plusSign || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.dash ? micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.listUnordered : micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.listOrdered);
    if (kind === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.listUnordered ? !self.containerState.marker || code === self.containerState.marker : (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiDigit)(code)) {
      if (!self.containerState.type) {
        self.containerState.type = kind;
        effects.enter(kind, {
          _container: true
        });
      }
      if (kind === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.listUnordered) {
        effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.listItemPrefix);
        return code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.asterisk || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.dash ? effects.check(_thematic_break_js__WEBPACK_IMPORTED_MODULE_4__.thematicBreak, nok, atMarker)(code) : atMarker(code);
      }
      if (!self.interrupt || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.digit1) {
        effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.listItemPrefix);
        effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.listItemValue);
        return inside(code);
      }
    }
    return nok(code);
  }

  /** @type {State} */
  function inside(code) {
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.asciiDigit)(code) && ++size < micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_5__.constants.listItemValueSizeMax) {
      effects.consume(code);
      return inside;
    }
    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.rightParenthesis || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.dot)) {
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.listItemValue);
      return atMarker(code);
    }
    return nok(code);
  }

  /**
   * @type {State}
   **/
  function atMarker(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code !== micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof, 'eof (`null`) is not a marker');
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.listItemMarker);
    effects.consume(code);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.listItemMarker);
    self.containerState.marker = self.containerState.marker || code;
    return effects.check(_blank_line_js__WEBPACK_IMPORTED_MODULE_6__.blankLine,
    // Can’t be empty when interrupting.
    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));
  }

  /** @type {State} */
  function onBlank(code) {
    self.containerState.initialBlankLine = true;
    initialSize++;
    return endOfPrefix(code);
  }

  /** @type {State} */
  function otherPrefix(code) {
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.listItemPrefixWhitespace);
      effects.consume(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.listItemPrefixWhitespace);
      return endOfPrefix;
    }
    return nok(code);
  }

  /** @type {State} */
  function endOfPrefix(code) {
    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.listItemPrefix), true).length;
    return ok(code);
  }
}

/**
 * @type {Tokenizer}
 * @this {TokenizeContextWithState}
 */
function tokenizeListContinuation(effects, ok, nok) {
  const self = this;
  self.containerState._closeFlow = undefined;
  return effects.check(_blank_line_js__WEBPACK_IMPORTED_MODULE_6__.blankLine, onBlank, notBlank);

  /** @type {State} */
  function onBlank(code) {
    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;

    // We have a blank line.
    // Still, try to consume at most the items size.
    return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_7__.factorySpace)(effects, ok, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.listItemIndent, self.containerState.size + 1)(code);
  }

  /** @type {State} */
  function notBlank(code) {
    if (self.containerState.furtherBlankLines || !(0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {
      self.containerState.furtherBlankLines = undefined;
      self.containerState.initialBlankLine = undefined;
      return notInCurrentItem(code);
    }
    self.containerState.furtherBlankLines = undefined;
    self.containerState.initialBlankLine = undefined;
    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);
  }

  /** @type {State} */
  function notInCurrentItem(code) {
    // While we do continue, we signal that the flow should be closed.
    self.containerState._closeFlow = true;
    // As we’re closing flow, we’re no longer interrupting.
    self.interrupt = undefined;
    return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_7__.factorySpace)(effects, effects.attempt(list, ok, nok), micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.linePrefix, self.parser.constructs.disable.null.includes('codeIndented') ? undefined : micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_5__.constants.tabSize)(code);
  }
}

/**
 * @type {Tokenizer}
 * @this {TokenizeContextWithState}
 */
function tokenizeIndent(effects, ok, nok) {
  const self = this;
  return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_7__.factorySpace)(effects, afterPrefix, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.listItemIndent, self.containerState.size + 1);

  /** @type {State} */
  function afterPrefix(code) {
    const tail = self.events[self.events.length - 1];
    return tail && tail[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.listItemIndent && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);
  }
}

/**
 * @type {Exiter}
 * @this {TokenizeContextWithState}
 */
function tokenizeListEnd(effects) {
  effects.exit(this.containerState.type);
}

/**
 * @type {Tokenizer}
 * @this {TokenizeContextWithState}
 */
function tokenizeListItemPrefixWhitespace(effects, ok, nok) {
  const self = this;
  return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_7__.factorySpace)(effects, afterPrefix, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.listItemPrefixWhitespace, self.parser.constructs.disable.null.includes('codeIndented') ? undefined : micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_5__.constants.tabSize + 1);

  /** @type {State} */
  function afterPrefix(code) {
    const tail = self.events[self.events.length - 1];
    return !(0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code) && tail && tail[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.listItemPrefixWhitespace ? ok(code) : nok(code);
  }
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/setext-underline.js":
/*!****************************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/setext-underline.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setextUnderline": function() { return /* binding */ setextUnderline; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-factory-space */ "./node_modules/micromark-factory-space/dev/index.js");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Code} Code
 */







/** @type {Construct} */
const setextUnderline = {
  name: 'setextUnderline',
  tokenize: tokenizeSetextUnderline,
  resolveTo: resolveToSetextUnderline
};

/** @type {Resolver} */
function resolveToSetextUnderline(events, context) {
  let index = events.length;
  /** @type {number|undefined} */
  let content;
  /** @type {number|undefined} */
  let text;
  /** @type {number|undefined} */
  let definition;

  // Find the opening of the content.
  // It’ll always exist: we don’t tokenize if it isn’t there.
  while (index--) {
    if (events[index][0] === 'enter') {
      if (events[index][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.content) {
        content = index;
        break;
      }
      if (events[index][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.paragraph) {
        text = index;
      }
    }
    // Exit
    else {
      if (events[index][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.content) {
        // Remove the content end (if needed we’ll add it later)
        events.splice(index, 1);
      }
      if (!definition && events[index][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.definition) {
        definition = index;
      }
    }
  }
  (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(text !== undefined, 'expected a `text` index to be found');
  (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(content !== undefined, 'expected a `text` index to be found');
  const heading = {
    type: micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.setextHeading,
    start: Object.assign({}, events[text][1].start),
    end: Object.assign({}, events[events.length - 1][1].end)
  };

  // Change the paragraph to setext heading text.
  events[text][1].type = micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.setextHeadingText;

  // If we have definitions in the content, we’ll keep on having content,
  // but we need move it.
  if (definition) {
    events.splice(text, 0, ['enter', heading, context]);
    events.splice(definition + 1, 0, ['exit', events[content][1], context]);
    events[content][1].end = Object.assign({}, events[definition][1].end);
  } else {
    events[content][1] = heading;
  }

  // Add the heading exit at the end.
  events.push(['exit', heading, context]);
  return events;
}

/** @type {Tokenizer} */
function tokenizeSetextUnderline(effects, ok, nok) {
  const self = this;
  let index = self.events.length;
  /** @type {NonNullable<Code>} */
  let marker;
  /** @type {boolean} */
  let paragraph;

  // Find an opening.
  while (index--) {
    // Skip enter/exit of line ending, line prefix, and content.
    // We can now either have a definition or a paragraph.
    if (self.events[index][1].type !== micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding && self.events[index][1].type !== micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.linePrefix && self.events[index][1].type !== micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.content) {
      paragraph = self.events[index][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.paragraph;
      break;
    }
  }
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.dash || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.equalsTo, 'expected `=` or `-`');
    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.setextHeadingLine);
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.setextHeadingLineSequence);
      marker = code;
      return closingSequence(code);
    }
    return nok(code);
  }

  /** @type {State} */
  function closingSequence(code) {
    if (code === marker) {
      effects.consume(code);
      return closingSequence;
    }
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.setextHeadingLineSequence);
    return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_3__.factorySpace)(effects, closingSequenceEnd, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineSuffix)(code);
  }

  /** @type {State} */
  function closingSequenceEnd(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_4__.markdownLineEnding)(code)) {
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.setextHeadingLine);
      return ok(code);
    }
    return nok(code);
  }
}

/***/ }),

/***/ "./node_modules/micromark-core-commonmark/dev/lib/thematic-break.js":
/*!**************************************************************************!*\
  !*** ./node_modules/micromark-core-commonmark/dev/lib/thematic-break.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "thematicBreak": function() { return /* binding */ thematicBreak; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-factory-space */ "./node_modules/micromark-factory-space/dev/index.js");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Code} Code
 */








/** @type {Construct} */
const thematicBreak = {
  name: 'thematicBreak',
  tokenize: tokenizeThematicBreak
};

/** @type {Tokenizer} */
function tokenizeThematicBreak(effects, ok, nok) {
  let size = 0;
  /** @type {NonNullable<Code>} */
  let marker;
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.asterisk || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.dash || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.underscore, 'expected `*`, `-`, or `_`');
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.thematicBreak);
    marker = code;
    return atBreak(code);
  }

  /** @type {State} */
  function atBreak(code) {
    if (code === marker) {
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.thematicBreakSequence);
      return sequence(code);
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code)) {
      return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__.factorySpace)(effects, atBreak, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.whitespace)(code);
    }
    if (size < micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_5__.constants.thematicBreakMarkerCountMin || code !== micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof && !(0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {
      return nok(code);
    }
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.thematicBreak);
    return ok(code);
  }

  /** @type {State} */
  function sequence(code) {
    if (code === marker) {
      effects.consume(code);
      size++;
      return sequence;
    }
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.thematicBreakSequence);
    return atBreak(code);
  }
}

/***/ }),

/***/ "./node_modules/micromark-factory-destination/dev/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/micromark-factory-destination/dev/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "factoryDestination": function() { return /* binding */ factoryDestination; }
/* harmony export */ });
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 */






/**
 * @param {Effects} effects
 * @param {State} ok
 * @param {State} nok
 * @param {string} type
 * @param {string} literalType
 * @param {string} literalMarkerType
 * @param {string} rawType
 * @param {string} stringType
 * @param {number} [max=Infinity]
 * @returns {State}
 */
// eslint-disable-next-line max-params
function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {
  const limit = max || Number.POSITIVE_INFINITY;
  let balance = 0;
  return start;

  /** @type {State} */
  function start(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.lessThan) {
      effects.enter(type);
      effects.enter(literalType);
      effects.enter(literalMarkerType);
      effects.consume(code);
      effects.exit(literalMarkerType);
      return destinationEnclosedBefore;
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.eof || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.rightParenthesis || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.asciiControl)(code)) {
      return nok(code);
    }
    effects.enter(type);
    effects.enter(rawType);
    effects.enter(stringType);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.chunkString, {
      contentType: micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.contentTypeString
    });
    return destinationRaw(code);
  }

  /** @type {State} */
  function destinationEnclosedBefore(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.greaterThan) {
      effects.enter(literalMarkerType);
      effects.consume(code);
      effects.exit(literalMarkerType);
      effects.exit(literalType);
      effects.exit(type);
      return ok;
    }
    effects.enter(stringType);
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.chunkString, {
      contentType: micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_3__.constants.contentTypeString
    });
    return destinationEnclosed(code);
  }

  /** @type {State} */
  function destinationEnclosed(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.greaterThan) {
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.chunkString);
      effects.exit(stringType);
      return destinationEnclosedBefore(code);
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.eof || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.lessThan || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEnding)(code)) {
      return nok(code);
    }
    effects.consume(code);
    return code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.backslash ? destinationEnclosedEscape : destinationEnclosed;
  }

  /** @type {State} */
  function destinationEnclosedEscape(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.lessThan || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.greaterThan || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.backslash) {
      effects.consume(code);
      return destinationEnclosed;
    }
    return destinationEnclosed(code);
  }

  /** @type {State} */
  function destinationRaw(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.leftParenthesis) {
      if (++balance > limit) return nok(code);
      effects.consume(code);
      return destinationRaw;
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.rightParenthesis) {
      if (!balance--) {
        effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.chunkString);
        effects.exit(stringType);
        effects.exit(rawType);
        effects.exit(type);
        return ok(code);
      }
      effects.consume(code);
      return destinationRaw;
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEndingOrSpace)(code)) {
      if (balance) return nok(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_2__.types.chunkString);
      effects.exit(stringType);
      effects.exit(rawType);
      effects.exit(type);
      return ok(code);
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.asciiControl)(code)) return nok(code);
    effects.consume(code);
    return code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.backslash ? destinationRawEscape : destinationRaw;
  }

  /** @type {State} */
  function destinationRawEscape(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.leftParenthesis || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.rightParenthesis || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.backslash) {
      effects.consume(code);
      return destinationRaw;
    }
    return destinationRaw(code);
  }
}

/***/ }),

/***/ "./node_modules/micromark-factory-label/dev/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/micromark-factory-label/dev/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "factoryLabel": function() { return /* binding */ factoryLabel; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').State} State
 */







/**
 * @this {TokenizeContext}
 * @param {Effects} effects
 * @param {State} ok
 * @param {State} nok
 * @param {string} type
 * @param {string} markerType
 * @param {string} stringType
 * @returns {State}
 */
// eslint-disable-next-line max-params
function factoryLabel(effects, ok, nok, type, markerType, stringType) {
  const self = this;
  let size = 0;
  /** @type {boolean} */
  let data;
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket, 'expected `[`');
    effects.enter(type);
    effects.enter(markerType);
    effects.consume(code);
    effects.exit(markerType);
    effects.enter(stringType);
    return atBreak;
  }

  /** @type {State} */
  function atBreak(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket && !data ||
    /* To do: remove in the future once we’ve switched from
     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
     * which doesn’t need this */
    /* Hidden footnotes hook */
    /* c8 ignore next 3 */
    code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.caret && !size && '_hiddenFootnoteSupport' in self.parser.constructs || size > micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__.constants.linkReferenceSizeMax) {
      return nok(code);
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket) {
      effects.exit(stringType);
      effects.enter(markerType);
      effects.consume(code);
      effects.exit(markerType);
      effects.exit(type);
      return ok;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code)) {
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.lineEnding);
      effects.consume(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.lineEnding);
      return atBreak;
    }
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.chunkString, {
      contentType: micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__.constants.contentTypeString
    });
    return label(code);
  }

  /** @type {State} */
  function label(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownLineEnding)(code) || size++ > micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__.constants.linkReferenceSizeMax) {
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.chunkString);
      return atBreak(code);
    }
    effects.consume(code);
    data = data || !(0,micromark_util_character__WEBPACK_IMPORTED_MODULE_3__.markdownSpace)(code);
    return code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.backslash ? labelEscape : label;
  }

  /** @type {State} */
  function labelEscape(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.leftSquareBracket || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.backslash || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.rightSquareBracket) {
      effects.consume(code);
      size++;
      return label;
    }
    return label(code);
  }
}

/***/ }),

/***/ "./node_modules/micromark-factory-space/dev/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/micromark-factory-space/dev/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "factorySpace": function() { return /* binding */ factorySpace; }
/* harmony export */ });
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 */



/**
 * @param {Effects} effects
 * @param {State} ok
 * @param {string} type
 * @param {number} [max=Infinity]
 * @returns {State}
 */
function factorySpace(effects, ok, type, max) {
  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
  let size = 0;
  return start;

  /** @type {State} */
  function start(code) {
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_0__.markdownSpace)(code)) {
      effects.enter(type);
      return prefix(code);
    }
    return ok(code);
  }

  /** @type {State} */
  function prefix(code) {
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_0__.markdownSpace)(code) && size++ < limit) {
      effects.consume(code);
      return prefix;
    }
    effects.exit(type);
    return ok(code);
  }
}

/***/ }),

/***/ "./node_modules/micromark-factory-title/dev/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/micromark-factory-title/dev/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "factoryTitle": function() { return /* binding */ factoryTitle; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-factory-space */ "./node_modules/micromark-factory-space/dev/index.js");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Code} Code
 */








/**
 * @param {Effects} effects
 * @param {State} ok
 * @param {State} nok
 * @param {string} type
 * @param {string} markerType
 * @param {string} stringType
 * @returns {State}
 */
// eslint-disable-next-line max-params
function factoryTitle(effects, ok, nok, type, markerType, stringType) {
  /** @type {NonNullable<Code>} */
  let marker;
  return start;

  /** @type {State} */
  function start(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.quotationMark || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.apostrophe || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.leftParenthesis, 'expected `"`, `\'`, or `(`');
    effects.enter(type);
    effects.enter(markerType);
    effects.consume(code);
    effects.exit(markerType);
    marker = code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.leftParenthesis ? micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.rightParenthesis : code;
    return atFirstTitleBreak;
  }

  /** @type {State} */
  function atFirstTitleBreak(code) {
    if (code === marker) {
      effects.enter(markerType);
      effects.consume(code);
      effects.exit(markerType);
      effects.exit(type);
      return ok;
    }
    effects.enter(stringType);
    return atTitleBreak(code);
  }

  /** @type {State} */
  function atTitleBreak(code) {
    if (code === marker) {
      effects.exit(stringType);
      return atFirstTitleBreak(marker);
    }
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {
      return nok(code);
    }

    // Note: blank lines can’t exist in content.
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.lineEnding);
      effects.consume(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.lineEnding);
      return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__.factorySpace)(effects, atTitleBreak, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.linePrefix);
    }
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.chunkString, {
      contentType: micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_5__.constants.contentTypeString
    });
    return title(code);
  }

  /** @type {State} */
  function title(code) {
    if (code === marker || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.chunkString);
      return atTitleBreak(code);
    }
    effects.consume(code);
    return code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.backslash ? titleEscape : title;
  }

  /** @type {State} */
  function titleEscape(code) {
    if (code === marker || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.backslash) {
      effects.consume(code);
      return title;
    }
    return title(code);
  }
}

/***/ }),

/***/ "./node_modules/micromark-factory-whitespace/dev/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/micromark-factory-whitespace/dev/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "factoryWhitespace": function() { return /* binding */ factoryWhitespace; }
/* harmony export */ });
/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-factory-space */ "./node_modules/micromark-factory-space/dev/index.js");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 */





/**
 * @param {Effects} effects
 * @param {State} ok
 */
function factoryWhitespace(effects, ok) {
  /** @type {boolean} */
  let seen;
  return start;

  /** @type {State} */
  function start(code) {
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_0__.markdownLineEnding)(code)) {
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding);
      effects.consume(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding);
      seen = true;
      return start;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_0__.markdownSpace)(code)) {
      return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_2__.factorySpace)(effects, start, seen ? micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.linePrefix : micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineSuffix)(code);
    }
    return ok(code);
  }
}

/***/ }),

/***/ "./node_modules/micromark-util-character/dev/index.js":
/*!************************************************************!*\
  !*** ./node_modules/micromark-util-character/dev/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "asciiAlpha": function() { return /* binding */ asciiAlpha; },
/* harmony export */   "asciiAlphanumeric": function() { return /* binding */ asciiAlphanumeric; },
/* harmony export */   "asciiAtext": function() { return /* binding */ asciiAtext; },
/* harmony export */   "asciiControl": function() { return /* binding */ asciiControl; },
/* harmony export */   "asciiDigit": function() { return /* binding */ asciiDigit; },
/* harmony export */   "asciiHexDigit": function() { return /* binding */ asciiHexDigit; },
/* harmony export */   "asciiPunctuation": function() { return /* binding */ asciiPunctuation; },
/* harmony export */   "markdownLineEnding": function() { return /* binding */ markdownLineEnding; },
/* harmony export */   "markdownLineEndingOrSpace": function() { return /* binding */ markdownLineEndingOrSpace; },
/* harmony export */   "markdownSpace": function() { return /* binding */ markdownSpace; },
/* harmony export */   "unicodePunctuation": function() { return /* binding */ unicodePunctuation; },
/* harmony export */   "unicodeWhitespace": function() { return /* binding */ unicodeWhitespace; }
/* harmony export */ });
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var _lib_unicode_punctuation_regex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/unicode-punctuation-regex.js */ "./node_modules/micromark-util-character/dev/lib/unicode-punctuation-regex.js");
/**
 * @typedef {import('micromark-util-types').Code} Code
 */




/**
 * Check whether the character code represents an ASCII alpha (`a` through `z`,
 * case insensitive).
 *
 * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.
 *
 * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)
 * to U+005A (`Z`).
 *
 * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)
 * to U+007A (`z`).
 */
const asciiAlpha = regexCheck(/[A-Za-z]/);

/**
 * Check whether the character code represents an ASCII digit (`0` through `9`).
 *
 * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to
 * U+0039 (`9`).
 */
const asciiDigit = regexCheck(/\d/);

/**
 * Check whether the character code represents an ASCII hex digit (`a` through
 * `f`, case insensitive, or `0` through `9`).
 *
 * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex
 * digit, or an ASCII lower hex digit.
 *
 * An **ASCII upper hex digit** is a character in the inclusive range U+0041
 * (`A`) to U+0046 (`F`).
 *
 * An **ASCII lower hex digit** is a character in the inclusive range U+0061
 * (`a`) to U+0066 (`f`).
 */
const asciiHexDigit = regexCheck(/[\dA-Fa-f]/);

/**
 * Check whether the character code represents an ASCII alphanumeric (`a`
 * through `z`, case insensitive, or `0` through `9`).
 *
 * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha
 * (see `asciiAlpha`).
 */
const asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);

/**
 * Check whether the character code represents ASCII punctuation.
 *
 * An **ASCII punctuation** is a character in the inclusive ranges U+0021
 * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT
 * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT
 * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).
 */
const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);

/**
 * Check whether the character code represents an ASCII atext.
 *
 * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in
 * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),
 * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F
 * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E
 * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE
 * (`{`) to U+007E TILDE (`~`).
 *
 * See:
 * **\[RFC5322]**:
 * [Internet Message Format](https://tools.ietf.org/html/rfc5322).
 * P. Resnick.
 * IETF.
 */
const asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);

/**
 * Check whether a character code is an ASCII control character.
 *
 * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)
 * to U+001F (US), or U+007F (DEL).
 *
 * @param {Code} code
 * @returns {code is number}
 */
function asciiControl(code) {
  return (
    // Special whitespace codes (which have negative values), C0 and Control
    // character DEL
    code !== null && (code < micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.space || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.del)
  );
}

/**
 * Check whether a character code is a markdown line ending (see
 * `markdownLineEnding`) or markdown space (see `markdownSpace`).
 *
 * @param {Code} code
 * @returns {code is number}
 */
function markdownLineEndingOrSpace(code) {
  return code !== null && (code < micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.nul || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.space);
}

/**
 * Check whether a character code is a markdown line ending.
 *
 * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN
 * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).
 *
 * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE
 * RETURN (CR) are replaced by these virtual characters depending on whether
 * they occurred together.
 *
 * @param {Code} code
 * @returns {code is number}
 */
function markdownLineEnding(code) {
  return code !== null && code < micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.horizontalTab;
}

/**
 * Check whether a character code is a markdown space.
 *
 * A **markdown space** is the concrete character U+0020 SPACE (SP) and the
 * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).
 *
 * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is
 * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL
 * SPACE (VS) characters, depending on the column at which the tab occurred.
 *
 * @param {Code} code
 * @returns {code is number}
 */
function markdownSpace(code) {
  return code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.horizontalTab || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.virtualSpace || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.space;
}

/**
 * Check whether the character code represents Unicode whitespace.
 *
 * Note that this does handle micromark specific markdown whitespace characters.
 * See `markdownLineEndingOrSpace` to check that.
 *
 * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,
 * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),
 * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\[UNICODE]**).
 *
 * See:
 * **\[UNICODE]**:
 * [The Unicode Standard](https://www.unicode.org/versions/).
 * Unicode Consortium.
 */
const unicodeWhitespace = regexCheck(/\s/);

/**
 * Check whether the character code represents Unicode punctuation.
 *
 * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,
 * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`
 * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`
 * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII
 * punctuation (see `asciiPunctuation`).
 *
 * See:
 * **\[UNICODE]**:
 * [The Unicode Standard](https://www.unicode.org/versions/).
 * Unicode Consortium.
 */
// Size note: removing ASCII from the regex and using `asciiPunctuation` here
// In fact adds to the bundle size.
const unicodePunctuation = regexCheck(_lib_unicode_punctuation_regex_js__WEBPACK_IMPORTED_MODULE_1__.unicodePunctuationRegex);

/**
 * Create a code check from a regex.
 *
 * @param {RegExp} regex
 * @returns {(code: Code) => code is number}
 */
function regexCheck(regex) {
  return check;

  /**
   * Check whether a code matches the bound regex.
   *
   * @param {Code} code Character code
   * @returns {code is number} Whether the character code matches the bound regex
   */
  function check(code) {
    return code !== null && regex.test(String.fromCharCode(code));
  }
}

/***/ }),

/***/ "./node_modules/micromark-util-character/dev/lib/unicode-punctuation-regex.js":
/*!************************************************************************************!*\
  !*** ./node_modules/micromark-util-character/dev/lib/unicode-punctuation-regex.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unicodePunctuationRegex": function() { return /* binding */ unicodePunctuationRegex; }
/* harmony export */ });
// This module is generated by `script/`.
//
// CommonMark handles attention (emphasis, strong) markers based on what comes
// before or after them.
// One such difference is if those characters are Unicode punctuation.
// This script is generated from the Unicode data.
const unicodePunctuationRegex = /[!-/:-@[-`{-~\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;

/***/ }),

/***/ "./node_modules/micromark-util-chunked/dev/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/micromark-util-chunked/dev/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "push": function() { return /* binding */ push; },
/* harmony export */   "splice": function() { return /* binding */ splice; }
/* harmony export */ });
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");


/**
 * Like `Array#splice`, but smarter for giant arrays.
 *
 * `Array#splice` takes all items to be inserted as individual argument which
 * causes a stack overflow in V8 when trying to insert 100k items for instance.
 *
 * Otherwise, this does not return the removed items, and takes `items` as an
 * array instead of rest parameters.
 *
 * @template {unknown} T
 * @param {T[]} list
 * @param {number} start
 * @param {number} remove
 * @param {T[]} items
 * @returns {void}
 */
function splice(list, start, remove, items) {
  const end = list.length;
  let chunkStart = 0;
  /** @type {unknown[]} */
  let parameters;

  // Make start between zero and `end` (included).
  if (start < 0) {
    start = -start > end ? 0 : end + start;
  } else {
    start = start > end ? end : start;
  }
  remove = remove > 0 ? remove : 0;

  // No need to chunk the items if there’s only a couple (10k) items.
  if (items.length < micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_0__.constants.v8MaxSafeChunkSize) {
    parameters = Array.from(items);
    parameters.unshift(start, remove)
    // @ts-expect-error Hush, it’s fine.
    ;
    [].splice.apply(list, parameters);
  } else {
    // Delete `remove` items starting from `start`
    if (remove) [].splice.apply(list, [start, remove]);

    // Insert the items in chunks to not cause stack overflows.
    while (chunkStart < items.length) {
      parameters = items.slice(chunkStart, chunkStart + micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_0__.constants.v8MaxSafeChunkSize);
      parameters.unshift(start, 0)
      // @ts-expect-error Hush, it’s fine.
      ;
      [].splice.apply(list, parameters);
      chunkStart += micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_0__.constants.v8MaxSafeChunkSize;
      start += micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_0__.constants.v8MaxSafeChunkSize;
    }
  }
}

/**
 * Append `items` (an array) at the end of `list` (another array).
 * When `list` was empty, returns `items` instead.
 *
 * This prevents a potentially expensive operation when `list` is empty,
 * and adds items in batches to prevent V8 from hanging.
 *
 * @template {unknown} T
 * @param {T[]} list
 * @param {T[]} items
 * @returns {T[]}
 */
function push(list, items) {
  if (list.length > 0) {
    splice(list, list.length, 0, items);
    return list;
  }
  return items;
}

/***/ }),

/***/ "./node_modules/micromark-util-classify-character/dev/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/micromark-util-classify-character/dev/index.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "classifyCharacter": function() { return /* binding */ classifyCharacter; }
/* harmony export */ });
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/**
 * @typedef {import('micromark-util-types').Code} Code
 */





/**
 * Classify whether a character code represents whitespace, punctuation, or
 * something else.
 *
 * Used for attention (emphasis, strong), whose sequences can open or close
 * based on the class of surrounding characters.
 *
 * Note that eof (`null`) is seen as whitespace.
 *
 * @param {Code} code
 * @returns {number|undefined}
 */
function classifyCharacter(code) {
  if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.markdownLineEndingOrSpace)(code) || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.unicodeWhitespace)(code)) {
    return micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__.constants.characterGroupWhitespace;
  }
  if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_1__.unicodePunctuation)(code)) {
    return micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__.constants.characterGroupPunctuation;
  }
}

/***/ }),

/***/ "./node_modules/micromark-util-combine-extensions/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/micromark-util-combine-extensions/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "combineExtensions": function() { return /* binding */ combineExtensions; },
/* harmony export */   "combineHtmlExtensions": function() { return /* binding */ combineHtmlExtensions; }
/* harmony export */ });
/* harmony import */ var micromark_util_chunked__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-chunked */ "./node_modules/micromark-util-chunked/dev/index.js");
/**
 * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension
 * @typedef {import('micromark-util-types').Extension} Extension
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension
 */


const hasOwnProperty = {}.hasOwnProperty;

/**
 * Combine several syntax extensions into one.
 *
 * @param {Extension[]} extensions List of syntax extensions.
 * @returns {NormalizedExtension} A single combined extension.
 */
function combineExtensions(extensions) {
  /** @type {NormalizedExtension} */
  const all = {};
  let index = -1;
  while (++index < extensions.length) {
    syntaxExtension(all, extensions[index]);
  }
  return all;
}

/**
 * Merge `extension` into `all`.
 *
 * @param {NormalizedExtension} all Extension to merge into.
 * @param {Extension} extension Extension to merge.
 * @returns {void}
 */
function syntaxExtension(all, extension) {
  /** @type {string} */
  let hook;
  for (hook in extension) {
    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;
    const left = maybe || (all[hook] = {});
    const right = extension[hook];
    /** @type {string} */
    let code;
    for (code in right) {
      if (!hasOwnProperty.call(left, code)) left[code] = [];
      const value = right[code];
      constructs(
      // @ts-expect-error Looks like a list.
      left[code], Array.isArray(value) ? value : value ? [value] : []);
    }
  }
}

/**
 * Merge `list` into `existing` (both lists of constructs).
 * Mutates `existing`.
 *
 * @param {unknown[]} existing
 * @param {unknown[]} list
 * @returns {void}
 */
function constructs(existing, list) {
  let index = -1;
  /** @type {unknown[]} */
  const before = [];
  while (++index < list.length) {
    // @ts-expect-error Looks like an object.
    ;
    (list[index].add === 'after' ? existing : before).push(list[index]);
  }
  (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_0__.splice)(existing, 0, 0, before);
}

/**
 * Combine several HTML extensions into one.
 *
 * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.
 * @returns {HtmlExtension} A single combined extension.
 */
function combineHtmlExtensions(htmlExtensions) {
  /** @type {HtmlExtension} */
  const handlers = {};
  let index = -1;
  while (++index < htmlExtensions.length) {
    htmlExtension(handlers, htmlExtensions[index]);
  }
  return handlers;
}

/**
 * Merge `extension` into `all`.
 *
 * @param {HtmlExtension} all Extension to merge into.
 * @param {HtmlExtension} extension Extension to merge.
 * @returns {void}
 */
function htmlExtension(all, extension) {
  /** @type {string} */
  let hook;
  for (hook in extension) {
    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;
    const left = maybe || (all[hook] = {});
    const right = extension[hook];
    /** @type {string} */
    let type;
    if (right) {
      for (type in right) {
        left[type] = right[type];
      }
    }
  }
}

/***/ }),

/***/ "./node_modules/micromark-util-decode-numeric-character-reference/dev/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/micromark-util-decode-numeric-character-reference/dev/index.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decodeNumericCharacterReference": function() { return /* binding */ decodeNumericCharacterReference; }
/* harmony export */ });
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_values_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/values.js */ "./node_modules/micromark-util-symbol/values.js");



/**
 * Turn the number (in string form as either hexa- or plain decimal) coming from
 * a numeric character reference into a character.
 *
 * @param {string} value
 *   Value to decode.
 * @param {number} base
 *   Numeric base.
 * @returns {string}
 */
function decodeNumericCharacterReference(value, base) {
  const code = Number.parseInt(value, base);
  if (
  // C0 except for HT, LF, FF, CR, space
  code < micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.ht || code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.vt || code > micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.cr && code < micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.space ||
  // Control character (DEL) of the basic block and C1 controls.
  code > micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.tilde && code < 160 ||
  // Lone high surrogates and low surrogates.
  code > 55295 && code < 57344 ||
  // Noncharacters.
  code > 64975 && code < 65008 || (code & 65535) === 65535 || (code & 65535) === 65534 ||
  // Out of range
  code > 1114111) {
    return micromark_util_symbol_values_js__WEBPACK_IMPORTED_MODULE_1__.values.replacementCharacter;
  }
  return String.fromCharCode(code);
}

/***/ }),

/***/ "./node_modules/micromark-util-decode-string/dev/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/micromark-util-decode-string/dev/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decodeString": function() { return /* binding */ decodeString; }
/* harmony export */ });
/* harmony import */ var decode_named_character_reference__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! decode-named-character-reference */ "./node_modules/decode-named-character-reference/index.dom.js");
/* harmony import */ var micromark_util_decode_numeric_character_reference__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-decode-numeric-character-reference */ "./node_modules/micromark-util-decode-numeric-character-reference/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");




const characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;

/**
 * Utility to decode markdown strings (which occur in places such as fenced
 * code info strings, destinations, labels, and titles).
 * The “string” content type allows character escapes and -references.
 * This decodes those.
 *
 * @param {string} value
 * @returns {string}
 */
function decodeString(value) {
  return value.replace(characterEscapeOrReference, decode);
}

/**
 * @param {string} $0
 * @param {string} $1
 * @param {string} $2
 * @returns {string}
 */
function decode($0, $1, $2) {
  if ($1) {
    // Escape.
    return $1;
  }

  // Reference.
  const head = $2.charCodeAt(0);
  if (head === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.numberSign) {
    const head = $2.charCodeAt(1);
    const hex = head === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.lowercaseX || head === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.uppercaseX;
    return (0,micromark_util_decode_numeric_character_reference__WEBPACK_IMPORTED_MODULE_1__.decodeNumericCharacterReference)($2.slice(hex ? 2 : 1), hex ? micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__.constants.numericBaseHexadecimal : micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__.constants.numericBaseDecimal);
  }
  return (0,decode_named_character_reference__WEBPACK_IMPORTED_MODULE_3__.decodeNamedCharacterReference)($2) || $0;
}

/***/ }),

/***/ "./node_modules/micromark-util-encode/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/micromark-util-encode/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "encode": function() { return /* binding */ encode; }
/* harmony export */ });
const characterReferences = {
  '"': 'quot',
  '&': 'amp',
  '<': 'lt',
  '>': 'gt'
};

/**
 * Encode only the dangerous HTML characters.
 *
 * This ensures that certain characters which have special meaning in HTML are
 * dealt with.
 * Technically, we can skip `>` and `"` in many cases, but CM includes them.
 *
 * @param {string} value
 * @returns {string}
 */
function encode(value) {
  return value.replace(/["&<>]/g, replace);

  /**
   * @param {string} value
   * @returns {string}
   */
  function replace(value) {
    // @ts-expect-error Hush, it’s fine.
    return '&' + characterReferences[value] + ';';
  }
}

/***/ }),

/***/ "./node_modules/micromark-util-html-tag-name/index.js":
/*!************************************************************!*\
  !*** ./node_modules/micromark-util-html-tag-name/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "htmlBlockNames": function() { return /* binding */ htmlBlockNames; },
/* harmony export */   "htmlRawNames": function() { return /* binding */ htmlRawNames; }
/* harmony export */ });
/**
 * List of lowercase HTML tag names which when parsing HTML (flow), result
 * in more relaxed rules (condition 6): because they are known blocks, the
 * HTML-like syntax doesn’t have to be strictly parsed.
 * For tag names not in this list, a more strict algorithm (condition 7) is used
 * to detect whether the HTML-like syntax is seen as HTML (flow) or not.
 *
 * This is copied from:
 * <https://spec.commonmark.org/0.30/#html-blocks>.
 */
const htmlBlockNames = ['address', 'article', 'aside', 'base', 'basefont', 'blockquote', 'body', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dialog', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hr', 'html', 'iframe', 'legend', 'li', 'link', 'main', 'menu', 'menuitem', 'nav', 'noframes', 'ol', 'optgroup', 'option', 'p', 'param', 'section', 'summary', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul'];

/**
 * List of lowercase HTML tag names which when parsing HTML (flow), result in
 * HTML that can include lines w/o exiting, until a closing tag also in this
 * list is found (condition 1).
 *
 * This module is copied from:
 * <https://spec.commonmark.org/0.30/#html-blocks>.
 *
 * Note that `textarea` was added in `CommonMark@0.30`.
 */
const htmlRawNames = ['pre', 'script', 'style', 'textarea'];

/***/ }),

/***/ "./node_modules/micromark-util-normalize-identifier/dev/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/micromark-util-normalize-identifier/dev/index.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "normalizeIdentifier": function() { return /* binding */ normalizeIdentifier; }
/* harmony export */ });
/* harmony import */ var micromark_util_symbol_values_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol/values.js */ "./node_modules/micromark-util-symbol/values.js");


/**
 * Normalize an identifier (such as used in definitions).
 *
 * @param {string} value
 * @returns {string}
 */
function normalizeIdentifier(value) {
  return value
  // Collapse Markdown whitespace.
  .replace(/[\t\n\r ]+/g, micromark_util_symbol_values_js__WEBPACK_IMPORTED_MODULE_0__.values.space)
  // Trim.
  .replace(/^ | $/g, '')
  // Some characters are considered “uppercase”, but if their lowercase
  // counterpart is uppercased will result in a different uppercase
  // character.
  // Hence, to get that form, we perform both lower- and uppercase.
  // Upper case makes sure keys will not interact with default prototypal
  // methods: no method is uppercase.
  .toLowerCase().toUpperCase();
}

/***/ }),

/***/ "./node_modules/micromark-util-resolve-all/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/micromark-util-resolve-all/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolveAll": function() { return /* binding */ resolveAll; }
/* harmony export */ });
/**
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').Resolver} Resolver
 */

/**
 * Call all `resolveAll`s.
 *
 * @param {{resolveAll?: Resolver}[]} constructs
 * @param {Event[]} events
 * @param {TokenizeContext} context
 * @returns {Event[]}
 */
function resolveAll(constructs, events, context) {
  /** @type {Resolver[]} */
  const called = [];
  let index = -1;
  while (++index < constructs.length) {
    const resolve = constructs[index].resolveAll;
    if (resolve && !called.includes(resolve)) {
      events = resolve(events, context);
      called.push(resolve);
    }
  }
  return events;
}

/***/ }),

/***/ "./node_modules/micromark-util-sanitize-uri/dev/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/micromark-util-sanitize-uri/dev/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "normalizeUri": function() { return /* binding */ normalizeUri; },
/* harmony export */   "sanitizeUri": function() { return /* binding */ sanitizeUri; }
/* harmony export */ });
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_encode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-encode */ "./node_modules/micromark-util-encode/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_values_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol/values.js */ "./node_modules/micromark-util-symbol/values.js");





/**
 * Make a value safe for injection as a URL.
 *
 * This encodes unsafe characters with percent-encoding and skips already
 * encoded sequences (see `normalizeUri` below).
 * Further unsafe characters are encoded as character references (see
 * `micromark-util-encode`).
 *
 * Then, a regex of allowed protocols can be given, in which case the URL is
 * sanitized.
 * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,
 * or `/^https?$/i` for `img[src]`.
 * If the URL includes an unknown protocol (one not matched by `protocol`, such
 * as a dangerous example, `javascript:`), the value is ignored.
 *
 * @param {string|undefined} url
 * @param {RegExp} [protocol]
 * @returns {string}
 */
function sanitizeUri(url, protocol) {
  const value = (0,micromark_util_encode__WEBPACK_IMPORTED_MODULE_0__.encode)(normalizeUri(url || ''));
  if (!protocol) {
    return value;
  }
  const colon = value.indexOf(':');
  const questionMark = value.indexOf('?');
  const numberSign = value.indexOf('#');
  const slash = value.indexOf('/');
  if (
  // If there is no protocol, it’s relative.
  colon < 0 ||
  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.
  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||
  // It is a protocol, it should be allowed.
  protocol.test(value.slice(0, colon))) {
    return value;
  }
  return '';
}

/**
 * Normalize a URL (such as used in definitions).
 *
 * Encode unsafe characters with percent-encoding, skipping already encoded
 * sequences.
 *
 * @param {string} value
 * @returns {string}
 */
function normalizeUri(value) {
  /** @type {Array<string>} */
  const result = [];
  let index = -1;
  let start = 0;
  let skip = 0;
  while (++index < value.length) {
    const code = value.charCodeAt(index);
    /** @type {string} */
    let replace = '';

    // A correct percent encoded value.
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.percentSign && (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.asciiAlphanumeric)(value.charCodeAt(index + 1)) && (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.asciiAlphanumeric)(value.charCodeAt(index + 2))) {
      skip = 2;
    }
    // ASCII.
    else if (code < 128) {
      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {
        replace = String.fromCharCode(code);
      }
    }
    // Astral.
    else if (code > 55295 && code < 57344) {
      const next = value.charCodeAt(index + 1);

      // A correct surrogate pair.
      if (code < 56320 && next > 56319 && next < 57344) {
        replace = String.fromCharCode(code, next);
        skip = 1;
      }
      // Lone surrogate.
      else {
        replace = micromark_util_symbol_values_js__WEBPACK_IMPORTED_MODULE_3__.values.replacementCharacter;
      }
    }
    // Unicode.
    else {
      replace = String.fromCharCode(code);
    }
    if (replace) {
      result.push(value.slice(start, index), encodeURIComponent(replace));
      start = index + skip + 1;
      replace = '';
    }
    if (skip) {
      index += skip;
      skip = 0;
    }
  }
  return result.join('') + value.slice(start);
}

/***/ }),

/***/ "./node_modules/micromark-util-subtokenize/dev/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/micromark-util-subtokenize/dev/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "subtokenize": function() { return /* binding */ subtokenize; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-chunked */ "./node_modules/micromark-util-chunked/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').Chunk} Chunk
 * @typedef {import('micromark-util-types').Event} Event
 */






/**
 * Tokenize subcontent.
 *
 * @param {Event[]} events
 * @returns {boolean}
 */
function subtokenize(events) {
  /** @type {Record<string, number>} */
  const jumps = {};
  let index = -1;
  /** @type {Event} */
  let event;
  /** @type {number|undefined} */
  let lineIndex;
  /** @type {number} */
  let otherIndex;
  /** @type {Event} */
  let otherEvent;
  /** @type {Event[]} */
  let parameters;
  /** @type {Event[]} */
  let subevents;
  /** @type {boolean|undefined} */
  let more;
  while (++index < events.length) {
    while (index in jumps) {
      index = jumps[index];
    }
    event = events[index];

    // Add a hook for the GFM tasklist extension, which needs to know if text
    // is in the first content of a list item.
    if (index && event[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.chunkFlow && events[index - 1][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.listItemPrefix) {
      (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(event[1]._tokenizer, 'expected `_tokenizer` on subtokens');
      subevents = event[1]._tokenizer.events;
      otherIndex = 0;
      if (otherIndex < subevents.length && subevents[otherIndex][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEndingBlank) {
        otherIndex += 2;
      }
      if (otherIndex < subevents.length && subevents[otherIndex][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.content) {
        while (++otherIndex < subevents.length) {
          if (subevents[otherIndex][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.content) {
            break;
          }
          if (subevents[otherIndex][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.chunkText) {
            subevents[otherIndex][1]._isInFirstContentOfListItem = true;
            otherIndex++;
          }
        }
      }
    }

    // Enter.
    if (event[0] === 'enter') {
      if (event[1].contentType) {
        Object.assign(jumps, subcontent(events, index));
        index = jumps[index];
        more = true;
      }
    }
    // Exit.
    else if (event[1]._container) {
      otherIndex = index;
      lineIndex = undefined;
      while (otherIndex--) {
        otherEvent = events[otherIndex];
        if (otherEvent[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding || otherEvent[1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEndingBlank) {
          if (otherEvent[0] === 'enter') {
            if (lineIndex) {
              events[lineIndex][1].type = micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEndingBlank;
            }
            otherEvent[1].type = micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding;
            lineIndex = otherIndex;
          }
        } else {
          break;
        }
      }
      if (lineIndex) {
        // Fix position.
        event[1].end = Object.assign({}, events[lineIndex][1].start);

        // Switch container exit w/ line endings.
        parameters = events.slice(lineIndex, index);
        parameters.unshift(event);
        (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.splice)(events, lineIndex, index - lineIndex + 1, parameters);
      }
    }
  }
  return !more;
}

/**
 * Tokenize embedded tokens.
 *
 * @param {Event[]} events
 * @param {number} eventIndex
 * @returns {Record<string, number>}
 */
function subcontent(events, eventIndex) {
  const token = events[eventIndex][1];
  const context = events[eventIndex][2];
  let startPosition = eventIndex - 1;
  /** @type {number[]} */
  const startPositions = [];
  (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(token.contentType, 'expected `contentType` on subtokens');
  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);
  const childEvents = tokenizer.events;
  /** @type {[number, number][]} */
  const jumps = [];
  /** @type {Record<string, number>} */
  const gaps = {};
  /** @type {Chunk[]} */
  let stream;
  /** @type {Token|undefined} */
  let previous;
  let index = -1;
  /** @type {Token|undefined} */
  let current = token;
  let adjust = 0;
  let start = 0;
  const breaks = [start];

  // Loop forward through the linked tokens to pass them in order to the
  // subtokenizer.
  while (current) {
    // Find the position of the event for this token.
    while (events[++startPosition][1] !== current) {
      // Empty.
    }
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(!previous || current.previous === previous, 'expected previous to match');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(!previous || previous.next === current, 'expected next to match');
    startPositions.push(startPosition);
    if (!current._tokenizer) {
      stream = context.sliceStream(current);
      if (!current.next) {
        stream.push(micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof);
      }
      if (previous) {
        tokenizer.defineSkip(current.start);
      }
      if (current._isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = true;
      }
      tokenizer.write(stream);
      if (current._isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = undefined;
      }
    }

    // Unravel the next token.
    previous = current;
    current = current.next;
  }

  // Now, loop back through all events (and linked tokens), to figure out which
  // parts belong where.
  current = token;
  while (++index < childEvents.length) {
    if (
    // Find a void token that includes a break.
    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {
      (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(current, 'expected a current token');
      start = index + 1;
      breaks.push(start);
      // Help GC.
      current._tokenizer = undefined;
      current.previous = undefined;
      current = current.next;
    }
  }

  // Help GC.
  tokenizer.events = [];

  // If there’s one more token (which is the cases for lines that end in an
  // EOF), that’s perfect: the last point we found starts it.
  // If there isn’t then make sure any remaining content is added to it.
  if (current) {
    // Help GC.
    current._tokenizer = undefined;
    current.previous = undefined;
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(!current.next, 'expected no next token');
  } else {
    breaks.pop();
  }

  // Now splice the events from the subtokenizer into the current events,
  // moving back to front so that splice indices aren’t affected.
  index = breaks.length;
  while (index--) {
    const slice = childEvents.slice(breaks[index], breaks[index + 1]);
    const start = startPositions.pop();
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(start !== undefined, 'expected a start position when splicing');
    jumps.unshift([start, start + slice.length - 1]);
    (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.splice)(events, start, 2, slice);
  }
  index = -1;
  while (++index < jumps.length) {
    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];
    adjust += jumps[index][1] - jumps[index][0] - 1;
  }
  return gaps;
}

/***/ }),

/***/ "./node_modules/micromark-util-symbol/codes.js":
/*!*****************************************************!*\
  !*** ./node_modules/micromark-util-symbol/codes.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "codes": function() { return /* binding */ codes; }
/* harmony export */ });
/**
 * Character codes.
 *
 * This module is compiled away!
 *
 * micromark works based on character codes.
 * This module contains constants for the ASCII block and the replacement
 * character.
 * A couple of them are handled in a special way, such as the line endings
 * (CR, LF, and CR+LF, commonly known as end-of-line: EOLs), the tab (horizontal
 * tab) and its expansion based on what column it’s at (virtual space),
 * and the end-of-file (eof) character.
 * As values are preprocessed before handling them, the actual characters LF,
 * CR, HT, and NUL (which is present as the replacement character), are
 * guaranteed to not exist.
 *
 * Unicode basic latin block.
 */
const codes = {
  carriageReturn: -5,
  lineFeed: -4,
  carriageReturnLineFeed: -3,
  horizontalTab: -2,
  virtualSpace: -1,
  eof: null,
  nul: 0,
  soh: 1,
  stx: 2,
  etx: 3,
  eot: 4,
  enq: 5,
  ack: 6,
  bel: 7,
  bs: 8,
  ht: 9,
  // `\t`
  lf: 10,
  // `\n`
  vt: 11,
  // `\v`
  ff: 12,
  // `\f`
  cr: 13,
  // `\r`
  so: 14,
  si: 15,
  dle: 16,
  dc1: 17,
  dc2: 18,
  dc3: 19,
  dc4: 20,
  nak: 21,
  syn: 22,
  etb: 23,
  can: 24,
  em: 25,
  sub: 26,
  esc: 27,
  fs: 28,
  gs: 29,
  rs: 30,
  us: 31,
  space: 32,
  exclamationMark: 33,
  // `!`
  quotationMark: 34,
  // `"`
  numberSign: 35,
  // `#`
  dollarSign: 36,
  // `$`
  percentSign: 37,
  // `%`
  ampersand: 38,
  // `&`
  apostrophe: 39,
  // `'`
  leftParenthesis: 40,
  // `(`
  rightParenthesis: 41,
  // `)`
  asterisk: 42,
  // `*`
  plusSign: 43,
  // `+`
  comma: 44,
  // `,`
  dash: 45,
  // `-`
  dot: 46,
  // `.`
  slash: 47,
  // `/`
  digit0: 48,
  // `0`
  digit1: 49,
  // `1`
  digit2: 50,
  // `2`
  digit3: 51,
  // `3`
  digit4: 52,
  // `4`
  digit5: 53,
  // `5`
  digit6: 54,
  // `6`
  digit7: 55,
  // `7`
  digit8: 56,
  // `8`
  digit9: 57,
  // `9`
  colon: 58,
  // `:`
  semicolon: 59,
  // `;`
  lessThan: 60,
  // `<`
  equalsTo: 61,
  // `=`
  greaterThan: 62,
  // `>`
  questionMark: 63,
  // `?`
  atSign: 64,
  // `@`
  uppercaseA: 65,
  // `A`
  uppercaseB: 66,
  // `B`
  uppercaseC: 67,
  // `C`
  uppercaseD: 68,
  // `D`
  uppercaseE: 69,
  // `E`
  uppercaseF: 70,
  // `F`
  uppercaseG: 71,
  // `G`
  uppercaseH: 72,
  // `H`
  uppercaseI: 73,
  // `I`
  uppercaseJ: 74,
  // `J`
  uppercaseK: 75,
  // `K`
  uppercaseL: 76,
  // `L`
  uppercaseM: 77,
  // `M`
  uppercaseN: 78,
  // `N`
  uppercaseO: 79,
  // `O`
  uppercaseP: 80,
  // `P`
  uppercaseQ: 81,
  // `Q`
  uppercaseR: 82,
  // `R`
  uppercaseS: 83,
  // `S`
  uppercaseT: 84,
  // `T`
  uppercaseU: 85,
  // `U`
  uppercaseV: 86,
  // `V`
  uppercaseW: 87,
  // `W`
  uppercaseX: 88,
  // `X`
  uppercaseY: 89,
  // `Y`
  uppercaseZ: 90,
  // `Z`
  leftSquareBracket: 91,
  // `[`
  backslash: 92,
  // `\`
  rightSquareBracket: 93,
  // `]`
  caret: 94,
  // `^`
  underscore: 95,
  // `_`
  graveAccent: 96,
  // `` ` ``
  lowercaseA: 97,
  // `a`
  lowercaseB: 98,
  // `b`
  lowercaseC: 99,
  // `c`
  lowercaseD: 100,
  // `d`
  lowercaseE: 101,
  // `e`
  lowercaseF: 102,
  // `f`
  lowercaseG: 103,
  // `g`
  lowercaseH: 104,
  // `h`
  lowercaseI: 105,
  // `i`
  lowercaseJ: 106,
  // `j`
  lowercaseK: 107,
  // `k`
  lowercaseL: 108,
  // `l`
  lowercaseM: 109,
  // `m`
  lowercaseN: 110,
  // `n`
  lowercaseO: 111,
  // `o`
  lowercaseP: 112,
  // `p`
  lowercaseQ: 113,
  // `q`
  lowercaseR: 114,
  // `r`
  lowercaseS: 115,
  // `s`
  lowercaseT: 116,
  // `t`
  lowercaseU: 117,
  // `u`
  lowercaseV: 118,
  // `v`
  lowercaseW: 119,
  // `w`
  lowercaseX: 120,
  // `x`
  lowercaseY: 121,
  // `y`
  lowercaseZ: 122,
  // `z`
  leftCurlyBrace: 123,
  // `{`
  verticalBar: 124,
  // `|`
  rightCurlyBrace: 125,
  // `}`
  tilde: 126,
  // `~`
  del: 127,
  // Unicode Specials block.
  byteOrderMarker: 65279,
  // Unicode Specials block.
  replacementCharacter: 65533 // `�`
};

/***/ }),

/***/ "./node_modules/micromark-util-symbol/constants.js":
/*!*********************************************************!*\
  !*** ./node_modules/micromark-util-symbol/constants.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "constants": function() { return /* binding */ constants; }
/* harmony export */ });
/**
 * This module is compiled away!
 *
 * Parsing markdown comes with a couple of constants, such as minimum or maximum
 * sizes of certain sequences.
 * Additionally, there are a couple symbols used inside micromark.
 * These are all defined here, but compiled away by scripts.
 */
const constants = {
  attentionSideBefore: 1,
  // Symbol to mark an attention sequence as before content: `*a`
  attentionSideAfter: 2,
  // Symbol to mark an attention sequence as after content: `a*`
  atxHeadingOpeningFenceSizeMax: 6,
  // 6 number signs is fine, 7 isn’t.
  autolinkDomainSizeMax: 63,
  // 63 characters is fine, 64 is too many.
  autolinkSchemeSizeMax: 32,
  // 32 characters is fine, 33 is too many.
  cdataOpeningString: 'CDATA[',
  // And preceded by `<![`.
  characterGroupWhitespace: 1,
  // Symbol used to indicate a character is whitespace
  characterGroupPunctuation: 2,
  // Symbol used to indicate a character is punctuation
  characterReferenceDecimalSizeMax: 7,
  // `&#9999999;`.
  characterReferenceHexadecimalSizeMax: 6,
  // `&#xff9999;`.
  characterReferenceNamedSizeMax: 31,
  // `&CounterClockwiseContourIntegral;`.
  codeFencedSequenceSizeMin: 3,
  // At least 3 ticks or tildes are needed.
  contentTypeDocument: 'document',
  contentTypeFlow: 'flow',
  contentTypeContent: 'content',
  contentTypeString: 'string',
  contentTypeText: 'text',
  hardBreakPrefixSizeMin: 2,
  // At least 2 trailing spaces are needed.
  htmlRaw: 1,
  // Symbol for `<script>`
  htmlComment: 2,
  // Symbol for `<!---->`
  htmlInstruction: 3,
  // Symbol for `<?php?>`
  htmlDeclaration: 4,
  // Symbol for `<!doctype>`
  htmlCdata: 5,
  // Symbol for `<![CDATA[]]>`
  htmlBasic: 6,
  // Symbol for `<div`
  htmlComplete: 7,
  // Symbol for `<x>`
  htmlRawSizeMax: 8,
  // Length of `textarea`.
  linkResourceDestinationBalanceMax: 32,
  // See: <https://spec.commonmark.org/0.30/#link-destination>, <https://github.com/remarkjs/react-markdown/issues/658#issuecomment-984345577>
  linkReferenceSizeMax: 999,
  // See: <https://spec.commonmark.org/0.30/#link-label>
  listItemValueSizeMax: 10,
  // See: <https://spec.commonmark.org/0.30/#ordered-list-marker>
  numericBaseDecimal: 10,
  numericBaseHexadecimal: 0x10,
  tabSize: 4,
  // Tabs have a hard-coded size of 4, per CommonMark.
  thematicBreakMarkerCountMin: 3,
  // At least 3 asterisks, dashes, or underscores are needed.
  v8MaxSafeChunkSize: 10000 // V8 (and potentially others) have problems injecting giant arrays into other arrays, hence we operate in chunks.
};

/***/ }),

/***/ "./node_modules/micromark-util-symbol/types.js":
/*!*****************************************************!*\
  !*** ./node_modules/micromark-util-symbol/types.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "types": function() { return /* binding */ types; }
/* harmony export */ });
/**
 * This module is compiled away!
 *
 * Here is the list of all types of tokens exposed by micromark, with a short
 * explanation of what they include and where they are found.
 * In picking names, generally, the rule is to be as explicit as possible
 * instead of reusing names.
 * For example, there is a `definitionDestination` and a `resourceDestination`,
 * instead of one shared name.
 */

const types = {
  // Generic type for data, such as in a title, a destination, etc.
  data: 'data',
  // Generic type for syntactic whitespace (tabs, virtual spaces, spaces).
  // Such as, between a fenced code fence and an info string.
  whitespace: 'whitespace',
  // Generic type for line endings (line feed, carriage return, carriage return +
  // line feed).
  lineEnding: 'lineEnding',
  // A line ending, but ending a blank line.
  lineEndingBlank: 'lineEndingBlank',
  // Generic type for whitespace (tabs, virtual spaces, spaces) at the start of a
  // line.
  linePrefix: 'linePrefix',
  // Generic type for whitespace (tabs, virtual spaces, spaces) at the end of a
  // line.
  lineSuffix: 'lineSuffix',
  // Whole ATX heading:
  //
  // ```markdown
  // #
  // ## Alpha
  // ### Bravo ###
  // ```
  //
  // Includes `atxHeadingSequence`, `whitespace`, `atxHeadingText`.
  atxHeading: 'atxHeading',
  // Sequence of number signs in an ATX heading (`###`).
  atxHeadingSequence: 'atxHeadingSequence',
  // Content in an ATX heading (`alpha`).
  // Includes text.
  atxHeadingText: 'atxHeadingText',
  // Whole autolink (`<https://example.com>` or `<admin@example.com>`)
  // Includes `autolinkMarker` and `autolinkProtocol` or `autolinkEmail`.
  autolink: 'autolink',
  // Email autolink w/o markers (`admin@example.com`)
  autolinkEmail: 'autolinkEmail',
  // Marker around an `autolinkProtocol` or `autolinkEmail` (`<` or `>`).
  autolinkMarker: 'autolinkMarker',
  // Protocol autolink w/o markers (`https://example.com`)
  autolinkProtocol: 'autolinkProtocol',
  // A whole character escape (`\-`).
  // Includes `escapeMarker` and `characterEscapeValue`.
  characterEscape: 'characterEscape',
  // The escaped character (`-`).
  characterEscapeValue: 'characterEscapeValue',
  // A whole character reference (`&amp;`, `&#8800;`, or `&#x1D306;`).
  // Includes `characterReferenceMarker`, an optional
  // `characterReferenceMarkerNumeric`, in which case an optional
  // `characterReferenceMarkerHexadecimal`, and a `characterReferenceValue`.
  characterReference: 'characterReference',
  // The start or end marker (`&` or `;`).
  characterReferenceMarker: 'characterReferenceMarker',
  // Mark reference as numeric (`#`).
  characterReferenceMarkerNumeric: 'characterReferenceMarkerNumeric',
  // Mark reference as numeric (`x` or `X`).
  characterReferenceMarkerHexadecimal: 'characterReferenceMarkerHexadecimal',
  // Value of character reference w/o markers (`amp`, `8800`, or `1D306`).
  characterReferenceValue: 'characterReferenceValue',
  // Whole fenced code:
  //
  // ````markdown
  // ```js
  // alert(1)
  // ```
  // ````
  codeFenced: 'codeFenced',
  // A fenced code fence, including whitespace, sequence, info, and meta
  // (` ```js `).
  codeFencedFence: 'codeFencedFence',
  // Sequence of grave accent or tilde characters (` ``` `) in a fence.
  codeFencedFenceSequence: 'codeFencedFenceSequence',
  // Info word (`js`) in a fence.
  // Includes string.
  codeFencedFenceInfo: 'codeFencedFenceInfo',
  // Meta words (`highlight="1"`) in a fence.
  // Includes string.
  codeFencedFenceMeta: 'codeFencedFenceMeta',
  // A line of code.
  codeFlowValue: 'codeFlowValue',
  // Whole indented code:
  //
  // ```markdown
  //     alert(1)
  // ```
  //
  // Includes `lineEnding`, `linePrefix`, and `codeFlowValue`.
  codeIndented: 'codeIndented',
  // A text code (``` `alpha` ```).
  // Includes `codeTextSequence`, `codeTextData`, `lineEnding`, and can include
  // `codeTextPadding`.
  codeText: 'codeText',
  codeTextData: 'codeTextData',
  // A space or line ending right after or before a tick.
  codeTextPadding: 'codeTextPadding',
  // A text code fence (` `` `).
  codeTextSequence: 'codeTextSequence',
  // Whole content:
  //
  // ```markdown
  // [a]: b
  // c
  // =
  // d
  // ```
  //
  // Includes `paragraph` and `definition`.
  content: 'content',
  // Whole definition:
  //
  // ```markdown
  // [micromark]: https://github.com/micromark/micromark
  // ```
  //
  // Includes `definitionLabel`, `definitionMarker`, `whitespace`,
  // `definitionDestination`, and optionally `lineEnding` and `definitionTitle`.
  definition: 'definition',
  // Destination of a definition (`https://github.com/micromark/micromark` or
  // `<https://github.com/micromark/micromark>`).
  // Includes `definitionDestinationLiteral` or `definitionDestinationRaw`.
  definitionDestination: 'definitionDestination',
  // Enclosed destination of a definition
  // (`<https://github.com/micromark/micromark>`).
  // Includes `definitionDestinationLiteralMarker` and optionally
  // `definitionDestinationString`.
  definitionDestinationLiteral: 'definitionDestinationLiteral',
  // Markers of an enclosed definition destination (`<` or `>`).
  definitionDestinationLiteralMarker: 'definitionDestinationLiteralMarker',
  // Unenclosed destination of a definition
  // (`https://github.com/micromark/micromark`).
  // Includes `definitionDestinationString`.
  definitionDestinationRaw: 'definitionDestinationRaw',
  // Text in an destination (`https://github.com/micromark/micromark`).
  // Includes string.
  definitionDestinationString: 'definitionDestinationString',
  // Label of a definition (`[micromark]`).
  // Includes `definitionLabelMarker` and `definitionLabelString`.
  definitionLabel: 'definitionLabel',
  // Markers of a definition label (`[` or `]`).
  definitionLabelMarker: 'definitionLabelMarker',
  // Value of a definition label (`micromark`).
  // Includes string.
  definitionLabelString: 'definitionLabelString',
  // Marker between a label and a destination (`:`).
  definitionMarker: 'definitionMarker',
  // Title of a definition (`"x"`, `'y'`, or `(z)`).
  // Includes `definitionTitleMarker` and optionally `definitionTitleString`.
  definitionTitle: 'definitionTitle',
  // Marker around a title of a definition (`"`, `'`, `(`, or `)`).
  definitionTitleMarker: 'definitionTitleMarker',
  // Data without markers in a title (`z`).
  // Includes string.
  definitionTitleString: 'definitionTitleString',
  // Emphasis (`*alpha*`).
  // Includes `emphasisSequence` and `emphasisText`.
  emphasis: 'emphasis',
  // Sequence of emphasis markers (`*` or `_`).
  emphasisSequence: 'emphasisSequence',
  // Emphasis text (`alpha`).
  // Includes text.
  emphasisText: 'emphasisText',
  // The character escape marker (`\`).
  escapeMarker: 'escapeMarker',
  // A hard break created with a backslash (`\\n`).
  // Includes `escapeMarker` (does not include the line ending)
  hardBreakEscape: 'hardBreakEscape',
  // A hard break created with trailing spaces (`  \n`).
  // Does not include the line ending.
  hardBreakTrailing: 'hardBreakTrailing',
  // Flow HTML:
  //
  // ```markdown
  // <div
  // ```
  //
  // Inlcudes `lineEnding`, `htmlFlowData`.
  htmlFlow: 'htmlFlow',
  htmlFlowData: 'htmlFlowData',
  // HTML in text (the tag in `a <i> b`).
  // Includes `lineEnding`, `htmlTextData`.
  htmlText: 'htmlText',
  htmlTextData: 'htmlTextData',
  // Whole image (`![alpha](bravo)`, `![alpha][bravo]`, `![alpha][]`, or
  // `![alpha]`).
  // Includes `label` and an optional `resource` or `reference`.
  image: 'image',
  // Whole link label (`[*alpha*]`).
  // Includes `labelLink` or `labelImage`, `labelText`, and `labelEnd`.
  label: 'label',
  // Text in an label (`*alpha*`).
  // Includes text.
  labelText: 'labelText',
  // Start a link label (`[`).
  // Includes a `labelMarker`.
  labelLink: 'labelLink',
  // Start an image label (`![`).
  // Includes `labelImageMarker` and `labelMarker`.
  labelImage: 'labelImage',
  // Marker of a label (`[` or `]`).
  labelMarker: 'labelMarker',
  // Marker to start an image (`!`).
  labelImageMarker: 'labelImageMarker',
  // End a label (`]`).
  // Includes `labelMarker`.
  labelEnd: 'labelEnd',
  // Whole link (`[alpha](bravo)`, `[alpha][bravo]`, `[alpha][]`, or `[alpha]`).
  // Includes `label` and an optional `resource` or `reference`.
  link: 'link',
  // Whole paragraph:
  //
  // ```markdown
  // alpha
  // bravo.
  // ```
  //
  // Includes text.
  paragraph: 'paragraph',
  // A reference (`[alpha]` or `[]`).
  // Includes `referenceMarker` and an optional `referenceString`.
  reference: 'reference',
  // A reference marker (`[` or `]`).
  referenceMarker: 'referenceMarker',
  // Reference text (`alpha`).
  // Includes string.
  referenceString: 'referenceString',
  // A resource (`(https://example.com "alpha")`).
  // Includes `resourceMarker`, an optional `resourceDestination` with an optional
  // `whitespace` and `resourceTitle`.
  resource: 'resource',
  // A resource destination (`https://example.com`).
  // Includes `resourceDestinationLiteral` or `resourceDestinationRaw`.
  resourceDestination: 'resourceDestination',
  // A literal resource destination (`<https://example.com>`).
  // Includes `resourceDestinationLiteralMarker` and optionally
  // `resourceDestinationString`.
  resourceDestinationLiteral: 'resourceDestinationLiteral',
  // A resource destination marker (`<` or `>`).
  resourceDestinationLiteralMarker: 'resourceDestinationLiteralMarker',
  // A raw resource destination (`https://example.com`).
  // Includes `resourceDestinationString`.
  resourceDestinationRaw: 'resourceDestinationRaw',
  // Resource destination text (`https://example.com`).
  // Includes string.
  resourceDestinationString: 'resourceDestinationString',
  // A resource marker (`(` or `)`).
  resourceMarker: 'resourceMarker',
  // A resource title (`"alpha"`, `'alpha'`, or `(alpha)`).
  // Includes `resourceTitleMarker` and optionally `resourceTitleString`.
  resourceTitle: 'resourceTitle',
  // A resource title marker (`"`, `'`, `(`, or `)`).
  resourceTitleMarker: 'resourceTitleMarker',
  // Resource destination title (`alpha`).
  // Includes string.
  resourceTitleString: 'resourceTitleString',
  // Whole setext heading:
  //
  // ```markdown
  // alpha
  // bravo
  // =====
  // ```
  //
  // Includes `setextHeadingText`, `lineEnding`, `linePrefix`, and
  // `setextHeadingLine`.
  setextHeading: 'setextHeading',
  // Content in a setext heading (`alpha\nbravo`).
  // Includes text.
  setextHeadingText: 'setextHeadingText',
  // Underline in a setext heading, including whitespace suffix (`==`).
  // Includes `setextHeadingLineSequence`.
  setextHeadingLine: 'setextHeadingLine',
  // Sequence of equals or dash characters in underline in a setext heading (`-`).
  setextHeadingLineSequence: 'setextHeadingLineSequence',
  // Strong (`**alpha**`).
  // Includes `strongSequence` and `strongText`.
  strong: 'strong',
  // Sequence of strong markers (`**` or `__`).
  strongSequence: 'strongSequence',
  // Strong text (`alpha`).
  // Includes text.
  strongText: 'strongText',
  // Whole thematic break:
  //
  // ```markdown
  // * * *
  // ```
  //
  // Includes `thematicBreakSequence` and `whitespace`.
  thematicBreak: 'thematicBreak',
  // A sequence of one or more thematic break markers (`***`).
  thematicBreakSequence: 'thematicBreakSequence',
  // Whole block quote:
  //
  // ```markdown
  // > a
  // >
  // > b
  // ```
  //
  // Includes `blockQuotePrefix` and flow.
  blockQuote: 'blockQuote',
  // The `>` or `> ` of a block quote.
  blockQuotePrefix: 'blockQuotePrefix',
  // The `>` of a block quote prefix.
  blockQuoteMarker: 'blockQuoteMarker',
  // The optional ` ` of a block quote prefix.
  blockQuotePrefixWhitespace: 'blockQuotePrefixWhitespace',
  // Whole unordered list:
  //
  // ```markdown
  // - a
  //   b
  // ```
  //
  // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further
  // lines.
  listOrdered: 'listOrdered',
  // Whole ordered list:
  //
  // ```markdown
  // 1. a
  //    b
  // ```
  //
  // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further
  // lines.
  listUnordered: 'listUnordered',
  // The indent of further list item lines.
  listItemIndent: 'listItemIndent',
  // A marker, as in, `*`, `+`, `-`, `.`, or `)`.
  listItemMarker: 'listItemMarker',
  // The thing that starts a list item, such as `1. `.
  // Includes `listItemValue` if ordered, `listItemMarker`, and
  // `listItemPrefixWhitespace` (unless followed by a line ending).
  listItemPrefix: 'listItemPrefix',
  // The whitespace after a marker.
  listItemPrefixWhitespace: 'listItemPrefixWhitespace',
  // The numerical value of an ordered item.
  listItemValue: 'listItemValue',
  // Internal types used for subtokenizers, compiled away
  chunkDocument: 'chunkDocument',
  chunkContent: 'chunkContent',
  chunkFlow: 'chunkFlow',
  chunkText: 'chunkText',
  chunkString: 'chunkString'
};

/***/ }),

/***/ "./node_modules/micromark-util-symbol/values.js":
/*!******************************************************!*\
  !*** ./node_modules/micromark-util-symbol/values.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "values": function() { return /* binding */ values; }
/* harmony export */ });
// This module is compiled away!
//
// While micromark works based on character codes, this module includes the
// string versions of ’em.
// The C0 block, except for LF, CR, HT, and w/ the replacement character added,
// are available here.
const values = {
  ht: '\t',
  lf: '\n',
  cr: '\r',
  space: ' ',
  exclamationMark: '!',
  quotationMark: '"',
  numberSign: '#',
  dollarSign: '$',
  percentSign: '%',
  ampersand: '&',
  apostrophe: "'",
  leftParenthesis: '(',
  rightParenthesis: ')',
  asterisk: '*',
  plusSign: '+',
  comma: ',',
  dash: '-',
  dot: '.',
  slash: '/',
  digit0: '0',
  digit1: '1',
  digit2: '2',
  digit3: '3',
  digit4: '4',
  digit5: '5',
  digit6: '6',
  digit7: '7',
  digit8: '8',
  digit9: '9',
  colon: ':',
  semicolon: ';',
  lessThan: '<',
  equalsTo: '=',
  greaterThan: '>',
  questionMark: '?',
  atSign: '@',
  uppercaseA: 'A',
  uppercaseB: 'B',
  uppercaseC: 'C',
  uppercaseD: 'D',
  uppercaseE: 'E',
  uppercaseF: 'F',
  uppercaseG: 'G',
  uppercaseH: 'H',
  uppercaseI: 'I',
  uppercaseJ: 'J',
  uppercaseK: 'K',
  uppercaseL: 'L',
  uppercaseM: 'M',
  uppercaseN: 'N',
  uppercaseO: 'O',
  uppercaseP: 'P',
  uppercaseQ: 'Q',
  uppercaseR: 'R',
  uppercaseS: 'S',
  uppercaseT: 'T',
  uppercaseU: 'U',
  uppercaseV: 'V',
  uppercaseW: 'W',
  uppercaseX: 'X',
  uppercaseY: 'Y',
  uppercaseZ: 'Z',
  leftSquareBracket: '[',
  backslash: '\\',
  rightSquareBracket: ']',
  caret: '^',
  underscore: '_',
  graveAccent: '`',
  lowercaseA: 'a',
  lowercaseB: 'b',
  lowercaseC: 'c',
  lowercaseD: 'd',
  lowercaseE: 'e',
  lowercaseF: 'f',
  lowercaseG: 'g',
  lowercaseH: 'h',
  lowercaseI: 'i',
  lowercaseJ: 'j',
  lowercaseK: 'k',
  lowercaseL: 'l',
  lowercaseM: 'm',
  lowercaseN: 'n',
  lowercaseO: 'o',
  lowercaseP: 'p',
  lowercaseQ: 'q',
  lowercaseR: 'r',
  lowercaseS: 's',
  lowercaseT: 't',
  lowercaseU: 'u',
  lowercaseV: 'v',
  lowercaseW: 'w',
  lowercaseX: 'x',
  lowercaseY: 'y',
  lowercaseZ: 'z',
  leftCurlyBrace: '{',
  verticalBar: '|',
  rightCurlyBrace: '}',
  tilde: '~',
  replacementCharacter: '�'
};

/***/ }),

/***/ "./node_modules/micromark/dev/lib/constructs.js":
/*!******************************************************!*\
  !*** ./node_modules/micromark/dev/lib/constructs.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "attentionMarkers": function() { return /* binding */ attentionMarkers; },
/* harmony export */   "contentInitial": function() { return /* binding */ contentInitial; },
/* harmony export */   "disable": function() { return /* binding */ disable; },
/* harmony export */   "document": function() { return /* binding */ document; },
/* harmony export */   "flow": function() { return /* binding */ flow; },
/* harmony export */   "flowInitial": function() { return /* binding */ flowInitial; },
/* harmony export */   "insideSpan": function() { return /* binding */ insideSpan; },
/* harmony export */   "string": function() { return /* binding */ string; },
/* harmony export */   "text": function() { return /* binding */ text; }
/* harmony export */ });
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/list.js");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/block-quote.js");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/definition.js");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/code-indented.js");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/heading-atx.js");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/thematic-break.js");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/setext-underline.js");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/html-flow.js");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/code-fenced.js");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/character-reference.js");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/character-escape.js");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/line-ending.js");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/label-start-image.js");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/attention.js");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/autolink.js");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/html-text.js");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/label-start-link.js");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/hard-break-escape.js");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/label-end.js");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/code-text.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var _initialize_text_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./initialize/text.js */ "./node_modules/micromark/dev/lib/initialize/text.js");
/**
 * @typedef {import('micromark-util-types').Extension} Extension
 */





/** @type {Extension['document']} */
const document = {
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.asterisk]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.plusSign]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.dash]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.digit0]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.digit1]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.digit2]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.digit3]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.digit4]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.digit5]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.digit6]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.digit7]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.digit8]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.digit9]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.list,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.greaterThan]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_2__.blockQuote
};

/** @type {Extension['contentInitial']} */
const contentInitial = {
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.leftSquareBracket]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_3__.definition
};

/** @type {Extension['flowInitial']} */
const flowInitial = {
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.horizontalTab]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_4__.codeIndented,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.virtualSpace]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_4__.codeIndented,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.space]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_4__.codeIndented
};

/** @type {Extension['flow']} */
const flow = {
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.numberSign]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_5__.headingAtx,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.asterisk]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_6__.thematicBreak,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.dash]: [micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_7__.setextUnderline, micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_6__.thematicBreak],
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.lessThan]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_8__.htmlFlow,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.equalsTo]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_7__.setextUnderline,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.underscore]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_6__.thematicBreak,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.graveAccent]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_9__.codeFenced,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.tilde]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_9__.codeFenced
};

/** @type {Extension['string']} */
const string = {
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.ampersand]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_10__.characterReference,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.backslash]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_11__.characterEscape
};

/** @type {Extension['text']} */
const text = {
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.carriageReturn]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_12__.lineEnding,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.lineFeed]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_12__.lineEnding,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.carriageReturnLineFeed]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_12__.lineEnding,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.exclamationMark]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_13__.labelStartImage,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.ampersand]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_10__.characterReference,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.asterisk]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_14__.attention,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.lessThan]: [micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_15__.autolink, micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_16__.htmlText],
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.leftSquareBracket]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_17__.labelStartLink,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.backslash]: [micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_18__.hardBreakEscape, micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_11__.characterEscape],
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.rightSquareBracket]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_19__.labelEnd,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.underscore]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_14__.attention,
  [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.graveAccent]: micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_20__.codeText
};

/** @type {Extension['insideSpan']} */
const insideSpan = {
  null: [micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_14__.attention, _initialize_text_js__WEBPACK_IMPORTED_MODULE_21__.resolver]
};

/** @type {Extension['attentionMarkers']} */
const attentionMarkers = {
  null: [micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.asterisk, micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.underscore]
};

/** @type {Extension['disable']} */
const disable = {
  null: []
};

/***/ }),

/***/ "./node_modules/micromark/dev/lib/create-tokenizer.js":
/*!************************************************************!*\
  !*** ./node_modules/micromark/dev/lib/create-tokenizer.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createTokenizer": function() { return /* binding */ createTokenizer; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_chunked__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-chunked */ "./node_modules/micromark-util-chunked/dev/index.js");
/* harmony import */ var micromark_util_resolve_all__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-resolve-all */ "./node_modules/micromark-util-resolve-all/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_values_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-util-symbol/values.js */ "./node_modules/micromark-util-symbol/values.js");
/**
 * @typedef {import('micromark-util-types').Code} Code
 * @typedef {import('micromark-util-types').Chunk} Chunk
 * @typedef {import('micromark-util-types').Point} Point
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').Effects} Effects
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').ParseContext} ParseContext
 */

/**
 * @typedef Info
 * @property {() => void} restore
 * @property {number} from
 *
 * @callback ReturnHandle
 *   Handle a successful run.
 * @param {Construct} construct
 * @param {Info} info
 * @returns {void}
 */








const debug = debug__WEBPACK_IMPORTED_MODULE_1__('micromark');

/**
 * Create a tokenizer.
 * Tokenizers deal with one type of data (e.g., containers, flow, text).
 * The parser is the object dealing with it all.
 * `initialize` works like other constructs, except that only its `tokenize`
 * function is used, in which case it doesn’t receive an `ok` or `nok`.
 * `from` can be given to set the point before the first character, although
 * when further lines are indented, they must be set with `defineSkip`.
 *
 * @param {ParseContext} parser
 * @param {InitialConstruct} initialize
 * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]
 * @returns {TokenizeContext}
 */
function createTokenizer(parser, initialize, from) {
  /** @type {Point} */
  let point = Object.assign(from ? Object.assign({}, from) : {
    line: 1,
    column: 1,
    offset: 0
  }, {
    _index: 0,
    _bufferIndex: -1
  });
  /** @type {Record<string, number>} */
  const columnStart = {};
  /** @type {Array<Construct>} */
  const resolveAllConstructs = [];
  /** @type {Array<Chunk>} */
  let chunks = [];
  /** @type {Array<Token>} */
  let stack = [];
  /** @type {boolean|undefined} */
  let consumed = true;

  /**
   * Tools used for tokenizing.
   *
   * @type {Effects}
   */
  const effects = {
    consume,
    enter,
    exit,
    attempt: constructFactory(onsuccessfulconstruct),
    check: constructFactory(onsuccessfulcheck),
    interrupt: constructFactory(onsuccessfulcheck, {
      interrupt: true
    })
  };

  /**
   * State and tools for resolving and serializing.
   *
   * @type {TokenizeContext}
   */
  const context = {
    previous: micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof,
    code: micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof,
    containerState: {},
    events: [],
    parser,
    sliceStream,
    sliceSerialize,
    now,
    defineSkip,
    write
  };

  /**
   * The state function.
   *
   * @type {State|void}
   */
  let state = initialize.tokenize.call(context, effects);

  /**
   * Track which character we expect to be consumed, to catch bugs.
   *
   * @type {Code}
   */
  let expectedCode;
  if (initialize.resolveAll) {
    resolveAllConstructs.push(initialize);
  }
  return context;

  /** @type {TokenizeContext['write']} */
  function write(slice) {
    chunks = (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_3__.push)(chunks, slice);
    main();

    // Exit if we’re not done, resolve might change stuff.
    if (chunks[chunks.length - 1] !== micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.eof) {
      return [];
    }
    addResult(initialize, 0);

    // Otherwise, resolve, and exit.
    context.events = (0,micromark_util_resolve_all__WEBPACK_IMPORTED_MODULE_4__.resolveAll)(resolveAllConstructs, context.events, context);
    return context.events;
  }

  //
  // Tools.
  //

  /** @type {TokenizeContext['sliceSerialize']} */
  function sliceSerialize(token, expandTabs) {
    return serializeChunks(sliceStream(token), expandTabs);
  }

  /** @type {TokenizeContext['sliceStream']} */
  function sliceStream(token) {
    return sliceChunks(chunks, token);
  }

  /** @type {TokenizeContext['now']} */
  function now() {
    return Object.assign({}, point);
  }

  /** @type {TokenizeContext['defineSkip']} */
  function defineSkip(value) {
    columnStart[value.line] = value.column;
    accountForPotentialSkip();
    debug('position: define skip: `%j`', point);
  }

  //
  // State management.
  //

  /**
   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by
   * `consume`).
   * Here is where we walk through the chunks, which either include strings of
   * several characters, or numerical character codes.
   * The reason to do this in a loop instead of a call is so the stack can
   * drain.
   *
   * @returns {void}
   */
  function main() {
    /** @type {number} */
    let chunkIndex;
    while (point._index < chunks.length) {
      const chunk = chunks[point._index];

      // If we’re in a buffer chunk, loop through it.
      if (typeof chunk === 'string') {
        chunkIndex = point._index;
        if (point._bufferIndex < 0) {
          point._bufferIndex = 0;
        }
        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {
          go(chunk.charCodeAt(point._bufferIndex));
        }
      } else {
        go(chunk);
      }
    }
  }

  /**
   * Deal with one code.
   *
   * @param {Code} code
   * @returns {void}
   */
  function go(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(consumed === true, 'expected character to be consumed');
    consumed = undefined;
    debug('main: passing `%s` to %s', code, state && state.name);
    expectedCode = code;
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(typeof state === 'function', 'expected state');
    state = state(code);
  }

  /** @type {Effects['consume']} */
  function consume(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === expectedCode, 'expected given code to equal expected code');
    debug('consume: `%s`', code);
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(consumed === undefined, 'expected code to not have been consumed: this might be because `return x(code)` instead of `return x` was used');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === null ? context.events.length === 0 || context.events[context.events.length - 1][0] === 'exit' : context.events[context.events.length - 1][0] === 'enter', 'expected last token to be open');
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEnding)(code)) {
      point.line++;
      point.column = 1;
      point.offset += code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.carriageReturnLineFeed ? 2 : 1;
      accountForPotentialSkip();
      debug('position: after eol: `%j`', point);
    } else if (code !== micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.virtualSpace) {
      point.column++;
      point.offset++;
    }

    // Not in a string chunk.
    if (point._bufferIndex < 0) {
      point._index++;
    } else {
      point._bufferIndex++;

      // At end of string chunk.
      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference
      // strings.
      if (point._bufferIndex === chunks[point._index].length) {
        point._bufferIndex = -1;
        point._index++;
      }
    }

    // Expose the previous character.
    context.previous = code;

    // Mark as consumed.
    consumed = true;
  }

  /** @type {Effects['enter']} */
  function enter(type, fields) {
    /** @type {Token} */
    // @ts-expect-error Patch instead of assign required fields to help GC.
    const token = fields || {};
    token.type = type;
    token.start = now();
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(typeof type === 'string', 'expected string type');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(type.length > 0, 'expected non-empty string');
    debug('enter: `%s`', type);
    context.events.push(['enter', token, context]);
    stack.push(token);
    return token;
  }

  /** @type {Effects['exit']} */
  function exit(type) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(typeof type === 'string', 'expected string type');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(type.length > 0, 'expected non-empty string');
    const token = stack.pop();
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(token, 'cannot close w/o open tokens');
    token.end = now();
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(type === token.type, 'expected exit token to match current token');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(!(token.start._index === token.end._index && token.start._bufferIndex === token.end._bufferIndex), 'expected non-empty token (`' + type + '`)');
    debug('exit: `%s`', token.type);
    context.events.push(['exit', token, context]);
    return token;
  }

  /**
   * Use results.
   *
   * @type {ReturnHandle}
   */
  function onsuccessfulconstruct(construct, info) {
    addResult(construct, info.from);
  }

  /**
   * Discard results.
   *
   * @type {ReturnHandle}
   */
  function onsuccessfulcheck(_, info) {
    info.restore();
  }

  /**
   * Factory to attempt/check/interrupt.
   *
   * @param {ReturnHandle} onreturn
   * @param {Record<string, unknown>} [fields]
   */
  function constructFactory(onreturn, fields) {
    return hook;

    /**
     * Handle either an object mapping codes to constructs, a list of
     * constructs, or a single construct.
     *
     * @param {Construct|Array<Construct>|ConstructRecord} constructs
     * @param {State} returnState
     * @param {State} [bogusState]
     * @returns {State}
     */
    function hook(constructs, returnState, bogusState) {
      /** @type {Array<Construct>} */
      let listOfConstructs;
      /** @type {number} */
      let constructIndex;
      /** @type {Construct} */
      let currentConstruct;
      /** @type {Info} */
      let info;
      return Array.isArray(constructs) ? /* c8 ignore next 1 */
      handleListOfConstructs(constructs) : 'tokenize' in constructs ?
      // @ts-expect-error Looks like a construct.
      handleListOfConstructs([constructs]) : handleMapOfConstructs(constructs);

      /**
       * Handle a list of construct.
       *
       * @param {ConstructRecord} map
       * @returns {State}
       */
      function handleMapOfConstructs(map) {
        return start;

        /** @type {State} */
        function start(code) {
          const def = code !== null && map[code];
          const all = code !== null && map.null;
          const list = [
          // To do: add more extension tests.
          /* c8 ignore next 2 */
          ...(Array.isArray(def) ? def : def ? [def] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];
          return handleListOfConstructs(list)(code);
        }
      }

      /**
       * Handle a list of construct.
       *
       * @param {Array<Construct>} list
       * @returns {State}
       */
      function handleListOfConstructs(list) {
        listOfConstructs = list;
        constructIndex = 0;
        if (list.length === 0) {
          (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(bogusState, 'expected `bogusState` to be given');
          return bogusState;
        }
        return handleConstruct(list[constructIndex]);
      }

      /**
       * Handle a single construct.
       *
       * @param {Construct} construct
       * @returns {State}
       */
      function handleConstruct(construct) {
        return start;

        /** @type {State} */
        function start(code) {
          // To do: not needed to store if there is no bogus state, probably?
          // Currently doesn’t work because `inspect` in document does a check
          // w/o a bogus, which doesn’t make sense. But it does seem to help perf
          // by not storing.
          info = store();
          currentConstruct = construct;
          if (!construct.partial) {
            context.currentConstruct = construct;
          }
          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {
            return nok(code);
          }
          return construct.tokenize.call(
          // If we do have fields, create an object w/ `context` as its
          // prototype.
          // This allows a “live binding”, which is needed for `interrupt`.
          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);
        }
      }

      /** @type {State} */
      function ok(code) {
        (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === expectedCode, 'expected code');
        consumed = true;
        onreturn(currentConstruct, info);
        return returnState;
      }

      /** @type {State} */
      function nok(code) {
        (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === expectedCode, 'expected code');
        consumed = true;
        info.restore();
        if (++constructIndex < listOfConstructs.length) {
          return handleConstruct(listOfConstructs[constructIndex]);
        }
        return bogusState;
      }
    }
  }

  /**
   * @param {Construct} construct
   * @param {number} from
   * @returns {void}
   */
  function addResult(construct, from) {
    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
      resolveAllConstructs.push(construct);
    }
    if (construct.resolve) {
      (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_3__.splice)(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));
    }
    if (construct.resolveTo) {
      context.events = construct.resolveTo(context.events, context);
    }
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(construct.partial || context.events.length === 0 || context.events[context.events.length - 1][0] === 'exit', 'expected last token to end');
  }

  /**
   * Store state.
   *
   * @returns {Info}
   */
  function store() {
    const startPoint = now();
    const startPrevious = context.previous;
    const startCurrentConstruct = context.currentConstruct;
    const startEventsIndex = context.events.length;
    const startStack = Array.from(stack);
    return {
      restore,
      from: startEventsIndex
    };

    /**
     * Restore state.
     *
     * @returns {void}
     */
    function restore() {
      point = startPoint;
      context.previous = startPrevious;
      context.currentConstruct = startCurrentConstruct;
      context.events.length = startEventsIndex;
      stack = startStack;
      accountForPotentialSkip();
      debug('position: restore: `%j`', point);
    }
  }

  /**
   * Move the current point a bit forward in the line when it’s on a column
   * skip.
   *
   * @returns {void}
   */
  function accountForPotentialSkip() {
    if (point.line in columnStart && point.column < 2) {
      point.column = columnStart[point.line];
      point.offset += columnStart[point.line] - 1;
    }
  }
}

/**
 * Get the chunks from a slice of chunks in the range of a token.
 *
 * @param {Array<Chunk>} chunks
 * @param {Pick<Token, 'start'|'end'>} token
 * @returns {Array<Chunk>}
 */
function sliceChunks(chunks, token) {
  const startIndex = token.start._index;
  const startBufferIndex = token.start._bufferIndex;
  const endIndex = token.end._index;
  const endBufferIndex = token.end._bufferIndex;
  /** @type {Array<Chunk>} */
  let view;
  if (startIndex === endIndex) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(endBufferIndex > -1, 'expected non-negative end buffer index');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(startBufferIndex > -1, 'expected non-negative start buffer index');
    // @ts-expect-error `_bufferIndex` is used on string chunks.
    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
  } else {
    view = chunks.slice(startIndex, endIndex);
    if (startBufferIndex > -1) {
      // @ts-expect-error `_bufferIndex` is used on string chunks.
      view[0] = view[0].slice(startBufferIndex);
    }
    if (endBufferIndex > 0) {
      // @ts-expect-error `_bufferIndex` is used on string chunks.
      view.push(chunks[endIndex].slice(0, endBufferIndex));
    }
  }
  return view;
}

/**
 * Get the string value of a slice of chunks.
 *
 * @param {Array<Chunk>} chunks
 * @param {boolean} [expandTabs=false]
 * @returns {string}
 */
function serializeChunks(chunks, expandTabs) {
  let index = -1;
  /** @type {Array<string>} */
  const result = [];
  /** @type {boolean|undefined} */
  let atTab;
  while (++index < chunks.length) {
    const chunk = chunks[index];
    /** @type {string} */
    let value;
    if (typeof chunk === 'string') {
      value = chunk;
    } else switch (chunk) {
      case micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.carriageReturn:
        {
          value = micromark_util_symbol_values_js__WEBPACK_IMPORTED_MODULE_6__.values.cr;
          break;
        }
      case micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.lineFeed:
        {
          value = micromark_util_symbol_values_js__WEBPACK_IMPORTED_MODULE_6__.values.lf;
          break;
        }
      case micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.carriageReturnLineFeed:
        {
          value = micromark_util_symbol_values_js__WEBPACK_IMPORTED_MODULE_6__.values.cr + micromark_util_symbol_values_js__WEBPACK_IMPORTED_MODULE_6__.values.lf;
          break;
        }
      case micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.horizontalTab:
        {
          value = expandTabs ? micromark_util_symbol_values_js__WEBPACK_IMPORTED_MODULE_6__.values.space : micromark_util_symbol_values_js__WEBPACK_IMPORTED_MODULE_6__.values.ht;
          break;
        }
      case micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.virtualSpace:
        {
          if (!expandTabs && atTab) continue;
          value = micromark_util_symbol_values_js__WEBPACK_IMPORTED_MODULE_6__.values.space;
          break;
        }
      default:
        {
          (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(typeof chunk === 'number', 'expected number');
          // Currently only replacement character.
          value = String.fromCharCode(chunk);
        }
    }
    atTab = chunk === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_2__.codes.horizontalTab;
    result.push(value);
  }
  return result.join('');
}

/***/ }),

/***/ "./node_modules/micromark/dev/lib/initialize/content.js":
/*!**************************************************************!*\
  !*** ./node_modules/micromark/dev/lib/initialize/content.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "content": function() { return /* binding */ content; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-factory-space */ "./node_modules/micromark-factory-space/dev/index.js");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').Initializer} Initializer
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').State} State
 */








/** @type {InitialConstruct} */
const content = {
  tokenize: initializeContent
};

/** @type {Initializer} */
function initializeContent(effects) {
  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);
  /** @type {Token} */
  let previous;
  return contentStart;

  /** @type {State} */
  function afterContentStartConstruct(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code), 'expected eol or eof');
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {
      effects.consume(code);
      return;
    }
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.lineEnding);
    effects.consume(code);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.lineEnding);
    return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_4__.factorySpace)(effects, contentStart, micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.linePrefix);
  }

  /** @type {State} */
  function paragraphInitial(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code !== micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof && !(0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code), 'expected anything other than a line ending or EOF');
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.paragraph);
    return lineStart(code);
  }

  /** @type {State} */
  function lineStart(code) {
    const token = effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.chunkText, {
      contentType: micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_5__.constants.contentTypeText,
      previous
    });
    if (previous) {
      previous.next = token;
    }
    previous = token;
    return data(code);
  }

  /** @type {State} */
  function data(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_1__.codes.eof) {
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.chunkText);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.paragraph);
      effects.consume(code);
      return;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_2__.markdownLineEnding)(code)) {
      effects.consume(code);
      effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_3__.types.chunkText);
      return lineStart;
    }

    // Data.
    effects.consume(code);
    return data;
  }
}

/***/ }),

/***/ "./node_modules/micromark/dev/lib/initialize/document.js":
/*!***************************************************************!*\
  !*** ./node_modules/micromark/dev/lib/initialize/document.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "document": function() { return /* binding */ document; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-factory-space */ "./node_modules/micromark-factory-space/dev/index.js");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/* harmony import */ var micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-chunked */ "./node_modules/micromark-util-chunked/dev/index.js");
/**
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').Initializer} Initializer
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
 * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
 * @typedef {import('micromark-util-types').Token} Token
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Point} Point
 */

/**
 * @typedef {Record<string, unknown>} StackState
 * @typedef {[Construct, StackState]} StackItem
 */









/** @type {InitialConstruct} */
const document = {
  tokenize: initializeDocument
};

/** @type {Construct} */
const containerConstruct = {
  tokenize: tokenizeContainer
};

/** @type {Initializer} */
function initializeDocument(effects) {
  const self = this;
  /** @type {Array<StackItem>} */
  const stack = [];
  let continued = 0;
  /** @type {TokenizeContext|undefined} */
  let childFlow;
  /** @type {Token|undefined} */
  let childToken;
  /** @type {number} */
  let lineStartOffset;
  return start;

  /** @type {State} */
  function start(code) {
    // First we iterate through the open blocks, starting with the root
    // document, and descending through last children down to the last open
    // block.
    // Each block imposes a condition that the line must satisfy if the block is
    // to remain open.
    // For example, a block quote requires a `>` character.
    // A paragraph requires a non-blank line.
    // In this phase we may match all or just some of the open blocks.
    // But we cannot close unmatched blocks yet, because we may have a lazy
    // continuation line.
    if (continued < stack.length) {
      const item = stack[continued];
      self.containerState = item[1];
      (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(item[0].continuation, 'expected `continuation` to be defined on container construct');
      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);
    }

    // Done.
    return checkNewContainers(code);
  }

  /** @type {State} */
  function documentContinue(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(self.containerState, 'expected `containerState` to be defined after continuation');
    continued++;

    // Note: this field is called `_closeFlow` but it also closes containers.
    // Perhaps a good idea to rename it but it’s already used in the wild by
    // extensions.
    if (self.containerState._closeFlow) {
      self.containerState._closeFlow = undefined;
      if (childFlow) {
        closeFlow();
      }

      // Note: this algorithm for moving events around is similar to the
      // algorithm when dealing with lazy lines in `writeToChild`.
      const indexBeforeExits = self.events.length;
      let indexBeforeFlow = indexBeforeExits;
      /** @type {Point|undefined} */
      let point;

      // Find the flow chunk.
      while (indexBeforeFlow--) {
        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.chunkFlow) {
          point = self.events[indexBeforeFlow][1].end;
          break;
        }
      }
      (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(point, 'could not find previous flow chunk');
      exitContainers(continued);

      // Fix positions.
      let index = indexBeforeExits;
      while (index < self.events.length) {
        self.events[index][1].end = Object.assign({}, point);
        index++;
      }

      // Inject the exits earlier (they’re still also at the end).
      (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.splice)(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));

      // Discard the duplicate exits.
      self.events.length = index;
      return checkNewContainers(code);
    }
    return start(code);
  }

  /** @type {State} */
  function checkNewContainers(code) {
    // Next, after consuming the continuation markers for existing blocks, we
    // look for new block starts (e.g. `>` for a block quote).
    // If we encounter a new block start, we close any blocks unmatched in
    // step 1 before creating the new block as a child of the last matched
    // block.
    if (continued === stack.length) {
      // No need to `check` whether there’s a container, of `exitContainers`
      // would be moot.
      // We can instead immediately `attempt` to parse one.
      if (!childFlow) {
        return documentContinued(code);
      }

      // If we have concrete content, such as block HTML or fenced code,
      // we can’t have containers “pierce” into them, so we can immediately
      // start.
      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
        return flowStart(code);
      }

      // If we do have flow, it could still be a blank line,
      // but we’d be interrupting it w/ a new container if there’s a current
      // construct.
      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);
    }

    // Check if there is a new container.
    self.containerState = {};
    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);
  }

  /** @type {State} */
  function thereIsANewContainer(code) {
    if (childFlow) closeFlow();
    exitContainers(continued);
    return documentContinued(code);
  }

  /** @type {State} */
  function thereIsNoNewContainer(code) {
    self.parser.lazy[self.now().line] = continued !== stack.length;
    lineStartOffset = self.now().offset;
    return flowStart(code);
  }

  /** @type {State} */
  function documentContinued(code) {
    // Try new containers.
    self.containerState = {};
    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);
  }

  /** @type {State} */
  function containerContinue(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(self.currentConstruct, 'expected `currentConstruct` to be defined on tokenizer');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(self.containerState, 'expected `containerState` to be defined on tokenizer');
    continued++;
    stack.push([self.currentConstruct, self.containerState]);
    // Try another.
    return documentContinued(code);
  }

  /** @type {State} */
  function flowStart(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof) {
      if (childFlow) closeFlow();
      exitContainers(0);
      effects.consume(code);
      return;
    }
    childFlow = childFlow || self.parser.flow(self.now());
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.chunkFlow, {
      contentType: micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_4__.constants.contentTypeFlow,
      previous: childToken,
      _tokenizer: childFlow
    });
    return flowContinue(code);
  }

  /** @type {State} */
  function flowContinue(code) {
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof) {
      writeToChild(effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.chunkFlow), true);
      exitContainers(0);
      effects.consume(code);
      return;
    }
    if ((0,micromark_util_character__WEBPACK_IMPORTED_MODULE_5__.markdownLineEnding)(code)) {
      effects.consume(code);
      writeToChild(effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.chunkFlow));
      // Get ready for the next line.
      continued = 0;
      self.interrupt = undefined;
      return start;
    }
    effects.consume(code);
    return flowContinue;
  }

  /**
   * @param {Token} token
   * @param {boolean} [eof]
   * @returns {void}
   */
  function writeToChild(token, eof) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(childFlow, 'expected `childFlow` to be defined when continuing');
    const stream = self.sliceStream(token);
    if (eof) stream.push(null);
    token.previous = childToken;
    if (childToken) childToken.next = token;
    childToken = token;
    childFlow.defineSkip(token.start);
    childFlow.write(stream);

    // Alright, so we just added a lazy line:
    //
    // ```markdown
    // > a
    // b.
    //
    // Or:
    //
    // > ~~~c
    // d
    //
    // Or:
    //
    // > | e |
    // f
    // ```
    //
    // The construct in the second example (fenced code) does not accept lazy
    // lines, so it marked itself as done at the end of its first line, and
    // then the content construct parses `d`.
    // Most constructs in markdown match on the first line: if the first line
    // forms a construct, a non-lazy line can’t “unmake” it.
    //
    // The construct in the third example is potentially a GFM table, and
    // those are *weird*.
    // It *could* be a table, from the first line, if the following line
    // matches a condition.
    // In this case, that second line is lazy, which “unmakes” the first line
    // and turns the whole into one content block.
    //
    // We’ve now parsed the non-lazy and the lazy line, and can figure out
    // whether the lazy line started a new flow block.
    // If it did, we exit the current containers between the two flow blocks.
    if (self.parser.lazy[token.start.line]) {
      let index = childFlow.events.length;
      while (index--) {
        if (
        // The token starts before the line ending…
        childFlow.events[index][1].start.offset < lineStartOffset && (
        // …and either is not ended yet…
        !childFlow.events[index][1].end ||
        // …or ends after it.
        childFlow.events[index][1].end.offset > lineStartOffset)) {
          // Exit: there’s still something open, which means it’s a lazy line
          // part of something.
          return;
        }
      }

      // Note: this algorithm for moving events around is similar to the
      // algorithm when closing flow in `documentContinue`.
      const indexBeforeExits = self.events.length;
      let indexBeforeFlow = indexBeforeExits;
      /** @type {boolean|undefined} */
      let seen;
      /** @type {Point|undefined} */
      let point;

      // Find the previous chunk (the one before the lazy line).
      while (indexBeforeFlow--) {
        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.chunkFlow) {
          if (seen) {
            point = self.events[indexBeforeFlow][1].end;
            break;
          }
          seen = true;
        }
      }
      (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(point, 'could not find previous flow chunk');
      exitContainers(continued);

      // Fix positions.
      index = indexBeforeExits;
      while (index < self.events.length) {
        self.events[index][1].end = Object.assign({}, point);
        index++;
      }

      // Inject the exits earlier (they’re still also at the end).
      (0,micromark_util_chunked__WEBPACK_IMPORTED_MODULE_2__.splice)(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));

      // Discard the duplicate exits.
      self.events.length = index;
    }
  }

  /**
   * @param {number} size
   * @returns {void}
   */
  function exitContainers(size) {
    let index = stack.length;

    // Exit open containers.
    while (index-- > size) {
      const entry = stack[index];
      self.containerState = entry[1];
      (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(entry[0].exit, 'expected `exit` to be defined on container construct');
      entry[0].exit.call(self, effects);
    }
    stack.length = size;
  }
  function closeFlow() {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(self.containerState, 'expected `containerState` to be defined when closing flow');
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(childFlow, 'expected `childFlow` to be defined when closing it');
    childFlow.write([micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_3__.codes.eof]);
    childToken = undefined;
    childFlow = undefined;
    self.containerState._closeFlow = undefined;
  }
}

/** @type {Tokenizer} */
function tokenizeContainer(effects, ok, nok) {
  return (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_6__.factorySpace)(effects, effects.attempt(this.parser.constructs.document, ok, nok), micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.linePrefix, this.parser.constructs.disable.null.includes('codeIndented') ? undefined : micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_4__.constants.tabSize);
}

/***/ }),

/***/ "./node_modules/micromark/dev/lib/initialize/flow.js":
/*!***********************************************************!*\
  !*** ./node_modules/micromark/dev/lib/initialize/flow.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "flow": function() { return /* binding */ flow; }
/* harmony export */ });
/* harmony import */ var uvu_assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uvu/assert */ "./node_modules/uvu/assert/index.mjs");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/blank-line.js");
/* harmony import */ var micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! micromark-core-commonmark */ "./node_modules/micromark-core-commonmark/dev/lib/content.js");
/* harmony import */ var micromark_factory_space__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-factory-space */ "./node_modules/micromark-factory-space/dev/index.js");
/* harmony import */ var micromark_util_character__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! micromark-util-character */ "./node_modules/micromark-util-character/dev/index.js");
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').Initializer} Initializer
 * @typedef {import('micromark-util-types').State} State
 */








/** @type {InitialConstruct} */
const flow = {
  tokenize: initializeFlow
};

/** @type {Initializer} */
function initializeFlow(effects) {
  const self = this;
  const initial = effects.attempt(
  // Try to parse a blank line.
  micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_1__.blankLine, atBlankEnding,
  // Try to parse initial flow (essentially, only code).
  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, (0,micromark_factory_space__WEBPACK_IMPORTED_MODULE_2__.factorySpace)(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(micromark_core_commonmark__WEBPACK_IMPORTED_MODULE_3__.content, afterConstruct)), micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.linePrefix)));
  return initial;

  /** @type {State} */
  function atBlankEnding(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_5__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_6__.markdownLineEnding)(code), 'expected eol or eof');
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_5__.codes.eof) {
      effects.consume(code);
      return;
    }
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.lineEndingBlank);
    effects.consume(code);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.lineEndingBlank);
    self.currentConstruct = undefined;
    return initial;
  }

  /** @type {State} */
  function afterConstruct(code) {
    (0,uvu_assert__WEBPACK_IMPORTED_MODULE_0__.ok)(code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_5__.codes.eof || (0,micromark_util_character__WEBPACK_IMPORTED_MODULE_6__.markdownLineEnding)(code), 'expected eol or eof');
    if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_5__.codes.eof) {
      effects.consume(code);
      return;
    }
    effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.lineEnding);
    effects.consume(code);
    effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_4__.types.lineEnding);
    self.currentConstruct = undefined;
    return initial;
  }
}

/***/ }),

/***/ "./node_modules/micromark/dev/lib/initialize/text.js":
/*!***********************************************************!*\
  !*** ./node_modules/micromark/dev/lib/initialize/text.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resolver": function() { return /* binding */ resolver; },
/* harmony export */   "string": function() { return /* binding */ string; },
/* harmony export */   "text": function() { return /* binding */ text; }
/* harmony export */ });
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/* harmony import */ var micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/types.js */ "./node_modules/micromark-util-symbol/types.js");
/**
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').Initializer} Initializer
 * @typedef {import('micromark-util-types').Construct} Construct
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').State} State
 * @typedef {import('micromark-util-types').Code} Code
 */




const resolver = {
  resolveAll: createResolver()
};
const string = initializeFactory('string');
const text = initializeFactory('text');

/**
 * @param {'string'|'text'} field
 * @returns {InitialConstruct}
 */
function initializeFactory(field) {
  return {
    tokenize: initializeText,
    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined)
  };

  /** @type {Initializer} */
  function initializeText(effects) {
    const self = this;
    const constructs = this.parser.constructs[field];
    const text = effects.attempt(constructs, start, notText);
    return start;

    /** @type {State} */
    function start(code) {
      return atBreak(code) ? text(code) : notText(code);
    }

    /** @type {State} */
    function notText(code) {
      if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.eof) {
        effects.consume(code);
        return;
      }
      effects.enter(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.data);
      effects.consume(code);
      return data;
    }

    /** @type {State} */
    function data(code) {
      if (atBreak(code)) {
        effects.exit(micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.data);
        return text(code);
      }

      // Data.
      effects.consume(code);
      return data;
    }

    /**
     * @param {Code} code
     * @returns {boolean}
     */
    function atBreak(code) {
      if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.eof) {
        return true;
      }
      const list = constructs[code];
      let index = -1;
      if (list) {
        while (++index < list.length) {
          const item = list[index];
          if (!item.previous || item.previous.call(self, self.previous)) {
            return true;
          }
        }
      }
      return false;
    }
  }
}

/**
 * @param {Resolver} [extraResolver]
 * @returns {Resolver}
 */
function createResolver(extraResolver) {
  return resolveAllText;

  /** @type {Resolver} */
  function resolveAllText(events, context) {
    let index = -1;
    /** @type {number|undefined} */
    let enter;

    // A rather boring computation (to merge adjacent `data` events) which
    // improves mm performance by 29%.
    while (++index <= events.length) {
      if (enter === undefined) {
        if (events[index] && events[index][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.data) {
          enter = index;
          index++;
        }
      } else if (!events[index] || events[index][1].type !== micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.data) {
        // Don’t do anything if there is one data token.
        if (index !== enter + 2) {
          events[enter][1].end = events[index - 1][1].end;
          events.splice(enter + 2, index - enter - 2);
          index = enter + 2;
        }
        enter = undefined;
      }
    }
    return extraResolver ? extraResolver(events, context) : events;
  }
}

/**
 * A rather ugly set of instructions which again looks at chunks in the input
 * stream.
 * The reason to do this here is that it is *much* faster to parse in reverse.
 * And that we can’t hook into `null` to split the line suffix before an EOF.
 * To do: figure out if we can make this into a clean utility, or even in core.
 * As it will be useful for GFMs literal autolink extension (and maybe even
 * tables?)
 *
 * @type {Resolver}
 */
function resolveAllLineSuffixes(events, context) {
  let eventIndex = 0; // Skip first.

  while (++eventIndex <= events.length) {
    if ((eventIndex === events.length || events[eventIndex][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineEnding) && events[eventIndex - 1][1].type === micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.data) {
      const data = events[eventIndex - 1][1];
      const chunks = context.sliceStream(data);
      let index = chunks.length;
      let bufferIndex = -1;
      let size = 0;
      /** @type {boolean|undefined} */
      let tabs;
      while (index--) {
        const chunk = chunks[index];
        if (typeof chunk === 'string') {
          bufferIndex = chunk.length;
          while (chunk.charCodeAt(bufferIndex - 1) === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.space) {
            size++;
            bufferIndex--;
          }
          if (bufferIndex) break;
          bufferIndex = -1;
        }
        // Number
        else if (chunk === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.horizontalTab) {
          tabs = true;
          size++;
        } else if (chunk === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.virtualSpace) {
          // Empty
        } else {
          // Replacement character, exit.
          index++;
          break;
        }
      }
      if (size) {
        const token = {
          type: eventIndex === events.length || tabs || size < micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_2__.constants.hardBreakPrefixSizeMin ? micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.lineSuffix : micromark_util_symbol_types_js__WEBPACK_IMPORTED_MODULE_1__.types.hardBreakTrailing,
          start: {
            line: data.end.line,
            column: data.end.column - size,
            offset: data.end.offset - size,
            _index: data.start._index + index,
            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex
          },
          end: Object.assign({}, data.end)
        };
        data.end = Object.assign({}, token.start);
        if (data.start.offset === data.end.offset) {
          Object.assign(data, token);
        } else {
          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);
          eventIndex += 2;
        }
      }
      eventIndex++;
    }
  }
  return events;
}

/***/ }),

/***/ "./node_modules/micromark/dev/lib/parse.js":
/*!*************************************************!*\
  !*** ./node_modules/micromark/dev/lib/parse.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parse": function() { return /* binding */ parse; }
/* harmony export */ });
/* harmony import */ var micromark_util_combine_extensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-combine-extensions */ "./node_modules/micromark-util-combine-extensions/index.js");
/* harmony import */ var _initialize_content_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./initialize/content.js */ "./node_modules/micromark/dev/lib/initialize/content.js");
/* harmony import */ var _initialize_document_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./initialize/document.js */ "./node_modules/micromark/dev/lib/initialize/document.js");
/* harmony import */ var _initialize_flow_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./initialize/flow.js */ "./node_modules/micromark/dev/lib/initialize/flow.js");
/* harmony import */ var _initialize_text_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./initialize/text.js */ "./node_modules/micromark/dev/lib/initialize/text.js");
/* harmony import */ var _create_tokenizer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./create-tokenizer.js */ "./node_modules/micromark/dev/lib/create-tokenizer.js");
/* harmony import */ var _constructs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constructs.js */ "./node_modules/micromark/dev/lib/constructs.js");
/**
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension
 * @typedef {import('micromark-util-types').ParseOptions} ParseOptions
 * @typedef {import('micromark-util-types').ParseContext} ParseContext
 * @typedef {import('micromark-util-types').Create} Create
 */









/**
 * @param {ParseOptions} [options]
 * @returns {ParseContext}
 */
function parse() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  /** @type {FullNormalizedExtension} */
  // @ts-expect-error `defaultConstructs` is full, so the result will be too.
  const constructs = (0,micromark_util_combine_extensions__WEBPACK_IMPORTED_MODULE_0__.combineExtensions)(
  // @ts-expect-error Same as above.
  [_constructs_js__WEBPACK_IMPORTED_MODULE_1__].concat(options.extensions || []));
  /** @type {ParseContext} */
  const parser = {
    defined: [],
    lazy: {},
    constructs,
    content: create(_initialize_content_js__WEBPACK_IMPORTED_MODULE_2__.content),
    document: create(_initialize_document_js__WEBPACK_IMPORTED_MODULE_3__.document),
    flow: create(_initialize_flow_js__WEBPACK_IMPORTED_MODULE_4__.flow),
    string: create(_initialize_text_js__WEBPACK_IMPORTED_MODULE_5__.string),
    text: create(_initialize_text_js__WEBPACK_IMPORTED_MODULE_5__.text)
  };
  return parser;

  /**
   * @param {InitialConstruct} initial
   */
  function create(initial) {
    return creator;
    /** @type {Create} */
    function creator(from) {
      return (0,_create_tokenizer_js__WEBPACK_IMPORTED_MODULE_6__.createTokenizer)(parser, initial, from);
    }
  }
}

/***/ }),

/***/ "./node_modules/micromark/dev/lib/postprocess.js":
/*!*******************************************************!*\
  !*** ./node_modules/micromark/dev/lib/postprocess.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "postprocess": function() { return /* binding */ postprocess; }
/* harmony export */ });
/* harmony import */ var micromark_util_subtokenize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-subtokenize */ "./node_modules/micromark-util-subtokenize/dev/index.js");
/**
 * @typedef {import('micromark-util-types').Event} Event
 */



/**
 * @param {Array<Event>} events
 * @returns {Array<Event>}
 */
function postprocess(events) {
  while (!(0,micromark_util_subtokenize__WEBPACK_IMPORTED_MODULE_0__.subtokenize)(events)) {
    // Empty
  }
  return events;
}

/***/ }),

/***/ "./node_modules/micromark/dev/lib/preprocess.js":
/*!******************************************************!*\
  !*** ./node_modules/micromark/dev/lib/preprocess.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "preprocess": function() { return /* binding */ preprocess; }
/* harmony export */ });
/* harmony import */ var micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromark-util-symbol/codes.js */ "./node_modules/micromark-util-symbol/codes.js");
/* harmony import */ var micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! micromark-util-symbol/constants.js */ "./node_modules/micromark-util-symbol/constants.js");
/**
 * @typedef {import('micromark-util-types').Encoding} Encoding
 * @typedef {import('micromark-util-types').Value} Value
 * @typedef {import('micromark-util-types').Chunk} Chunk
 * @typedef {import('micromark-util-types').Code} Code
 */

/**
 * @callback Preprocessor
 * @param {Value} value
 * @param {Encoding} [encoding]
 * @param {boolean} [end=false]
 * @returns {Array<Chunk>}
 */



const search = /[\0\t\n\r]/g;

/**
 * @returns {Preprocessor}
 */
function preprocess() {
  let column = 1;
  let buffer = '';
  /** @type {boolean|undefined} */
  let start = true;
  /** @type {boolean|undefined} */
  let atCarriageReturn;
  return preprocessor;

  /** @type {Preprocessor} */
  function preprocessor(value, encoding, end) {
    /** @type {Array<Chunk>} */
    const chunks = [];
    /** @type {RegExpMatchArray|null} */
    let match;
    /** @type {number} */
    let next;
    /** @type {number} */
    let startPosition;
    /** @type {number} */
    let endPosition;
    /** @type {Code} */
    let code;

    // @ts-expect-error `Buffer` does allow an encoding.
    value = buffer + value.toString(encoding);
    startPosition = 0;
    buffer = '';
    if (start) {
      if (value.charCodeAt(0) === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.byteOrderMarker) {
        startPosition++;
      }
      start = undefined;
    }
    while (startPosition < value.length) {
      search.lastIndex = startPosition;
      match = search.exec(value);
      endPosition = match && match.index !== undefined ? match.index : value.length;
      code = value.charCodeAt(endPosition);
      if (!match) {
        buffer = value.slice(startPosition);
        break;
      }
      if (code === micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.lf && startPosition === endPosition && atCarriageReturn) {
        chunks.push(micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.carriageReturnLineFeed);
        atCarriageReturn = undefined;
      } else {
        if (atCarriageReturn) {
          chunks.push(micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.carriageReturn);
          atCarriageReturn = undefined;
        }
        if (startPosition < endPosition) {
          chunks.push(value.slice(startPosition, endPosition));
          column += endPosition - startPosition;
        }
        switch (code) {
          case micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.nul:
            {
              chunks.push(micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.replacementCharacter);
              column++;
              break;
            }
          case micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.ht:
            {
              next = Math.ceil(column / micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_1__.constants.tabSize) * micromark_util_symbol_constants_js__WEBPACK_IMPORTED_MODULE_1__.constants.tabSize;
              chunks.push(micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.horizontalTab);
              while (column++ < next) chunks.push(micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.virtualSpace);
              break;
            }
          case micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.lf:
            {
              chunks.push(micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.lineFeed);
              column = 1;
              break;
            }
          default:
            {
              atCarriageReturn = true;
              column = 1;
            }
        }
      }
      startPosition = endPosition + 1;
    }
    if (end) {
      if (atCarriageReturn) chunks.push(micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.carriageReturn);
      if (buffer) chunks.push(buffer);
      chunks.push(micromark_util_symbol_codes_js__WEBPACK_IMPORTED_MODULE_0__.codes.eof);
    }
    return chunks;
  }
}

/***/ }),

/***/ "./node_modules/property-information/index.js":
/*!****************************************************!*\
  !*** ./node_modules/property-information/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "find": function() { return /* reexport safe */ _lib_find_js__WEBPACK_IMPORTED_MODULE_0__.find; },
/* harmony export */   "hastToReact": function() { return /* reexport safe */ _lib_hast_to_react_js__WEBPACK_IMPORTED_MODULE_1__.hastToReact; },
/* harmony export */   "html": function() { return /* binding */ html; },
/* harmony export */   "normalize": function() { return /* reexport safe */ _lib_normalize_js__WEBPACK_IMPORTED_MODULE_2__.normalize; },
/* harmony export */   "svg": function() { return /* binding */ svg; }
/* harmony export */ });
/* harmony import */ var _lib_util_merge_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/util/merge.js */ "./node_modules/property-information/lib/util/merge.js");
/* harmony import */ var _lib_xlink_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/xlink.js */ "./node_modules/property-information/lib/xlink.js");
/* harmony import */ var _lib_xml_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/xml.js */ "./node_modules/property-information/lib/xml.js");
/* harmony import */ var _lib_xmlns_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/xmlns.js */ "./node_modules/property-information/lib/xmlns.js");
/* harmony import */ var _lib_aria_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/aria.js */ "./node_modules/property-information/lib/aria.js");
/* harmony import */ var _lib_html_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lib/html.js */ "./node_modules/property-information/lib/html.js");
/* harmony import */ var _lib_svg_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lib/svg.js */ "./node_modules/property-information/lib/svg.js");
/* harmony import */ var _lib_find_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/find.js */ "./node_modules/property-information/lib/find.js");
/* harmony import */ var _lib_hast_to_react_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/hast-to-react.js */ "./node_modules/property-information/lib/hast-to-react.js");
/* harmony import */ var _lib_normalize_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/normalize.js */ "./node_modules/property-information/lib/normalize.js");
/**
 * @typedef {import('./lib/util/info.js').Info} Info
 * @typedef {import('./lib/util/schema.js').Schema} Schema
 */











const html = (0,_lib_util_merge_js__WEBPACK_IMPORTED_MODULE_3__.merge)([_lib_xml_js__WEBPACK_IMPORTED_MODULE_4__.xml, _lib_xlink_js__WEBPACK_IMPORTED_MODULE_5__.xlink, _lib_xmlns_js__WEBPACK_IMPORTED_MODULE_6__.xmlns, _lib_aria_js__WEBPACK_IMPORTED_MODULE_7__.aria, _lib_html_js__WEBPACK_IMPORTED_MODULE_8__.html], 'html');
const svg = (0,_lib_util_merge_js__WEBPACK_IMPORTED_MODULE_3__.merge)([_lib_xml_js__WEBPACK_IMPORTED_MODULE_4__.xml, _lib_xlink_js__WEBPACK_IMPORTED_MODULE_5__.xlink, _lib_xmlns_js__WEBPACK_IMPORTED_MODULE_6__.xmlns, _lib_aria_js__WEBPACK_IMPORTED_MODULE_7__.aria, _lib_svg_js__WEBPACK_IMPORTED_MODULE_9__.svg], 'svg');

/***/ }),

/***/ "./node_modules/property-information/lib/aria.js":
/*!*******************************************************!*\
  !*** ./node_modules/property-information/lib/aria.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "aria": function() { return /* binding */ aria; }
/* harmony export */ });
/* harmony import */ var _util_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/types.js */ "./node_modules/property-information/lib/util/types.js");
/* harmony import */ var _util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/create.js */ "./node_modules/property-information/lib/util/create.js");


const aria = (0,_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)({
  transform(_, prop) {
    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase();
  },
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaAutoComplete: null,
    ariaBusy: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaChecked: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaColCount: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaColIndex: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaColSpan: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaControls: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,
    ariaCurrent: null,
    ariaDescribedBy: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,
    ariaDetails: null,
    ariaDisabled: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaDropEffect: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,
    ariaErrorMessage: null,
    ariaExpanded: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaFlowTo: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,
    ariaGrabbed: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaHasPopup: null,
    ariaHidden: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,
    ariaLevel: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaLive: null,
    ariaModal: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaMultiLine: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaMultiSelectable: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaOrientation: null,
    ariaOwns: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,
    ariaPlaceholder: null,
    ariaPosInSet: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaPressed: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaReadOnly: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaRelevant: null,
    ariaRequired: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaRoleDescription: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.spaceSeparated,
    ariaRowCount: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaRowIndex: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaRowSpan: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaSelected: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.booleanish,
    ariaSetSize: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaSort: null,
    ariaValueMax: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaValueMin: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaValueNow: _util_types_js__WEBPACK_IMPORTED_MODULE_1__.number,
    ariaValueText: null,
    role: null
  }
});

/***/ }),

/***/ "./node_modules/property-information/lib/find.js":
/*!*******************************************************!*\
  !*** ./node_modules/property-information/lib/find.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "find": function() { return /* binding */ find; }
/* harmony export */ });
/* harmony import */ var _normalize_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./normalize.js */ "./node_modules/property-information/lib/normalize.js");
/* harmony import */ var _util_defined_info_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/defined-info.js */ "./node_modules/property-information/lib/util/defined-info.js");
/* harmony import */ var _util_info_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/info.js */ "./node_modules/property-information/lib/util/info.js");
/**
 * @typedef {import('./util/schema.js').Schema} Schema
 */




const valid = /^data[-\w.:]+$/i;
const dash = /-[a-z]/g;
const cap = /[A-Z]/g;

/**
 * @param {Schema} schema
 * @param {string} value
 * @returns {Info}
 */
function find(schema, value) {
  const normal = (0,_normalize_js__WEBPACK_IMPORTED_MODULE_0__.normalize)(value);
  let prop = value;
  let Type = _util_info_js__WEBPACK_IMPORTED_MODULE_1__.Info;
  if (normal in schema.normal) {
    return schema.property[schema.normal[normal]];
  }
  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {
    // Attribute or property.
    if (value.charAt(4) === '-') {
      // Turn it into a property.
      const rest = value.slice(5).replace(dash, camelcase);
      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);
    } else {
      // Turn it into an attribute.
      const rest = value.slice(4);
      if (!dash.test(rest)) {
        let dashes = rest.replace(cap, kebab);
        if (dashes.charAt(0) !== '-') {
          dashes = '-' + dashes;
        }
        value = 'data' + dashes;
      }
    }
    Type = _util_defined_info_js__WEBPACK_IMPORTED_MODULE_2__.DefinedInfo;
  }
  return new Type(prop, value);
}

/**
 * @param {string} $0
 * @returns {string}
 */
function kebab($0) {
  return '-' + $0.toLowerCase();
}

/**
 * @param {string} $0
 * @returns {string}
 */
function camelcase($0) {
  return $0.charAt(1).toUpperCase();
}

/***/ }),

/***/ "./node_modules/property-information/lib/hast-to-react.js":
/*!****************************************************************!*\
  !*** ./node_modules/property-information/lib/hast-to-react.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hastToReact": function() { return /* binding */ hastToReact; }
/* harmony export */ });
/**
 * `hast` is close to `React`, but differs in a couple of cases.
 *
 * To get a React property from a hast property, check if it is in
 * `hastToReact`, if it is, then use the corresponding value,
 * otherwise, use the hast property.
 *
 * @type {Record<string, string>}
 */
const hastToReact = {
  classId: 'classID',
  dataType: 'datatype',
  itemId: 'itemID',
  strokeDashArray: 'strokeDasharray',
  strokeDashOffset: 'strokeDashoffset',
  strokeLineCap: 'strokeLinecap',
  strokeLineJoin: 'strokeLinejoin',
  strokeMiterLimit: 'strokeMiterlimit',
  typeOf: 'typeof',
  xLinkActuate: 'xlinkActuate',
  xLinkArcRole: 'xlinkArcrole',
  xLinkHref: 'xlinkHref',
  xLinkRole: 'xlinkRole',
  xLinkShow: 'xlinkShow',
  xLinkTitle: 'xlinkTitle',
  xLinkType: 'xlinkType',
  xmlnsXLink: 'xmlnsXlink'
};

/***/ }),

/***/ "./node_modules/property-information/lib/html.js":
/*!*******************************************************!*\
  !*** ./node_modules/property-information/lib/html.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "html": function() { return /* binding */ html; }
/* harmony export */ });
/* harmony import */ var _util_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/types.js */ "./node_modules/property-information/lib/util/types.js");
/* harmony import */ var _util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/create.js */ "./node_modules/property-information/lib/util/create.js");
/* harmony import */ var _util_case_insensitive_transform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/case-insensitive-transform.js */ "./node_modules/property-information/lib/util/case-insensitive-transform.js");



const html = (0,_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)({
  space: 'html',
  attributes: {
    acceptcharset: 'accept-charset',
    classname: 'class',
    htmlfor: 'for',
    httpequiv: 'http-equiv'
  },
  transform: _util_case_insensitive_transform_js__WEBPACK_IMPORTED_MODULE_1__.caseInsensitiveTransform,
  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaSeparated,
    acceptCharset: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    accessKey: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    action: null,
    allow: null,
    allowFullScreen: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    allowPaymentRequest: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    allowUserMedia: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    alt: null,
    as: null,
    async: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    autoCapitalize: null,
    autoComplete: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    autoFocus: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    autoPlay: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    capture: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    charSet: null,
    checked: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    cite: null,
    className: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    cols: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    colSpan: null,
    content: null,
    contentEditable: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.booleanish,
    controls: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    controlsList: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    coords: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number | _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaSeparated,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    default: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    defer: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    dir: null,
    dirName: null,
    disabled: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    download: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.overloadedBoolean,
    draggable: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.booleanish,
    encType: null,
    enterKeyHint: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    formTarget: null,
    headers: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    height: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    hidden: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    high: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    href: null,
    hrefLang: null,
    htmlFor: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    httpEquiv: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    itemId: null,
    itemProp: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    itemRef: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    itemScope: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    itemType: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    low: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    manifest: null,
    max: null,
    maxLength: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    media: null,
    method: null,
    min: null,
    minLength: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    multiple: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    muted: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    name: null,
    nonce: null,
    noModule: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    noValidate: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforeMatch: null,
    onBeforePrint: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onScrollEnd: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    optimum: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    pattern: null,
    ping: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    placeholder: null,
    playsInline: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    poster: null,
    preload: null,
    readOnly: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    referrerPolicy: null,
    rel: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    required: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    reversed: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    rows: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    rowSpan: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    sandbox: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    scope: null,
    scoped: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    seamless: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    selected: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    shape: null,
    size: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    sizes: null,
    slot: null,
    span: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    spellCheck: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.booleanish,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    step: null,
    style: null,
    tabIndex: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    useMap: null,
    value: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.booleanish,
    width: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    wrap: null,
    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null,
    // Several. Use CSS `text-align` instead,
    aLink: null,
    // `<body>`. Use CSS `a:active {color}` instead
    archive: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    // `<object>`. List of URIs to archives
    axis: null,
    // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null,
    // `<body>`. Use CSS `background-image` instead
    bgColor: null,
    // `<body>` and table elements. Use CSS `background-color` instead
    border: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    // `<table>`. Use CSS `border-width` instead,
    borderColor: null,
    // `<table>`. Use CSS `border-color` instead,
    bottomMargin: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    // `<body>`
    cellPadding: null,
    // `<table>`
    cellSpacing: null,
    // `<table>`
    char: null,
    // Several table elements. When `align=char`, sets the character to align on
    charOff: null,
    // Several table elements. When `char`, offsets the alignment
    classId: null,
    // `<object>`
    clear: null,
    // `<br>`. Use CSS `clear` instead
    code: null,
    // `<object>`
    codeBase: null,
    // `<object>`
    codeType: null,
    // `<object>`
    color: null,
    // `<font>` and `<hr>`. Use CSS instead
    compact: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    // Lists. Use CSS to reduce space between items instead
    declare: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    // `<object>`
    event: null,
    // `<script>`
    face: null,
    // `<font>`. Use CSS instead
    frame: null,
    // `<table>`
    frameBorder: null,
    // `<iframe>`. Use CSS `border` instead
    hSpace: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    // `<img>` and `<object>`
    leftMargin: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    // `<body>`
    link: null,
    // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null,
    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null,
    // `<img>`. Use a `<picture>`
    marginHeight: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    // `<body>`
    marginWidth: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    // `<body>`
    noResize: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    // `<frame>`
    noHref: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    // `<area>`. Use no href instead of an explicit `nohref`
    noShade: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    // `<hr>`. Use background-color and height instead of borders
    noWrap: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    // `<td>` and `<th>`
    object: null,
    // `<applet>`
    profile: null,
    // `<head>`
    prompt: null,
    // `<isindex>`
    rev: null,
    // `<link>`
    rightMargin: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    // `<body>`
    rules: null,
    // `<table>`
    scheme: null,
    // `<meta>`
    scrolling: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.booleanish,
    // `<frame>`. Use overflow in the child context
    standby: null,
    // `<object>`
    summary: null,
    // `<table>`
    text: null,
    // `<body>`. Use CSS `color` instead
    topMargin: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    // `<body>`
    valueType: null,
    // `<param>`
    version: null,
    // `<html>`. Use a doctype.
    vAlign: null,
    // Several. Use CSS `vertical-align` instead
    vLink: null,
    // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    // `<img>` and `<object>`

    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    disableRemotePlayback: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    prefix: null,
    property: null,
    results: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    security: null,
    unselectable: null
  }
});

/***/ }),

/***/ "./node_modules/property-information/lib/normalize.js":
/*!************************************************************!*\
  !*** ./node_modules/property-information/lib/normalize.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "normalize": function() { return /* binding */ normalize; }
/* harmony export */ });
/**
 * @param {string} value
 * @returns {string}
 */
function normalize(value) {
  return value.toLowerCase();
}

/***/ }),

/***/ "./node_modules/property-information/lib/svg.js":
/*!******************************************************!*\
  !*** ./node_modules/property-information/lib/svg.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "svg": function() { return /* binding */ svg; }
/* harmony export */ });
/* harmony import */ var _util_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/types.js */ "./node_modules/property-information/lib/util/types.js");
/* harmony import */ var _util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/create.js */ "./node_modules/property-information/lib/util/create.js");
/* harmony import */ var _util_case_sensitive_transform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/case-sensitive-transform.js */ "./node_modules/property-information/lib/util/case-sensitive-transform.js");



const svg = (0,_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)({
  space: 'svg',
  attributes: {
    accentHeight: 'accent-height',
    alignmentBaseline: 'alignment-baseline',
    arabicForm: 'arabic-form',
    baselineShift: 'baseline-shift',
    capHeight: 'cap-height',
    className: 'class',
    clipPath: 'clip-path',
    clipRule: 'clip-rule',
    colorInterpolation: 'color-interpolation',
    colorInterpolationFilters: 'color-interpolation-filters',
    colorProfile: 'color-profile',
    colorRendering: 'color-rendering',
    crossOrigin: 'crossorigin',
    dataType: 'datatype',
    dominantBaseline: 'dominant-baseline',
    enableBackground: 'enable-background',
    fillOpacity: 'fill-opacity',
    fillRule: 'fill-rule',
    floodColor: 'flood-color',
    floodOpacity: 'flood-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    fontSizeAdjust: 'font-size-adjust',
    fontStretch: 'font-stretch',
    fontStyle: 'font-style',
    fontVariant: 'font-variant',
    fontWeight: 'font-weight',
    glyphName: 'glyph-name',
    glyphOrientationHorizontal: 'glyph-orientation-horizontal',
    glyphOrientationVertical: 'glyph-orientation-vertical',
    hrefLang: 'hreflang',
    horizAdvX: 'horiz-adv-x',
    horizOriginX: 'horiz-origin-x',
    horizOriginY: 'horiz-origin-y',
    imageRendering: 'image-rendering',
    letterSpacing: 'letter-spacing',
    lightingColor: 'lighting-color',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    navDown: 'nav-down',
    navDownLeft: 'nav-down-left',
    navDownRight: 'nav-down-right',
    navLeft: 'nav-left',
    navNext: 'nav-next',
    navPrev: 'nav-prev',
    navRight: 'nav-right',
    navUp: 'nav-up',
    navUpLeft: 'nav-up-left',
    navUpRight: 'nav-up-right',
    onAbort: 'onabort',
    onActivate: 'onactivate',
    onAfterPrint: 'onafterprint',
    onBeforePrint: 'onbeforeprint',
    onBegin: 'onbegin',
    onCancel: 'oncancel',
    onCanPlay: 'oncanplay',
    onCanPlayThrough: 'oncanplaythrough',
    onChange: 'onchange',
    onClick: 'onclick',
    onClose: 'onclose',
    onCopy: 'oncopy',
    onCueChange: 'oncuechange',
    onCut: 'oncut',
    onDblClick: 'ondblclick',
    onDrag: 'ondrag',
    onDragEnd: 'ondragend',
    onDragEnter: 'ondragenter',
    onDragExit: 'ondragexit',
    onDragLeave: 'ondragleave',
    onDragOver: 'ondragover',
    onDragStart: 'ondragstart',
    onDrop: 'ondrop',
    onDurationChange: 'ondurationchange',
    onEmptied: 'onemptied',
    onEnd: 'onend',
    onEnded: 'onended',
    onError: 'onerror',
    onFocus: 'onfocus',
    onFocusIn: 'onfocusin',
    onFocusOut: 'onfocusout',
    onHashChange: 'onhashchange',
    onInput: 'oninput',
    onInvalid: 'oninvalid',
    onKeyDown: 'onkeydown',
    onKeyPress: 'onkeypress',
    onKeyUp: 'onkeyup',
    onLoad: 'onload',
    onLoadedData: 'onloadeddata',
    onLoadedMetadata: 'onloadedmetadata',
    onLoadStart: 'onloadstart',
    onMessage: 'onmessage',
    onMouseDown: 'onmousedown',
    onMouseEnter: 'onmouseenter',
    onMouseLeave: 'onmouseleave',
    onMouseMove: 'onmousemove',
    onMouseOut: 'onmouseout',
    onMouseOver: 'onmouseover',
    onMouseUp: 'onmouseup',
    onMouseWheel: 'onmousewheel',
    onOffline: 'onoffline',
    onOnline: 'ononline',
    onPageHide: 'onpagehide',
    onPageShow: 'onpageshow',
    onPaste: 'onpaste',
    onPause: 'onpause',
    onPlay: 'onplay',
    onPlaying: 'onplaying',
    onPopState: 'onpopstate',
    onProgress: 'onprogress',
    onRateChange: 'onratechange',
    onRepeat: 'onrepeat',
    onReset: 'onreset',
    onResize: 'onresize',
    onScroll: 'onscroll',
    onSeeked: 'onseeked',
    onSeeking: 'onseeking',
    onSelect: 'onselect',
    onShow: 'onshow',
    onStalled: 'onstalled',
    onStorage: 'onstorage',
    onSubmit: 'onsubmit',
    onSuspend: 'onsuspend',
    onTimeUpdate: 'ontimeupdate',
    onToggle: 'ontoggle',
    onUnload: 'onunload',
    onVolumeChange: 'onvolumechange',
    onWaiting: 'onwaiting',
    onZoom: 'onzoom',
    overlinePosition: 'overline-position',
    overlineThickness: 'overline-thickness',
    paintOrder: 'paint-order',
    panose1: 'panose-1',
    pointerEvents: 'pointer-events',
    referrerPolicy: 'referrerpolicy',
    renderingIntent: 'rendering-intent',
    shapeRendering: 'shape-rendering',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strikethroughPosition: 'strikethrough-position',
    strikethroughThickness: 'strikethrough-thickness',
    strokeDashArray: 'stroke-dasharray',
    strokeDashOffset: 'stroke-dashoffset',
    strokeLineCap: 'stroke-linecap',
    strokeLineJoin: 'stroke-linejoin',
    strokeMiterLimit: 'stroke-miterlimit',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    tabIndex: 'tabindex',
    textAnchor: 'text-anchor',
    textDecoration: 'text-decoration',
    textRendering: 'text-rendering',
    typeOf: 'typeof',
    underlinePosition: 'underline-position',
    underlineThickness: 'underline-thickness',
    unicodeBidi: 'unicode-bidi',
    unicodeRange: 'unicode-range',
    unitsPerEm: 'units-per-em',
    vAlphabetic: 'v-alphabetic',
    vHanging: 'v-hanging',
    vIdeographic: 'v-ideographic',
    vMathematical: 'v-mathematical',
    vectorEffect: 'vector-effect',
    vertAdvY: 'vert-adv-y',
    vertOriginX: 'vert-origin-x',
    vertOriginY: 'vert-origin-y',
    wordSpacing: 'word-spacing',
    writingMode: 'writing-mode',
    xHeight: 'x-height',
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: 'playbackorder',
    timelineBegin: 'timelinebegin'
  },
  transform: _util_case_sensitive_transform_js__WEBPACK_IMPORTED_MODULE_1__.caseSensitiveTransform,
  properties: {
    about: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    accentHeight: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    amplitude: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    arabicForm: null,
    ascent: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    attributeName: null,
    attributeType: null,
    azimuth: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    by: null,
    calcMode: null,
    capHeight: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    className: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    diffuseConstant: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    direction: null,
    display: null,
    dur: null,
    divisor: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    dominantBaseline: null,
    download: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.boolean,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    enableBackground: null,
    end: null,
    event: null,
    exponent: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaSeparated,
    g2: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaSeparated,
    glyphName: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaSeparated,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    horizOriginX: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    horizOriginY: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    id: null,
    ideographic: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    imageRendering: null,
    initialVisibility: null,
    in: null,
    in2: null,
    intercept: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    k: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    k1: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    k2: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    k3: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    k4: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    kernelMatrix: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    kernelUnitLength: null,
    keyPoints: null,
    // SEMI_COLON_SEPARATED
    keySplines: null,
    // SEMI_COLON_SEPARATED
    keyTimes: null,
    // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    overlineThickness: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.spaceSeparated,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    pointsAtY: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    pointsAtZ: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    rev: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    requiredFeatures: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    requiredFonts: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    requiredFormats: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    specularExponent: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    strikethroughThickness: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    string: null,
    stroke: null,
    strokeDashArray: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    strokeOpacity: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    strokeWidth: null,
    style: null,
    surfaceScale: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    tabIndex: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    tableValues: null,
    target: null,
    targetX: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    targetY: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.commaOrSpaceSeparated,
    to: null,
    transform: null,
    u1: null,
    u2: null,
    underlinePosition: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    underlineThickness: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    values: null,
    vAlphabetic: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    vMathematical: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    vectorEffect: null,
    vHanging: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    vIdeographic: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    version: null,
    vertAdvY: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    vertOriginX: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    vertOriginY: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: _util_types_js__WEBPACK_IMPORTED_MODULE_2__.number,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  }
});

/***/ }),

/***/ "./node_modules/property-information/lib/util/case-insensitive-transform.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/property-information/lib/util/case-insensitive-transform.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "caseInsensitiveTransform": function() { return /* binding */ caseInsensitiveTransform; }
/* harmony export */ });
/* harmony import */ var _case_sensitive_transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./case-sensitive-transform.js */ "./node_modules/property-information/lib/util/case-sensitive-transform.js");


/**
 * @param {Record<string, string>} attributes
 * @param {string} property
 * @returns {string}
 */
function caseInsensitiveTransform(attributes, property) {
  return (0,_case_sensitive_transform_js__WEBPACK_IMPORTED_MODULE_0__.caseSensitiveTransform)(attributes, property.toLowerCase());
}

/***/ }),

/***/ "./node_modules/property-information/lib/util/case-sensitive-transform.js":
/*!********************************************************************************!*\
  !*** ./node_modules/property-information/lib/util/case-sensitive-transform.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "caseSensitiveTransform": function() { return /* binding */ caseSensitiveTransform; }
/* harmony export */ });
/**
 * @param {Record<string, string>} attributes
 * @param {string} attribute
 * @returns {string}
 */
function caseSensitiveTransform(attributes, attribute) {
  return attribute in attributes ? attributes[attribute] : attribute;
}

/***/ }),

/***/ "./node_modules/property-information/lib/util/create.js":
/*!**************************************************************!*\
  !*** ./node_modules/property-information/lib/util/create.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "create": function() { return /* binding */ create; }
/* harmony export */ });
/* harmony import */ var _normalize_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../normalize.js */ "./node_modules/property-information/lib/normalize.js");
/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema.js */ "./node_modules/property-information/lib/util/schema.js");
/* harmony import */ var _defined_info_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defined-info.js */ "./node_modules/property-information/lib/util/defined-info.js");
/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 *
 * @typedef {Record<string, string>} Attributes
 *
 * @typedef {Object} Definition
 * @property {Record<string, number|null>} properties
 * @property {(attributes: Attributes, property: string) => string} transform
 * @property {string} [space]
 * @property {Attributes} [attributes]
 * @property {Array<string>} [mustUseProperty]
 */




const own = {}.hasOwnProperty;

/**
 * @param {Definition} definition
 * @returns {Schema}
 */
function create(definition) {
  /** @type {Properties} */
  const property = {};
  /** @type {Normal} */
  const normal = {};
  /** @type {string} */
  let prop;
  for (prop in definition.properties) {
    if (own.call(definition.properties, prop)) {
      const value = definition.properties[prop];
      const info = new _defined_info_js__WEBPACK_IMPORTED_MODULE_0__.DefinedInfo(prop, definition.transform(definition.attributes || {}, prop), value, definition.space);
      if (definition.mustUseProperty && definition.mustUseProperty.includes(prop)) {
        info.mustUseProperty = true;
      }
      property[prop] = info;
      normal[(0,_normalize_js__WEBPACK_IMPORTED_MODULE_1__.normalize)(prop)] = prop;
      normal[(0,_normalize_js__WEBPACK_IMPORTED_MODULE_1__.normalize)(info.attribute)] = prop;
    }
  }
  return new _schema_js__WEBPACK_IMPORTED_MODULE_2__.Schema(property, normal, definition.space);
}

/***/ }),

/***/ "./node_modules/property-information/lib/util/defined-info.js":
/*!********************************************************************!*\
  !*** ./node_modules/property-information/lib/util/defined-info.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DefinedInfo": function() { return /* binding */ DefinedInfo; }
/* harmony export */ });
/* harmony import */ var _info_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./info.js */ "./node_modules/property-information/lib/util/info.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ "./node_modules/property-information/lib/util/types.js");



/** @type {Array<keyof types>} */
// @ts-expect-error: hush.
const checks = Object.keys(_types_js__WEBPACK_IMPORTED_MODULE_0__);
class DefinedInfo extends _info_js__WEBPACK_IMPORTED_MODULE_1__.Info {
  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   * @param {number|null} [mask]
   * @param {string} [space]
   */
  constructor(property, attribute, mask, space) {
    let index = -1;
    super(property, attribute);
    mark(this, 'space', space);
    if (typeof mask === 'number') {
      while (++index < checks.length) {
        const check = checks[index];
        mark(this, checks[index], (mask & _types_js__WEBPACK_IMPORTED_MODULE_0__[check]) === _types_js__WEBPACK_IMPORTED_MODULE_0__[check]);
      }
    }
  }
}
DefinedInfo.prototype.defined = true;

/**
 * @param {DefinedInfo} values
 * @param {string} key
 * @param {unknown} value
 */
function mark(values, key, value) {
  if (value) {
    // @ts-expect-error: assume `value` matches the expected value of `key`.
    values[key] = value;
  }
}

/***/ }),

/***/ "./node_modules/property-information/lib/util/info.js":
/*!************************************************************!*\
  !*** ./node_modules/property-information/lib/util/info.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Info": function() { return /* binding */ Info; }
/* harmony export */ });
class Info {
  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   */
  constructor(property, attribute) {
    /** @type {string} */
    this.property = property;
    /** @type {string} */
    this.attribute = attribute;
  }
}

/** @type {string|null} */
Info.prototype.space = null;
Info.prototype.boolean = false;
Info.prototype.booleanish = false;
Info.prototype.overloadedBoolean = false;
Info.prototype.number = false;
Info.prototype.commaSeparated = false;
Info.prototype.spaceSeparated = false;
Info.prototype.commaOrSpaceSeparated = false;
Info.prototype.mustUseProperty = false;
Info.prototype.defined = false;

/***/ }),

/***/ "./node_modules/property-information/lib/util/merge.js":
/*!*************************************************************!*\
  !*** ./node_modules/property-information/lib/util/merge.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "merge": function() { return /* binding */ merge; }
/* harmony export */ });
/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schema.js */ "./node_modules/property-information/lib/util/schema.js");
/**
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
 */



/**
 * @param {Schema[]} definitions
 * @param {string} [space]
 * @returns {Schema}
 */
function merge(definitions, space) {
  /** @type {Properties} */
  const property = {};
  /** @type {Normal} */
  const normal = {};
  let index = -1;
  while (++index < definitions.length) {
    Object.assign(property, definitions[index].property);
    Object.assign(normal, definitions[index].normal);
  }
  return new _schema_js__WEBPACK_IMPORTED_MODULE_0__.Schema(property, normal, space);
}

/***/ }),

/***/ "./node_modules/property-information/lib/util/schema.js":
/*!**************************************************************!*\
  !*** ./node_modules/property-information/lib/util/schema.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Schema": function() { return /* binding */ Schema; }
/* harmony export */ });
/**
 * @typedef {import('./info.js').Info} Info
 * @typedef {Record<string, Info>} Properties
 * @typedef {Record<string, string>} Normal
 */

class Schema {
  /**
   * @constructor
   * @param {Properties} property
   * @param {Normal} normal
   * @param {string} [space]
   */
  constructor(property, normal, space) {
    this.property = property;
    this.normal = normal;
    if (space) {
      this.space = space;
    }
  }
}

/** @type {Properties} */
Schema.prototype.property = {};
/** @type {Normal} */
Schema.prototype.normal = {};
/** @type {string|null} */
Schema.prototype.space = null;

/***/ }),

/***/ "./node_modules/property-information/lib/util/types.js":
/*!*************************************************************!*\
  !*** ./node_modules/property-information/lib/util/types.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "boolean": function() { return /* binding */ boolean; },
/* harmony export */   "booleanish": function() { return /* binding */ booleanish; },
/* harmony export */   "commaOrSpaceSeparated": function() { return /* binding */ commaOrSpaceSeparated; },
/* harmony export */   "commaSeparated": function() { return /* binding */ commaSeparated; },
/* harmony export */   "number": function() { return /* binding */ number; },
/* harmony export */   "overloadedBoolean": function() { return /* binding */ overloadedBoolean; },
/* harmony export */   "spaceSeparated": function() { return /* binding */ spaceSeparated; }
/* harmony export */ });
let powers = 0;
const boolean = increment();
const booleanish = increment();
const overloadedBoolean = increment();
const number = increment();
const spaceSeparated = increment();
const commaSeparated = increment();
const commaOrSpaceSeparated = increment();
function increment() {
  return 2 ** ++powers;
}

/***/ }),

/***/ "./node_modules/property-information/lib/xlink.js":
/*!********************************************************!*\
  !*** ./node_modules/property-information/lib/xlink.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "xlink": function() { return /* binding */ xlink; }
/* harmony export */ });
/* harmony import */ var _util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/create.js */ "./node_modules/property-information/lib/util/create.js");

const xlink = (0,_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)({
  space: 'xlink',
  transform(_, prop) {
    return 'xlink:' + prop.slice(5).toLowerCase();
  },
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  }
});

/***/ }),

/***/ "./node_modules/property-information/lib/xml.js":
/*!******************************************************!*\
  !*** ./node_modules/property-information/lib/xml.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "xml": function() { return /* binding */ xml; }
/* harmony export */ });
/* harmony import */ var _util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/create.js */ "./node_modules/property-information/lib/util/create.js");

const xml = (0,_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)({
  space: 'xml',
  transform(_, prop) {
    return 'xml:' + prop.slice(3).toLowerCase();
  },
  properties: {
    xmlLang: null,
    xmlBase: null,
    xmlSpace: null
  }
});

/***/ }),

/***/ "./node_modules/property-information/lib/xmlns.js":
/*!********************************************************!*\
  !*** ./node_modules/property-information/lib/xmlns.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "xmlns": function() { return /* binding */ xmlns; }
/* harmony export */ });
/* harmony import */ var _util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/create.js */ "./node_modules/property-information/lib/util/create.js");
/* harmony import */ var _util_case_insensitive_transform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/case-insensitive-transform.js */ "./node_modules/property-information/lib/util/case-insensitive-transform.js");


const xmlns = (0,_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)({
  space: 'xmlns',
  attributes: {
    xmlnsxlink: 'xmlns:xlink'
  },
  transform: _util_case_insensitive_transform_js__WEBPACK_IMPORTED_MODULE_1__.caseInsensitiveTransform,
  properties: {
    xmlns: null,
    xmlnsXLink: null
  }
});

/***/ }),

/***/ "./node_modules/react-markdown/lib/ast-to-react.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-markdown/lib/ast-to-react.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "childrenToReact": function() { return /* binding */ childrenToReact; }
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-is */ "./node_modules/react-markdown/node_modules/react-is/index.js");
/* harmony import */ var hast_util_whitespace__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! hast-util-whitespace */ "./node_modules/hast-util-whitespace/index.js");
/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! property-information */ "./node_modules/property-information/index.js");
/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! property-information */ "./node_modules/property-information/lib/find.js");
/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! property-information */ "./node_modules/property-information/lib/hast-to-react.js");
/* harmony import */ var space_separated_tokens__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! space-separated-tokens */ "./node_modules/space-separated-tokens/index.js");
/* harmony import */ var comma_separated_tokens__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! comma-separated-tokens */ "./node_modules/comma-separated-tokens/index.js");
/* harmony import */ var style_to_object__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! style-to-object */ "./node_modules/style-to-object/index.mjs");
/* harmony import */ var _uri_transformer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./uri-transformer.js */ "./node_modules/react-markdown/lib/uri-transformer.js");
/**
 * @template T
 * @typedef {import('react').ComponentType<T>} ComponentType<T>
 */

/**
 * @template T
 * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>
 */

/**
 * @typedef {import('react').ReactNode} ReactNode
 * @typedef {import('unist').Position} Position
 * @typedef {import('hast').Element} Element
 * @typedef {import('hast').ElementContent} ElementContent
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').Text} Text
 * @typedef {import('hast').Comment} Comment
 * @typedef {import('hast').DocType} Doctype
 * @typedef {import('property-information').Info} Info
 * @typedef {import('property-information').Schema} Schema
 * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps
 *
 * @typedef Raw
 * @property {'raw'} type
 * @property {string} value
 *
 * @typedef Context
 * @property {Options} options
 * @property {Schema} schema
 * @property {number} listDepth
 *
 * @callback TransformLink
 * @param {string} href
 * @param {Array<ElementContent>} children
 * @param {string?} title
 * @returns {string}
 *
 * @callback TransformImage
 * @param {string} src
 * @param {string} alt
 * @param {string?} title
 * @returns {string}
 *
 * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType
 *
 * @callback TransformLinkTarget
 * @param {string} href
 * @param {Array<ElementContent>} children
 * @param {string?} title
 * @returns {TransformLinkTargetType|undefined}
 *
 * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames
 *
 * To do: is `data-sourcepos` typeable?
 *
 * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps
 * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps
 * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps
 * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps
 * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps
 * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps
 * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps
 * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps
 *
 * @typedef {ComponentType<CodeProps>} CodeComponent
 * @typedef {ComponentType<HeadingProps>} HeadingComponent
 * @typedef {ComponentType<LiProps>} LiComponent
 * @typedef {ComponentType<OrderedListProps>} OrderedListComponent
 * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent
 * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent
 * @typedef {ComponentType<TableRowProps>} TableRowComponent
 * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent
 *
 * @typedef SpecialComponents
 * @property {CodeComponent|ReactMarkdownNames} code
 * @property {HeadingComponent|ReactMarkdownNames} h1
 * @property {HeadingComponent|ReactMarkdownNames} h2
 * @property {HeadingComponent|ReactMarkdownNames} h3
 * @property {HeadingComponent|ReactMarkdownNames} h4
 * @property {HeadingComponent|ReactMarkdownNames} h5
 * @property {HeadingComponent|ReactMarkdownNames} h6
 * @property {LiComponent|ReactMarkdownNames} li
 * @property {OrderedListComponent|ReactMarkdownNames} ol
 * @property {TableDataCellComponent|ReactMarkdownNames} td
 * @property {TableHeaderCellComponent|ReactMarkdownNames} th
 * @property {TableRowComponent|ReactMarkdownNames} tr
 * @property {UnorderedListComponent|ReactMarkdownNames} ul
 *
 * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components
 *
 * @typedef Options
 * @property {boolean} [sourcePos=false]
 * @property {boolean} [rawSourcePos=false]
 * @property {boolean} [skipHtml=false]
 * @property {boolean} [includeElementIndex=false]
 * @property {null|false|TransformLink} [transformLinkUri]
 * @property {TransformImage} [transformImageUri]
 * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]
 * @property {Components} [components]
 */









const own = {}.hasOwnProperty;

// The table-related elements that must not contain whitespace text according
// to React.
const tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr']);

/**
 * @param {Context} context
 * @param {Element|Root} node
 */
function childrenToReact(context, node) {
  /** @type {Array<ReactNode>} */
  const children = [];
  let childIndex = -1;
  /** @type {Comment|Doctype|Element|Raw|Text} */
  let child;
  while (++childIndex < node.children.length) {
    child = node.children[childIndex];
    if (child.type === 'element') {
      children.push(toReact(context, child, childIndex, node));
    } else if (child.type === 'text') {
      // Currently, a warning is triggered by react for *any* white space in
      // tables.
      // So we drop it.
      // See: <https://github.com/facebook/react/pull/7081>.
      // See: <https://github.com/facebook/react/pull/7515>.
      // See: <https://github.com/remarkjs/remark-react/issues/64>.
      // See: <https://github.com/remarkjs/react-markdown/issues/576>.
      if (node.type !== 'element' || !tableElements.has(node.tagName) || !(0,hast_util_whitespace__WEBPACK_IMPORTED_MODULE_3__.whitespace)(child)) {
        children.push(child.value);
      }
    } else if (child.type === 'raw' && !context.options.skipHtml) {
      // Default behavior is to show (encoded) HTML.
      children.push(child.value);
    }
  }
  return children;
}

/**
 * @param {Context} context
 * @param {Element} node
 * @param {number} index
 * @param {Element|Root} parent
 */
function toReact(context, node, index, parent) {
  const options = context.options;
  const transform = options.transformLinkUri === undefined ? _uri_transformer_js__WEBPACK_IMPORTED_MODULE_4__.uriTransformer : options.transformLinkUri;
  const parentSchema = context.schema;
  /** @type {ReactMarkdownNames} */
  // @ts-expect-error assume a known HTML/SVG element.
  const name = node.tagName;
  /** @type {Record<string, unknown>} */
  const properties = {};
  let schema = parentSchema;
  /** @type {string} */
  let property;
  if (parentSchema.space === 'html' && name === 'svg') {
    schema = property_information__WEBPACK_IMPORTED_MODULE_5__.svg;
    context.schema = schema;
  }
  if (node.properties) {
    for (property in node.properties) {
      if (own.call(node.properties, property)) {
        addProperty(properties, property, node.properties[property], context);
      }
    }
  }
  if (name === 'ol' || name === 'ul') {
    context.listDepth++;
  }
  const children = childrenToReact(context, node);
  if (name === 'ol' || name === 'ul') {
    context.listDepth--;
  }

  // Restore parent schema.
  context.schema = parentSchema;

  // Nodes created by plugins do not have positional info, in which case we use
  // an object that matches the position interface.
  const position = node.position || {
    start: {
      line: null,
      column: null,
      offset: null
    },
    end: {
      line: null,
      column: null,
      offset: null
    }
  };
  const component = options.components && own.call(options.components, name) ? options.components[name] : name;
  const basic = typeof component === 'string' || component === react__WEBPACK_IMPORTED_MODULE_0__.Fragment;
  if (!react_is__WEBPACK_IMPORTED_MODULE_1__.isValidElementType(component)) {
    throw new TypeError(`Component for name \`${name}\` not defined or is not renderable`);
  }
  properties.key = [name, position.start.line, position.start.column, index].join('-');
  if (name === 'a' && options.linkTarget) {
    properties.target = typeof options.linkTarget === 'function' ? options.linkTarget(String(properties.href || ''), node.children, typeof properties.title === 'string' ? properties.title : null) : options.linkTarget;
  }
  if (name === 'a' && transform) {
    properties.href = transform(String(properties.href || ''), node.children, typeof properties.title === 'string' ? properties.title : null);
  }
  if (!basic && name === 'code' && parent.type === 'element' && parent.tagName !== 'pre') {
    properties.inline = true;
  }
  if (!basic && (name === 'h1' || name === 'h2' || name === 'h3' || name === 'h4' || name === 'h5' || name === 'h6')) {
    properties.level = Number.parseInt(name.charAt(1), 10);
  }
  if (name === 'img' && options.transformImageUri) {
    properties.src = options.transformImageUri(String(properties.src || ''), String(properties.alt || ''), typeof properties.title === 'string' ? properties.title : null);
  }
  if (!basic && name === 'li' && parent.type === 'element') {
    const input = getInputElement(node);
    properties.checked = input && input.properties ? Boolean(input.properties.checked) : null;
    properties.index = getElementsBeforeCount(parent, node);
    properties.ordered = parent.tagName === 'ol';
  }
  if (!basic && (name === 'ol' || name === 'ul')) {
    properties.ordered = name === 'ol';
    properties.depth = context.listDepth;
  }
  if (name === 'td' || name === 'th') {
    if (properties.align) {
      if (!properties.style) properties.style = {};
      // @ts-expect-error assume `style` is an object
      properties.style.textAlign = properties.align;
      delete properties.align;
    }
    if (!basic) {
      properties.isHeader = name === 'th';
    }
  }
  if (!basic && name === 'tr' && parent.type === 'element') {
    properties.isHeader = Boolean(parent.tagName === 'thead');
  }

  // If `sourcePos` is given, pass source information (line/column info from markdown source).
  if (options.sourcePos) {
    properties['data-sourcepos'] = flattenPosition(position);
  }
  if (!basic && options.rawSourcePos) {
    properties.sourcePosition = node.position;
  }

  // If `includeElementIndex` is given, pass node index info to components.
  if (!basic && options.includeElementIndex) {
    properties.index = getElementsBeforeCount(parent, node);
    properties.siblingCount = getElementsBeforeCount(parent);
  }
  if (!basic) {
    properties.node = node;
  }

  // Ensure no React warnings are emitted for void elements w/ children.
  return children.length > 0 ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(component, properties, children) : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(component, properties);
}

/**
 * @param {Element|Root} node
 * @returns {Element?}
 */
function getInputElement(node) {
  let index = -1;
  while (++index < node.children.length) {
    const child = node.children[index];
    if (child.type === 'element' && child.tagName === 'input') {
      return child;
    }
  }
  return null;
}

/**
 * @param {Element|Root} parent
 * @param {Element} [node]
 * @returns {number}
 */
function getElementsBeforeCount(parent, node) {
  let index = -1;
  let count = 0;
  while (++index < parent.children.length) {
    if (parent.children[index] === node) break;
    if (parent.children[index].type === 'element') count++;
  }
  return count;
}

/**
 * @param {Record<string, unknown>} props
 * @param {string} prop
 * @param {unknown} value
 * @param {Context} ctx
 */
function addProperty(props, prop, value, ctx) {
  const info = (0,property_information__WEBPACK_IMPORTED_MODULE_6__.find)(ctx.schema, prop);
  let result = value;

  // Ignore nullish and `NaN` values.
  // eslint-disable-next-line no-self-compare
  if (result === null || result === undefined || result !== result) {
    return;
  }

  // Accept `array`.
  // Most props are space-separated.
  if (Array.isArray(result)) {
    result = info.commaSeparated ? (0,comma_separated_tokens__WEBPACK_IMPORTED_MODULE_7__.stringify)(result) : (0,space_separated_tokens__WEBPACK_IMPORTED_MODULE_8__.stringify)(result);
  }
  if (info.property === 'style' && typeof result === 'string') {
    result = parseStyle(result);
  }
  if (info.space && info.property) {
    props[own.call(property_information__WEBPACK_IMPORTED_MODULE_9__.hastToReact, info.property) ? property_information__WEBPACK_IMPORTED_MODULE_9__.hastToReact[info.property] : info.property] = result;
  } else if (info.attribute) {
    props[info.attribute] = result;
  }
}

/**
 * @param {string} value
 * @returns {Record<string, string>}
 */
function parseStyle(value) {
  /** @type {Record<string, string>} */
  const result = {};
  try {
    (0,style_to_object__WEBPACK_IMPORTED_MODULE_2__["default"])(value, iterator);
  } catch {
    // Silent.
  }
  return result;

  /**
   * @param {string} name
   * @param {string} v
   */
  function iterator(name, v) {
    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name;
    result[k.replace(/-([a-z])/g, styleReplacer)] = v;
  }
}

/**
 * @param {unknown} _
 * @param {string} $1
 */
function styleReplacer(_, $1) {
  return $1.toUpperCase();
}

/**
 * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos
 * @returns {string}
 */
function flattenPosition(pos) {
  return [pos.start.line, ':', pos.start.column, '-', pos.end.line, ':', pos.end.column].map(String).join('');
}

/***/ }),

/***/ "./node_modules/react-markdown/lib/react-markdown.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-markdown/lib/react-markdown.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReactMarkdown": function() { return /* binding */ ReactMarkdown; }
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var vfile__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! vfile */ "./node_modules/vfile/lib/index.js");
/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unified */ "./node_modules/unified/lib/index.js");
/* harmony import */ var remark_parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! remark-parse */ "./node_modules/remark-parse/index.js");
/* harmony import */ var remark_rehype__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! remark-rehype */ "./node_modules/remark-rehype/lib/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var property_information__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! property-information */ "./node_modules/property-information/index.js");
/* harmony import */ var _rehype_filter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rehype-filter.js */ "./node_modules/react-markdown/lib/rehype-filter.js");
/* harmony import */ var _ast_to_react_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ast-to-react.js */ "./node_modules/react-markdown/lib/ast-to-react.js");
/**
 * @typedef {import('react').ReactNode} ReactNode
 * @typedef {import('react').ReactElement<{}>} ReactElement
 * @typedef {import('unified').PluggableList} PluggableList
 * @typedef {import('hast').Root} Root
 * @typedef {import('./rehype-filter.js').Options} FilterOptions
 * @typedef {import('./ast-to-react.js').Options} TransformOptions
 *
 * @typedef CoreOptions
 * @property {string} children
 *
 * @typedef PluginOptions
 * @property {PluggableList} [remarkPlugins=[]]
 * @property {PluggableList} [rehypePlugins=[]]
 * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]
 *
 * @typedef LayoutOptions
 * @property {string} [className]
 *
 * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions
 *
 * @typedef Deprecation
 * @property {string} id
 * @property {string} [to]
 */










const own = {}.hasOwnProperty;
const changelog = 'https://github.com/remarkjs/react-markdown/blob/main/changelog.md';

/** @type {Record<string, Deprecation>} */
const deprecated = {
  plugins: {
    to: 'remarkPlugins',
    id: 'change-plugins-to-remarkplugins'
  },
  renderers: {
    to: 'components',
    id: 'change-renderers-to-components'
  },
  astPlugins: {
    id: 'remove-buggy-html-in-markdown-parser'
  },
  allowDangerousHtml: {
    id: 'remove-buggy-html-in-markdown-parser'
  },
  escapeHtml: {
    id: 'remove-buggy-html-in-markdown-parser'
  },
  source: {
    to: 'children',
    id: 'change-source-to-children'
  },
  allowNode: {
    to: 'allowElement',
    id: 'replace-allownode-allowedtypes-and-disallowedtypes'
  },
  allowedTypes: {
    to: 'allowedElements',
    id: 'replace-allownode-allowedtypes-and-disallowedtypes'
  },
  disallowedTypes: {
    to: 'disallowedElements',
    id: 'replace-allownode-allowedtypes-and-disallowedtypes'
  },
  includeNodeIndex: {
    to: 'includeElementIndex',
    id: 'change-includenodeindex-to-includeelementindex'
  }
};

/**
 * React component to render markdown.
 *
 * @param {ReactMarkdownOptions} options
 * @returns {ReactElement}
 */
function ReactMarkdown(options) {
  for (const key in deprecated) {
    if (own.call(deprecated, key) && own.call(options, key)) {
      const deprecation = deprecated[key];
      console.warn(`[react-markdown] Warning: please ${deprecation.to ? `use \`${deprecation.to}\` instead of` : 'remove'} \`${key}\` (see <${changelog}#${deprecation.id}> for more info)`);
      delete deprecated[key];
    }
  }
  const processor = (0,unified__WEBPACK_IMPORTED_MODULE_1__.unified)().use(remark_parse__WEBPACK_IMPORTED_MODULE_2__["default"]).use(options.remarkPlugins || []).use(remark_rehype__WEBPACK_IMPORTED_MODULE_3__["default"], {
    ...options.remarkRehypeOptions,
    allowDangerousHtml: true
  }).use(options.rehypePlugins || []).use(_rehype_filter_js__WEBPACK_IMPORTED_MODULE_4__["default"], options);
  const file = new vfile__WEBPACK_IMPORTED_MODULE_5__.VFile();
  if (typeof options.children === 'string') {
    file.value = options.children;
  } else if (options.children !== undefined && options.children !== null) {
    console.warn(`[react-markdown] Warning: please pass a string as \`children\` (not: \`${options.children}\`)`);
  }
  const hastNode = processor.runSync(processor.parse(file), file);
  if (hastNode.type !== 'root') {
    throw new TypeError('Expected a `root` node');
  }

  /** @type {ReactElement} */
  let result = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}, (0,_ast_to_react_js__WEBPACK_IMPORTED_MODULE_6__.childrenToReact)({
    options,
    schema: property_information__WEBPACK_IMPORTED_MODULE_7__.html,
    listDepth: 0
  }, hastNode));
  if (options.className) {
    result = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement('div', {
      className: options.className
    }, result);
  }
  return result;
}
ReactMarkdown.propTypes = {
  // Core options:
  children: prop_types__WEBPACK_IMPORTED_MODULE_8__.string,
  // Layout options:
  className: prop_types__WEBPACK_IMPORTED_MODULE_8__.string,
  // Filter options:
  allowElement: prop_types__WEBPACK_IMPORTED_MODULE_8__.func,
  allowedElements: prop_types__WEBPACK_IMPORTED_MODULE_8__.arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_8__.string),
  disallowedElements: prop_types__WEBPACK_IMPORTED_MODULE_8__.arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_8__.string),
  unwrapDisallowed: prop_types__WEBPACK_IMPORTED_MODULE_8__.bool,
  // Plugin options:
  remarkPlugins: prop_types__WEBPACK_IMPORTED_MODULE_8__.arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_8__.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_8__.object, prop_types__WEBPACK_IMPORTED_MODULE_8__.func, prop_types__WEBPACK_IMPORTED_MODULE_8__.arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_8__.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_8__.bool, prop_types__WEBPACK_IMPORTED_MODULE_8__.string, prop_types__WEBPACK_IMPORTED_MODULE_8__.object, prop_types__WEBPACK_IMPORTED_MODULE_8__.func, prop_types__WEBPACK_IMPORTED_MODULE_8__.arrayOf(
  // prettier-ignore
  // type-coverage:ignore-next-line
  prop_types__WEBPACK_IMPORTED_MODULE_8__.any)]))])),
  rehypePlugins: prop_types__WEBPACK_IMPORTED_MODULE_8__.arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_8__.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_8__.object, prop_types__WEBPACK_IMPORTED_MODULE_8__.func, prop_types__WEBPACK_IMPORTED_MODULE_8__.arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_8__.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_8__.bool, prop_types__WEBPACK_IMPORTED_MODULE_8__.string, prop_types__WEBPACK_IMPORTED_MODULE_8__.object, prop_types__WEBPACK_IMPORTED_MODULE_8__.func, prop_types__WEBPACK_IMPORTED_MODULE_8__.arrayOf(
  // prettier-ignore
  // type-coverage:ignore-next-line
  prop_types__WEBPACK_IMPORTED_MODULE_8__.any)]))])),
  // Transform options:
  sourcePos: prop_types__WEBPACK_IMPORTED_MODULE_8__.bool,
  rawSourcePos: prop_types__WEBPACK_IMPORTED_MODULE_8__.bool,
  skipHtml: prop_types__WEBPACK_IMPORTED_MODULE_8__.bool,
  includeElementIndex: prop_types__WEBPACK_IMPORTED_MODULE_8__.bool,
  transformLinkUri: prop_types__WEBPACK_IMPORTED_MODULE_8__.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_8__.func, prop_types__WEBPACK_IMPORTED_MODULE_8__.bool]),
  linkTarget: prop_types__WEBPACK_IMPORTED_MODULE_8__.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_8__.func, prop_types__WEBPACK_IMPORTED_MODULE_8__.string]),
  transformImageUri: prop_types__WEBPACK_IMPORTED_MODULE_8__.func,
  components: prop_types__WEBPACK_IMPORTED_MODULE_8__.object
};

/***/ }),

/***/ "./node_modules/react-markdown/lib/rehype-filter.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-markdown/lib/rehype-filter.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ rehypeFilter; }
/* harmony export */ });
/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-visit */ "./node_modules/unist-util-visit/lib/index.js");


/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('hast').Root} Root
 * @typedef {import('hast').Element} Element
 *
 * @callback AllowElement
 * @param {Element} element
 * @param {number} index
 * @param {Element|Root} parent
 * @returns {boolean|undefined}
 *
 * @typedef Options
 * @property {Array<string>} [allowedElements]
 * @property {Array<string>} [disallowedElements=[]]
 * @property {AllowElement} [allowElement]
 * @property {boolean} [unwrapDisallowed=false]
 */

/**
 * @type {import('unified').Plugin<[Options], Root>}
 */
function rehypeFilter(options) {
  if (options.allowedElements && options.disallowedElements) {
    throw new TypeError('Only one of `allowedElements` and `disallowedElements` should be defined');
  }
  if (options.allowedElements || options.disallowedElements || options.allowElement) {
    return tree => {
      (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, 'element', (node, index, parent_) => {
        const parent = /** @type {Element|Root} */parent_;
        /** @type {boolean|undefined} */
        let remove;
        if (options.allowedElements) {
          remove = !options.allowedElements.includes(node.tagName);
        } else if (options.disallowedElements) {
          remove = options.disallowedElements.includes(node.tagName);
        }
        if (!remove && options.allowElement && typeof index === 'number') {
          remove = !options.allowElement(node, index, parent);
        }
        if (remove && typeof index === 'number') {
          if (options.unwrapDisallowed && node.children) {
            parent.children.splice(index, 1, ...node.children);
          } else {
            parent.children.splice(index, 1);
          }
          return index;
        }
        return undefined;
      });
    };
  }
}

/***/ }),

/***/ "./node_modules/react-markdown/lib/uri-transformer.js":
/*!************************************************************!*\
  !*** ./node_modules/react-markdown/lib/uri-transformer.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "uriTransformer": function() { return /* binding */ uriTransformer; }
/* harmony export */ });
const protocols = ['http', 'https', 'mailto', 'tel'];

/**
 * @param {string} uri
 * @returns {string}
 */
function uriTransformer(uri) {
  const url = (uri || '').trim();
  const first = url.charAt(0);
  if (first === '#' || first === '/') {
    return url;
  }
  const colon = url.indexOf(':');
  if (colon === -1) {
    return url;
  }
  let index = -1;
  while (++index < protocols.length) {
    const protocol = protocols[index];
    if (colon === protocol.length && url.slice(0, protocol.length).toLowerCase() === protocol) {
      return url;
    }
  }
  index = url.indexOf('?');
  if (index !== -1 && colon > index) {
    return url;
  }
  index = url.indexOf('#');
  if (index !== -1 && colon > index) {
    return url;
  }

  // eslint-disable-next-line no-script-url
  return 'javascript:void(0)';
}

/***/ }),

/***/ "./node_modules/remark-parse/index.js":
/*!********************************************!*\
  !*** ./node_modules/remark-parse/index.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/index.js */ "./node_modules/remark-parse/lib/index.js");

/* harmony default export */ __webpack_exports__["default"] = (_lib_index_js__WEBPACK_IMPORTED_MODULE_0__["default"]);

/***/ }),

/***/ "./node_modules/remark-parse/lib/index.js":
/*!************************************************!*\
  !*** ./node_modules/remark-parse/lib/index.js ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ remarkParse; }
/* harmony export */ });
/* harmony import */ var mdast_util_from_markdown__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mdast-util-from-markdown */ "./node_modules/mdast-util-from-markdown/dev/lib/index.js");
/**
 * @typedef {import('mdast').Root} Root
 * @typedef {import('mdast-util-from-markdown').Options} Options
 */



/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */
function remarkParse(options) {
  /** @type {import('unified').ParserFunction<Root>} */
  const parser = doc => {
    // Assume options.
    const settings = /** @type {Options} */this.data('settings');
    return (0,mdast_util_from_markdown__WEBPACK_IMPORTED_MODULE_0__.fromMarkdown)(doc, Object.assign({}, settings, options, {
      // Note: these options are not in the readme.
      // The goal is for them to be set by plugins on `data` instead of being
      // passed by users.
      extensions: this.data('micromarkExtensions') || [],
      mdastExtensions: this.data('fromMarkdownExtensions') || []
    }));
  };
  Object.assign(this, {
    Parser: parser
  });
}

/***/ }),

/***/ "./node_modules/remark-rehype/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/remark-rehype/lib/index.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var mdast_util_to_hast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mdast-util-to-hast */ "./node_modules/mdast-util-to-hast/lib/index.js");
/**
 * @typedef {import('hast').Root} HastRoot
 * @typedef {import('mdast').Root} MdastRoot
 * @typedef {import('mdast-util-to-hast').Options} Options
 * @typedef {import('unified').Processor<any, any, any, any>} Processor
 *
 * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree
 */



// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(

/**
 * Plugin that turns markdown into HTML to support rehype.
 *
 * *   If a destination processor is given, that processor runs with a new HTML
 *     (hast) tree (bridge-mode).
 *     As the given processor runs with a hast tree, and rehype plugins support
 *     hast, that means rehype plugins can be used with the given processor.
 *     The hast tree is discarded in the end.
 *     It’s highly unlikely that you want to do this.
 * *   The common case is to not pass a destination processor, in which case the
 *     current processor continues running with a new HTML (hast) tree
 *     (mutate-mode).
 *     As the current processor continues with a hast tree, and rehype plugins
 *     support hast, that means rehype plugins can be used after
 *     `remark-rehype`.
 *     It’s likely that this is what you want to do.
 *
 * @param destination
 *   Optional unified processor.
 * @param options
 *   Options passed to `mdast-util-to-hast`.
 */
const remarkRehype = /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */

function (destination, options) {
  return destination && 'run' in destination ? bridge(destination, options) : mutate(destination || options);
};
/* harmony default export */ __webpack_exports__["default"] = (remarkRehype);

/**
 * Bridge-mode.
 * Runs the destination with the new hast tree.
 *
 * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}
 */
function bridge(destination, options) {
  return (node, file, next) => {
    destination.run((0,mdast_util_to_hast__WEBPACK_IMPORTED_MODULE_0__.toHast)(node, options), file, error => {
      next(error);
    });
  };
}

/**
 * Mutate-mode.
 * Further plugins run on the hast tree.
 *
 * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}
 */
function mutate(options) {
  // @ts-expect-error: assume a corresponding node is returned by `toHast`.
  return node => (0,mdast_util_to_hast__WEBPACK_IMPORTED_MODULE_0__.toHast)(node, options);
}

/***/ }),

/***/ "./node_modules/space-separated-tokens/index.js":
/*!******************************************************!*\
  !*** ./node_modules/space-separated-tokens/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parse": function() { return /* binding */ parse; },
/* harmony export */   "stringify": function() { return /* binding */ stringify; }
/* harmony export */ });
/**
 * Parse space-separated tokens to an array of strings.
 *
 * @param {string} value
 *   Space-separated tokens.
 * @returns {Array<string>}
 *   List of tokens.
 */
function parse(value) {
  const input = String(value || '').trim();
  return input ? input.split(/[ \t\n\r\f]+/g) : [];
}

/**
 * Serialize an array of strings as space separated-tokens.
 *
 * @param {Array<string|number>} values
 *   List of tokens.
 * @returns {string}
 *   Space-separated tokens.
 */
function stringify(values) {
  return values.join(' ').trim();
}

/***/ }),

/***/ "./node_modules/trim-lines/index.js":
/*!******************************************!*\
  !*** ./node_modules/trim-lines/index.js ***!
  \******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "trimLines": function() { return /* binding */ trimLines; }
/* harmony export */ });
const tab = 9; /* `\t` */
const space = 32; /* ` ` */

/**
 * Remove initial and final spaces and tabs at the line breaks in `value`.
 * Does not trim initial and final spaces and tabs of the value itself.
 *
 * @param {string} value
 *   Value to trim.
 * @returns {string}
 *   Trimmed value.
 */
function trimLines(value) {
  const source = String(value);
  const search = /\r?\n|\r/g;
  let match = search.exec(source);
  let last = 0;
  /** @type {Array<string>} */
  const lines = [];
  while (match) {
    lines.push(trimLine(source.slice(last, match.index), last > 0, true), match[0]);
    last = match.index + match[0].length;
    match = search.exec(source);
  }
  lines.push(trimLine(source.slice(last), last > 0, false));
  return lines.join('');
}

/**
 * @param {string} value
 *   Line to trim.
 * @param {boolean} start
 *   Whether to trim the start of the line.
 * @param {boolean} end
 *   Whether to trim the end of the line.
 * @returns {string}
 *   Trimmed line.
 */
function trimLine(value, start, end) {
  let startIndex = 0;
  let endIndex = value.length;
  if (start) {
    let code = value.codePointAt(startIndex);
    while (code === tab || code === space) {
      startIndex++;
      code = value.codePointAt(startIndex);
    }
  }
  if (end) {
    let code = value.codePointAt(endIndex - 1);
    while (code === tab || code === space) {
      endIndex--;
      code = value.codePointAt(endIndex - 1);
    }
  }
  return endIndex > startIndex ? value.slice(startIndex, endIndex) : '';
}

/***/ }),

/***/ "./node_modules/trough/index.js":
/*!**************************************!*\
  !*** ./node_modules/trough/index.js ***!
  \**************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "trough": function() { return /* binding */ trough; },
/* harmony export */   "wrap": function() { return /* binding */ wrap; }
/* harmony export */ });
/**
 * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback
 * @typedef {(...input: Array<any>) => any} Middleware
 *
 * @typedef {(...input: Array<any>) => void} Run
 *   Call all middleware.
 * @typedef {(fn: Middleware) => Pipeline} Use
 *   Add `fn` (middleware) to the list.
 * @typedef {{run: Run, use: Use}} Pipeline
 *   Middleware.
 */

/**
 * Create new middleware.
 *
 * @returns {Pipeline}
 */
function trough() {
  /** @type {Array<Middleware>} */
  const fns = [];
  /** @type {Pipeline} */
  const pipeline = {
    run,
    use
  };
  return pipeline;

  /** @type {Run} */
  function run() {
    for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
      values[_key] = arguments[_key];
    }
    let middlewareIndex = -1;
    /** @type {Callback} */
    const callback = values.pop();
    if (typeof callback !== 'function') {
      throw new TypeError('Expected function as last argument, not ' + callback);
    }
    next(null, ...values);

    /**
     * Run the next `fn`, or we’re done.
     *
     * @param {Error|null|undefined} error
     * @param {Array<any>} output
     */
    function next(error) {
      const fn = fns[++middlewareIndex];
      let index = -1;
      if (error) {
        callback(error);
        return;
      }

      // Copy non-nullish input into values.
      for (var _len2 = arguments.length, output = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        output[_key2 - 1] = arguments[_key2];
      }
      while (++index < values.length) {
        if (output[index] === null || output[index] === undefined) {
          output[index] = values[index];
        }
      }

      // Save the newly created `output` for the next call.
      values = output;

      // Next or done.
      if (fn) {
        wrap(fn, next)(...output);
      } else {
        callback(null, ...output);
      }
    }
  }

  /** @type {Use} */
  function use(middelware) {
    if (typeof middelware !== 'function') {
      throw new TypeError('Expected `middelware` to be a function, not ' + middelware);
    }
    fns.push(middelware);
    return pipeline;
  }
}

/**
 * Wrap `middleware`.
 * Can be sync or async; return a promise, receive a callback, or return new
 * values and errors.
 *
 * @param {Middleware} middleware
 * @param {Callback} callback
 */
function wrap(middleware, callback) {
  /** @type {boolean} */
  let called;
  return wrapped;

  /**
   * Call `middleware`.
   * @this {any}
   * @param {Array<any>} parameters
   * @returns {void}
   */
  function wrapped() {
    for (var _len3 = arguments.length, parameters = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      parameters[_key3] = arguments[_key3];
    }
    const fnExpectsCallback = middleware.length > parameters.length;
    /** @type {any} */
    let result;
    if (fnExpectsCallback) {
      parameters.push(done);
    }
    try {
      result = middleware.apply(this, parameters);
    } catch (error) {
      const exception = /** @type {Error} */error;

      // Well, this is quite the pickle.
      // `middleware` received a callback and called it synchronously, but that
      // threw an error.
      // The only thing left to do is to throw the thing instead.
      if (fnExpectsCallback && called) {
        throw exception;
      }
      return done(exception);
    }
    if (!fnExpectsCallback) {
      if (result instanceof Promise) {
        result.then(then, done);
      } else if (result instanceof Error) {
        done(result);
      } else {
        then(result);
      }
    }
  }

  /**
   * Call `callback`, only once.
   * @type {Callback}
   */
  function done(error) {
    if (!called) {
      called = true;
      for (var _len4 = arguments.length, output = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        output[_key4 - 1] = arguments[_key4];
      }
      callback(error, ...output);
    }
  }

  /**
   * Call `done` with one value.
   *
   * @param {any} [value]
   */
  function then(value) {
    done(null, value);
  }
}

/***/ }),

/***/ "./node_modules/unified/lib/index.js":
/*!*******************************************!*\
  !*** ./node_modules/unified/lib/index.js ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unified": function() { return /* binding */ unified; }
/* harmony export */ });
/* harmony import */ var bail__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bail */ "./node_modules/bail/index.js");
/* harmony import */ var is_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! is-buffer */ "./node_modules/is-buffer/index.js");
/* harmony import */ var extend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! extend */ "./node_modules/extend/index.js");
/* harmony import */ var is_plain_obj__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! is-plain-obj */ "./node_modules/unified/node_modules/is-plain-obj/index.js");
/* harmony import */ var trough__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! trough */ "./node_modules/trough/index.js");
/* harmony import */ var vfile__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! vfile */ "./node_modules/vfile/lib/index.js");
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('vfile').VFileCompatible} VFileCompatible
 * @typedef {import('vfile').VFileValue} VFileValue
 * @typedef {import('..').Processor} Processor
 * @typedef {import('..').Plugin} Plugin
 * @typedef {import('..').Preset} Preset
 * @typedef {import('..').Pluggable} Pluggable
 * @typedef {import('..').PluggableList} PluggableList
 * @typedef {import('..').Transformer} Transformer
 * @typedef {import('..').Parser} Parser
 * @typedef {import('..').Compiler} Compiler
 * @typedef {import('..').RunCallback} RunCallback
 * @typedef {import('..').ProcessCallback} ProcessCallback
 *
 * @typedef Context
 * @property {Node} tree
 * @property {VFile} file
 */








// Expose a frozen processor.
const unified = base().freeze();
const own = {}.hasOwnProperty;

// Function to create the first processor.
/**
 * @returns {Processor}
 */
function base() {
  const transformers = (0,trough__WEBPACK_IMPORTED_MODULE_3__.trough)();
  /** @type {Processor['attachers']} */
  const attachers = [];
  /** @type {Record<string, unknown>} */
  let namespace = {};
  /** @type {boolean|undefined} */
  let frozen;
  let freezeIndex = -1;

  // Data management.
  // @ts-expect-error: overloads are handled.
  processor.data = data;
  processor.Parser = undefined;
  processor.Compiler = undefined;

  // Lock.
  processor.freeze = freeze;

  // Plugins.
  processor.attachers = attachers;
  // @ts-expect-error: overloads are handled.
  processor.use = use;

  // API.
  processor.parse = parse;
  processor.stringify = stringify;
  // @ts-expect-error: overloads are handled.
  processor.run = run;
  processor.runSync = runSync;
  // @ts-expect-error: overloads are handled.
  processor.process = process;
  processor.processSync = processSync;

  // Expose.
  return processor;

  // Create a new processor based on the processor in the current scope.
  /** @type {Processor} */
  function processor() {
    const destination = base();
    let index = -1;
    while (++index < attachers.length) {
      destination.use(...attachers[index]);
    }
    destination.data(extend__WEBPACK_IMPORTED_MODULE_1__(true, {}, namespace));
    return destination;
  }

  /**
   * @param {string|Record<string, unknown>} [key]
   * @param {unknown} [value]
   * @returns {unknown}
   */
  function data(key, value) {
    if (typeof key === 'string') {
      // Set `key`.
      if (arguments.length === 2) {
        assertUnfrozen('data', frozen);
        namespace[key] = value;
        return processor;
      }

      // Get `key`.
      return own.call(namespace, key) && namespace[key] || null;
    }

    // Set space.
    if (key) {
      assertUnfrozen('data', frozen);
      namespace = key;
      return processor;
    }

    // Get space.
    return namespace;
  }

  /** @type {Processor['freeze']} */
  function freeze() {
    if (frozen) {
      return processor;
    }
    while (++freezeIndex < attachers.length) {
      const [attacher, ...options] = attachers[freezeIndex];
      if (options[0] === false) {
        continue;
      }
      if (options[0] === true) {
        options[0] = undefined;
      }

      /** @type {Transformer|void} */
      const transformer = attacher.call(processor, ...options);
      if (typeof transformer === 'function') {
        transformers.use(transformer);
      }
    }
    frozen = true;
    freezeIndex = Number.POSITIVE_INFINITY;
    return processor;
  }

  /**
   * @param {Pluggable|null|undefined} [value]
   * @param {...unknown} options
   * @returns {Processor}
   */
  function use(value) {
    for (var _len = arguments.length, options = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      options[_key - 1] = arguments[_key];
    }
    /** @type {Record<string, unknown>|undefined} */
    let settings;
    assertUnfrozen('use', frozen);
    if (value === null || value === undefined) {
      // Empty.
    } else if (typeof value === 'function') {
      addPlugin(value, ...options);
    } else if (typeof value === 'object') {
      if (Array.isArray(value)) {
        addList(value);
      } else {
        addPreset(value);
      }
    } else {
      throw new TypeError('Expected usable value, not `' + value + '`');
    }
    if (settings) {
      namespace.settings = Object.assign(namespace.settings || {}, settings);
    }
    return processor;

    /**
     * @param {import('..').Pluggable<unknown[]>} value
     * @returns {void}
     */
    function add(value) {
      if (typeof value === 'function') {
        addPlugin(value);
      } else if (typeof value === 'object') {
        if (Array.isArray(value)) {
          const [plugin, ...options] = value;
          addPlugin(plugin, ...options);
        } else {
          addPreset(value);
        }
      } else {
        throw new TypeError('Expected usable value, not `' + value + '`');
      }
    }

    /**
     * @param {Preset} result
     * @returns {void}
     */
    function addPreset(result) {
      addList(result.plugins);
      if (result.settings) {
        settings = Object.assign(settings || {}, result.settings);
      }
    }

    /**
     * @param {PluggableList|null|undefined} [plugins]
     * @returns {void}
     */
    function addList(plugins) {
      let index = -1;
      if (plugins === null || plugins === undefined) {
        // Empty.
      } else if (Array.isArray(plugins)) {
        while (++index < plugins.length) {
          const thing = plugins[index];
          add(thing);
        }
      } else {
        throw new TypeError('Expected a list of plugins, not `' + plugins + '`');
      }
    }

    /**
     * @param {Plugin} plugin
     * @param {...unknown} [value]
     * @returns {void}
     */
    function addPlugin(plugin, value) {
      let index = -1;
      /** @type {Processor['attachers'][number]|undefined} */
      let entry;
      while (++index < attachers.length) {
        if (attachers[index][0] === plugin) {
          entry = attachers[index];
          break;
        }
      }
      if (entry) {
        if ((0,is_plain_obj__WEBPACK_IMPORTED_MODULE_2__["default"])(entry[1]) && (0,is_plain_obj__WEBPACK_IMPORTED_MODULE_2__["default"])(value)) {
          value = extend__WEBPACK_IMPORTED_MODULE_1__(true, entry[1], value);
        }
        entry[1] = value;
      } else {
        // @ts-expect-error: fine.
        attachers.push([...arguments]);
      }
    }
  }

  /** @type {Processor['parse']} */
  function parse(doc) {
    processor.freeze();
    const file = vfile(doc);
    const Parser = processor.Parser;
    assertParser('parse', Parser);
    if (newable(Parser, 'parse')) {
      // @ts-expect-error: `newable` checks this.
      return new Parser(String(file), file).parse();
    }

    // @ts-expect-error: `newable` checks this.
    return Parser(String(file), file); // eslint-disable-line new-cap
  }

  /** @type {Processor['stringify']} */
  function stringify(node, doc) {
    processor.freeze();
    const file = vfile(doc);
    const Compiler = processor.Compiler;
    assertCompiler('stringify', Compiler);
    assertNode(node);
    if (newable(Compiler, 'compile')) {
      // @ts-expect-error: `newable` checks this.
      return new Compiler(node, file).compile();
    }

    // @ts-expect-error: `newable` checks this.
    return Compiler(node, file); // eslint-disable-line new-cap
  }

  /**
   * @param {Node} node
   * @param {VFileCompatible|RunCallback} [doc]
   * @param {RunCallback} [callback]
   * @returns {Promise<Node>|void}
   */
  function run(node, doc, callback) {
    assertNode(node);
    processor.freeze();
    if (!callback && typeof doc === 'function') {
      callback = doc;
      doc = undefined;
    }
    if (!callback) {
      return new Promise(executor);
    }
    executor(null, callback);

    /**
     * @param {null|((node: Node) => void)} resolve
     * @param {(error: Error) => void} reject
     * @returns {void}
     */
    function executor(resolve, reject) {
      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.
      transformers.run(node, vfile(doc), done);

      /**
       * @param {Error|null} error
       * @param {Node} tree
       * @param {VFile} file
       * @returns {void}
       */
      function done(error, tree, file) {
        tree = tree || node;
        if (error) {
          reject(error);
        } else if (resolve) {
          resolve(tree);
        } else {
          // @ts-expect-error: `callback` is defined if `resolve` is not.
          callback(null, tree, file);
        }
      }
    }
  }

  /** @type {Processor['runSync']} */
  function runSync(node, file) {
    /** @type {Node|undefined} */
    let result;
    /** @type {boolean|undefined} */
    let complete;
    processor.run(node, file, done);
    assertDone('runSync', 'run', complete);

    // @ts-expect-error: we either bailed on an error or have a tree.
    return result;

    /**
     * @param {Error|null} [error]
     * @param {Node} [tree]
     * @returns {void}
     */
    function done(error, tree) {
      (0,bail__WEBPACK_IMPORTED_MODULE_4__.bail)(error);
      result = tree;
      complete = true;
    }
  }

  /**
   * @param {VFileCompatible} doc
   * @param {ProcessCallback} [callback]
   * @returns {Promise<VFile>|undefined}
   */
  function process(doc, callback) {
    processor.freeze();
    assertParser('process', processor.Parser);
    assertCompiler('process', processor.Compiler);
    if (!callback) {
      return new Promise(executor);
    }
    executor(null, callback);

    /**
     * @param {null|((file: VFile) => void)} resolve
     * @param {(error?: Error|null|undefined) => void} reject
     * @returns {void}
     */
    function executor(resolve, reject) {
      const file = vfile(doc);
      processor.run(processor.parse(file), file, (error, tree, file) => {
        if (error || !tree || !file) {
          done(error);
        } else {
          /** @type {unknown} */
          const result = processor.stringify(tree, file);
          if (result === undefined || result === null) {
            // Empty.
          } else if (looksLikeAVFileValue(result)) {
            file.value = result;
          } else {
            file.result = result;
          }
          done(error, file);
        }
      });

      /**
       * @param {Error|null|undefined} [error]
       * @param {VFile|undefined} [file]
       * @returns {void}
       */
      function done(error, file) {
        if (error || !file) {
          reject(error);
        } else if (resolve) {
          resolve(file);
        } else {
          // @ts-expect-error: `callback` is defined if `resolve` is not.
          callback(null, file);
        }
      }
    }
  }

  /** @type {Processor['processSync']} */
  function processSync(doc) {
    /** @type {boolean|undefined} */
    let complete;
    processor.freeze();
    assertParser('processSync', processor.Parser);
    assertCompiler('processSync', processor.Compiler);
    const file = vfile(doc);
    processor.process(file, done);
    assertDone('processSync', 'process', complete);
    return file;

    /**
     * @param {Error|null|undefined} [error]
     * @returns {void}
     */
    function done(error) {
      complete = true;
      (0,bail__WEBPACK_IMPORTED_MODULE_4__.bail)(error);
    }
  }
}

/**
 * Check if `value` is a constructor.
 *
 * @param {unknown} value
 * @param {string} name
 * @returns {boolean}
 */
function newable(value, name) {
  return typeof value === 'function' &&
  // Prototypes do exist.
  // type-coverage:ignore-next-line
  value.prototype && (
  // A function with keys in its prototype is probably a constructor.
  // Classes’ prototype methods are not enumerable, so we check if some value
  // exists in the prototype.
  // type-coverage:ignore-next-line
  keys(value.prototype) || name in value.prototype);
}

/**
 * Check if `value` is an object with keys.
 *
 * @param {Record<string, unknown>} value
 * @returns {boolean}
 */
function keys(value) {
  /** @type {string} */
  let key;
  for (key in value) {
    if (own.call(value, key)) {
      return true;
    }
  }
  return false;
}

/**
 * Assert a parser is available.
 *
 * @param {string} name
 * @param {unknown} value
 * @returns {asserts value is Parser}
 */
function assertParser(name, value) {
  if (typeof value !== 'function') {
    throw new TypeError('Cannot `' + name + '` without `Parser`');
  }
}

/**
 * Assert a compiler is available.
 *
 * @param {string} name
 * @param {unknown} value
 * @returns {asserts value is Compiler}
 */
function assertCompiler(name, value) {
  if (typeof value !== 'function') {
    throw new TypeError('Cannot `' + name + '` without `Compiler`');
  }
}

/**
 * Assert the processor is not frozen.
 *
 * @param {string} name
 * @param {unknown} frozen
 * @returns {asserts frozen is false}
 */
function assertUnfrozen(name, frozen) {
  if (frozen) {
    throw new Error('Cannot call `' + name + '` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.');
  }
}

/**
 * Assert `node` is a unist node.
 *
 * @param {unknown} node
 * @returns {asserts node is Node}
 */
function assertNode(node) {
  // `isPlainObj` unfortunately uses `any` instead of `unknown`.
  // type-coverage:ignore-next-line
  if (!(0,is_plain_obj__WEBPACK_IMPORTED_MODULE_2__["default"])(node) || typeof node.type !== 'string') {
    throw new TypeError('Expected node, got `' + node + '`');
    // Fine.
  }
}

/**
 * Assert that `complete` is `true`.
 *
 * @param {string} name
 * @param {string} asyncName
 * @param {unknown} complete
 * @returns {asserts complete is true}
 */
function assertDone(name, asyncName, complete) {
  if (!complete) {
    throw new Error('`' + name + '` finished async. Use `' + asyncName + '` instead');
  }
}

/**
 * @param {VFileCompatible} [value]
 * @returns {VFile}
 */
function vfile(value) {
  return looksLikeAVFile(value) ? value : new vfile__WEBPACK_IMPORTED_MODULE_5__.VFile(value);
}

/**
 * @param {VFileCompatible} [value]
 * @returns {value is VFile}
 */
function looksLikeAVFile(value) {
  return Boolean(value && typeof value === 'object' && 'message' in value && 'messages' in value);
}

/**
 * @param {unknown} [value]
 * @returns {value is VFileValue}
 */
function looksLikeAVFileValue(value) {
  return typeof value === 'string' || is_buffer__WEBPACK_IMPORTED_MODULE_0__(value);
}

/***/ }),

/***/ "./node_modules/unified/node_modules/is-plain-obj/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/unified/node_modules/is-plain-obj/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ isPlainObject; }
/* harmony export */ });
function isPlainObject(value) {
  if (typeof value !== 'object' || value === null) {
    return false;
  }
  const prototype = Object.getPrototypeOf(value);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
}

/***/ }),

/***/ "./node_modules/unist-util-generated/lib/index.js":
/*!********************************************************!*\
  !*** ./node_modules/unist-util-generated/lib/index.js ***!
  \********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "generated": function() { return /* binding */ generated; }
/* harmony export */ });
/**
 * @typedef PointLike
 * @property {number | null | undefined} [line]
 * @property {number | null | undefined} [column]
 * @property {number | null | undefined} [offset]
 *
 * @typedef PositionLike
 * @property {PointLike | null | undefined} [start]
 * @property {PointLike | null | undefined} [end]
 *
 * @typedef NodeLike
 * @property {PositionLike | null | undefined} [position]
 */

/**
 * Check if `node` is generated.
 *
 * @param {NodeLike | null | undefined} [node]
 *   Node to check.
 * @returns {boolean}
 *   Whether `node` is generated (does not have positional info).
 */
function generated(node) {
  return !node || !node.position || !node.position.start || !node.position.start.line || !node.position.start.column || !node.position.end || !node.position.end.line || !node.position.end.column;
}

/***/ }),

/***/ "./node_modules/unist-util-is/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/unist-util-is/lib/index.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "convert": function() { return /* binding */ convert; },
/* harmony export */   "is": function() { return /* binding */ is; }
/* harmony export */ });
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 */

/**
 * @typedef {Record<string, unknown>} Props
 * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test
 *   Check for an arbitrary node, unaware of TypeScript inferral.
 *
 * @callback TestFunctionAnything
 *   Check if a node passes a test, unaware of TypeScript inferral.
 * @param {unknown} this
 *   The given context.
 * @param {Node} node
 *   A node.
 * @param {number | null | undefined} [index]
 *   The node’s position in its parent.
 * @param {Parent | null | undefined} [parent]
 *   The node’s parent.
 * @returns {boolean | void}
 *   Whether this node passes the test.
 */

/**
 * @template {Node} Kind
 *   Node type.
 * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest
 *   Check for a node that can be inferred by TypeScript.
 */

/**
 * Check if a node passes a certain test.
 *
 * @template {Node} Kind
 *   Node type.
 * @callback TestFunctionPredicate
 *   Complex test function for a node that can be inferred by TypeScript.
 * @param {Node} node
 *   A node.
 * @param {number | null | undefined} [index]
 *   The node’s position in its parent.
 * @param {Parent | null | undefined} [parent]
 *   The node’s parent.
 * @returns {node is Kind}
 *   Whether this node passes the test.
 */

/**
 * @callback AssertAnything
 *   Check that an arbitrary value is a node, unaware of TypeScript inferral.
 * @param {unknown} [node]
 *   Anything (typically a node).
 * @param {number | null | undefined} [index]
 *   The node’s position in its parent.
 * @param {Parent | null | undefined} [parent]
 *   The node’s parent.
 * @returns {boolean}
 *   Whether this is a node and passes a test.
 */

/**
 * Check if a node is a node and passes a certain node test.
 *
 * @template {Node} Kind
 *   Node type.
 * @callback AssertPredicate
 *   Check that an arbitrary value is a specific node, aware of TypeScript.
 * @param {unknown} [node]
 *   Anything (typically a node).
 * @param {number | null | undefined} [index]
 *   The node’s position in its parent.
 * @param {Parent | null | undefined} [parent]
 *   The node’s parent.
 * @returns {node is Kind}
 *   Whether this is a node and passes a test.
 */

/**
 * Check if `node` is a `Node` and whether it passes the given test.
 *
 * @param node
 *   Thing to check, typically `Node`.
 * @param test
 *   A check for a specific node.
 * @param index
 *   The node’s position in its parent.
 * @param parent
 *   The node’s parent.
 * @returns
 *   Whether `node` is a node and passes a test.
 */
const is =
/**
 * @type {(
 *   (() => false) &
 *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &
 *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &
 *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &
 *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)
 * )}
 */

/**
 * @param {unknown} [node]
 * @param {Test} [test]
 * @param {number | null | undefined} [index]
 * @param {Parent | null | undefined} [parent]
 * @param {unknown} [context]
 * @returns {boolean}
 */
// eslint-disable-next-line max-params
function is(node, test, index, parent, context) {
  const check = convert(test);
  if (index !== undefined && index !== null && (typeof index !== 'number' || index < 0 || index === Number.POSITIVE_INFINITY)) {
    throw new Error('Expected positive finite index');
  }
  if (parent !== undefined && parent !== null && (!is(parent) || !parent.children)) {
    throw new Error('Expected parent node');
  }
  if ((parent === undefined || parent === null) !== (index === undefined || index === null)) {
    throw new Error('Expected both parent and index');
  }

  // @ts-expect-error Looks like a node.
  return node && node.type && typeof node.type === 'string' ? Boolean(check.call(context, node, index, parent)) : false;
};

/**
 * Generate an assertion from a test.
 *
 * Useful if you’re going to test many nodes, for example when creating a
 * utility where something else passes a compatible test.
 *
 * The created function is a bit faster because it expects valid input only:
 * a `node`, `index`, and `parent`.
 *
 * @param test
 *   *   when nullish, checks if `node` is a `Node`.
 *   *   when `string`, works like passing `(node) => node.type === test`.
 *   *   when `function` checks if function passed the node is true.
 *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
 *   *   when `array`, checks if any one of the subtests pass.
 * @returns
 *   An assertion.
 */
const convert =
/**
 * @type {(
 *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &
 *   ((test?: Test) => AssertAnything)
 * )}
 */

/**
 * @param {Test} [test]
 * @returns {AssertAnything}
 */
function (test) {
  if (test === undefined || test === null) {
    return ok;
  }
  if (typeof test === 'string') {
    return typeFactory(test);
  }
  if (typeof test === 'object') {
    return Array.isArray(test) ? anyFactory(test) : propsFactory(test);
  }
  if (typeof test === 'function') {
    return castFactory(test);
  }
  throw new Error('Expected function, string, or object as test');
};

/**
 * @param {Array<string | Props | TestFunctionAnything>} tests
 * @returns {AssertAnything}
 */
function anyFactory(tests) {
  /** @type {Array<AssertAnything>} */
  const checks = [];
  let index = -1;
  while (++index < tests.length) {
    checks[index] = convert(tests[index]);
  }
  return castFactory(any);

  /**
   * @this {unknown}
   * @param {Array<unknown>} parameters
   * @returns {boolean}
   */
  function any() {
    let index = -1;
    for (var _len = arguments.length, parameters = new Array(_len), _key = 0; _key < _len; _key++) {
      parameters[_key] = arguments[_key];
    }
    while (++index < checks.length) {
      if (checks[index].call(this, ...parameters)) return true;
    }
    return false;
  }
}

/**
 * Turn an object into a test for a node with a certain fields.
 *
 * @param {Props} check
 * @returns {AssertAnything}
 */
function propsFactory(check) {
  return castFactory(all);

  /**
   * @param {Node} node
   * @returns {boolean}
   */
  function all(node) {
    /** @type {string} */
    let key;
    for (key in check) {
      // @ts-expect-error: hush, it sure works as an index.
      if (node[key] !== check[key]) return false;
    }
    return true;
  }
}

/**
 * Turn a string into a test for a node with a certain type.
 *
 * @param {string} check
 * @returns {AssertAnything}
 */
function typeFactory(check) {
  return castFactory(type);

  /**
   * @param {Node} node
   */
  function type(node) {
    return node && node.type === check;
  }
}

/**
 * Turn a custom test into a test for a node that passes that test.
 *
 * @param {TestFunctionAnything} check
 * @returns {AssertAnything}
 */
function castFactory(check) {
  return assertion;

  /**
   * @this {unknown}
   * @param {unknown} node
   * @param {Array<unknown>} parameters
   * @returns {boolean}
   */
  function assertion(node) {
    for (var _len2 = arguments.length, parameters = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      parameters[_key2 - 1] = arguments[_key2];
    }
    return Boolean(node && typeof node === 'object' && 'type' in node &&
    // @ts-expect-error: fine.
    Boolean(check.call(this, node, ...parameters)));
  }
}
function ok() {
  return true;
}

/***/ }),

/***/ "./node_modules/unist-util-position/lib/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/unist-util-position/lib/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pointEnd": function() { return /* binding */ pointEnd; },
/* harmony export */   "pointStart": function() { return /* binding */ pointStart; },
/* harmony export */   "position": function() { return /* binding */ position; }
/* harmony export */ });
/**
 * @typedef {import('unist').Position} Position
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Point} Point
 */

/**
 * @typedef NodeLike
 * @property {string} type
 * @property {PositionLike | null | undefined} [position]
 *
 * @typedef PositionLike
 * @property {PointLike | null | undefined} [start]
 * @property {PointLike | null | undefined} [end]
 *
 * @typedef PointLike
 * @property {number | null | undefined} [line]
 * @property {number | null | undefined} [column]
 * @property {number | null | undefined} [offset]
 */

/**
 * Get the starting point of `node`.
 *
 * @param node
 *   Node.
 * @returns
 *   Point.
 */
const pointStart = point('start');

/**
 * Get the ending point of `node`.
 *
 * @param node
 *   Node.
 * @returns
 *   Point.
 */
const pointEnd = point('end');

/**
 * Get the positional info of `node`.
 *
 * @param {NodeLike | Node | null | undefined} [node]
 *   Node.
 * @returns {Position}
 *   Position.
 */
function position(node) {
  return {
    start: pointStart(node),
    end: pointEnd(node)
  };
}

/**
 * Get the positional info of `node`.
 *
 * @param {'start' | 'end'} type
 *   Side.
 * @returns
 *   Getter.
 */
function point(type) {
  return point;

  /**
   * Get the point info of `node` at a bound side.
   *
   * @param {NodeLike | Node | null | undefined} [node]
   * @returns {Point}
   */
  function point(node) {
    const point = node && node.position && node.position[type] || {};

    // To do: next major: don’t return points when invalid.
    return {
      // @ts-expect-error: in practice, null is allowed.
      line: point.line || null,
      // @ts-expect-error: in practice, null is allowed.
      column: point.column || null,
      // @ts-expect-error: in practice, null is allowed.
      offset: point.offset > -1 ? point.offset : null
    };
  }
}

/***/ }),

/***/ "./node_modules/unist-util-stringify-position/lib/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/unist-util-stringify-position/lib/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stringifyPosition": function() { return /* binding */ stringifyPosition; }
/* harmony export */ });
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Point} Point
 * @typedef {import('unist').Position} Position
 */

/**
 * @typedef NodeLike
 * @property {string} type
 * @property {PositionLike | null | undefined} [position]
 *
 * @typedef PositionLike
 * @property {PointLike | null | undefined} [start]
 * @property {PointLike | null | undefined} [end]
 *
 * @typedef PointLike
 * @property {number | null | undefined} [line]
 * @property {number | null | undefined} [column]
 * @property {number | null | undefined} [offset]
 */

/**
 * Serialize the positional info of a point, position (start and end points),
 * or node.
 *
 * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]
 *   Node, position, or point.
 * @returns {string}
 *   Pretty printed positional info of a node (`string`).
 *
 *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)
 *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for
 *   column, `s` for `start`, and `e` for end.
 *   An empty string (`''`) is returned if the given value is neither `node`,
 *   `position`, nor `point`.
 */
function stringifyPosition(value) {
  // Nothing.
  if (!value || typeof value !== 'object') {
    return '';
  }

  // Node.
  if ('position' in value || 'type' in value) {
    return position(value.position);
  }

  // Position.
  if ('start' in value || 'end' in value) {
    return position(value);
  }

  // Point.
  if ('line' in value || 'column' in value) {
    return point(value);
  }

  // ?
  return '';
}

/**
 * @param {Point | PointLike | null | undefined} point
 * @returns {string}
 */
function point(point) {
  return index(point && point.line) + ':' + index(point && point.column);
}

/**
 * @param {Position | PositionLike | null | undefined} pos
 * @returns {string}
 */
function position(pos) {
  return point(pos && pos.start) + '-' + point(pos && pos.end);
}

/**
 * @param {number | null | undefined} value
 * @returns {number}
 */
function index(value) {
  return value && typeof value === 'number' ? value : 1;
}

/***/ }),

/***/ "./node_modules/unist-util-visit-parents/lib/color.browser.js":
/*!********************************************************************!*\
  !*** ./node_modules/unist-util-visit-parents/lib/color.browser.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "color": function() { return /* binding */ color; }
/* harmony export */ });
/**
 * @param {string} d
 * @returns {string}
 */
function color(d) {
  return d;
}

/***/ }),

/***/ "./node_modules/unist-util-visit-parents/lib/index.js":
/*!************************************************************!*\
  !*** ./node_modules/unist-util-visit-parents/lib/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CONTINUE": function() { return /* binding */ CONTINUE; },
/* harmony export */   "EXIT": function() { return /* binding */ EXIT; },
/* harmony export */   "SKIP": function() { return /* binding */ SKIP; },
/* harmony export */   "visitParents": function() { return /* binding */ visitParents; }
/* harmony export */ });
/* harmony import */ var unist_util_is__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-is */ "./node_modules/unist-util-is/lib/index.js");
/* harmony import */ var _color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./color.js */ "./node_modules/unist-util-visit-parents/lib/color.browser.js");
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 */

/**
 * @typedef {boolean | 'skip'} Action
 *   Union of the action types.
 *
 * @typedef {number} Index
 *   Move to the sibling at `index` next (after node itself is completely
 *   traversed).
 *
 *   Useful if mutating the tree, such as removing the node the visitor is
 *   currently on, or any of its previous siblings.
 *   Results less than 0 or greater than or equal to `children.length` stop
 *   traversing the parent.
 *
 * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple
 *   List with one or two values, the first an action, the second an index.
 *
 * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult
 *   Any value that can be returned from a visitor.
 */

/**
 * @template {Node} [Visited=Node]
 *   Visited node type.
 * @template {Parent} [Ancestor=Parent]
 *   Ancestor type.
 * @callback Visitor
 *   Handle a node (matching `test`, if given).
 *
 *   Visitors are free to transform `node`.
 *   They can also transform the parent of node (the last of `ancestors`).
 *
 *   Replacing `node` itself, if `SKIP` is not returned, still causes its
 *   descendants to be walked (which is a bug).
 *
 *   When adding or removing previous siblings of `node` (or next siblings, in
 *   case of reverse), the `Visitor` should return a new `Index` to specify the
 *   sibling to traverse after `node` is traversed.
 *   Adding or removing next siblings of `node` (or previous siblings, in case
 *   of reverse) is handled as expected without needing to return a new `Index`.
 *
 *   Removing the children property of an ancestor still results in them being
 *   traversed.
 * @param {Visited} node
 *   Found node.
 * @param {Array<Ancestor>} ancestors
 *   Ancestors of `node`.
 * @returns {VisitorResult}
 *   What to do next.
 *
 *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.
 *   An `Action` is treated as a tuple of `[Action]`.
 *
 *   Passing a tuple back only makes sense if the `Action` is `SKIP`.
 *   When the `Action` is `EXIT`, that action can be returned.
 *   When the `Action` is `CONTINUE`, `Index` can be returned.
 */

/**
 * @template {Node} [Tree=Node]
 *   Tree type.
 * @template {Test} [Check=string]
 *   Test type.
 * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor
 *   Build a typed `Visitor` function from a tree and a test.
 *
 *   It will infer which values are passed as `node` and which as `parents`.
 */




/**
 * Continue traversing as normal.
 */
const CONTINUE = true;

/**
 * Stop traversing immediately.
 */
const EXIT = false;

/**
 * Do not traverse this node’s children.
 */
const SKIP = 'skip';

/**
 * Visit nodes, with ancestral information.
 *
 * This algorithm performs *depth-first* *tree traversal* in *preorder*
 * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).
 *
 * You can choose for which nodes `visitor` is called by passing a `test`.
 * For complex tests, you should test yourself in `visitor`, as it will be
 * faster and will have improved type information.
 *
 * Walking the tree is an intensive task.
 * Make use of the return values of the visitor when possible.
 * Instead of walking a tree multiple times, walk it once, use `unist-util-is`
 * to check if a node matches, and then perform different operations.
 *
 * You can change the tree.
 * See `Visitor` for more info.
 *
 * @param tree
 *   Tree to traverse.
 * @param test
 *   `unist-util-is`-compatible test
 * @param visitor
 *   Handle each node.
 * @param reverse
 *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).
 * @returns
 *   Nothing.
 */
const visitParents =
/**
 * @type {(
 *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
 *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
 * )}
 */

/**
 * @param {Node} tree
 * @param {Test} test
 * @param {Visitor<Node>} visitor
 * @param {boolean | null | undefined} [reverse]
 * @returns {void}
 */
function (tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    // @ts-expect-error no visitor given, so `visitor` is test.
    visitor = test;
    test = null;
  }
  const is = (0,unist_util_is__WEBPACK_IMPORTED_MODULE_0__.convert)(test);
  const step = reverse ? -1 : 1;
  factory(tree, undefined, [])();

  /**
   * @param {Node} node
   * @param {number | undefined} index
   * @param {Array<Parent>} parents
   */
  function factory(node, index, parents) {
    /** @type {Record<string, unknown>} */
    // @ts-expect-error: hush
    const value = node && typeof node === 'object' ? node : {};
    if (typeof value.type === 'string') {
      const name =
      // `hast`
      typeof value.tagName === 'string' ? value.tagName :
      // `xast`
      typeof value.name === 'string' ? value.name : undefined;
      Object.defineProperty(visit, 'name', {
        value: 'node (' + (0,_color_js__WEBPACK_IMPORTED_MODULE_1__.color)(node.type + (name ? '<' + name + '>' : '')) + ')'
      });
    }
    return visit;
    function visit() {
      /** @type {ActionTuple} */
      let result = [];
      /** @type {ActionTuple} */
      let subresult;
      /** @type {number} */
      let offset;
      /** @type {Array<Parent>} */
      let grandparents;
      if (!test || is(node, index, parents[parents.length - 1] || null)) {
        result = toResult(visitor(node, parents));
        if (result[0] === EXIT) {
          return result;
        }
      }

      // @ts-expect-error looks like a parent.
      if (node.children && result[0] !== SKIP) {
        // @ts-expect-error looks like a parent.
        offset = (reverse ? node.children.length : -1) + step;
        // @ts-expect-error looks like a parent.
        grandparents = parents.concat(node);

        // @ts-expect-error looks like a parent.
        while (offset > -1 && offset < node.children.length) {
          // @ts-expect-error looks like a parent.
          subresult = factory(node.children[offset], offset, grandparents)();
          if (subresult[0] === EXIT) {
            return subresult;
          }
          offset = typeof subresult[1] === 'number' ? subresult[1] : offset + step;
        }
      }
      return result;
    }
  }
};

/**
 * Turn a return value into a clean result.
 *
 * @param {VisitorResult} value
 *   Valid return values from visitors.
 * @returns {ActionTuple}
 *   Clean result.
 */
function toResult(value) {
  if (Array.isArray(value)) {
    return value;
  }
  if (typeof value === 'number') {
    return [CONTINUE, value];
  }
  return [value];
}

/***/ }),

/***/ "./node_modules/unist-util-visit/lib/index.js":
/*!****************************************************!*\
  !*** ./node_modules/unist-util-visit/lib/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CONTINUE": function() { return /* reexport safe */ unist_util_visit_parents__WEBPACK_IMPORTED_MODULE_0__.CONTINUE; },
/* harmony export */   "EXIT": function() { return /* reexport safe */ unist_util_visit_parents__WEBPACK_IMPORTED_MODULE_0__.EXIT; },
/* harmony export */   "SKIP": function() { return /* reexport safe */ unist_util_visit_parents__WEBPACK_IMPORTED_MODULE_0__.SKIP; },
/* harmony export */   "visit": function() { return /* binding */ visit; }
/* harmony export */ });
/* harmony import */ var unist_util_visit_parents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-visit-parents */ "./node_modules/unist-util-visit-parents/lib/index.js");
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist-util-is').Test} Test
 * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
 */

/**
 * Check if `Child` can be a child of `Ancestor`.
 *
 * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns
 * `never`.
 *
 * @template {Node} Ancestor
 *   Node type.
 * @template {Node} Child
 *   Node type.
 * @typedef {(
 *   Ancestor extends Parent
 *     ? Child extends Ancestor['children'][number]
 *       ? Ancestor
 *       : never
 *     : never
 * )} ParentsOf
 */

/**
 * @template {Node} [Visited=Node]
 *   Visited node type.
 * @template {Parent} [Ancestor=Parent]
 *   Ancestor type.
 * @callback Visitor
 *   Handle a node (matching `test`, if given).
 *
 *   Visitors are free to transform `node`.
 *   They can also transform `parent`.
 *
 *   Replacing `node` itself, if `SKIP` is not returned, still causes its
 *   descendants to be walked (which is a bug).
 *
 *   When adding or removing previous siblings of `node` (or next siblings, in
 *   case of reverse), the `Visitor` should return a new `Index` to specify the
 *   sibling to traverse after `node` is traversed.
 *   Adding or removing next siblings of `node` (or previous siblings, in case
 *   of reverse) is handled as expected without needing to return a new `Index`.
 *
 *   Removing the children property of `parent` still results in them being
 *   traversed.
 * @param {Visited} node
 *   Found node.
 * @param {Visited extends Node ? number | null : never} index
 *   Index of `node` in `parent`.
 * @param {Ancestor extends Node ? Ancestor | null : never} parent
 *   Parent of `node`.
 * @returns {VisitorResult}
 *   What to do next.
 *
 *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.
 *   An `Action` is treated as a tuple of `[Action]`.
 *
 *   Passing a tuple back only makes sense if the `Action` is `SKIP`.
 *   When the `Action` is `EXIT`, that action can be returned.
 *   When the `Action` is `CONTINUE`, `Index` can be returned.
 */

/**
 * Build a typed `Visitor` function from a node and all possible parents.
 *
 * It will infer which values are passed as `node` and which as `parent`.
 *
 * @template {Node} Visited
 *   Node type.
 * @template {Parent} Ancestor
 *   Parent type.
 * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch
 */

/**
 * Build a typed `Visitor` function from a list of descendants and a test.
 *
 * It will infer which values are passed as `node` and which as `parent`.
 *
 * @template {Node} Descendant
 *   Node type.
 * @template {Test} Check
 *   Test type.
 * @typedef {(
 *   BuildVisitorFromMatch<
 *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,
 *     Extract<Descendant, Parent>
 *   >
 * )} BuildVisitorFromDescendants
 */

/**
 * Build a typed `Visitor` function from a tree and a test.
 *
 * It will infer which values are passed as `node` and which as `parent`.
 *
 * @template {Node} [Tree=Node]
 *   Node type.
 * @template {Test} [Check=string]
 *   Test type.
 * @typedef {(
 *   BuildVisitorFromDescendants<
 *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,
 *     Check
 *   >
 * )} BuildVisitor
 */



/**
 * Visit nodes.
 *
 * This algorithm performs *depth-first* *tree traversal* in *preorder*
 * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).
 *
 * You can choose for which nodes `visitor` is called by passing a `test`.
 * For complex tests, you should test yourself in `visitor`, as it will be
 * faster and will have improved type information.
 *
 * Walking the tree is an intensive task.
 * Make use of the return values of the visitor when possible.
 * Instead of walking a tree multiple times, walk it once, use `unist-util-is`
 * to check if a node matches, and then perform different operations.
 *
 * You can change the tree.
 * See `Visitor` for more info.
 *
 * @param tree
 *   Tree to traverse.
 * @param test
 *   `unist-util-is`-compatible test
 * @param visitor
 *   Handle each node.
 * @param reverse
 *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).
 * @returns
 *   Nothing.
 */
const visit =
/**
 * @type {(
 *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
 *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
 * )}
 */

/**
 * @param {Node} tree
 * @param {Test} test
 * @param {Visitor} visitor
 * @param {boolean | null | undefined} [reverse]
 * @returns {void}
 */
function (tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }
  (0,unist_util_visit_parents__WEBPACK_IMPORTED_MODULE_0__.visitParents)(tree, test, overload, reverse);

  /**
   * @param {Node} node
   * @param {Array<Parent>} parents
   */
  function overload(node, parents) {
    const parent = parents[parents.length - 1];
    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);
  }
};


/***/ }),

/***/ "./node_modules/vfile-message/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/vfile-message/lib/index.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VFileMessage": function() { return /* binding */ VFileMessage; }
/* harmony export */ });
/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-stringify-position */ "./node_modules/unist-util-stringify-position/lib/index.js");
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Position} Position
 * @typedef {import('unist').Point} Point
 * @typedef {object & {type: string, position?: Position | undefined}} NodeLike
 */



/**
 * Message.
 */
class VFileMessage extends Error {
  /**
   * Create a message for `reason` at `place` from `origin`.
   *
   * When an error is passed in as `reason`, the `stack` is copied.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   *
   *   > 👉 **Note**: you should use markdown.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns
   *   Instance of `VFileMessage`.
   */
  // To do: next major: expose `undefined` everywhere instead of `null`.
  constructor(reason, place, origin) {
    /** @type {[string | null, string | null]} */
    const parts = [null, null];
    /** @type {Position} */
    let position = {
      // @ts-expect-error: we always follows the structure of `position`.
      start: {
        line: null,
        column: null
      },
      // @ts-expect-error: "
      end: {
        line: null,
        column: null
      }
    };
    super();
    if (typeof place === 'string') {
      origin = place;
      place = undefined;
    }
    if (typeof origin === 'string') {
      const index = origin.indexOf(':');
      if (index === -1) {
        parts[1] = origin;
      } else {
        parts[0] = origin.slice(0, index);
        parts[1] = origin.slice(index + 1);
      }
    }
    if (place) {
      // Node.
      if ('type' in place || 'position' in place) {
        if (place.position) {
          // To do: next major: deep clone.
          // @ts-expect-error: looks like a position.
          position = place.position;
        }
      }
      // Position.
      else if ('start' in place || 'end' in place) {
        // @ts-expect-error: looks like a position.
        // To do: next major: deep clone.
        position = place;
      }
      // Point.
      else if ('line' in place || 'column' in place) {
        // To do: next major: deep clone.
        position.start = place;
      }
    }

    // Fields from `Error`.
    /**
     * Serialized positional info of error.
     *
     * On normal errors, this would be something like `ParseError`, buit in
     * `VFile` messages we use this space to show where an error happened.
     */
    this.name = (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_0__.stringifyPosition)(place) || '1:1';

    /**
     * Reason for message.
     *
     * @type {string}
     */
    this.message = typeof reason === 'object' ? reason.message : reason;

    /**
     * Stack of message.
     *
     * This is used by normal errors to show where something happened in
     * programming code, irrelevant for `VFile` messages,
     *
     * @type {string}
     */
    this.stack = '';
    if (typeof reason === 'object' && reason.stack) {
      this.stack = reason.stack;
    }

    /**
     * Reason for message.
     *
     * > 👉 **Note**: you should use markdown.
     *
     * @type {string}
     */
    this.reason = this.message;

    /* eslint-disable no-unused-expressions */
    /**
     * State of problem.
     *
     * * `true` — marks associated file as no longer processable (error)
     * * `false` — necessitates a (potential) change (warning)
     * * `null | undefined` — for things that might not need changing (info)
     *
     * @type {boolean | null | undefined}
     */
    this.fatal;

    /**
     * Starting line of error.
     *
     * @type {number | null}
     */
    this.line = position.start.line;

    /**
     * Starting column of error.
     *
     * @type {number | null}
     */
    this.column = position.start.column;

    /**
     * Full unist position.
     *
     * @type {Position | null}
     */
    this.position = position;

    /**
     * Namespace of message (example: `'my-package'`).
     *
     * @type {string | null}
     */
    this.source = parts[0];

    /**
     * Category of message (example: `'my-rule'`).
     *
     * @type {string | null}
     */
    this.ruleId = parts[1];

    /**
     * Path of a file (used throughout the `VFile` ecosystem).
     *
     * @type {string | null}
     */
    this.file;

    // The following fields are “well known”.
    // Not standard.
    // Feel free to add other non-standard fields to your messages.

    /**
     * Specify the source value that’s being reported, which is deemed
     * incorrect.
     *
     * @type {string | null}
     */
    this.actual;

    /**
     * Suggest acceptable values that can be used instead of `actual`.
     *
     * @type {Array<string> | null}
     */
    this.expected;

    /**
     * Link to docs for the message.
     *
     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`
     * > to `new URL(x)`.
     *
     * @type {string | null}
     */
    this.url;

    /**
     * Long form description of the message (you should use markdown).
     *
     * @type {string | null}
     */
    this.note;
    /* eslint-enable no-unused-expressions */
  }
}

VFileMessage.prototype.file = '';
VFileMessage.prototype.name = '';
VFileMessage.prototype.reason = '';
VFileMessage.prototype.message = '';
VFileMessage.prototype.stack = '';
VFileMessage.prototype.fatal = null;
VFileMessage.prototype.column = null;
VFileMessage.prototype.line = null;
VFileMessage.prototype.source = null;
VFileMessage.prototype.ruleId = null;
VFileMessage.prototype.position = null;

/***/ }),

/***/ "./node_modules/vfile/lib/index.js":
/*!*****************************************!*\
  !*** ./node_modules/vfile/lib/index.js ***!
  \*****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VFile": function() { return /* binding */ VFile; }
/* harmony export */ });
/* harmony import */ var is_buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! is-buffer */ "./node_modules/is-buffer/index.js");
/* harmony import */ var vfile_message__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! vfile-message */ "./node_modules/vfile-message/lib/index.js");
/* harmony import */ var _minpath_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./minpath.js */ "./node_modules/vfile/lib/minpath.browser.js");
/* harmony import */ var _minproc_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./minproc.js */ "./node_modules/vfile/lib/minproc.browser.js");
/* harmony import */ var _minurl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./minurl.js */ "./node_modules/vfile/lib/minurl.shared.js");
/* harmony import */ var _minurl_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./minurl.js */ "./node_modules/vfile/lib/minurl.browser.js");
/**
 * @typedef {import('unist').Node} Node
 * @typedef {import('unist').Position} Position
 * @typedef {import('unist').Point} Point
 * @typedef {import('./minurl.shared.js').URL} URL
 * @typedef {import('../index.js').Data} Data
 * @typedef {import('../index.js').Value} Value
 */

/**
 * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike
 *
 * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding
 *   Encodings supported by the buffer class.
 *
 *   This is a copy of the types from Node, copied to prevent Node globals from
 *   being needed.
 *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>
 *
 * @typedef {Options | URL | Value | VFile} Compatible
 *   Things that can be passed to the constructor.
 *
 * @typedef VFileCoreOptions
 *   Set multiple values.
 * @property {Value | null | undefined} [value]
 *   Set `value`.
 * @property {string | null | undefined} [cwd]
 *   Set `cwd`.
 * @property {Array<string> | null | undefined} [history]
 *   Set `history`.
 * @property {URL | string | null | undefined} [path]
 *   Set `path`.
 * @property {string | null | undefined} [basename]
 *   Set `basename`.
 * @property {string | null | undefined} [stem]
 *   Set `stem`.
 * @property {string | null | undefined} [extname]
 *   Set `extname`.
 * @property {string | null | undefined} [dirname]
 *   Set `dirname`.
 * @property {Data | null | undefined} [data]
 *   Set `data`.
 *
 * @typedef Map
 *   Raw source map.
 *
 *   See:
 *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.
 * @property {number} version
 *   Which version of the source map spec this map is following.
 * @property {Array<string>} sources
 *   An array of URLs to the original source files.
 * @property {Array<string>} names
 *   An array of identifiers which can be referenced by individual mappings.
 * @property {string | undefined} [sourceRoot]
 *   The URL root from which all sources are relative.
 * @property {Array<string> | undefined} [sourcesContent]
 *   An array of contents of the original source files.
 * @property {string} mappings
 *   A string of base64 VLQs which contain the actual mappings.
 * @property {string} file
 *   The generated file this source map is associated with.
 *
 * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options
 *   Configuration.
 *
 *   A bunch of keys that will be shallow copied over to the new file.
 *
 * @typedef {Record<string, unknown>} ReporterSettings
 *   Configuration for reporters.
 */

/**
 * @template {ReporterSettings} Settings
 *   Options type.
 * @callback Reporter
 *   Type for a reporter.
 * @param {Array<VFile>} files
 *   Files to report.
 * @param {Settings} options
 *   Configuration.
 * @returns {string}
 *   Report.
 */







/**
 * Order of setting (least specific to most), we need this because otherwise
 * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a
 * stem can be set.
 *
 * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}
 */
const order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];
class VFile {
  /**
   * Create a new virtual file.
   *
   * `options` is treated as:
   *
   * *   `string` or `Buffer` — `{value: options}`
   * *   `URL` — `{path: options}`
   * *   `VFile` — shallow copies its data over to the new file
   * *   `object` — all fields are shallow copied over to the new file
   *
   * Path related fields are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * You cannot set `dirname` or `extname` without setting either `history`,
   * `path`, `basename`, or `stem` too.
   *
   * @param {Compatible | null | undefined} [value]
   *   File value.
   * @returns
   *   New instance.
   */
  constructor(value) {
    /** @type {Options | VFile} */
    let options;
    if (!value) {
      options = {};
    } else if (typeof value === 'string' || buffer(value)) {
      options = {
        value
      };
    } else if ((0,_minurl_js__WEBPACK_IMPORTED_MODULE_1__.isUrl)(value)) {
      options = {
        path: value
      };
    } else {
      options = value;
    }

    /**
     * Place to store custom information (default: `{}`).
     *
     * It’s OK to store custom data directly on the file but moving it to
     * `data` is recommended.
     *
     * @type {Data}
     */
    this.data = {};

    /**
     * List of messages associated with the file.
     *
     * @type {Array<VFileMessage>}
     */
    this.messages = [];

    /**
     * List of filepaths the file moved between.
     *
     * The first is the original path and the last is the current path.
     *
     * @type {Array<string>}
     */
    this.history = [];

    /**
     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).
     *
     * @type {string}
     */
    this.cwd = _minproc_js__WEBPACK_IMPORTED_MODULE_2__.proc.cwd();

    /* eslint-disable no-unused-expressions */
    /**
     * Raw value.
     *
     * @type {Value}
     */
    this.value;

    // The below are non-standard, they are “well-known”.
    // As in, used in several tools.

    /**
     * Whether a file was saved to disk.
     *
     * This is used by vfile reporters.
     *
     * @type {boolean}
     */
    this.stored;

    /**
     * Custom, non-string, compiled, representation.
     *
     * This is used by unified to store non-string results.
     * One example is when turning markdown into React nodes.
     *
     * @type {unknown}
     */
    this.result;

    /**
     * Source map.
     *
     * This type is equivalent to the `RawSourceMap` type from the `source-map`
     * module.
     *
     * @type {Map | null | undefined}
     */
    this.map;
    /* eslint-enable no-unused-expressions */

    // Set path related properties in the correct order.
    let index = -1;
    while (++index < order.length) {
      const prop = order[index];

      // Note: we specifically use `in` instead of `hasOwnProperty` to accept
      // `vfile`s too.
      if (prop in options && options[prop] !== undefined && options[prop] !== null) {
        // @ts-expect-error: TS doesn’t understand basic reality.
        this[prop] = prop === 'history' ? [...options[prop]] : options[prop];
      }
    }

    /** @type {string} */
    let prop;

    // Set non-path related properties.
    for (prop in options) {
      // @ts-expect-error: fine to set other things.
      if (!order.includes(prop)) {
        // @ts-expect-error: fine to set other things.
        this[prop] = options[prop];
      }
    }
  }

  /**
   * Get the full path (example: `'~/index.min.js'`).
   *
   * @returns {string}
   */
  get path() {
    return this.history[this.history.length - 1];
  }

  /**
   * Set the full path (example: `'~/index.min.js'`).
   *
   * Cannot be nullified.
   * You can set a file URL (a `URL` object with a `file:` protocol) which will
   * be turned into a path with `url.fileURLToPath`.
   *
   * @param {string | URL} path
   */
  set path(path) {
    if ((0,_minurl_js__WEBPACK_IMPORTED_MODULE_1__.isUrl)(path)) {
      path = (0,_minurl_js__WEBPACK_IMPORTED_MODULE_3__.urlToPath)(path);
    }
    assertNonEmpty(path, 'path');
    if (this.path !== path) {
      this.history.push(path);
    }
  }

  /**
   * Get the parent path (example: `'~'`).
   */
  get dirname() {
    return typeof this.path === 'string' ? _minpath_js__WEBPACK_IMPORTED_MODULE_4__.path.dirname(this.path) : undefined;
  }

  /**
   * Set the parent path (example: `'~'`).
   *
   * Cannot be set if there’s no `path` yet.
   */
  set dirname(dirname) {
    assertPath(this.basename, 'dirname');
    this.path = _minpath_js__WEBPACK_IMPORTED_MODULE_4__.path.join(dirname || '', this.basename);
  }

  /**
   * Get the basename (including extname) (example: `'index.min.js'`).
   */
  get basename() {
    return typeof this.path === 'string' ? _minpath_js__WEBPACK_IMPORTED_MODULE_4__.path.basename(this.path) : undefined;
  }

  /**
   * Set basename (including extname) (`'index.min.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   */
  set basename(basename) {
    assertNonEmpty(basename, 'basename');
    assertPart(basename, 'basename');
    this.path = _minpath_js__WEBPACK_IMPORTED_MODULE_4__.path.join(this.dirname || '', basename);
  }

  /**
   * Get the extname (including dot) (example: `'.js'`).
   */
  get extname() {
    return typeof this.path === 'string' ? _minpath_js__WEBPACK_IMPORTED_MODULE_4__.path.extname(this.path) : undefined;
  }

  /**
   * Set the extname (including dot) (example: `'.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be set if there’s no `path` yet.
   */
  set extname(extname) {
    assertPart(extname, 'extname');
    assertPath(this.dirname, 'extname');
    if (extname) {
      if (extname.charCodeAt(0) !== 46 /* `.` */) {
        throw new Error('`extname` must start with `.`');
      }
      if (extname.includes('.', 1)) {
        throw new Error('`extname` cannot contain multiple dots');
      }
    }
    this.path = _minpath_js__WEBPACK_IMPORTED_MODULE_4__.path.join(this.dirname, this.stem + (extname || ''));
  }

  /**
   * Get the stem (basename w/o extname) (example: `'index.min'`).
   */
  get stem() {
    return typeof this.path === 'string' ? _minpath_js__WEBPACK_IMPORTED_MODULE_4__.path.basename(this.path, this.extname) : undefined;
  }

  /**
   * Set the stem (basename w/o extname) (example: `'index.min'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   */
  set stem(stem) {
    assertNonEmpty(stem, 'stem');
    assertPart(stem, 'stem');
    this.path = _minpath_js__WEBPACK_IMPORTED_MODULE_4__.path.join(this.dirname || '', stem + (this.extname || ''));
  }

  /**
   * Serialize the file.
   *
   * @param {BufferEncoding | null | undefined} [encoding='utf8']
   *   Character encoding to understand `value` as when it’s a `Buffer`
   *   (default: `'utf8'`).
   * @returns {string}
   *   Serialized file.
   */
  toString(encoding) {
    return (this.value || '').toString(encoding || undefined);
  }

  /**
   * Create a warning message associated with the file.
   *
   * Its `fatal` is set to `false` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  message(reason, place, origin) {
    const message = new vfile_message__WEBPACK_IMPORTED_MODULE_5__.VFileMessage(reason, place, origin);
    if (this.path) {
      message.name = this.path + ':' + message.name;
      message.file = this.path;
    }
    message.fatal = false;
    this.messages.push(message);
    return message;
  }

  /**
   * Create an info message associated with the file.
   *
   * Its `fatal` is set to `null` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  info(reason, place, origin) {
    const message = this.message(reason, place, origin);
    message.fatal = null;
    return message;
  }

  /**
   * Create a fatal error associated with the file.
   *
   * Its `fatal` is set to `true` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * > 👉 **Note**: a fatal error means that a file is no longer processable.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {never}
   *   Message.
   * @throws {VFileMessage}
   *   Message.
   */
  fail(reason, place, origin) {
    const message = this.message(reason, place, origin);
    message.fatal = true;
    throw message;
  }
}

/**
 * Assert that `part` is not a path (as in, does not contain `path.sep`).
 *
 * @param {string | null | undefined} part
 *   File path part.
 * @param {string} name
 *   Part name.
 * @returns {void}
 *   Nothing.
 */
function assertPart(part, name) {
  if (part && part.includes(_minpath_js__WEBPACK_IMPORTED_MODULE_4__.path.sep)) {
    throw new Error('`' + name + '` cannot be a path: did not expect `' + _minpath_js__WEBPACK_IMPORTED_MODULE_4__.path.sep + '`');
  }
}

/**
 * Assert that `part` is not empty.
 *
 * @param {string | undefined} part
 *   Thing.
 * @param {string} name
 *   Part name.
 * @returns {asserts part is string}
 *   Nothing.
 */
function assertNonEmpty(part, name) {
  if (!part) {
    throw new Error('`' + name + '` cannot be empty');
  }
}

/**
 * Assert `path` exists.
 *
 * @param {string | undefined} path
 *   Path.
 * @param {string} name
 *   Dependency name.
 * @returns {asserts path is string}
 *   Nothing.
 */
function assertPath(path, name) {
  if (!path) {
    throw new Error('Setting `' + name + '` requires `path` to be set too');
  }
}

/**
 * Assert `value` is a buffer.
 *
 * @param {unknown} value
 *   thing.
 * @returns {value is Buffer}
 *   Whether `value` is a Node.js buffer.
 */
function buffer(value) {
  return is_buffer__WEBPACK_IMPORTED_MODULE_0__(value);
}

/***/ }),

/***/ "./node_modules/vfile/lib/minpath.browser.js":
/*!***************************************************!*\
  !*** ./node_modules/vfile/lib/minpath.browser.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "path": function() { return /* binding */ path; }
/* harmony export */ });
// A derivative work based on:
// <https://github.com/browserify/path-browserify>.
// Which is licensed:
//
// MIT License
//
// Copyright (c) 2013 James Halliday
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// A derivative work based on:
//
// Parts of that are extracted from Node’s internal `path` module:
// <https://github.com/nodejs/node/blob/master/lib/path.js>.
// Which is licensed:
//
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

const path = {
  basename,
  dirname,
  extname,
  join,
  sep: '/'
};

/* eslint-disable max-depth, complexity */

/**
 * Get the basename from a path.
 *
 * @param {string} path
 *   File path.
 * @param {string | undefined} [ext]
 *   Extension to strip.
 * @returns {string}
 *   Stem or basename.
 */
function basename(path, ext) {
  if (ext !== undefined && typeof ext !== 'string') {
    throw new TypeError('"ext" argument must be a string');
  }
  assertPath(path);
  let start = 0;
  let end = -1;
  let index = path.length;
  /** @type {boolean | undefined} */
  let seenNonSlash;
  if (ext === undefined || ext.length === 0 || ext.length > path.length) {
    while (index--) {
      if (path.charCodeAt(index) === 47 /* `/` */) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now.
        if (seenNonSlash) {
          start = index + 1;
          break;
        }
      } else if (end < 0) {
        // We saw the first non-path separator, mark this as the end of our
        // path component.
        seenNonSlash = true;
        end = index + 1;
      }
    }
    return end < 0 ? '' : path.slice(start, end);
  }
  if (ext === path) {
    return '';
  }
  let firstNonSlashEnd = -1;
  let extIndex = ext.length - 1;
  while (index--) {
    if (path.charCodeAt(index) === 47 /* `/` */) {
      // If we reached a path separator that was not part of a set of path
      // separators at the end of the string, stop now.
      if (seenNonSlash) {
        start = index + 1;
        break;
      }
    } else {
      if (firstNonSlashEnd < 0) {
        // We saw the first non-path separator, remember this index in case
        // we need it if the extension ends up not matching.
        seenNonSlash = true;
        firstNonSlashEnd = index + 1;
      }
      if (extIndex > -1) {
        // Try to match the explicit extension.
        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {
          if (extIndex < 0) {
            // We matched the extension, so mark this as the end of our path
            // component
            end = index;
          }
        } else {
          // Extension does not match, so our result is the entire path
          // component
          extIndex = -1;
          end = firstNonSlashEnd;
        }
      }
    }
  }
  if (start === end) {
    end = firstNonSlashEnd;
  } else if (end < 0) {
    end = path.length;
  }
  return path.slice(start, end);
}

/**
 * Get the dirname from a path.
 *
 * @param {string} path
 *   File path.
 * @returns {string}
 *   File path.
 */
function dirname(path) {
  assertPath(path);
  if (path.length === 0) {
    return '.';
  }
  let end = -1;
  let index = path.length;
  /** @type {boolean | undefined} */
  let unmatchedSlash;

  // Prefix `--` is important to not run on `0`.
  while (--index) {
    if (path.charCodeAt(index) === 47 /* `/` */) {
      if (unmatchedSlash) {
        end = index;
        break;
      }
    } else if (!unmatchedSlash) {
      // We saw the first non-path separator
      unmatchedSlash = true;
    }
  }
  return end < 0 ? path.charCodeAt(0) === 47 /* `/` */ ? '/' : '.' : end === 1 && path.charCodeAt(0) === 47 /* `/` */ ? '//' : path.slice(0, end);
}

/**
 * Get an extname from a path.
 *
 * @param {string} path
 *   File path.
 * @returns {string}
 *   Extname.
 */
function extname(path) {
  assertPath(path);
  let index = path.length;
  let end = -1;
  let startPart = 0;
  let startDot = -1;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find.
  let preDotState = 0;
  /** @type {boolean | undefined} */
  let unmatchedSlash;
  while (index--) {
    const code = path.charCodeAt(index);
    if (code === 47 /* `/` */) {
      // If we reached a path separator that was not part of a set of path
      // separators at the end of the string, stop now.
      if (unmatchedSlash) {
        startPart = index + 1;
        break;
      }
      continue;
    }
    if (end < 0) {
      // We saw the first non-path separator, mark this as the end of our
      // extension.
      unmatchedSlash = true;
      end = index + 1;
    }
    if (code === 46 /* `.` */) {
      // If this is our first dot, mark it as the start of our extension.
      if (startDot < 0) {
        startDot = index;
      } else if (preDotState !== 1) {
        preDotState = 1;
      }
    } else if (startDot > -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension.
      preDotState = -1;
    }
  }
  if (startDot < 0 || end < 0 ||
  // We saw a non-dot character immediately before the dot.
  preDotState === 0 ||
  // The (right-most) trimmed path component is exactly `..`.
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
}

/**
 * Join segments from a path.
 *
 * @param {Array<string>} segments
 *   Path segments.
 * @returns {string}
 *   File path.
 */
function join() {
  let index = -1;
  /** @type {string | undefined} */
  let joined;
  for (var _len = arguments.length, segments = new Array(_len), _key = 0; _key < _len; _key++) {
    segments[_key] = arguments[_key];
  }
  while (++index < segments.length) {
    assertPath(segments[index]);
    if (segments[index]) {
      joined = joined === undefined ? segments[index] : joined + '/' + segments[index];
    }
  }
  return joined === undefined ? '.' : normalize(joined);
}

/**
 * Normalize a basic file path.
 *
 * @param {string} path
 *   File path.
 * @returns {string}
 *   File path.
 */
// Note: `normalize` is not exposed as `path.normalize`, so some code is
// manually removed from it.
function normalize(path) {
  assertPath(path);
  const absolute = path.charCodeAt(0) === 47; /* `/` */

  // Normalize the path according to POSIX rules.
  let value = normalizeString(path, !absolute);
  if (value.length === 0 && !absolute) {
    value = '.';
  }
  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {
    value += '/';
  }
  return absolute ? '/' + value : value;
}

/**
 * Resolve `.` and `..` elements in a path with directory names.
 *
 * @param {string} path
 *   File path.
 * @param {boolean} allowAboveRoot
 *   Whether `..` can move above root.
 * @returns {string}
 *   File path.
 */
function normalizeString(path, allowAboveRoot) {
  let result = '';
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let index = -1;
  /** @type {number | undefined} */
  let code;
  /** @type {number} */
  let lastSlashIndex;
  while (++index <= path.length) {
    if (index < path.length) {
      code = path.charCodeAt(index);
    } else if (code === 47 /* `/` */) {
      break;
    } else {
      code = 47; /* `/` */
    }

    if (code === 47 /* `/` */) {
      if (lastSlash === index - 1 || dots === 1) {
        // Empty.
      } else if (lastSlash !== index - 1 && dots === 2) {
        if (result.length < 2 || lastSegmentLength !== 2 || result.charCodeAt(result.length - 1) !== 46 /* `.` */ || result.charCodeAt(result.length - 2) !== 46 /* `.` */) {
          if (result.length > 2) {
            lastSlashIndex = result.lastIndexOf('/');
            if (lastSlashIndex !== result.length - 1) {
              if (lastSlashIndex < 0) {
                result = '';
                lastSegmentLength = 0;
              } else {
                result = result.slice(0, lastSlashIndex);
                lastSegmentLength = result.length - 1 - result.lastIndexOf('/');
              }
              lastSlash = index;
              dots = 0;
              continue;
            }
          } else if (result.length > 0) {
            result = '';
            lastSegmentLength = 0;
            lastSlash = index;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          result = result.length > 0 ? result + '/..' : '..';
          lastSegmentLength = 2;
        }
      } else {
        if (result.length > 0) {
          result += '/' + path.slice(lastSlash + 1, index);
        } else {
          result = path.slice(lastSlash + 1, index);
        }
        lastSegmentLength = index - lastSlash - 1;
      }
      lastSlash = index;
      dots = 0;
    } else if (code === 46 /* `.` */ && dots > -1) {
      dots++;
    } else {
      dots = -1;
    }
  }
  return result;
}

/**
 * Make sure `path` is a string.
 *
 * @param {string} path
 *   File path.
 * @returns {asserts path is string}
 *   Nothing.
 */
function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

/* eslint-enable max-depth, complexity */

/***/ }),

/***/ "./node_modules/vfile/lib/minproc.browser.js":
/*!***************************************************!*\
  !*** ./node_modules/vfile/lib/minproc.browser.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "proc": function() { return /* binding */ proc; }
/* harmony export */ });
// Somewhat based on:
// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.
// But I don’t think one tiny line of code can be copyrighted. 😅
const proc = {
  cwd
};
function cwd() {
  return '/';
}

/***/ }),

/***/ "./node_modules/vfile/lib/minurl.browser.js":
/*!**************************************************!*\
  !*** ./node_modules/vfile/lib/minurl.browser.js ***!
  \**************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isUrl": function() { return /* reexport safe */ _minurl_shared_js__WEBPACK_IMPORTED_MODULE_0__.isUrl; },
/* harmony export */   "urlToPath": function() { return /* binding */ urlToPath; }
/* harmony export */ });
/* harmony import */ var _minurl_shared_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./minurl.shared.js */ "./node_modules/vfile/lib/minurl.shared.js");
/// <reference lib="dom" />



// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>

/**
 * @param {string | URL} path
 *   File URL.
 * @returns {string}
 *   File URL.
 */
function urlToPath(path) {
  if (typeof path === 'string') {
    path = new URL(path);
  } else if (!(0,_minurl_shared_js__WEBPACK_IMPORTED_MODULE_0__.isUrl)(path)) {
    /** @type {NodeJS.ErrnoException} */
    const error = new TypeError('The "path" argument must be of type string or an instance of URL. Received `' + path + '`');
    error.code = 'ERR_INVALID_ARG_TYPE';
    throw error;
  }
  if (path.protocol !== 'file:') {
    /** @type {NodeJS.ErrnoException} */
    const error = new TypeError('The URL must be of scheme file');
    error.code = 'ERR_INVALID_URL_SCHEME';
    throw error;
  }
  return getPathFromURLPosix(path);
}

/**
 * Get a path from a POSIX URL.
 *
 * @param {URL} url
 *   URL.
 * @returns {string}
 *   File path.
 */
function getPathFromURLPosix(url) {
  if (url.hostname !== '') {
    /** @type {NodeJS.ErrnoException} */
    const error = new TypeError('File URL host must be "localhost" or empty on darwin');
    error.code = 'ERR_INVALID_FILE_URL_HOST';
    throw error;
  }
  const pathname = url.pathname;
  let index = -1;
  while (++index < pathname.length) {
    if (pathname.charCodeAt(index) === 37 /* `%` */ && pathname.charCodeAt(index + 1) === 50 /* `2` */) {
      const third = pathname.charCodeAt(index + 2);
      if (third === 70 /* `F` */ || third === 102 /* `f` */) {
        /** @type {NodeJS.ErrnoException} */
        const error = new TypeError('File URL path must not include encoded / characters');
        error.code = 'ERR_INVALID_FILE_URL_PATH';
        throw error;
      }
    }
  }
  return decodeURIComponent(pathname);
}


/***/ }),

/***/ "./node_modules/vfile/lib/minurl.shared.js":
/*!*************************************************!*\
  !*** ./node_modules/vfile/lib/minurl.shared.js ***!
  \*************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isUrl": function() { return /* binding */ isUrl; }
/* harmony export */ });
/**
 * @typedef URL
 * @property {string} hash
 * @property {string} host
 * @property {string} hostname
 * @property {string} href
 * @property {string} origin
 * @property {string} password
 * @property {string} pathname
 * @property {string} port
 * @property {string} protocol
 * @property {string} search
 * @property {any} searchParams
 * @property {string} username
 * @property {() => string} toString
 * @property {() => string} toJSON
 */

/**
 * Check if `fileUrlOrPath` looks like a URL.
 *
 * @param {unknown} fileUrlOrPath
 *   File path or URL.
 * @returns {fileUrlOrPath is URL}
 *   Whether it’s a URL.
 */
// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>
function isUrl(fileUrlOrPath) {
  return fileUrlOrPath !== null && typeof fileUrlOrPath === 'object' &&
  // @ts-expect-error: indexable.
  fileUrlOrPath.href &&
  // @ts-expect-error: indexable.
  fileUrlOrPath.origin;
}

/***/ }),

/***/ "./node_modules/dequal/dist/index.mjs":
/*!********************************************!*\
  !*** ./node_modules/dequal/dist/index.mjs ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "dequal": function() { return /* binding */ dequal; }
/* harmony export */ });
var has = Object.prototype.hasOwnProperty;

function find(iter, tar, key) {
	for (key of iter.keys()) {
		if (dequal(key, tar)) return key;
	}
}

function dequal(foo, bar) {
	var ctor, len, tmp;
	if (foo === bar) return true;

	if (foo && bar && (ctor=foo.constructor) === bar.constructor) {
		if (ctor === Date) return foo.getTime() === bar.getTime();
		if (ctor === RegExp) return foo.toString() === bar.toString();

		if (ctor === Array) {
			if ((len=foo.length) === bar.length) {
				while (len-- && dequal(foo[len], bar[len]));
			}
			return len === -1;
		}

		if (ctor === Set) {
			if (foo.size !== bar.size) {
				return false;
			}
			for (len of foo) {
				tmp = len;
				if (tmp && typeof tmp === 'object') {
					tmp = find(bar, tmp);
					if (!tmp) return false;
				}
				if (!bar.has(tmp)) return false;
			}
			return true;
		}

		if (ctor === Map) {
			if (foo.size !== bar.size) {
				return false;
			}
			for (len of foo) {
				tmp = len[0];
				if (tmp && typeof tmp === 'object') {
					tmp = find(bar, tmp);
					if (!tmp) return false;
				}
				if (!dequal(len[1], bar.get(tmp))) {
					return false;
				}
			}
			return true;
		}

		if (ctor === ArrayBuffer) {
			foo = new Uint8Array(foo);
			bar = new Uint8Array(bar);
		} else if (ctor === DataView) {
			if ((len=foo.byteLength) === bar.byteLength) {
				while (len-- && foo.getInt8(len) === bar.getInt8(len));
			}
			return len === -1;
		}

		if (ArrayBuffer.isView(foo)) {
			if ((len=foo.byteLength) === bar.byteLength) {
				while (len-- && foo[len] === bar[len]);
			}
			return len === -1;
		}

		if (!ctor || typeof foo === 'object') {
			len = 0;
			for (ctor in foo) {
				if (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;
				if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;
			}
			return Object.keys(bar).length === len;
		}
	}

	return foo !== foo && bar !== bar;
}


/***/ }),

/***/ "./node_modules/diff/lib/index.mjs":
/*!*****************************************!*\
  !*** ./node_modules/diff/lib/index.mjs ***!
  \*****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Diff": function() { return /* binding */ Diff; },
/* harmony export */   "applyPatch": function() { return /* binding */ applyPatch; },
/* harmony export */   "applyPatches": function() { return /* binding */ applyPatches; },
/* harmony export */   "canonicalize": function() { return /* binding */ canonicalize; },
/* harmony export */   "convertChangesToDMP": function() { return /* binding */ convertChangesToDMP; },
/* harmony export */   "convertChangesToXML": function() { return /* binding */ convertChangesToXML; },
/* harmony export */   "createPatch": function() { return /* binding */ createPatch; },
/* harmony export */   "createTwoFilesPatch": function() { return /* binding */ createTwoFilesPatch; },
/* harmony export */   "diffArrays": function() { return /* binding */ diffArrays; },
/* harmony export */   "diffChars": function() { return /* binding */ diffChars; },
/* harmony export */   "diffCss": function() { return /* binding */ diffCss; },
/* harmony export */   "diffJson": function() { return /* binding */ diffJson; },
/* harmony export */   "diffLines": function() { return /* binding */ diffLines; },
/* harmony export */   "diffSentences": function() { return /* binding */ diffSentences; },
/* harmony export */   "diffTrimmedLines": function() { return /* binding */ diffTrimmedLines; },
/* harmony export */   "diffWords": function() { return /* binding */ diffWords; },
/* harmony export */   "diffWordsWithSpace": function() { return /* binding */ diffWordsWithSpace; },
/* harmony export */   "merge": function() { return /* binding */ merge; },
/* harmony export */   "parsePatch": function() { return /* binding */ parsePatch; },
/* harmony export */   "structuredPatch": function() { return /* binding */ structuredPatch; }
/* harmony export */ });
function Diff() {}
Diff.prototype = {
  diff: function diff(oldString, newString) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var callback = options.callback;

    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    this.options = options;
    var self = this;

    function done(value) {
      if (callback) {
        setTimeout(function () {
          callback(undefined, value);
        }, 0);
        return true;
      } else {
        return value;
      }
    } // Allow subclasses to massage the input prior to running


    oldString = this.castInput(oldString);
    newString = this.castInput(newString);
    oldString = this.removeEmpty(this.tokenize(oldString));
    newString = this.removeEmpty(this.tokenize(newString));
    var newLen = newString.length,
        oldLen = oldString.length;
    var editLength = 1;
    var maxEditLength = newLen + oldLen;

    if (options.maxEditLength) {
      maxEditLength = Math.min(maxEditLength, options.maxEditLength);
    }

    var bestPath = [{
      newPos: -1,
      components: []
    }]; // Seed editLength = 0, i.e. the content starts with the same values

    var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);

    if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {
      // Identity per the equality and tokenizer
      return done([{
        value: this.join(newString),
        count: newString.length
      }]);
    } // Main worker method. checks all permutations of a given edit length for acceptance.


    function execEditLength() {
      for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {
        var basePath = void 0;

        var addPath = bestPath[diagonalPath - 1],
            removePath = bestPath[diagonalPath + 1],
            _oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;

        if (addPath) {
          // No one else is going to attempt to use this value, clear it
          bestPath[diagonalPath - 1] = undefined;
        }

        var canAdd = addPath && addPath.newPos + 1 < newLen,
            canRemove = removePath && 0 <= _oldPos && _oldPos < oldLen;

        if (!canAdd && !canRemove) {
          // If this path is a terminal then prune
          bestPath[diagonalPath] = undefined;
          continue;
        } // Select the diagonal that we want to branch from. We select the prior
        // path whose position in the new string is the farthest from the origin
        // and does not pass the bounds of the diff graph


        if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {
          basePath = clonePath(removePath);
          self.pushComponent(basePath.components, undefined, true);
        } else {
          basePath = addPath; // No need to clone, we've pulled it from the list

          basePath.newPos++;
          self.pushComponent(basePath.components, true, undefined);
        }

        _oldPos = self.extractCommon(basePath, newString, oldString, diagonalPath); // If we have hit the end of both strings, then we are done

        if (basePath.newPos + 1 >= newLen && _oldPos + 1 >= oldLen) {
          return done(buildValues(self, basePath.components, newString, oldString, self.useLongestToken));
        } else {
          // Otherwise track this path as a potential candidate and continue.
          bestPath[diagonalPath] = basePath;
        }
      }

      editLength++;
    } // Performs the length of edit iteration. Is a bit fugly as this has to support the
    // sync and async mode which is never fun. Loops over execEditLength until a value
    // is produced, or until the edit length exceeds options.maxEditLength (if given),
    // in which case it will return undefined.


    if (callback) {
      (function exec() {
        setTimeout(function () {
          if (editLength > maxEditLength) {
            return callback();
          }

          if (!execEditLength()) {
            exec();
          }
        }, 0);
      })();
    } else {
      while (editLength <= maxEditLength) {
        var ret = execEditLength();

        if (ret) {
          return ret;
        }
      }
    }
  },
  pushComponent: function pushComponent(components, added, removed) {
    var last = components[components.length - 1];

    if (last && last.added === added && last.removed === removed) {
      // We need to clone here as the component clone operation is just
      // as shallow array clone
      components[components.length - 1] = {
        count: last.count + 1,
        added: added,
        removed: removed
      };
    } else {
      components.push({
        count: 1,
        added: added,
        removed: removed
      });
    }
  },
  extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {
    var newLen = newString.length,
        oldLen = oldString.length,
        newPos = basePath.newPos,
        oldPos = newPos - diagonalPath,
        commonCount = 0;

    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {
      newPos++;
      oldPos++;
      commonCount++;
    }

    if (commonCount) {
      basePath.components.push({
        count: commonCount
      });
    }

    basePath.newPos = newPos;
    return oldPos;
  },
  equals: function equals(left, right) {
    if (this.options.comparator) {
      return this.options.comparator(left, right);
    } else {
      return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();
    }
  },
  removeEmpty: function removeEmpty(array) {
    var ret = [];

    for (var i = 0; i < array.length; i++) {
      if (array[i]) {
        ret.push(array[i]);
      }
    }

    return ret;
  },
  castInput: function castInput(value) {
    return value;
  },
  tokenize: function tokenize(value) {
    return value.split('');
  },
  join: function join(chars) {
    return chars.join('');
  }
};

function buildValues(diff, components, newString, oldString, useLongestToken) {
  var componentPos = 0,
      componentLen = components.length,
      newPos = 0,
      oldPos = 0;

  for (; componentPos < componentLen; componentPos++) {
    var component = components[componentPos];

    if (!component.removed) {
      if (!component.added && useLongestToken) {
        var value = newString.slice(newPos, newPos + component.count);
        value = value.map(function (value, i) {
          var oldValue = oldString[oldPos + i];
          return oldValue.length > value.length ? oldValue : value;
        });
        component.value = diff.join(value);
      } else {
        component.value = diff.join(newString.slice(newPos, newPos + component.count));
      }

      newPos += component.count; // Common case

      if (!component.added) {
        oldPos += component.count;
      }
    } else {
      component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));
      oldPos += component.count; // Reverse add and remove so removes are output first to match common convention
      // The diffing algorithm is tied to add then remove output and this is the simplest
      // route to get the desired output with minimal overhead.

      if (componentPos && components[componentPos - 1].added) {
        var tmp = components[componentPos - 1];
        components[componentPos - 1] = components[componentPos];
        components[componentPos] = tmp;
      }
    }
  } // Special case handle for when one terminal is ignored (i.e. whitespace).
  // For this case we merge the terminal into the prior string and drop the change.
  // This is only available for string mode.


  var lastComponent = components[componentLen - 1];

  if (componentLen > 1 && typeof lastComponent.value === 'string' && (lastComponent.added || lastComponent.removed) && diff.equals('', lastComponent.value)) {
    components[componentLen - 2].value += lastComponent.value;
    components.pop();
  }

  return components;
}

function clonePath(path) {
  return {
    newPos: path.newPos,
    components: path.components.slice(0)
  };
}

var characterDiff = new Diff();
function diffChars(oldStr, newStr, options) {
  return characterDiff.diff(oldStr, newStr, options);
}

function generateOptions(options, defaults) {
  if (typeof options === 'function') {
    defaults.callback = options;
  } else if (options) {
    for (var name in options) {
      /* istanbul ignore else */
      if (options.hasOwnProperty(name)) {
        defaults[name] = options[name];
      }
    }
  }

  return defaults;
}

//
// Ranges and exceptions:
// Latin-1 Supplement, 0080–00FF
//  - U+00D7  × Multiplication sign
//  - U+00F7  ÷ Division sign
// Latin Extended-A, 0100–017F
// Latin Extended-B, 0180–024F
// IPA Extensions, 0250–02AF
// Spacing Modifier Letters, 02B0–02FF
//  - U+02C7  ˇ &#711;  Caron
//  - U+02D8  ˘ &#728;  Breve
//  - U+02D9  ˙ &#729;  Dot Above
//  - U+02DA  ˚ &#730;  Ring Above
//  - U+02DB  ˛ &#731;  Ogonek
//  - U+02DC  ˜ &#732;  Small Tilde
//  - U+02DD  ˝ &#733;  Double Acute Accent
// Latin Extended Additional, 1E00–1EFF

var extendedWordChars = /^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/;
var reWhitespace = /\S/;
var wordDiff = new Diff();

wordDiff.equals = function (left, right) {
  if (this.options.ignoreCase) {
    left = left.toLowerCase();
    right = right.toLowerCase();
  }

  return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);
};

wordDiff.tokenize = function (value) {
  // All whitespace symbols except newline group into one token, each newline - in separate token
  var tokens = value.split(/([^\S\r\n]+|[()[\]{}'"\r\n]|\b)/); // Join the boundary splits that we do not consider to be boundaries. This is primarily the extended Latin character set.

  for (var i = 0; i < tokens.length - 1; i++) {
    // If we have an empty string in the next field and we have only word chars before and after, merge
    if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {
      tokens[i] += tokens[i + 2];
      tokens.splice(i + 1, 2);
      i--;
    }
  }

  return tokens;
};

function diffWords(oldStr, newStr, options) {
  options = generateOptions(options, {
    ignoreWhitespace: true
  });
  return wordDiff.diff(oldStr, newStr, options);
}
function diffWordsWithSpace(oldStr, newStr, options) {
  return wordDiff.diff(oldStr, newStr, options);
}

var lineDiff = new Diff();

lineDiff.tokenize = function (value) {
  var retLines = [],
      linesAndNewlines = value.split(/(\n|\r\n)/); // Ignore the final empty token that occurs if the string ends with a new line

  if (!linesAndNewlines[linesAndNewlines.length - 1]) {
    linesAndNewlines.pop();
  } // Merge the content and line separators into single tokens


  for (var i = 0; i < linesAndNewlines.length; i++) {
    var line = linesAndNewlines[i];

    if (i % 2 && !this.options.newlineIsToken) {
      retLines[retLines.length - 1] += line;
    } else {
      if (this.options.ignoreWhitespace) {
        line = line.trim();
      }

      retLines.push(line);
    }
  }

  return retLines;
};

function diffLines(oldStr, newStr, callback) {
  return lineDiff.diff(oldStr, newStr, callback);
}
function diffTrimmedLines(oldStr, newStr, callback) {
  var options = generateOptions(callback, {
    ignoreWhitespace: true
  });
  return lineDiff.diff(oldStr, newStr, options);
}

var sentenceDiff = new Diff();

sentenceDiff.tokenize = function (value) {
  return value.split(/(\S.+?[.!?])(?=\s+|$)/);
};

function diffSentences(oldStr, newStr, callback) {
  return sentenceDiff.diff(oldStr, newStr, callback);
}

var cssDiff = new Diff();

cssDiff.tokenize = function (value) {
  return value.split(/([{}:;,]|\s+)/);
};

function diffCss(oldStr, newStr, callback) {
  return cssDiff.diff(oldStr, newStr, callback);
}

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var objectPrototypeToString = Object.prototype.toString;
var jsonDiff = new Diff(); // Discriminate between two lines of pretty-printed, serialized JSON where one of them has a
// dangling comma and the other doesn't. Turns out including the dangling comma yields the nicest output:

jsonDiff.useLongestToken = true;
jsonDiff.tokenize = lineDiff.tokenize;

jsonDiff.castInput = function (value) {
  var _this$options = this.options,
      undefinedReplacement = _this$options.undefinedReplacement,
      _this$options$stringi = _this$options.stringifyReplacer,
      stringifyReplacer = _this$options$stringi === void 0 ? function (k, v) {
    return typeof v === 'undefined' ? undefinedReplacement : v;
  } : _this$options$stringi;
  return typeof value === 'string' ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, '  ');
};

jsonDiff.equals = function (left, right) {
  return Diff.prototype.equals.call(jsonDiff, left.replace(/,([\r\n])/g, '$1'), right.replace(/,([\r\n])/g, '$1'));
};

function diffJson(oldObj, newObj, options) {
  return jsonDiff.diff(oldObj, newObj, options);
} // This function handles the presence of circular references by bailing out when encountering an
// object that is already on the "stack" of items being processed. Accepts an optional replacer

function canonicalize(obj, stack, replacementStack, replacer, key) {
  stack = stack || [];
  replacementStack = replacementStack || [];

  if (replacer) {
    obj = replacer(key, obj);
  }

  var i;

  for (i = 0; i < stack.length; i += 1) {
    if (stack[i] === obj) {
      return replacementStack[i];
    }
  }

  var canonicalizedObj;

  if ('[object Array]' === objectPrototypeToString.call(obj)) {
    stack.push(obj);
    canonicalizedObj = new Array(obj.length);
    replacementStack.push(canonicalizedObj);

    for (i = 0; i < obj.length; i += 1) {
      canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);
    }

    stack.pop();
    replacementStack.pop();
    return canonicalizedObj;
  }

  if (obj && obj.toJSON) {
    obj = obj.toJSON();
  }

  if (_typeof(obj) === 'object' && obj !== null) {
    stack.push(obj);
    canonicalizedObj = {};
    replacementStack.push(canonicalizedObj);

    var sortedKeys = [],
        _key;

    for (_key in obj) {
      /* istanbul ignore else */
      if (obj.hasOwnProperty(_key)) {
        sortedKeys.push(_key);
      }
    }

    sortedKeys.sort();

    for (i = 0; i < sortedKeys.length; i += 1) {
      _key = sortedKeys[i];
      canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);
    }

    stack.pop();
    replacementStack.pop();
  } else {
    canonicalizedObj = obj;
  }

  return canonicalizedObj;
}

var arrayDiff = new Diff();

arrayDiff.tokenize = function (value) {
  return value.slice();
};

arrayDiff.join = arrayDiff.removeEmpty = function (value) {
  return value;
};

function diffArrays(oldArr, newArr, callback) {
  return arrayDiff.diff(oldArr, newArr, callback);
}

function parsePatch(uniDiff) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var diffstr = uniDiff.split(/\r\n|[\n\v\f\r\x85]/),
      delimiters = uniDiff.match(/\r\n|[\n\v\f\r\x85]/g) || [],
      list = [],
      i = 0;

  function parseIndex() {
    var index = {};
    list.push(index); // Parse diff metadata

    while (i < diffstr.length) {
      var line = diffstr[i]; // File header found, end parsing diff metadata

      if (/^(\-\-\-|\+\+\+|@@)\s/.test(line)) {
        break;
      } // Diff index


      var header = /^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(line);

      if (header) {
        index.index = header[1];
      }

      i++;
    } // Parse file headers if they are defined. Unified diff requires them, but
    // there's no technical issues to have an isolated hunk without file header


    parseFileHeader(index);
    parseFileHeader(index); // Parse hunks

    index.hunks = [];

    while (i < diffstr.length) {
      var _line = diffstr[i];

      if (/^(Index:|diff|\-\-\-|\+\+\+)\s/.test(_line)) {
        break;
      } else if (/^@@/.test(_line)) {
        index.hunks.push(parseHunk());
      } else if (_line && options.strict) {
        // Ignore unexpected content unless in strict mode
        throw new Error('Unknown line ' + (i + 1) + ' ' + JSON.stringify(_line));
      } else {
        i++;
      }
    }
  } // Parses the --- and +++ headers, if none are found, no lines
  // are consumed.


  function parseFileHeader(index) {
    var fileHeader = /^(---|\+\+\+)\s+(.*)$/.exec(diffstr[i]);

    if (fileHeader) {
      var keyPrefix = fileHeader[1] === '---' ? 'old' : 'new';
      var data = fileHeader[2].split('\t', 2);
      var fileName = data[0].replace(/\\\\/g, '\\');

      if (/^".*"$/.test(fileName)) {
        fileName = fileName.substr(1, fileName.length - 2);
      }

      index[keyPrefix + 'FileName'] = fileName;
      index[keyPrefix + 'Header'] = (data[1] || '').trim();
      i++;
    }
  } // Parses a hunk
  // This assumes that we are at the start of a hunk.


  function parseHunk() {
    var chunkHeaderIndex = i,
        chunkHeaderLine = diffstr[i++],
        chunkHeader = chunkHeaderLine.split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/);
    var hunk = {
      oldStart: +chunkHeader[1],
      oldLines: typeof chunkHeader[2] === 'undefined' ? 1 : +chunkHeader[2],
      newStart: +chunkHeader[3],
      newLines: typeof chunkHeader[4] === 'undefined' ? 1 : +chunkHeader[4],
      lines: [],
      linedelimiters: []
    }; // Unified Diff Format quirk: If the chunk size is 0,
    // the first number is one lower than one would expect.
    // https://www.artima.com/weblogs/viewpost.jsp?thread=164293

    if (hunk.oldLines === 0) {
      hunk.oldStart += 1;
    }

    if (hunk.newLines === 0) {
      hunk.newStart += 1;
    }

    var addCount = 0,
        removeCount = 0;

    for (; i < diffstr.length; i++) {
      // Lines starting with '---' could be mistaken for the "remove line" operation
      // But they could be the header for the next file. Therefore prune such cases out.
      if (diffstr[i].indexOf('--- ') === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf('+++ ') === 0 && diffstr[i + 2].indexOf('@@') === 0) {
        break;
      }

      var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? ' ' : diffstr[i][0];

      if (operation === '+' || operation === '-' || operation === ' ' || operation === '\\') {
        hunk.lines.push(diffstr[i]);
        hunk.linedelimiters.push(delimiters[i] || '\n');

        if (operation === '+') {
          addCount++;
        } else if (operation === '-') {
          removeCount++;
        } else if (operation === ' ') {
          addCount++;
          removeCount++;
        }
      } else {
        break;
      }
    } // Handle the empty block count case


    if (!addCount && hunk.newLines === 1) {
      hunk.newLines = 0;
    }

    if (!removeCount && hunk.oldLines === 1) {
      hunk.oldLines = 0;
    } // Perform optional sanity checking


    if (options.strict) {
      if (addCount !== hunk.newLines) {
        throw new Error('Added line count did not match for hunk at line ' + (chunkHeaderIndex + 1));
      }

      if (removeCount !== hunk.oldLines) {
        throw new Error('Removed line count did not match for hunk at line ' + (chunkHeaderIndex + 1));
      }
    }

    return hunk;
  }

  while (i < diffstr.length) {
    parseIndex();
  }

  return list;
}

// Iterator that traverses in the range of [min, max], stepping
// by distance from a given start position. I.e. for [0, 4], with
// start of 2, this will iterate 2, 3, 1, 4, 0.
function distanceIterator (start, minLine, maxLine) {
  var wantForward = true,
      backwardExhausted = false,
      forwardExhausted = false,
      localOffset = 1;
  return function iterator() {
    if (wantForward && !forwardExhausted) {
      if (backwardExhausted) {
        localOffset++;
      } else {
        wantForward = false;
      } // Check if trying to fit beyond text length, and if not, check it fits
      // after offset location (or desired location on first iteration)


      if (start + localOffset <= maxLine) {
        return localOffset;
      }

      forwardExhausted = true;
    }

    if (!backwardExhausted) {
      if (!forwardExhausted) {
        wantForward = true;
      } // Check if trying to fit before text beginning, and if not, check it fits
      // before offset location


      if (minLine <= start - localOffset) {
        return -localOffset++;
      }

      backwardExhausted = true;
      return iterator();
    } // We tried to fit hunk before text beginning and beyond text length, then
    // hunk can't fit on the text. Return undefined

  };
}

function applyPatch(source, uniDiff) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (typeof uniDiff === 'string') {
    uniDiff = parsePatch(uniDiff);
  }

  if (Array.isArray(uniDiff)) {
    if (uniDiff.length > 1) {
      throw new Error('applyPatch only works with a single input.');
    }

    uniDiff = uniDiff[0];
  } // Apply the diff to the input


  var lines = source.split(/\r\n|[\n\v\f\r\x85]/),
      delimiters = source.match(/\r\n|[\n\v\f\r\x85]/g) || [],
      hunks = uniDiff.hunks,
      compareLine = options.compareLine || function (lineNumber, line, operation, patchContent) {
    return line === patchContent;
  },
      errorCount = 0,
      fuzzFactor = options.fuzzFactor || 0,
      minLine = 0,
      offset = 0,
      removeEOFNL,
      addEOFNL;
  /**
   * Checks if the hunk exactly fits on the provided location
   */


  function hunkFits(hunk, toPos) {
    for (var j = 0; j < hunk.lines.length; j++) {
      var line = hunk.lines[j],
          operation = line.length > 0 ? line[0] : ' ',
          content = line.length > 0 ? line.substr(1) : line;

      if (operation === ' ' || operation === '-') {
        // Context sanity check
        if (!compareLine(toPos + 1, lines[toPos], operation, content)) {
          errorCount++;

          if (errorCount > fuzzFactor) {
            return false;
          }
        }

        toPos++;
      }
    }

    return true;
  } // Search best fit offsets for each hunk based on the previous ones


  for (var i = 0; i < hunks.length; i++) {
    var hunk = hunks[i],
        maxLine = lines.length - hunk.oldLines,
        localOffset = 0,
        toPos = offset + hunk.oldStart - 1;
    var iterator = distanceIterator(toPos, minLine, maxLine);

    for (; localOffset !== undefined; localOffset = iterator()) {
      if (hunkFits(hunk, toPos + localOffset)) {
        hunk.offset = offset += localOffset;
        break;
      }
    }

    if (localOffset === undefined) {
      return false;
    } // Set lower text limit to end of the current hunk, so next ones don't try
    // to fit over already patched text


    minLine = hunk.offset + hunk.oldStart + hunk.oldLines;
  } // Apply patch hunks


  var diffOffset = 0;

  for (var _i = 0; _i < hunks.length; _i++) {
    var _hunk = hunks[_i],
        _toPos = _hunk.oldStart + _hunk.offset + diffOffset - 1;

    diffOffset += _hunk.newLines - _hunk.oldLines;

    for (var j = 0; j < _hunk.lines.length; j++) {
      var line = _hunk.lines[j],
          operation = line.length > 0 ? line[0] : ' ',
          content = line.length > 0 ? line.substr(1) : line,
          delimiter = _hunk.linedelimiters[j];

      if (operation === ' ') {
        _toPos++;
      } else if (operation === '-') {
        lines.splice(_toPos, 1);
        delimiters.splice(_toPos, 1);
        /* istanbul ignore else */
      } else if (operation === '+') {
        lines.splice(_toPos, 0, content);
        delimiters.splice(_toPos, 0, delimiter);
        _toPos++;
      } else if (operation === '\\') {
        var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;

        if (previousOperation === '+') {
          removeEOFNL = true;
        } else if (previousOperation === '-') {
          addEOFNL = true;
        }
      }
    }
  } // Handle EOFNL insertion/removal


  if (removeEOFNL) {
    while (!lines[lines.length - 1]) {
      lines.pop();
      delimiters.pop();
    }
  } else if (addEOFNL) {
    lines.push('');
    delimiters.push('\n');
  }

  for (var _k = 0; _k < lines.length - 1; _k++) {
    lines[_k] = lines[_k] + delimiters[_k];
  }

  return lines.join('');
} // Wrapper that supports multiple file patches via callbacks.

function applyPatches(uniDiff, options) {
  if (typeof uniDiff === 'string') {
    uniDiff = parsePatch(uniDiff);
  }

  var currentIndex = 0;

  function processIndex() {
    var index = uniDiff[currentIndex++];

    if (!index) {
      return options.complete();
    }

    options.loadFile(index, function (err, data) {
      if (err) {
        return options.complete(err);
      }

      var updatedContent = applyPatch(data, index, options);
      options.patched(index, updatedContent, function (err) {
        if (err) {
          return options.complete(err);
        }

        processIndex();
      });
    });
  }

  processIndex();
}

function structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
  if (!options) {
    options = {};
  }

  if (typeof options.context === 'undefined') {
    options.context = 4;
  }

  var diff = diffLines(oldStr, newStr, options);

  if (!diff) {
    return;
  }

  diff.push({
    value: '',
    lines: []
  }); // Append an empty value to make cleanup easier

  function contextLines(lines) {
    return lines.map(function (entry) {
      return ' ' + entry;
    });
  }

  var hunks = [];
  var oldRangeStart = 0,
      newRangeStart = 0,
      curRange = [],
      oldLine = 1,
      newLine = 1;

  var _loop = function _loop(i) {
    var current = diff[i],
        lines = current.lines || current.value.replace(/\n$/, '').split('\n');
    current.lines = lines;

    if (current.added || current.removed) {
      var _curRange;

      // If we have previous context, start with that
      if (!oldRangeStart) {
        var prev = diff[i - 1];
        oldRangeStart = oldLine;
        newRangeStart = newLine;

        if (prev) {
          curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];
          oldRangeStart -= curRange.length;
          newRangeStart -= curRange.length;
        }
      } // Output our changes


      (_curRange = curRange).push.apply(_curRange, _toConsumableArray(lines.map(function (entry) {
        return (current.added ? '+' : '-') + entry;
      }))); // Track the updated file position


      if (current.added) {
        newLine += lines.length;
      } else {
        oldLine += lines.length;
      }
    } else {
      // Identical context lines. Track line changes
      if (oldRangeStart) {
        // Close out any changes that have been output (or join overlapping)
        if (lines.length <= options.context * 2 && i < diff.length - 2) {
          var _curRange2;

          // Overlapping
          (_curRange2 = curRange).push.apply(_curRange2, _toConsumableArray(contextLines(lines)));
        } else {
          var _curRange3;

          // end the range and output
          var contextSize = Math.min(lines.length, options.context);

          (_curRange3 = curRange).push.apply(_curRange3, _toConsumableArray(contextLines(lines.slice(0, contextSize))));

          var hunk = {
            oldStart: oldRangeStart,
            oldLines: oldLine - oldRangeStart + contextSize,
            newStart: newRangeStart,
            newLines: newLine - newRangeStart + contextSize,
            lines: curRange
          };

          if (i >= diff.length - 2 && lines.length <= options.context) {
            // EOF is inside this hunk
            var oldEOFNewline = /\n$/.test(oldStr);
            var newEOFNewline = /\n$/.test(newStr);
            var noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;

            if (!oldEOFNewline && noNlBeforeAdds && oldStr.length > 0) {
              // special case: old has no eol and no trailing context; no-nl can end up before adds
              // however, if the old file is empty, do not output the no-nl line
              curRange.splice(hunk.oldLines, 0, '\\ No newline at end of file');
            }

            if (!oldEOFNewline && !noNlBeforeAdds || !newEOFNewline) {
              curRange.push('\\ No newline at end of file');
            }
          }

          hunks.push(hunk);
          oldRangeStart = 0;
          newRangeStart = 0;
          curRange = [];
        }
      }

      oldLine += lines.length;
      newLine += lines.length;
    }
  };

  for (var i = 0; i < diff.length; i++) {
    _loop(i);
  }

  return {
    oldFileName: oldFileName,
    newFileName: newFileName,
    oldHeader: oldHeader,
    newHeader: newHeader,
    hunks: hunks
  };
}
function formatPatch(diff) {
  var ret = [];

  if (diff.oldFileName == diff.newFileName) {
    ret.push('Index: ' + diff.oldFileName);
  }

  ret.push('===================================================================');
  ret.push('--- ' + diff.oldFileName + (typeof diff.oldHeader === 'undefined' ? '' : '\t' + diff.oldHeader));
  ret.push('+++ ' + diff.newFileName + (typeof diff.newHeader === 'undefined' ? '' : '\t' + diff.newHeader));

  for (var i = 0; i < diff.hunks.length; i++) {
    var hunk = diff.hunks[i]; // Unified Diff Format quirk: If the chunk size is 0,
    // the first number is one lower than one would expect.
    // https://www.artima.com/weblogs/viewpost.jsp?thread=164293

    if (hunk.oldLines === 0) {
      hunk.oldStart -= 1;
    }

    if (hunk.newLines === 0) {
      hunk.newStart -= 1;
    }

    ret.push('@@ -' + hunk.oldStart + ',' + hunk.oldLines + ' +' + hunk.newStart + ',' + hunk.newLines + ' @@');
    ret.push.apply(ret, hunk.lines);
  }

  return ret.join('\n') + '\n';
}
function createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
  return formatPatch(structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options));
}
function createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {
  return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);
}

function arrayEqual(a, b) {
  if (a.length !== b.length) {
    return false;
  }

  return arrayStartsWith(a, b);
}
function arrayStartsWith(array, start) {
  if (start.length > array.length) {
    return false;
  }

  for (var i = 0; i < start.length; i++) {
    if (start[i] !== array[i]) {
      return false;
    }
  }

  return true;
}

function calcLineCount(hunk) {
  var _calcOldNewLineCount = calcOldNewLineCount(hunk.lines),
      oldLines = _calcOldNewLineCount.oldLines,
      newLines = _calcOldNewLineCount.newLines;

  if (oldLines !== undefined) {
    hunk.oldLines = oldLines;
  } else {
    delete hunk.oldLines;
  }

  if (newLines !== undefined) {
    hunk.newLines = newLines;
  } else {
    delete hunk.newLines;
  }
}
function merge(mine, theirs, base) {
  mine = loadPatch(mine, base);
  theirs = loadPatch(theirs, base);
  var ret = {}; // For index we just let it pass through as it doesn't have any necessary meaning.
  // Leaving sanity checks on this to the API consumer that may know more about the
  // meaning in their own context.

  if (mine.index || theirs.index) {
    ret.index = mine.index || theirs.index;
  }

  if (mine.newFileName || theirs.newFileName) {
    if (!fileNameChanged(mine)) {
      // No header or no change in ours, use theirs (and ours if theirs does not exist)
      ret.oldFileName = theirs.oldFileName || mine.oldFileName;
      ret.newFileName = theirs.newFileName || mine.newFileName;
      ret.oldHeader = theirs.oldHeader || mine.oldHeader;
      ret.newHeader = theirs.newHeader || mine.newHeader;
    } else if (!fileNameChanged(theirs)) {
      // No header or no change in theirs, use ours
      ret.oldFileName = mine.oldFileName;
      ret.newFileName = mine.newFileName;
      ret.oldHeader = mine.oldHeader;
      ret.newHeader = mine.newHeader;
    } else {
      // Both changed... figure it out
      ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);
      ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);
      ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);
      ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);
    }
  }

  ret.hunks = [];
  var mineIndex = 0,
      theirsIndex = 0,
      mineOffset = 0,
      theirsOffset = 0;

  while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {
    var mineCurrent = mine.hunks[mineIndex] || {
      oldStart: Infinity
    },
        theirsCurrent = theirs.hunks[theirsIndex] || {
      oldStart: Infinity
    };

    if (hunkBefore(mineCurrent, theirsCurrent)) {
      // This patch does not overlap with any of the others, yay.
      ret.hunks.push(cloneHunk(mineCurrent, mineOffset));
      mineIndex++;
      theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;
    } else if (hunkBefore(theirsCurrent, mineCurrent)) {
      // This patch does not overlap with any of the others, yay.
      ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));
      theirsIndex++;
      mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;
    } else {
      // Overlap, merge as best we can
      var mergedHunk = {
        oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),
        oldLines: 0,
        newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),
        newLines: 0,
        lines: []
      };
      mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);
      theirsIndex++;
      mineIndex++;
      ret.hunks.push(mergedHunk);
    }
  }

  return ret;
}

function loadPatch(param, base) {
  if (typeof param === 'string') {
    if (/^@@/m.test(param) || /^Index:/m.test(param)) {
      return parsePatch(param)[0];
    }

    if (!base) {
      throw new Error('Must provide a base reference or pass in a patch');
    }

    return structuredPatch(undefined, undefined, base, param);
  }

  return param;
}

function fileNameChanged(patch) {
  return patch.newFileName && patch.newFileName !== patch.oldFileName;
}

function selectField(index, mine, theirs) {
  if (mine === theirs) {
    return mine;
  } else {
    index.conflict = true;
    return {
      mine: mine,
      theirs: theirs
    };
  }
}

function hunkBefore(test, check) {
  return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;
}

function cloneHunk(hunk, offset) {
  return {
    oldStart: hunk.oldStart,
    oldLines: hunk.oldLines,
    newStart: hunk.newStart + offset,
    newLines: hunk.newLines,
    lines: hunk.lines
  };
}

function mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {
  // This will generally result in a conflicted hunk, but there are cases where the context
  // is the only overlap where we can successfully merge the content here.
  var mine = {
    offset: mineOffset,
    lines: mineLines,
    index: 0
  },
      their = {
    offset: theirOffset,
    lines: theirLines,
    index: 0
  }; // Handle any leading content

  insertLeading(hunk, mine, their);
  insertLeading(hunk, their, mine); // Now in the overlap content. Scan through and select the best changes from each.

  while (mine.index < mine.lines.length && their.index < their.lines.length) {
    var mineCurrent = mine.lines[mine.index],
        theirCurrent = their.lines[their.index];

    if ((mineCurrent[0] === '-' || mineCurrent[0] === '+') && (theirCurrent[0] === '-' || theirCurrent[0] === '+')) {
      // Both modified ...
      mutualChange(hunk, mine, their);
    } else if (mineCurrent[0] === '+' && theirCurrent[0] === ' ') {
      var _hunk$lines;

      // Mine inserted
      (_hunk$lines = hunk.lines).push.apply(_hunk$lines, _toConsumableArray(collectChange(mine)));
    } else if (theirCurrent[0] === '+' && mineCurrent[0] === ' ') {
      var _hunk$lines2;

      // Theirs inserted
      (_hunk$lines2 = hunk.lines).push.apply(_hunk$lines2, _toConsumableArray(collectChange(their)));
    } else if (mineCurrent[0] === '-' && theirCurrent[0] === ' ') {
      // Mine removed or edited
      removal(hunk, mine, their);
    } else if (theirCurrent[0] === '-' && mineCurrent[0] === ' ') {
      // Their removed or edited
      removal(hunk, their, mine, true);
    } else if (mineCurrent === theirCurrent) {
      // Context identity
      hunk.lines.push(mineCurrent);
      mine.index++;
      their.index++;
    } else {
      // Context mismatch
      conflict(hunk, collectChange(mine), collectChange(their));
    }
  } // Now push anything that may be remaining


  insertTrailing(hunk, mine);
  insertTrailing(hunk, their);
  calcLineCount(hunk);
}

function mutualChange(hunk, mine, their) {
  var myChanges = collectChange(mine),
      theirChanges = collectChange(their);

  if (allRemoves(myChanges) && allRemoves(theirChanges)) {
    // Special case for remove changes that are supersets of one another
    if (arrayStartsWith(myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {
      var _hunk$lines3;

      (_hunk$lines3 = hunk.lines).push.apply(_hunk$lines3, _toConsumableArray(myChanges));

      return;
    } else if (arrayStartsWith(theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {
      var _hunk$lines4;

      (_hunk$lines4 = hunk.lines).push.apply(_hunk$lines4, _toConsumableArray(theirChanges));

      return;
    }
  } else if (arrayEqual(myChanges, theirChanges)) {
    var _hunk$lines5;

    (_hunk$lines5 = hunk.lines).push.apply(_hunk$lines5, _toConsumableArray(myChanges));

    return;
  }

  conflict(hunk, myChanges, theirChanges);
}

function removal(hunk, mine, their, swap) {
  var myChanges = collectChange(mine),
      theirChanges = collectContext(their, myChanges);

  if (theirChanges.merged) {
    var _hunk$lines6;

    (_hunk$lines6 = hunk.lines).push.apply(_hunk$lines6, _toConsumableArray(theirChanges.merged));
  } else {
    conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);
  }
}

function conflict(hunk, mine, their) {
  hunk.conflict = true;
  hunk.lines.push({
    conflict: true,
    mine: mine,
    theirs: their
  });
}

function insertLeading(hunk, insert, their) {
  while (insert.offset < their.offset && insert.index < insert.lines.length) {
    var line = insert.lines[insert.index++];
    hunk.lines.push(line);
    insert.offset++;
  }
}

function insertTrailing(hunk, insert) {
  while (insert.index < insert.lines.length) {
    var line = insert.lines[insert.index++];
    hunk.lines.push(line);
  }
}

function collectChange(state) {
  var ret = [],
      operation = state.lines[state.index][0];

  while (state.index < state.lines.length) {
    var line = state.lines[state.index]; // Group additions that are immediately after subtractions and treat them as one "atomic" modify change.

    if (operation === '-' && line[0] === '+') {
      operation = '+';
    }

    if (operation === line[0]) {
      ret.push(line);
      state.index++;
    } else {
      break;
    }
  }

  return ret;
}

function collectContext(state, matchChanges) {
  var changes = [],
      merged = [],
      matchIndex = 0,
      contextChanges = false,
      conflicted = false;

  while (matchIndex < matchChanges.length && state.index < state.lines.length) {
    var change = state.lines[state.index],
        match = matchChanges[matchIndex]; // Once we've hit our add, then we are done

    if (match[0] === '+') {
      break;
    }

    contextChanges = contextChanges || change[0] !== ' ';
    merged.push(match);
    matchIndex++; // Consume any additions in the other block as a conflict to attempt
    // to pull in the remaining context after this

    if (change[0] === '+') {
      conflicted = true;

      while (change[0] === '+') {
        changes.push(change);
        change = state.lines[++state.index];
      }
    }

    if (match.substr(1) === change.substr(1)) {
      changes.push(change);
      state.index++;
    } else {
      conflicted = true;
    }
  }

  if ((matchChanges[matchIndex] || '')[0] === '+' && contextChanges) {
    conflicted = true;
  }

  if (conflicted) {
    return changes;
  }

  while (matchIndex < matchChanges.length) {
    merged.push(matchChanges[matchIndex++]);
  }

  return {
    merged: merged,
    changes: changes
  };
}

function allRemoves(changes) {
  return changes.reduce(function (prev, change) {
    return prev && change[0] === '-';
  }, true);
}

function skipRemoveSuperset(state, removeChanges, delta) {
  for (var i = 0; i < delta; i++) {
    var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);

    if (state.lines[state.index + i] !== ' ' + changeContent) {
      return false;
    }
  }

  state.index += delta;
  return true;
}

function calcOldNewLineCount(lines) {
  var oldLines = 0;
  var newLines = 0;
  lines.forEach(function (line) {
    if (typeof line !== 'string') {
      var myCount = calcOldNewLineCount(line.mine);
      var theirCount = calcOldNewLineCount(line.theirs);

      if (oldLines !== undefined) {
        if (myCount.oldLines === theirCount.oldLines) {
          oldLines += myCount.oldLines;
        } else {
          oldLines = undefined;
        }
      }

      if (newLines !== undefined) {
        if (myCount.newLines === theirCount.newLines) {
          newLines += myCount.newLines;
        } else {
          newLines = undefined;
        }
      }
    } else {
      if (newLines !== undefined && (line[0] === '+' || line[0] === ' ')) {
        newLines++;
      }

      if (oldLines !== undefined && (line[0] === '-' || line[0] === ' ')) {
        oldLines++;
      }
    }
  });
  return {
    oldLines: oldLines,
    newLines: newLines
  };
}

// See: http://code.google.com/p/google-diff-match-patch/wiki/API
function convertChangesToDMP(changes) {
  var ret = [],
      change,
      operation;

  for (var i = 0; i < changes.length; i++) {
    change = changes[i];

    if (change.added) {
      operation = 1;
    } else if (change.removed) {
      operation = -1;
    } else {
      operation = 0;
    }

    ret.push([operation, change.value]);
  }

  return ret;
}

function convertChangesToXML(changes) {
  var ret = [];

  for (var i = 0; i < changes.length; i++) {
    var change = changes[i];

    if (change.added) {
      ret.push('<ins>');
    } else if (change.removed) {
      ret.push('<del>');
    }

    ret.push(escapeHTML(change.value));

    if (change.added) {
      ret.push('</ins>');
    } else if (change.removed) {
      ret.push('</del>');
    }
  }

  return ret.join('');
}

function escapeHTML(s) {
  var n = s;
  n = n.replace(/&/g, '&amp;');
  n = n.replace(/</g, '&lt;');
  n = n.replace(/>/g, '&gt;');
  n = n.replace(/"/g, '&quot;');
  return n;
}




/***/ }),

/***/ "./node_modules/style-to-object/index.mjs":
/*!************************************************!*\
  !*** ./node_modules/style-to-object/index.mjs ***!
  \************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ "./node_modules/style-to-object/index.js");


/* harmony default export */ __webpack_exports__["default"] = (_index_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./node_modules/uvu/assert/index.mjs":
/*!*******************************************!*\
  !*** ./node_modules/uvu/assert/index.mjs ***!
  \*******************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Assertion": function() { return /* binding */ Assertion; },
/* harmony export */   "equal": function() { return /* binding */ equal; },
/* harmony export */   "fixture": function() { return /* binding */ fixture; },
/* harmony export */   "instance": function() { return /* binding */ instance; },
/* harmony export */   "is": function() { return /* binding */ is; },
/* harmony export */   "match": function() { return /* binding */ match; },
/* harmony export */   "not": function() { return /* binding */ not; },
/* harmony export */   "ok": function() { return /* binding */ ok; },
/* harmony export */   "snapshot": function() { return /* binding */ snapshot; },
/* harmony export */   "throws": function() { return /* binding */ throws; },
/* harmony export */   "type": function() { return /* binding */ type; },
/* harmony export */   "unreachable": function() { return /* binding */ unreachable; }
/* harmony export */ });
/* harmony import */ var dequal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dequal */ "./node_modules/dequal/dist/index.mjs");
/* harmony import */ var uvu_diff__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uvu/diff */ "./node_modules/uvu/diff/index.mjs");



function dedent(str) {
	str = str.replace(/\r?\n/g, '\n');
  let arr = str.match(/^[ \t]*(?=\S)/gm);
  let i = 0, min = 1/0, len = (arr||[]).length;
  for (; i < len; i++) min = Math.min(min, arr[i].length);
  return len && min ? str.replace(new RegExp(`^[ \\t]{${min}}`, 'gm'), '') : str;
}

class Assertion extends Error {
	constructor(opts={}) {
		super(opts.message);
		this.name = 'Assertion';
		this.code = 'ERR_ASSERTION';
		if (Error.captureStackTrace) {
			Error.captureStackTrace(this, this.constructor);
		}
		this.details = opts.details || false;
		this.generated = !!opts.generated;
		this.operator = opts.operator;
		this.expects = opts.expects;
		this.actual = opts.actual;
	}
}

function assert(bool, actual, expects, operator, detailer, backup, msg) {
	if (bool) return;
	let message = msg || backup;
	if (msg instanceof Error) throw msg;
	let details = detailer && detailer(actual, expects);
	throw new Assertion({ actual, expects, operator, message, details, generated: !msg });
}

function ok(val, msg) {
	assert(!!val, false, true, 'ok', false, 'Expected value to be truthy', msg);
}

function is(val, exp, msg) {
	assert(val === exp, val, exp, 'is', uvu_diff__WEBPACK_IMPORTED_MODULE_1__.compare, 'Expected values to be strictly equal:', msg);
}

function equal(val, exp, msg) {
	assert((0,dequal__WEBPACK_IMPORTED_MODULE_0__.dequal)(val, exp), val, exp, 'equal', uvu_diff__WEBPACK_IMPORTED_MODULE_1__.compare, 'Expected values to be deeply equal:', msg);
}

function unreachable(msg) {
	assert(false, true, false, 'unreachable', false, 'Expected not to be reached!', msg);
}

function type(val, exp, msg) {
	let tmp = typeof val;
	assert(tmp === exp, tmp, exp, 'type', false, `Expected "${tmp}" to be "${exp}"`, msg);
}

function instance(val, exp, msg) {
	let name = '`' + (exp.name || exp.constructor.name) + '`';
	assert(val instanceof exp, val, exp, 'instance', false, `Expected value to be an instance of ${name}`, msg);
}

function match(val, exp, msg) {
	if (typeof exp === 'string') {
		assert(val.includes(exp), val, exp, 'match', false, `Expected value to include "${exp}" substring`, msg);
	} else {
		assert(exp.test(val), val, exp, 'match', false, `Expected value to match \`${String(exp)}\` pattern`, msg);
	}
}

function snapshot(val, exp, msg) {
	val=dedent(val); exp=dedent(exp);
	assert(val === exp, val, exp, 'snapshot', uvu_diff__WEBPACK_IMPORTED_MODULE_1__.lines, 'Expected value to match snapshot:', msg);
}

const lineNums = (x, y) => (0,uvu_diff__WEBPACK_IMPORTED_MODULE_1__.lines)(x, y, 1);
function fixture(val, exp, msg) {
	val=dedent(val); exp=dedent(exp);
	assert(val === exp, val, exp, 'fixture', lineNums, 'Expected value to match fixture:', msg);
}

function throws(blk, exp, msg) {
	if (!msg && typeof exp === 'string') {
		msg = exp; exp = null;
	}

	try {
		blk();
		assert(false, false, true, 'throws', false, 'Expected function to throw', msg);
	} catch (err) {
		if (err instanceof Assertion) throw err;

		if (typeof exp === 'function') {
			assert(exp(err), false, true, 'throws', false, 'Expected function to throw matching exception', msg);
		} else if (exp instanceof RegExp) {
			assert(exp.test(err.message), false, true, 'throws', false, `Expected function to throw exception matching \`${String(exp)}\` pattern`, msg);
		}
	}
}

// ---

function not(val, msg) {
	assert(!val, true, false, 'not', false, 'Expected value to be falsey', msg);
}

not.ok = not;

is.not = function (val, exp, msg) {
	assert(val !== exp, val, exp, 'is.not', false, 'Expected values not to be strictly equal', msg);
}

not.equal = function (val, exp, msg) {
	assert(!(0,dequal__WEBPACK_IMPORTED_MODULE_0__.dequal)(val, exp), val, exp, 'not.equal', false, 'Expected values not to be deeply equal', msg);
}

not.type = function (val, exp, msg) {
	let tmp = typeof val;
	assert(tmp !== exp, tmp, exp, 'not.type', false, `Expected "${tmp}" not to be "${exp}"`, msg);
}

not.instance = function (val, exp, msg) {
	let name = '`' + (exp.name || exp.constructor.name) + '`';
	assert(!(val instanceof exp), val, exp, 'not.instance', false, `Expected value not to be an instance of ${name}`, msg);
}

not.snapshot = function (val, exp, msg) {
	val=dedent(val); exp=dedent(exp);
	assert(val !== exp, val, exp, 'not.snapshot', false, 'Expected value not to match snapshot', msg);
}

not.fixture = function (val, exp, msg) {
	val=dedent(val); exp=dedent(exp);
	assert(val !== exp, val, exp, 'not.fixture', false, 'Expected value not to match fixture', msg);
}

not.match = function (val, exp, msg) {
	if (typeof exp === 'string') {
		assert(!val.includes(exp), val, exp, 'not.match', false, `Expected value not to include "${exp}" substring`, msg);
	} else {
		assert(!exp.test(val), val, exp, 'not.match', false, `Expected value not to match \`${String(exp)}\` pattern`, msg);
	}
}

not.throws = function (blk, exp, msg) {
	if (!msg && typeof exp === 'string') {
		msg = exp; exp = null;
	}

	try {
		blk();
	} catch (err) {
		if (typeof exp === 'function') {
			assert(!exp(err), true, false, 'not.throws', false, 'Expected function not to throw matching exception', msg);
		} else if (exp instanceof RegExp) {
			assert(!exp.test(err.message), true, false, 'not.throws', false, `Expected function not to throw exception matching \`${String(exp)}\` pattern`, msg);
		} else if (!exp) {
			assert(false, true, false, 'not.throws', false, 'Expected function not to throw', msg);
		}
	}
}


/***/ }),

/***/ "./node_modules/uvu/diff/index.mjs":
/*!*****************************************!*\
  !*** ./node_modules/uvu/diff/index.mjs ***!
  \*****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "arrays": function() { return /* binding */ arrays; },
/* harmony export */   "chars": function() { return /* binding */ chars; },
/* harmony export */   "circular": function() { return /* binding */ circular; },
/* harmony export */   "compare": function() { return /* binding */ compare; },
/* harmony export */   "direct": function() { return /* binding */ direct; },
/* harmony export */   "lines": function() { return /* binding */ lines; },
/* harmony export */   "sort": function() { return /* binding */ sort; },
/* harmony export */   "stringify": function() { return /* binding */ stringify; }
/* harmony export */ });
/* harmony import */ var kleur__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! kleur */ "./node_modules/uvu/node_modules/kleur/index.mjs");
/* harmony import */ var diff__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! diff */ "./node_modules/diff/lib/index.mjs");



const colors = {
	'--': kleur__WEBPACK_IMPORTED_MODULE_0__["default"].red,
	'··': kleur__WEBPACK_IMPORTED_MODULE_0__["default"].grey,
	'++': kleur__WEBPACK_IMPORTED_MODULE_0__["default"].green,
};

const TITLE = kleur__WEBPACK_IMPORTED_MODULE_0__["default"].dim().italic;
const TAB=kleur__WEBPACK_IMPORTED_MODULE_0__["default"].dim('→'), SPACE=kleur__WEBPACK_IMPORTED_MODULE_0__["default"].dim('·'), NL=kleur__WEBPACK_IMPORTED_MODULE_0__["default"].dim('↵');
const LOG = (sym, str) => colors[sym](sym + PRETTY(str)) + '\n';
const LINE = (num, x) => kleur__WEBPACK_IMPORTED_MODULE_0__["default"].dim('L' + String(num).padStart(x, '0') + ' ');
const PRETTY = str => str.replace(/[ ]/g, SPACE).replace(/\t/g, TAB).replace(/(\r?\n)/g, NL);

function line(obj, prev, pad) {
	let char = obj.removed ? '--' : obj.added ? '++' : '··';
	let arr = obj.value.replace(/\r?\n$/, '').split('\n');
	let i=0, tmp, out='';

	if (obj.added) out += colors[char]().underline(TITLE('Expected:')) + '\n';
	else if (obj.removed) out += colors[char]().underline(TITLE('Actual:')) + '\n';

	for (; i < arr.length; i++) {
		tmp = arr[i];
		if (tmp != null) {
			if (prev) out += LINE(prev + i, pad);
			out += LOG(char, tmp || '\n');
		}
	}

	return out;
}

// TODO: want better diffing
//~> complex items bail outright
function arrays(input, expect) {
	let arr = diff__WEBPACK_IMPORTED_MODULE_1__.diffArrays(input, expect);
	let i=0, j=0, k=0, tmp, val, char, isObj, str;
	let out = LOG('··', '[');

	for (; i < arr.length; i++) {
		char = (tmp = arr[i]).removed ? '--' : tmp.added ? '++' : '··';

		if (tmp.added) {
			out += colors[char]().underline(TITLE('Expected:')) + '\n';
		} else if (tmp.removed) {
			out += colors[char]().underline(TITLE('Actual:')) + '\n';
		}

		for (j=0; j < tmp.value.length; j++) {
			isObj = (tmp.value[j] && typeof tmp.value[j] === 'object');
			val = stringify(tmp.value[j]).split(/\r?\n/g);
			for (k=0; k < val.length;) {
				str = '  ' + val[k++] + (isObj ? '' : ',');
				if (isObj && k === val.length && (j + 1) < tmp.value.length) str += ',';
				out += LOG(char, str);
			}
		}
	}

	return out + LOG('··', ']');
}

function lines(input, expect, linenum = 0) {
	let i=0, tmp, output='';
	let arr = diff__WEBPACK_IMPORTED_MODULE_1__.diffLines(input, expect);
	let pad = String(expect.split(/\r?\n/g).length - linenum).length;

	for (; i < arr.length; i++) {
		output += line(tmp = arr[i], linenum, pad);
		if (linenum && !tmp.removed) linenum += tmp.count;
	}

	return output;
}

function chars(input, expect) {
	let arr = diff__WEBPACK_IMPORTED_MODULE_1__.diffChars(input, expect);
	let i=0, output='', tmp;

	let l1 = input.length;
	let l2 = expect.length;

	let p1 = PRETTY(input);
	let p2 = PRETTY(expect);

	tmp = arr[i];

	if (l1 === l2) {
		// no length offsets
	} else if (tmp.removed && arr[i + 1]) {
		let del = tmp.count - arr[i + 1].count;
		if (del == 0) {
			// wash~
		} else if (del > 0) {
			expect = ' '.repeat(del) + expect;
			p2 = ' '.repeat(del) + p2;
			l2 += del;
		} else if (del < 0) {
			input = ' '.repeat(-del) + input;
			p1 = ' '.repeat(-del) + p1;
			l1 += -del;
		}
	}

	output += direct(p1, p2, l1, l2);

	if (l1 === l2) {
		for (tmp='  '; i < l1; i++) {
			tmp += input[i] === expect[i] ? ' ' : '^';
		}
	} else {
		for (tmp='  '; i < arr.length; i++) {
			tmp += ((arr[i].added || arr[i].removed) ? '^' : ' ').repeat(Math.max(arr[i].count, 0));
			if (i + 1 < arr.length && ((arr[i].added && arr[i+1].removed) || (arr[i].removed && arr[i+1].added))) {
				arr[i + 1].count -= arr[i].count;
			}
		}
	}

	return output + kleur__WEBPACK_IMPORTED_MODULE_0__["default"].red(tmp);
}

function direct(input, expect, lenA = String(input).length, lenB = String(expect).length) {
	let gutter = 4;
	let lenC = Math.max(lenA, lenB);
	let typeA=typeof input, typeB=typeof expect;

	if (typeA !== typeB) {
		gutter = 2;

		let delA = gutter + lenC - lenA;
		let delB = gutter + lenC - lenB;

		input += ' '.repeat(delA) + kleur__WEBPACK_IMPORTED_MODULE_0__["default"].dim(`[${typeA}]`);
		expect += ' '.repeat(delB) + kleur__WEBPACK_IMPORTED_MODULE_0__["default"].dim(`[${typeB}]`);

		lenA += delA + typeA.length + 2;
		lenB += delB + typeB.length + 2;
		lenC = Math.max(lenA, lenB);
	}

	let output = colors['++']('++' + expect + ' '.repeat(gutter + lenC - lenB) + TITLE('(Expected)')) + '\n';
	return output + colors['--']('--' + input + ' '.repeat(gutter + lenC - lenA) + TITLE('(Actual)')) + '\n';
}

function sort(input, expect) {
	var k, i=0, tmp, isArr = Array.isArray(input);
	var keys=[], out=isArr ? Array(input.length) : {};

	if (isArr) {
		for (i=0; i < out.length; i++) {
			tmp = input[i];
			if (!tmp || typeof tmp !== 'object') out[i] = tmp;
			else out[i] = sort(tmp, expect[i]); // might not be right
		}
	} else {
		for (k in expect)
			keys.push(k);

		for (; i < keys.length; i++) {
			if (Object.prototype.hasOwnProperty.call(input, k = keys[i])) {
				if (!(tmp = input[k]) || typeof tmp !== 'object') out[k] = tmp;
				else out[k] = sort(tmp, expect[k]);
			}
		}

		for (k in input) {
			if (!out.hasOwnProperty(k)) {
				out[k] = input[k]; // expect didnt have
			}
		}
	}

	return out;
}

function circular() {
	var cache = new Set;
	return function print(key, val) {
		if (val === void 0) return '[__VOID__]';
		if (typeof val === 'number' && val !== val) return '[__NAN__]';
		if (typeof val === 'bigint') return val.toString();
		if (!val || typeof val !== 'object') return val;
		if (cache.has(val)) return '[Circular]';
		cache.add(val); return val;
	}
}

function stringify(input) {
	return JSON.stringify(input, circular(), 2).replace(/"\[__NAN__\]"/g, 'NaN').replace(/"\[__VOID__\]"/g, 'undefined');
}

function compare(input, expect) {
	if (Array.isArray(expect) && Array.isArray(input)) return arrays(input, expect);
	if (expect instanceof RegExp) return chars(''+input, ''+expect);

	let isA = input && typeof input == 'object';
	let isB = expect && typeof expect == 'object';

	if (isA && isB) input = sort(input, expect);
	if (isB) expect = stringify(expect);
	if (isA) input = stringify(input);

	if (expect && typeof expect == 'object') {
		input = stringify(sort(input, expect));
		expect = stringify(expect);
	}

	isA = typeof input == 'string';
	isB = typeof expect == 'string';

	if (isA && /\r?\n/.test(input)) return lines(input, ''+expect);
	if (isB && /\r?\n/.test(expect)) return lines(''+input, expect);
	if (isA && isB) return chars(input, expect);

	return direct(input, expect);
}


/***/ }),

/***/ "./node_modules/uvu/node_modules/kleur/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/uvu/node_modules/kleur/index.mjs ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);


let FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM, isTTY=true;
if (typeof process !== 'undefined') {
	({ FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM } = process.env || {});
	isTTY = process.stdout && process.stdout.isTTY;
}

const $ = {
	enabled: !NODE_DISABLE_COLORS && NO_COLOR == null && TERM !== 'dumb' && (
		FORCE_COLOR != null && FORCE_COLOR !== '0' || isTTY
	),

	// modifiers
	reset: init(0, 0),
	bold: init(1, 22),
	dim: init(2, 22),
	italic: init(3, 23),
	underline: init(4, 24),
	inverse: init(7, 27),
	hidden: init(8, 28),
	strikethrough: init(9, 29),

	// colors
	black: init(30, 39),
	red: init(31, 39),
	green: init(32, 39),
	yellow: init(33, 39),
	blue: init(34, 39),
	magenta: init(35, 39),
	cyan: init(36, 39),
	white: init(37, 39),
	gray: init(90, 39),
	grey: init(90, 39),

	// background colors
	bgBlack: init(40, 49),
	bgRed: init(41, 49),
	bgGreen: init(42, 49),
	bgYellow: init(43, 49),
	bgBlue: init(44, 49),
	bgMagenta: init(45, 49),
	bgCyan: init(46, 49),
	bgWhite: init(47, 49)
};

function run(arr, str) {
	let i=0, tmp, beg='', end='';
	for (; i < arr.length; i++) {
		tmp = arr[i];
		beg += tmp.open;
		end += tmp.close;
		if (!!~str.indexOf(tmp.close)) {
			str = str.replace(tmp.rgx, tmp.close + tmp.open);
		}
	}
	return beg + str + end;
}

function chain(has, keys) {
	let ctx = { has, keys };

	ctx.reset = $.reset.bind(ctx);
	ctx.bold = $.bold.bind(ctx);
	ctx.dim = $.dim.bind(ctx);
	ctx.italic = $.italic.bind(ctx);
	ctx.underline = $.underline.bind(ctx);
	ctx.inverse = $.inverse.bind(ctx);
	ctx.hidden = $.hidden.bind(ctx);
	ctx.strikethrough = $.strikethrough.bind(ctx);

	ctx.black = $.black.bind(ctx);
	ctx.red = $.red.bind(ctx);
	ctx.green = $.green.bind(ctx);
	ctx.yellow = $.yellow.bind(ctx);
	ctx.blue = $.blue.bind(ctx);
	ctx.magenta = $.magenta.bind(ctx);
	ctx.cyan = $.cyan.bind(ctx);
	ctx.white = $.white.bind(ctx);
	ctx.gray = $.gray.bind(ctx);
	ctx.grey = $.grey.bind(ctx);

	ctx.bgBlack = $.bgBlack.bind(ctx);
	ctx.bgRed = $.bgRed.bind(ctx);
	ctx.bgGreen = $.bgGreen.bind(ctx);
	ctx.bgYellow = $.bgYellow.bind(ctx);
	ctx.bgBlue = $.bgBlue.bind(ctx);
	ctx.bgMagenta = $.bgMagenta.bind(ctx);
	ctx.bgCyan = $.bgCyan.bind(ctx);
	ctx.bgWhite = $.bgWhite.bind(ctx);

	return ctx;
}

function init(open, close) {
	let blk = {
		open: `\x1b[${open}m`,
		close: `\x1b[${close}m`,
		rgx: new RegExp(`\\x1b\\[${close}m`, 'g')
	};
	return function (txt) {
		if (this !== void 0 && this.has !== void 0) {
			!!~this.has.indexOf(open) || (this.has.push(open),this.keys.push(blk));
			return txt === void 0 ? this : $.enabled ? run(this.keys, txt+'') : txt+'';
		}
		return txt === void 0 ? chain([open], [blk]) : $.enabled ? run([blk], txt+'') : txt+'';
	};
}

/* harmony default export */ __webpack_exports__["default"] = ($);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfcmVhY3QtbWFya2Rvd25fbGliX3JlYWN0LW1hcmtkb3duX2pzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBQSxrQkFBa0IsR0FBR0MsVUFBVTtBQUMvQkQsWUFBWSxHQUFHRSxJQUFJO0FBQ25CRixZQUFZLEdBQUdHLElBQUk7QUFDbkJILGlCQUFpQixHQUFHSSxTQUFTO0FBQzdCSixlQUFlLEdBQUdNLFlBQVksRUFBRTtBQUNoQ04sZUFBZSxHQUFHLENBQUMsTUFBTTtFQUN4QixJQUFJUSxNQUFNLEdBQUcsS0FBSztFQUVsQixPQUFPLE1BQU07SUFDWixJQUFJLENBQUNBLE1BQU0sRUFBRTtNQUNaQSxNQUFNLEdBQUcsSUFBSTtNQUNiQyxPQUFPLENBQUNDLElBQUksQ0FBQyx1SUFBdUksQ0FBQztJQUN0SjtFQUNELENBQUM7QUFDRixDQUFDLEdBQUc7O0FBRUo7QUFDQTtBQUNBOztBQUVBVixjQUFjLEdBQUcsQ0FDaEIsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxF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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRXVDO0FBQ007QUFDRDtBQUNVO0FBQ0U7QUFDeUM7QUFDeEM7QUFDYztBQUNuQjtBQUNRO0FBQ1I7QUFDMEI7QUFDZjtBQUUvRCxNQUFNVCxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM1UyxjQUFjOztBQUU3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1pVSxZQUFZO0FBQ3ZCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFD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LENBQUM7RUFDMUI7RUFFQSxPQUFPLENBQUNBLEtBQUssQ0FBQztBQUNoQjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2hQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFcUQ7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNNlIsS0FBSztBQUNoQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSSxTQUFBQSxDQUFVRyxJQUFJLEVBQUV0VCxJQUFJLEVBQUV1NEQsT0FBTyxFQUFFQyxPQUFPLEVBQUU7RUFDdEMs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QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0Esb0NBQW9DOztBQUVwQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsSUFBSTs7O0FBR0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsTUFBTTtBQUNOOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUSxnQkFBZ0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLEtBQUs7QUFDckIsaUJBQWlCLE1BQU07QUFDdkIsNkJBQTZCLE1BQU07QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtEQUFlLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvZXh0ZW5kL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcGFyc2VyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2NoZWNrUHJvcFR5cGVzLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvaGFzLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLXRvLW9iamVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvYmFpbC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvY29tbWEtc2VwYXJhdGVkLXRva2Vucy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvZGVjb2RlLW5hbWVkLWNoYXJhY3Rlci1yZWZlcmVuY2UvaW5kZXguZG9tLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9oYXN0LXV0aWwtd2hpdGVzcGFjZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC1kZWZpbml0aW9ucy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtZnJvbS1tYXJrZG93bi9kZXYvbGliL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2Zvb3Rlci5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1oYXN0L2xpYi9oYW5kbGVycy9ibG9ja3F1b3RlLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2JyZWFrLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2NvZGUuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvZGVsZXRlLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2VtcGhhc2lzLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2Zvb3Rub3RlLXJlZmVyZW5jZS5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1oYXN0L2xpYi9oYW5kbGVycy9mb290bm90ZS5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1oYXN0L2xpYi9oYW5kbGVycy9oZWFkaW5nLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2h0bWwuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvaW1hZ2UtcmVmZXJlbmNlLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2ltYWdlLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2lubGluZS1jb2RlLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2xpbmstcmVmZXJlbmNlLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2xpbmsuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvbGlzdC1pdGVtLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL2xpc3QuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvcGFyYWdyYXBoLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3Jvb3QuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvc3Ryb25nLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3RhYmxlLWNlbGwuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvdGFibGUtcm93LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3RhYmxlLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL2hhbmRsZXJzL3RleHQuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaGFuZGxlcnMvdGhlbWF0aWMtYnJlYWsuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8taGFzdC9saWIvcmV2ZXJ0LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLWhhc3QvbGliL3N0YXRlLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLXN0cmluZy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9hdHRlbnRpb24uanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9hdXRvbGluay5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9kZXYvbGliL2JsYW5rLWxpbmUuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9ibG9jay1xdW90ZS5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9kZXYvbGliL2NoYXJhY3Rlci1lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9jaGFyYWN0ZXItcmVmZXJlbmNlLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvY29kZS1mZW5jZWQuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9jb2RlLWluZGVudGVkLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvY29kZS10ZXh0LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvY29udGVudC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9kZXYvbGliL2RlZmluaXRpb24uanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9oYXJkLWJyZWFrLWVzY2FwZS5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9kZXYvbGliL2hlYWRpbmctYXR4LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvaHRtbC1mbG93LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvaHRtbC10ZXh0LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvbGFiZWwtZW5kLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvbGFiZWwtc3RhcnQtaW1hZ2UuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9sYWJlbC1zdGFydC1saW5rLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvbGluZS1lbmRpbmcuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay1jb3JlLWNvbW1vbm1hcmsvZGV2L2xpYi9saXN0LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstY29yZS1jb21tb25tYXJrL2Rldi9saWIvc2V0ZXh0LXVuZGVybGluZS5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyay9kZXYvbGliL3RoZW1hdGljLWJyZWFrLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstZmFjdG9yeS1kZXN0aW5hdGlvbi9kZXYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay1mYWN0b3J5LWxhYmVsL2Rldi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UvZGV2L2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstZmFjdG9yeS10aXRsZS9kZXYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay1mYWN0b3J5LXdoaXRlc3BhY2UvZGV2L2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1jaGFyYWN0ZXIvZGV2L2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1jaGFyYWN0ZXIvZGV2L2xpYi91bmljb2RlLXB1bmN0dWF0aW9uLXJlZ2V4LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1jaHVua2VkL2Rldi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtY2xhc3NpZnktY2hhcmFjdGVyL2Rldi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtY29tYmluZS1leHRlbnNpb25zL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1kZWNvZGUtbnVtZXJpYy1jaGFyYWN0ZXItcmVmZXJlbmNlL2Rldi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtZGVjb2RlLXN0cmluZy9kZXYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay11dGlsLWVuY29kZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtaHRtbC10YWctbmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtbm9ybWFsaXplLWlkZW50aWZpZXIvZGV2L2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1yZXNvbHZlLWFsbC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtc2FuaXRpemUtdXJpL2Rldi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtc3VidG9rZW5pemUvZGV2L2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmstdXRpbC1zeW1ib2wvY29kZXMuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay11dGlsLXN5bWJvbC9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay11dGlsLXN5bWJvbC90eXBlcy5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLXV0aWwtc3ltYm9sL3ZhbHVlcy5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rldi9saWIvY29uc3RydWN0cy5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rldi9saWIvY3JlYXRlLXRva2VuaXplci5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rldi9saWIvaW5pdGlhbGl6ZS9jb250ZW50LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGV2L2xpYi9pbml0aWFsaXplL2RvY3VtZW50LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGV2L2xpYi9pbml0aWFsaXplL2Zsb3cuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kZXYvbGliL2luaXRpYWxpemUvdGV4dC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rldi9saWIvcGFyc2UuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kZXYvbGliL3Bvc3Rwcm9jZXNzLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGV2L2xpYi9wcmVwcm9jZXNzLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL2FyaWEuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2xpYi9maW5kLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvaGFzdC10by1yZWFjdC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL2h0bWwuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2xpYi9ub3JtYWxpemUuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2xpYi9zdmcuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2xpYi91dGlsL2Nhc2UtaW5zZW5zaXRpdmUtdHJhbnNmb3JtLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvdXRpbC9jYXNlLXNlbnNpdGl2ZS10cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2xpYi91dGlsL2NyZWF0ZS5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3V0aWwvZGVmaW5lZC1pbmZvLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvdXRpbC9pbmZvLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvdXRpbC9tZXJnZS5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3V0aWwvc2NoZW1hLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvdXRpbC90eXBlcy5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3hsaW5rLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIveG1sLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIveG1sbnMuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LW1hcmtkb3duL2xpYi9hc3QtdG8tcmVhY3QuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LW1hcmtkb3duL2xpYi9yZWFjdC1tYXJrZG93bi5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvcmVhY3QtbWFya2Rvd24vbGliL3JlaHlwZS1maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LW1hcmtkb3duL2xpYi91cmktdHJhbnNmb3JtZXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXJlaHlwZS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL3NwYWNlLXNlcGFyYXRlZC10b2tlbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL3RyaW0tbGluZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL3Ryb3VnaC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvdW5pZmllZC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL3VuaWZpZWQvbm9kZV9tb2R1bGVzL2lzLXBsYWluLW9iai9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC1nZW5lcmF0ZWQvbGliL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLWlzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC1wb3NpdGlvbi9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtc3RyaW5naWZ5LXBvc2l0aW9uL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC12aXNpdC1wYXJlbnRzL2xpYi9jb2xvci5icm93c2VyLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLXZpc2l0LXBhcmVudHMvbGliL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLXZpc2l0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvdmZpbGUtbWVzc2FnZS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL3ZmaWxlL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvdmZpbGUvbGliL21pbnBhdGguYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvdmZpbGUvbGliL21pbnByb2MuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvdmZpbGUvbGliL21pbnVybC5icm93c2VyLmpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy92ZmlsZS9saWIvbWludXJsLnNoYXJlZC5qcyIsIndlYnBhY2s6Ly90b2RvLXByby1tYXgvLi9ub2RlX21vZHVsZXMvZGVxdWFsL2Rpc3QvaW5kZXgubWpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy9kaWZmL2xpYi9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLXRvLW9iamVjdC9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL3V2dS9hc3NlcnQvaW5kZXgubWpzIiwid2VicGFjazovL3RvZG8tcHJvLW1heC8uL25vZGVfbW9kdWxlcy91dnUvZGlmZi9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vdG9kby1wcm8tbWF4Ly4vbm9kZV9tb2R1bGVzL3V2dS9ub2RlX21vZHVsZXMva2xldXIvaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9IGxvY2Fsc3RvcmFnZSgpO1xuZXhwb3J0cy5kZXN0cm95ID0gKCgpID0+IHtcblx0bGV0IHdhcm5lZCA9IGZhbHNlO1xuXG5cdHJldHVybiAoKSA9PiB7XG5cdFx0aWYgKCF3YXJuZWQpIHtcblx0XHRcdHdhcm5lZCA9IHRydWU7XG5cdFx0XHRjb25zb2xlLndhcm4oJ0luc3RhbmNlIG1ldGhvZCBgZGVidWcuZGVzdHJveSgpYCBpcyBkZXByZWNhdGVkIGFuZCBubyBsb25nZXIgZG9lcyBhbnl0aGluZy4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgYGRlYnVnYC4nKTtcblx0XHR9XG5cdH07XG59KSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcblx0JyMwMDAwQ0MnLFxuXHQnIzAwMDBGRicsXG5cdCcjMDAzM0NDJyxcblx0JyMwMDMzRkYnLFxuXHQnIzAwNjZDQycsXG5cdCcjMDA2NkZGJyxcblx0JyMwMDk5Q0MnLFxuXHQnIzAwOTlGRicsXG5cdCcjMDBDQzAwJyxcblx0JyMwMENDMzMnLFxuXHQnIzAwQ0M2NicsXG5cdCcjMDBDQzk5Jyxcblx0JyMwMENDQ0MnLFxuXHQnIzAwQ0NGRicsXG5cdCcjMzMwMENDJyxcblx0JyMzMzAwRkYnLFxuXHQnIzMzMzNDQycsXG5cdCcjMzMzM0ZGJyxcblx0JyMzMzY2Q0MnLFxuXHQnIzMzNjZGRicsXG5cdCcjMzM5OUNDJyxcblx0JyMzMzk5RkYnLFxuXHQnIzMzQ0MwMCcsXG5cdCcjMzNDQzMzJyxcblx0JyMzM0NDNjYnLFxuXHQnIzMzQ0M5OScsXG5cdCcjMzNDQ0NDJyxcblx0JyMzM0NDRkYnLFxuXHQnIzY2MDBDQycsXG5cdCcjNjYwMEZGJyxcblx0JyM2NjMzQ0MnLFxuXHQnIzY2MzNGRicsXG5cdCcjNjZDQzAwJyxcblx0JyM2NkNDMzMnLFxuXHQnIzk5MDBDQycsXG5cdCcjOTkwMEZGJyxcblx0JyM5OTMzQ0MnLFxuXHQnIzk5MzNGRicsXG5cdCcjOTlDQzAwJyxcblx0JyM5OUNDMzMnLFxuXHQnI0NDMDAwMCcsXG5cdCcjQ0MwMDMzJyxcblx0JyNDQzAwNjYnLFxuXHQnI0NDMDA5OScsXG5cdCcjQ0MwMENDJyxcblx0JyNDQzAwRkYnLFxuXHQnI0NDMzMwMCcsXG5cdCcjQ0MzMzMzJyxcblx0JyNDQzMzNjYnLFxuXHQnI0NDMzM5OScsXG5cdCcjQ0MzM0NDJyxcblx0JyNDQzMzRkYnLFxuXHQnI0NDNjYwMCcsXG5cdCcjQ0M2NjMzJyxcblx0JyNDQzk5MDAnLFxuXHQnI0NDOTkzMycsXG5cdCcjQ0NDQzAwJyxcblx0JyNDQ0NDMzMnLFxuXHQnI0ZGMDAwMCcsXG5cdCcjRkYwMDMzJyxcblx0JyNGRjAwNjYnLFxuXHQnI0ZGMDA5OScsXG5cdCcjRkYwMENDJyxcblx0JyNGRjAwRkYnLFxuXHQnI0ZGMzMwMCcsXG5cdCcjRkYzMzMzJyxcblx0JyNGRjMzNjYnLFxuXHQnI0ZGMzM5OScsXG5cdCcjRkYzM0NDJyxcblx0JyNGRjMzRkYnLFxuXHQnI0ZGNjYwMCcsXG5cdCcjRkY2NjMzJyxcblx0JyNGRjk5MDAnLFxuXHQnI0ZGOTkzMycsXG5cdCcjRkZDQzAwJyxcblx0JyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG5cdC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcblx0Ly8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2Vcblx0Ly8gZXhwbGljaXRseVxuXHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgKHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBJcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuXHQvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuXHRyZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcblx0XHQvLyBJcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG5cdFx0KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcblx0XHQvLyBJcyBmaXJlZm94ID49IHYzMT9cblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcblx0XHQvLyBEb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG5cdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcblx0YXJnc1swXSA9ICh0aGlzLnVzZUNvbG9ycyA/ICclYycgOiAnJykgK1xuXHRcdHRoaXMubmFtZXNwYWNlICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnICVjJyA6ICcgJykgK1xuXHRcdGFyZ3NbMF0gK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICclYyAnIDogJyAnKSArXG5cdFx0JysnICsgbW9kdWxlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuXHRpZiAoIXRoaXMudXNlQ29sb3JzKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG5cdGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpO1xuXG5cdC8vIFRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG5cdC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cblx0Ly8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG5cdGxldCBpbmRleCA9IDA7XG5cdGxldCBsYXN0QyA9IDA7XG5cdGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBtYXRjaCA9PiB7XG5cdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGluZGV4Kys7XG5cdFx0aWYgKG1hdGNoID09PSAnJWMnKSB7XG5cdFx0XHQvLyBXZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcblx0XHRcdC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG5cdFx0XHRsYXN0QyA9IGluZGV4O1xuXHRcdH1cblx0fSk7XG5cblx0YXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUuZGVidWcoKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmRlYnVnYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKiBJZiBgY29uc29sZS5kZWJ1Z2AgaXMgbm90IGF2YWlsYWJsZSwgZmFsbHMgYmFja1xuICogdG8gYGNvbnNvbGUubG9nYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5leHBvcnRzLmxvZyA9IGNvbnNvbGUuZGVidWcgfHwgY29uc29sZS5sb2cgfHwgKCgpID0+IHt9KTtcblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHR0cnkge1xuXHRcdGlmIChuYW1lc3BhY2VzKSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2Uuc2V0SXRlbSgnZGVidWcnLCBuYW1lc3BhY2VzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBsb2FkKCkge1xuXHRsZXQgcjtcblx0dHJ5IHtcblx0XHRyID0gZXhwb3J0cy5zdG9yYWdlLmdldEl0ZW0oJ2RlYnVnJyk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG5cblx0Ly8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuXHRpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcblx0XHRyID0gcHJvY2Vzcy5lbnYuREVCVUc7XG5cdH1cblxuXHRyZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG5cdHRyeSB7XG5cdFx0Ly8gVFZNTEtpdCAoQXBwbGUgVFYgSlMgUnVudGltZSkgZG9lcyBub3QgaGF2ZSBhIHdpbmRvdyBvYmplY3QsIGp1c3QgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dFxuXHRcdC8vIFRoZSBCcm93c2VyIGFsc28gaGFzIGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHQuXG5cdFx0cmV0dXJuIGxvY2FsU3RvcmFnZTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xuXG5jb25zdCB7Zm9ybWF0dGVyc30gPSBtb2R1bGUuZXhwb3J0cztcblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24gKHYpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVycm9yLm1lc3NhZ2U7XG5cdH1cbn07XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5mdW5jdGlvbiBzZXR1cChlbnYpIHtcblx0Y3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuZGVmYXVsdCA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5jb2VyY2UgPSBjb2VyY2U7XG5cdGNyZWF0ZURlYnVnLmRpc2FibGUgPSBkaXNhYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGUgPSBlbmFibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZWQgPSBlbmFibGVkO1xuXHRjcmVhdGVEZWJ1Zy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cdGNyZWF0ZURlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuXG5cdE9iamVjdC5rZXlzKGVudikuZm9yRWFjaChrZXkgPT4ge1xuXHRcdGNyZWF0ZURlYnVnW2tleV0gPSBlbnZba2V5XTtcblx0fSk7XG5cblx0LyoqXG5cdCogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG5cdCovXG5cblx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHQvKipcblx0KiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG5cdCpcblx0KiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG5cdCovXG5cdGNyZWF0ZURlYnVnLmZvcm1hdHRlcnMgPSB7fTtcblxuXHQvKipcblx0KiBTZWxlY3RzIGEgY29sb3IgZm9yIGEgZGVidWcgbmFtZXNwYWNlXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHN0cmluZyBmb3IgdGhlIGRlYnVnIGluc3RhbmNlIHRvIGJlIGNvbG9yZWRcblx0KiBAcmV0dXJuIHtOdW1iZXJ8U3RyaW5nfSBBbiBBTlNJIGNvbG9yIGNvZGUgZm9yIHRoZSBnaXZlbiBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG5cdFx0bGV0IGhhc2ggPSAwO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHRcdGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuXHRcdFx0aGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcblx0XHR9XG5cblx0XHRyZXR1cm4gY3JlYXRlRGVidWcuY29sb3JzW01hdGguYWJzKGhhc2gpICUgY3JlYXRlRGVidWcuY29sb3JzLmxlbmd0aF07XG5cdH1cblx0Y3JlYXRlRGVidWcuc2VsZWN0Q29sb3IgPSBzZWxlY3RDb2xvcjtcblxuXHQvKipcblx0KiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAcmV0dXJuIHtGdW5jdGlvbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblx0XHRsZXQgcHJldlRpbWU7XG5cdFx0bGV0IGVuYWJsZU92ZXJyaWRlID0gbnVsbDtcblx0XHRsZXQgbmFtZXNwYWNlc0NhY2hlO1xuXHRcdGxldCBlbmFibGVkQ2FjaGU7XG5cblx0XHRmdW5jdGlvbiBkZWJ1ZyguLi5hcmdzKSB7XG5cdFx0XHQvLyBEaXNhYmxlZD9cblx0XHRcdGlmICghZGVidWcuZW5hYmxlZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHNlbGYgPSBkZWJ1ZztcblxuXHRcdFx0Ly8gU2V0IGBkaWZmYCB0aW1lc3RhbXBcblx0XHRcdGNvbnN0IGN1cnIgPSBOdW1iZXIobmV3IERhdGUoKSk7XG5cdFx0XHRjb25zdCBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG5cdFx0XHRzZWxmLmRpZmYgPSBtcztcblx0XHRcdHNlbGYucHJldiA9IHByZXZUaW1lO1xuXHRcdFx0c2VsZi5jdXJyID0gY3Vycjtcblx0XHRcdHByZXZUaW1lID0gY3VycjtcblxuXHRcdFx0YXJnc1swXSA9IGNyZWF0ZURlYnVnLmNvZXJjZShhcmdzWzBdKTtcblxuXHRcdFx0aWYgKHR5cGVvZiBhcmdzWzBdICE9PSAnc3RyaW5nJykge1xuXHRcdFx0XHQvLyBBbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuXHRcdFx0XHRhcmdzLnVuc2hpZnQoJyVPJyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG5cdFx0XHRsZXQgaW5kZXggPSAwO1xuXHRcdFx0YXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIChtYXRjaCwgZm9ybWF0KSA9PiB7XG5cdFx0XHRcdC8vIElmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcblx0XHRcdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRcdFx0cmV0dXJuICclJztcblx0XHRcdFx0fVxuXHRcdFx0XHRpbmRleCsrO1xuXHRcdFx0XHRjb25zdCBmb3JtYXR0ZXIgPSBjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cdFx0XHRcdGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsID0gYXJnc1tpbmRleF07XG5cdFx0XHRcdFx0bWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG5cdFx0XHRcdFx0Ly8gTm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuXHRcdFx0XHRcdGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdFx0XHRpbmRleC0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtYXRjaDtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBBcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuXHRcdFx0Y3JlYXRlRGVidWcuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG5cdFx0XHRjb25zdCBsb2dGbiA9IHNlbGYubG9nIHx8IGNyZWF0ZURlYnVnLmxvZztcblx0XHRcdGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXHRcdH1cblxuXHRcdGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcblx0XHRkZWJ1Zy51c2VDb2xvcnMgPSBjcmVhdGVEZWJ1Zy51c2VDb2xvcnMoKTtcblx0XHRkZWJ1Zy5jb2xvciA9IGNyZWF0ZURlYnVnLnNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG5cdFx0ZGVidWcuZXh0ZW5kID0gZXh0ZW5kO1xuXHRcdGRlYnVnLmRlc3Ryb3kgPSBjcmVhdGVEZWJ1Zy5kZXN0cm95OyAvLyBYWFggVGVtcG9yYXJ5LiBXaWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS5cblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZWJ1ZywgJ2VuYWJsZWQnLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcblx0XHRcdGdldDogKCkgPT4ge1xuXHRcdFx0XHRpZiAoZW5hYmxlT3ZlcnJpZGUgIT09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gZW5hYmxlT3ZlcnJpZGU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG5hbWVzcGFjZXNDYWNoZSAhPT0gY3JlYXRlRGVidWcubmFtZXNwYWNlcykge1xuXHRcdFx0XHRcdG5hbWVzcGFjZXNDYWNoZSA9IGNyZWF0ZURlYnVnLm5hbWVzcGFjZXM7XG5cdFx0XHRcdFx0ZW5hYmxlZENhY2hlID0gY3JlYXRlRGVidWcuZW5hYmxlZChuYW1lc3BhY2UpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVuYWJsZWRDYWNoZTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6IHYgPT4ge1xuXHRcdFx0XHRlbmFibGVPdmVycmlkZSA9IHY7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBFbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuXHRcdGlmICh0eXBlb2YgY3JlYXRlRGVidWcuaW5pdCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0Y3JlYXRlRGVidWcuaW5pdChkZWJ1Zyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRlYnVnO1xuXHR9XG5cblx0ZnVuY3Rpb24gZXh0ZW5kKG5hbWVzcGFjZSwgZGVsaW1pdGVyKSB7XG5cdFx0Y29uc3QgbmV3RGVidWcgPSBjcmVhdGVEZWJ1Zyh0aGlzLm5hbWVzcGFjZSArICh0eXBlb2YgZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJyA/ICc6JyA6IGRlbGltaXRlcikgKyBuYW1lc3BhY2UpO1xuXHRcdG5ld0RlYnVnLmxvZyA9IHRoaXMubG9nO1xuXHRcdHJldHVybiBuZXdEZWJ1Zztcblx0fVxuXG5cdC8qKlxuXHQqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcblx0KiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuXHRcdGNyZWF0ZURlYnVnLnNhdmUobmFtZXNwYWNlcyk7XG5cdFx0Y3JlYXRlRGVidWcubmFtZXNwYWNlcyA9IG5hbWVzcGFjZXM7XG5cblx0XHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRcdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0XHRsZXQgaTtcblx0XHRjb25zdCBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG5cdFx0Y29uc3QgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoIXNwbGl0W2ldKSB7XG5cdFx0XHRcdC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcblxuXHRcdFx0aWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zbGljZSgxKSArICckJykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0KiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cblx0KlxuXHQqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGRpc2FibGUoKSB7XG5cdFx0Y29uc3QgbmFtZXNwYWNlcyA9IFtcblx0XHRcdC4uLmNyZWF0ZURlYnVnLm5hbWVzLm1hcCh0b05hbWVzcGFjZSksXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5za2lwcy5tYXAodG9OYW1lc3BhY2UpLm1hcChuYW1lc3BhY2UgPT4gJy0nICsgbmFtZXNwYWNlKVxuXHRcdF0uam9pbignLCcpO1xuXHRcdGNyZWF0ZURlYnVnLmVuYWJsZSgnJyk7XG5cdFx0cmV0dXJuIG5hbWVzcGFjZXM7XG5cdH1cblxuXHQvKipcblx0KiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuXHQqIEByZXR1cm4ge0Jvb2xlYW59XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG5cdFx0aWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRsZXQgaTtcblx0XHRsZXQgbGVuO1xuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChjcmVhdGVEZWJ1Zy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCogQ29udmVydCByZWdleHAgdG8gbmFtZXNwYWNlXG5cdCpcblx0KiBAcGFyYW0ge1JlZ0V4cH0gcmVneGVwXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gdG9OYW1lc3BhY2UocmVnZXhwKSB7XG5cdFx0cmV0dXJuIHJlZ2V4cC50b1N0cmluZygpXG5cdFx0XHQuc3Vic3RyaW5nKDIsIHJlZ2V4cC50b1N0cmluZygpLmxlbmd0aCAtIDIpXG5cdFx0XHQucmVwbGFjZSgvXFwuXFwqXFw/JC8sICcqJyk7XG5cdH1cblxuXHQvKipcblx0KiBDb2VyY2UgYHZhbGAuXG5cdCpcblx0KiBAcGFyYW0ge01peGVkfSB2YWxcblx0KiBAcmV0dXJuIHtNaXhlZH1cblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuXHRcdGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikge1xuXHRcdFx0cmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdC8qKlxuXHQqIFhYWCBETyBOT1QgVVNFLiBUaGlzIGlzIGEgdGVtcG9yYXJ5IHN0dWIgZnVuY3Rpb24uXG5cdCogWFhYIEl0IFdJTEwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxuXHQqL1xuXHRmdW5jdGlvbiBkZXN0cm95KCkge1xuXHRcdGNvbnNvbGUud2FybignSW5zdGFuY2UgbWV0aG9kIGBkZWJ1Zy5kZXN0cm95KClgIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciBkb2VzIGFueXRoaW5nLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBgZGVidWdgLicpO1xuXHR9XG5cblx0Y3JlYXRlRGVidWcuZW5hYmxlKGNyZWF0ZURlYnVnLmxvYWQoKSk7XG5cblx0cmV0dXJuIGNyZWF0ZURlYnVnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldHVwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbnZhciBpc0FycmF5ID0gZnVuY3Rpb24gaXNBcnJheShhcnIpIHtcblx0aWYgKHR5cGVvZiBBcnJheS5pc0FycmF5ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIEFycmF5LmlzQXJyYXkoYXJyKTtcblx0fVxuXG5cdHJldHVybiB0b1N0ci5jYWxsKGFycikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG52YXIgaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG5cdGlmICghb2JqIHx8IHRvU3RyLmNhbGwob2JqKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR2YXIgaGFzT3duQ29uc3RydWN0b3IgPSBoYXNPd24uY2FsbChvYmosICdjb25zdHJ1Y3RvcicpO1xuXHR2YXIgaGFzSXNQcm90b3R5cGVPZiA9IG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IucHJvdG90eXBlICYmIGhhc093bi5jYWxsKG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsICdpc1Byb3RvdHlwZU9mJyk7XG5cdC8vIE5vdCBvd24gY29uc3RydWN0b3IgcHJvcGVydHkgbXVzdCBiZSBPYmplY3Rcblx0aWYgKG9iai5jb25zdHJ1Y3RvciAmJiAhaGFzT3duQ29uc3RydWN0b3IgJiYgIWhhc0lzUHJvdG90eXBlT2YpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBPd24gcHJvcGVydGllcyBhcmUgZW51bWVyYXRlZCBmaXJzdGx5LCBzbyB0byBzcGVlZCB1cCxcblx0Ly8gaWYgbGFzdCBvbmUgaXMgb3duLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIGFyZSBvd24uXG5cdHZhciBrZXk7XG5cdGZvciAoa2V5IGluIG9iaikgeyAvKiovIH1cblxuXHRyZXR1cm4gdHlwZW9mIGtleSA9PT0gJ3VuZGVmaW5lZCcgfHwgaGFzT3duLmNhbGwob2JqLCBrZXkpO1xufTtcblxuLy8gSWYgbmFtZSBpcyAnX19wcm90b19fJywgYW5kIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBpcyBhdmFpbGFibGUsIGRlZmluZSBfX3Byb3RvX18gYXMgYW4gb3duIHByb3BlcnR5IG9uIHRhcmdldFxudmFyIHNldFByb3BlcnR5ID0gZnVuY3Rpb24gc2V0UHJvcGVydHkodGFyZ2V0LCBvcHRpb25zKSB7XG5cdGlmIChkZWZpbmVQcm9wZXJ0eSAmJiBvcHRpb25zLm5hbWUgPT09ICdfX3Byb3RvX18nKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBvcHRpb25zLm5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogb3B0aW9ucy5uZXdWYWx1ZSxcblx0XHRcdHdyaXRhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0dGFyZ2V0W29wdGlvbnMubmFtZV0gPSBvcHRpb25zLm5ld1ZhbHVlO1xuXHR9XG59O1xuXG4vLyBSZXR1cm4gdW5kZWZpbmVkIGluc3RlYWQgb2YgX19wcm90b19fIGlmICdfX3Byb3RvX18nIGlzIG5vdCBhbiBvd24gcHJvcGVydHlcbnZhciBnZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIGdldFByb3BlcnR5KG9iaiwgbmFtZSkge1xuXHRpZiAobmFtZSA9PT0gJ19fcHJvdG9fXycpIHtcblx0XHRpZiAoIWhhc093bi5jYWxsKG9iaiwgbmFtZSkpIHtcblx0XHRcdHJldHVybiB2b2lkIDA7XG5cdFx0fSBlbHNlIGlmIChnT1BEKSB7XG5cdFx0XHQvLyBJbiBlYXJseSB2ZXJzaW9ucyBvZiBub2RlLCBvYmpbJ19fcHJvdG9fXyddIGlzIGJ1Z2d5IHdoZW4gb2JqIGhhc1xuXHRcdFx0Ly8gX19wcm90b19fIGFzIGFuIG93biBwcm9wZXJ0eS4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcigpIHdvcmtzLlxuXHRcdFx0cmV0dXJuIGdPUEQob2JqLCBuYW1lKS52YWx1ZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gb2JqW25hbWVdO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBleHRlbmQoKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZTtcblx0dmFyIHRhcmdldCA9IGFyZ3VtZW50c1swXTtcblx0dmFyIGkgPSAxO1xuXHR2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcblx0dmFyIGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnYm9vbGVhbicpIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcblx0XHQvLyBza2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0aSA9IDI7XG5cdH1cblx0aWYgKHRhcmdldCA9PSBudWxsIHx8ICh0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdGFyZ2V0ICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Zm9yICg7IGkgPCBsZW5ndGg7ICsraSkge1xuXHRcdG9wdGlvbnMgPSBhcmd1bWVudHNbaV07XG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmIChvcHRpb25zICE9IG51bGwpIHtcblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAobmFtZSBpbiBvcHRpb25zKSB7XG5cdFx0XHRcdHNyYyA9IGdldFByb3BlcnR5KHRhcmdldCwgbmFtZSk7XG5cdFx0XHRcdGNvcHkgPSBnZXRQcm9wZXJ0eShvcHRpb25zLCBuYW1lKTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICh0YXJnZXQgIT09IGNvcHkpIHtcblx0XHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0XHRpZiAoZGVlcCAmJiBjb3B5ICYmIChpc1BsYWluT2JqZWN0KGNvcHkpIHx8IChjb3B5SXNBcnJheSA9IGlzQXJyYXkoY29weSkpKSkge1xuXHRcdFx0XHRcdFx0aWYgKGNvcHlJc0FycmF5KSB7XG5cdFx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGlzQXJyYXkoc3JjKSA/IHNyYyA6IFtdO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdFx0c2V0UHJvcGVydHkodGFyZ2V0LCB7IG5hbWU6IG5hbWUsIG5ld1ZhbHVlOiBleHRlbmQoZGVlcCwgY2xvbmUsIGNvcHkpIH0pO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIGNvcHkgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHRzZXRQcm9wZXJ0eSh0YXJnZXQsIHsgbmFtZTogbmFtZSwgbmV3VmFsdWU6IGNvcHkgfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG4iLCIvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9ncmFtbWFyLmh0bWxcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS92aXNpb25tZWRpYS9jc3MtcGFyc2UvcHVsbC80OSNpc3N1ZWNvbW1lbnQtMzAwODgwMjdcbnZhciBDT01NRU5UX1JFR0VYID0gL1xcL1xcKlteKl0qXFwqKyhbXi8qXVteKl0qXFwqKykqXFwvL2c7XG5cbnZhciBORVdMSU5FX1JFR0VYID0gL1xcbi9nO1xudmFyIFdISVRFU1BBQ0VfUkVHRVggPSAvXlxccyovO1xuXG4vLyBkZWNsYXJhdGlvblxudmFyIFBST1BFUlRZX1JFR0VYID0gL14oXFwqP1stIy8qXFxcXFxcd10rKFxcW1swLTlhLXpfLV0rXFxdKT8pXFxzKi87XG52YXIgQ09MT05fUkVHRVggPSAvXjpcXHMqLztcbnZhciBWQUxVRV9SRUdFWCA9IC9eKCg/OicoPzpcXFxcJ3wuKSo/J3xcIig/OlxcXFxcInwuKSo/XCJ8XFwoW14pXSo/XFwpfFtefTtdKSspLztcbnZhciBTRU1JQ09MT05fUkVHRVggPSAvXls7XFxzXSovO1xuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvVHJpbSNQb2x5ZmlsbFxudmFyIFRSSU1fUkVHRVggPSAvXlxccyt8XFxzKyQvZztcblxuLy8gc3RyaW5nc1xudmFyIE5FV0xJTkUgPSAnXFxuJztcbnZhciBGT1JXQVJEX1NMQVNIID0gJy8nO1xudmFyIEFTVEVSSVNLID0gJyonO1xudmFyIEVNUFRZX1NUUklORyA9ICcnO1xuXG4vLyB0eXBlc1xudmFyIFRZUEVfQ09NTUVOVCA9ICdjb21tZW50JztcbnZhciBUWVBFX0RFQ0xBUkFUSU9OID0gJ2RlY2xhcmF0aW9uJztcblxuLyoqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3R5bGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge09iamVjdFtdfVxuICogQHRocm93cyB7VHlwZUVycm9yfVxuICogQHRocm93cyB7RXJyb3J9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oc3R5bGUsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBzdHlsZSAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gIH1cblxuICBpZiAoIXN0eWxlKSByZXR1cm4gW107XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLyoqXG4gICAqIFBvc2l0aW9uYWwuXG4gICAqL1xuICB2YXIgbGluZW5vID0gMTtcbiAgdmFyIGNvbHVtbiA9IDE7XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBsaW5lbm8gYW5kIGNvbHVtbiBiYXNlZCBvbiBgc3RyYC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICAgKi9cbiAgZnVuY3Rpb24gdXBkYXRlUG9zaXRpb24oc3RyKSB7XG4gICAgdmFyIGxpbmVzID0gc3RyLm1hdGNoKE5FV0xJTkVfUkVHRVgpO1xuICAgIGlmIChsaW5lcykgbGluZW5vICs9IGxpbmVzLmxlbmd0aDtcbiAgICB2YXIgaSA9IHN0ci5sYXN0SW5kZXhPZihORVdMSU5FKTtcbiAgICBjb2x1bW4gPSB+aSA/IHN0ci5sZW5ndGggLSBpIDogY29sdW1uICsgc3RyLmxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXJrIHBvc2l0aW9uIGFuZCBwYXRjaCBgbm9kZS5wb3NpdGlvbmAuXG4gICAqXG4gICAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICAgKi9cbiAgZnVuY3Rpb24gcG9zaXRpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0geyBsaW5lOiBsaW5lbm8sIGNvbHVtbjogY29sdW1uIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIG5vZGUucG9zaXRpb24gPSBuZXcgUG9zaXRpb24oc3RhcnQpO1xuICAgICAgd2hpdGVzcGFjZSgpO1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9yZSBwb3NpdGlvbiBpbmZvcm1hdGlvbiBmb3IgYSBub2RlLlxuICAgKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHByb3BlcnR5IHtPYmplY3R9IHN0YXJ0XG4gICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBlbmRcbiAgICogQHByb3BlcnR5IHt1bmRlZmluZWR8U3RyaW5nfSBzb3VyY2VcbiAgICovXG4gIGZ1bmN0aW9uIFBvc2l0aW9uKHN0YXJ0KSB7XG4gICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgIHRoaXMuZW5kID0geyBsaW5lOiBsaW5lbm8sIGNvbHVtbjogY29sdW1uIH07XG4gICAgdGhpcy5zb3VyY2UgPSBvcHRpb25zLnNvdXJjZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBOb24tZW51bWVyYWJsZSBzb3VyY2Ugc3RyaW5nLlxuICAgKi9cbiAgUG9zaXRpb24ucHJvdG90eXBlLmNvbnRlbnQgPSBzdHlsZTtcblxuICB2YXIgZXJyb3JzTGlzdCA9IFtdO1xuXG4gIC8qKlxuICAgKiBFcnJvciBgbXNnYC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZ1xuICAgKiBAdGhyb3dzIHtFcnJvcn1cbiAgICovXG4gIGZ1bmN0aW9uIGVycm9yKG1zZykge1xuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICBvcHRpb25zLnNvdXJjZSArICc6JyArIGxpbmVubyArICc6JyArIGNvbHVtbiArICc6ICcgKyBtc2dcbiAgICApO1xuICAgIGVyci5yZWFzb24gPSBtc2c7XG4gICAgZXJyLmZpbGVuYW1lID0gb3B0aW9ucy5zb3VyY2U7XG4gICAgZXJyLmxpbmUgPSBsaW5lbm87XG4gICAgZXJyLmNvbHVtbiA9IGNvbHVtbjtcbiAgICBlcnIuc291cmNlID0gc3R5bGU7XG5cbiAgICBpZiAob3B0aW9ucy5zaWxlbnQpIHtcbiAgICAgIGVycm9yc0xpc3QucHVzaChlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1hdGNoIGByZWAgYW5kIHJldHVybiBjYXB0dXJlcy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWdFeHB9IHJlXG4gICAqIEByZXR1cm4ge3VuZGVmaW5lZHxBcnJheX1cbiAgICovXG4gIGZ1bmN0aW9uIG1hdGNoKHJlKSB7XG4gICAgdmFyIG0gPSByZS5leGVjKHN0eWxlKTtcbiAgICBpZiAoIW0pIHJldHVybjtcbiAgICB2YXIgc3RyID0gbVswXTtcbiAgICB1cGRhdGVQb3NpdGlvbihzdHIpO1xuICAgIHN0eWxlID0gc3R5bGUuc2xpY2Uoc3RyLmxlbmd0aCk7XG4gICAgcmV0dXJuIG07XG4gIH1cblxuICAvKipcbiAgICogUGFyc2Ugd2hpdGVzcGFjZS5cbiAgICovXG4gIGZ1bmN0aW9uIHdoaXRlc3BhY2UoKSB7XG4gICAgbWF0Y2goV0hJVEVTUEFDRV9SRUdFWCk7XG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgY29tbWVudHMuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0W119IFtydWxlc11cbiAgICogQHJldHVybiB7T2JqZWN0W119XG4gICAqL1xuICBmdW5jdGlvbiBjb21tZW50cyhydWxlcykge1xuICAgIHZhciBjO1xuICAgIHJ1bGVzID0gcnVsZXMgfHwgW107XG4gICAgd2hpbGUgKChjID0gY29tbWVudCgpKSkge1xuICAgICAgaWYgKGMgIT09IGZhbHNlKSB7XG4gICAgICAgIHJ1bGVzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBydWxlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBjb21tZW50LlxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqIEB0aHJvd3Mge0Vycm9yfVxuICAgKi9cbiAgZnVuY3Rpb24gY29tbWVudCgpIHtcbiAgICB2YXIgcG9zID0gcG9zaXRpb24oKTtcbiAgICBpZiAoRk9SV0FSRF9TTEFTSCAhPSBzdHlsZS5jaGFyQXQoMCkgfHwgQVNURVJJU0sgIT0gc3R5bGUuY2hhckF0KDEpKSByZXR1cm47XG5cbiAgICB2YXIgaSA9IDI7XG4gICAgd2hpbGUgKFxuICAgICAgRU1QVFlfU1RSSU5HICE9IHN0eWxlLmNoYXJBdChpKSAmJlxuICAgICAgKEFTVEVSSVNLICE9IHN0eWxlLmNoYXJBdChpKSB8fCBGT1JXQVJEX1NMQVNIICE9IHN0eWxlLmNoYXJBdChpICsgMSkpXG4gICAgKSB7XG4gICAgICArK2k7XG4gICAgfVxuICAgIGkgKz0gMjtcblxuICAgIGlmIChFTVBUWV9TVFJJTkcgPT09IHN0eWxlLmNoYXJBdChpIC0gMSkpIHtcbiAgICAgIHJldHVybiBlcnJvcignRW5kIG9mIGNvbW1lbnQgbWlzc2luZycpO1xuICAgIH1cblxuICAgIHZhciBzdHIgPSBzdHlsZS5zbGljZSgyLCBpIC0gMik7XG4gICAgY29sdW1uICs9IDI7XG4gICAgdXBkYXRlUG9zaXRpb24oc3RyKTtcbiAgICBzdHlsZSA9IHN0eWxlLnNsaWNlKGkpO1xuICAgIGNvbHVtbiArPSAyO1xuXG4gICAgcmV0dXJuIHBvcyh7XG4gICAgICB0eXBlOiBUWVBFX0NPTU1FTlQsXG4gICAgICBjb21tZW50OiBzdHJcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBkZWNsYXJhdGlvbi5cbiAgICpcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKiBAdGhyb3dzIHtFcnJvcn1cbiAgICovXG4gIGZ1bmN0aW9uIGRlY2xhcmF0aW9uKCkge1xuICAgIHZhciBwb3MgPSBwb3NpdGlvbigpO1xuXG4gICAgLy8gcHJvcFxuICAgIHZhciBwcm9wID0gbWF0Y2goUFJPUEVSVFlfUkVHRVgpO1xuICAgIGlmICghcHJvcCkgcmV0dXJuO1xuICAgIGNvbW1lbnQoKTtcblxuICAgIC8vIDpcbiAgICBpZiAoIW1hdGNoKENPTE9OX1JFR0VYKSkgcmV0dXJuIGVycm9yKFwicHJvcGVydHkgbWlzc2luZyAnOidcIik7XG5cbiAgICAvLyB2YWxcbiAgICB2YXIgdmFsID0gbWF0Y2goVkFMVUVfUkVHRVgpO1xuXG4gICAgdmFyIHJldCA9IHBvcyh7XG4gICAgICB0eXBlOiBUWVBFX0RFQ0xBUkFUSU9OLFxuICAgICAgcHJvcGVydHk6IHRyaW0ocHJvcFswXS5yZXBsYWNlKENPTU1FTlRfUkVHRVgsIEVNUFRZX1NUUklORykpLFxuICAgICAgdmFsdWU6IHZhbFxuICAgICAgICA/IHRyaW0odmFsWzBdLnJlcGxhY2UoQ09NTUVOVF9SRUdFWCwgRU1QVFlfU1RSSU5HKSlcbiAgICAgICAgOiBFTVBUWV9TVFJJTkdcbiAgICB9KTtcblxuICAgIC8vIDtcbiAgICBtYXRjaChTRU1JQ09MT05fUkVHRVgpO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBkZWNsYXJhdGlvbnMuXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdFtdfVxuICAgKi9cbiAgZnVuY3Rpb24gZGVjbGFyYXRpb25zKCkge1xuICAgIHZhciBkZWNscyA9IFtdO1xuXG4gICAgY29tbWVudHMoZGVjbHMpO1xuXG4gICAgLy8gZGVjbGFyYXRpb25zXG4gICAgdmFyIGRlY2w7XG4gICAgd2hpbGUgKChkZWNsID0gZGVjbGFyYXRpb24oKSkpIHtcbiAgICAgIGlmIChkZWNsICE9PSBmYWxzZSkge1xuICAgICAgICBkZWNscy5wdXNoKGRlY2wpO1xuICAgICAgICBjb21tZW50cyhkZWNscyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlY2xzO1xuICB9XG5cbiAgd2hpdGVzcGFjZSgpO1xuICByZXR1cm4gZGVjbGFyYXRpb25zKCk7XG59O1xuXG4vKipcbiAqIFRyaW0gYHN0cmAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyID8gc3RyLnJlcGxhY2UoVFJJTV9SRUdFWCwgRU1QVFlfU1RSSU5HKSA6IEVNUFRZX1NUUklORztcbn1cbiIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IgIT0gbnVsbCAmJlxuICAgIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cbiIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgdyA9IGQgKiA3O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWwpKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigtPyg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8d2Vla3M/fHd8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ3dlZWtzJzpcbiAgICBjYXNlICd3ZWVrJzpcbiAgICBjYXNlICd3JzpcbiAgICAgIHJldHVybiBuICogdztcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgZCwgJ2RheScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGgsICdob3VyJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgbSwgJ21pbnV0ZScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIHMsICdzZWNvbmQnKTtcbiAgfVxuICByZXR1cm4gbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG1zQWJzLCBuLCBuYW1lKSB7XG4gIHZhciBpc1BsdXJhbCA9IG1zQWJzID49IG4gKiAxLjU7XG4gIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbikgKyAnICcgKyBuYW1lICsgKGlzUGx1cmFsID8gJ3MnIDogJycpO1xufVxuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcbiAgdmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9O1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9saWIvaGFzJyk7XG5cbiAgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24odGV4dCkge1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyB0ZXh0O1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHsgLyoqLyB9XG4gIH07XG59XG5cbi8qKlxuICogQXNzZXJ0IHRoYXQgdGhlIHZhbHVlcyBtYXRjaCB3aXRoIHRoZSB0eXBlIHNwZWNzLlxuICogRXJyb3IgbWVzc2FnZXMgYXJlIG1lbW9yaXplZCBhbmQgd2lsbCBvbmx5IGJlIHNob3duIG9uY2UuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHR5cGVTcGVjcyBNYXAgb2YgbmFtZSB0byBhIFJlYWN0UHJvcFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSB2YWx1ZXMgUnVudGltZSB2YWx1ZXMgdGhhdCBuZWVkIHRvIGJlIHR5cGUtY2hlY2tlZFxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2F0aW9uIGUuZy4gXCJwcm9wXCIsIFwiY29udGV4dFwiLCBcImNoaWxkIGNvbnRleHRcIlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudE5hbWUgTmFtZSBvZiB0aGUgY29tcG9uZW50IGZvciBlcnJvciBtZXNzYWdlcy5cbiAqIEBwYXJhbSB7P0Z1bmN0aW9ufSBnZXRTdGFjayBSZXR1cm5zIHRoZSBjb21wb25lbnQgc3RhY2suXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjaGVja1Byb3BUeXBlcyh0eXBlU3BlY3MsIHZhbHVlcywgbG9jYXRpb24sIGNvbXBvbmVudE5hbWUsIGdldFN0YWNrKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZm9yICh2YXIgdHlwZVNwZWNOYW1lIGluIHR5cGVTcGVjcykge1xuICAgICAgaWYgKGhhcyh0eXBlU3BlY3MsIHR5cGVTcGVjTmFtZSkpIHtcbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICAvLyBQcm9wIHR5cGUgdmFsaWRhdGlvbiBtYXkgdGhyb3cuIEluIGNhc2UgdGhleSBkbywgd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgICAvLyBmYWlsIHRoZSByZW5kZXIgcGhhc2Ugd2hlcmUgaXQgZGlkbid0IGZhaWwgYmVmb3JlLiBTbyB3ZSBsb2cgaXQuXG4gICAgICAgIC8vIEFmdGVyIHRoZXNlIGhhdmUgYmVlbiBjbGVhbmVkIHVwLCB3ZSdsbCBsZXQgdGhlbSB0aHJvdy5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGludGVudGlvbmFsbHkgYW4gaW52YXJpYW50IHRoYXQgZ2V0cyBjYXVnaHQuIEl0J3MgdGhlIHNhbWVcbiAgICAgICAgICAvLyBiZWhhdmlvciBhcyB3aXRob3V0IHRoaXMgc3RhdGVtZW50IGV4Y2VwdCB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UuXG4gICAgICAgICAgaWYgKHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFyIGVyciA9IEVycm9yKFxuICAgICAgICAgICAgICAoY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnKSArICc6ICcgKyBsb2NhdGlvbiArICcgdHlwZSBgJyArIHR5cGVTcGVjTmFtZSArICdgIGlzIGludmFsaWQ7ICcgK1xuICAgICAgICAgICAgICAnaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLCBidXQgcmVjZWl2ZWQgYCcgKyB0eXBlb2YgdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0gKyAnYC4nICtcbiAgICAgICAgICAgICAgJ1RoaXMgb2Z0ZW4gaGFwcGVucyBiZWNhdXNlIG9mIHR5cG9zIHN1Y2ggYXMgYFByb3BUeXBlcy5mdW5jdGlvbmAgaW5zdGVhZCBvZiBgUHJvcFR5cGVzLmZ1bmNgLidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXJyb3IgPSB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSh2YWx1ZXMsIHR5cGVTcGVjTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIG51bGwsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICBlcnJvciA9IGV4O1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvciAmJiAhKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgKGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJykgKyAnOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJyArXG4gICAgICAgICAgICBsb2NhdGlvbiArICcgYCcgKyB0eXBlU3BlY05hbWUgKyAnYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyICcgK1xuICAgICAgICAgICAgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICcgKyB0eXBlb2YgZXJyb3IgKyAnLiAnICtcbiAgICAgICAgICAgICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciAnICtcbiAgICAgICAgICAgICdjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kICcgK1xuICAgICAgICAgICAgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkge1xuICAgICAgICAgIC8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuICAgICAgICAgIC8vIHNhbWUgZXJyb3IuXG4gICAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yLm1lc3NhZ2VdID0gdHJ1ZTtcblxuICAgICAgICAgIHZhciBzdGFjayA9IGdldFN0YWNrID8gZ2V0U3RhY2soKSA6ICcnO1xuXG4gICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgJ0ZhaWxlZCAnICsgbG9jYXRpb24gKyAnIHR5cGU6ICcgKyBlcnJvci5tZXNzYWdlICsgKHN0YWNrICE9IG51bGwgPyBzdGFjayA6ICcnKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXNldHMgd2FybmluZyBjYWNoZSB3aGVuIHRlc3RpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2hlY2tQcm9wVHlwZXMucmVzZXRXYXJuaW5nQ2FjaGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNoZWNrUHJvcFR5cGVzO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9saWIvaGFzJyk7XG52YXIgY2hlY2tQcm9wVHlwZXMgPSByZXF1aXJlKCcuL2NoZWNrUHJvcFR5cGVzJyk7XG5cbnZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcmludFdhcm5pbmcgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIHRleHQ7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcbn1cblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpIHtcbiAgLyogZ2xvYmFsIFN5bWJvbCAqL1xuICB2YXIgSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG4gIHZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJzsgLy8gQmVmb3JlIFN5bWJvbCBzcGVjLlxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpdGVyYXRvciBtZXRob2QgZnVuY3Rpb24gY29udGFpbmVkIG9uIHRoZSBpdGVyYWJsZSBvYmplY3QuXG4gICAqXG4gICAqIEJlIHN1cmUgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBpdGVyYWJsZSBhcyBjb250ZXh0OlxuICAgKlxuICAgKiAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG15SXRlcmFibGUpO1xuICAgKiAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICogICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG15SXRlcmFibGUpO1xuICAgKiAgICAgICAuLi5cbiAgICogICAgIH1cbiAgICpcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBtYXliZUl0ZXJhYmxlXG4gICAqIEByZXR1cm4gez9mdW5jdGlvbn1cbiAgICovXG4gIGZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICAgIHZhciBpdGVyYXRvckZuID0gbWF5YmVJdGVyYWJsZSAmJiAoSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXSk7XG4gICAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JGbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29sbGVjdGlvbiBvZiBtZXRob2RzIHRoYXQgYWxsb3cgZGVjbGFyYXRpb24gYW5kIHZhbGlkYXRpb24gb2YgcHJvcHMgdGhhdCBhcmVcbiAgICogc3VwcGxpZWQgdG8gUmVhY3QgY29tcG9uZW50cy4gRXhhbXBsZSB1c2FnZTpcbiAgICpcbiAgICogICB2YXIgUHJvcHMgPSByZXF1aXJlKCdSZWFjdFByb3BUeXBlcycpO1xuICAgKiAgIHZhciBNeUFydGljbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAqICAgICBwcm9wVHlwZXM6IHtcbiAgICogICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIHByb3AgbmFtZWQgXCJkZXNjcmlwdGlvblwiLlxuICAgKiAgICAgICBkZXNjcmlwdGlvbjogUHJvcHMuc3RyaW5nLFxuICAgKlxuICAgKiAgICAgICAvLyBBIHJlcXVpcmVkIGVudW0gcHJvcCBuYW1lZCBcImNhdGVnb3J5XCIuXG4gICAqICAgICAgIGNhdGVnb3J5OiBQcm9wcy5vbmVPZihbJ05ld3MnLCdQaG90b3MnXSkuaXNSZXF1aXJlZCxcbiAgICpcbiAgICogICAgICAgLy8gQSBwcm9wIG5hbWVkIFwiZGlhbG9nXCIgdGhhdCByZXF1aXJlcyBhbiBpbnN0YW5jZSBvZiBEaWFsb2cuXG4gICAqICAgICAgIGRpYWxvZzogUHJvcHMuaW5zdGFuY2VPZihEaWFsb2cpLmlzUmVxdWlyZWRcbiAgICogICAgIH0sXG4gICAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkgeyAuLi4gfVxuICAgKiAgIH0pO1xuICAgKlxuICAgKiBBIG1vcmUgZm9ybWFsIHNwZWNpZmljYXRpb24gb2YgaG93IHRoZXNlIG1ldGhvZHMgYXJlIHVzZWQ6XG4gICAqXG4gICAqICAgdHlwZSA6PSBhcnJheXxib29sfGZ1bmN8b2JqZWN0fG51bWJlcnxzdHJpbmd8b25lT2YoWy4uLl0pfGluc3RhbmNlT2YoLi4uKVxuICAgKiAgIGRlY2wgOj0gUmVhY3RQcm9wVHlwZXMue3R5cGV9KC5pc1JlcXVpcmVkKT9cbiAgICpcbiAgICogRWFjaCBhbmQgZXZlcnkgZGVjbGFyYXRpb24gcHJvZHVjZXMgYSBmdW5jdGlvbiB3aXRoIHRoZSBzYW1lIHNpZ25hdHVyZS4gVGhpc1xuICAgKiBhbGxvd3MgdGhlIGNyZWF0aW9uIG9mIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9ucy4gRm9yIGV4YW1wbGU6XG4gICAqXG4gICAqICB2YXIgTXlMaW5rID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgKiAgICBwcm9wVHlwZXM6IHtcbiAgICogICAgICAvLyBBbiBvcHRpb25hbCBzdHJpbmcgb3IgVVJJIHByb3AgbmFtZWQgXCJocmVmXCIuXG4gICAqICAgICAgaHJlZjogZnVuY3Rpb24ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gICAqICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgKiAgICAgICAgaWYgKHByb3BWYWx1ZSAhPSBudWxsICYmIHR5cGVvZiBwcm9wVmFsdWUgIT09ICdzdHJpbmcnICYmXG4gICAqICAgICAgICAgICAgIShwcm9wVmFsdWUgaW5zdGFuY2VvZiBVUkkpKSB7XG4gICAqICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAqICAgICAgICAgICAgJ0V4cGVjdGVkIGEgc3RyaW5nIG9yIGFuIFVSSSBmb3IgJyArIHByb3BOYW1lICsgJyBpbiAnICtcbiAgICogICAgICAgICAgICBjb21wb25lbnROYW1lXG4gICAqICAgICAgICAgICk7XG4gICAqICAgICAgICB9XG4gICAqICAgICAgfVxuICAgKiAgICB9LFxuICAgKiAgICByZW5kZXI6IGZ1bmN0aW9uKCkgey4uLn1cbiAgICogIH0pO1xuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG5cbiAgdmFyIEFOT05ZTU9VUyA9ICc8PGFub255bW91cz4+JztcblxuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYXJyYXknKSxcbiAgICBiaWdpbnQ6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdiaWdpbnQnKSxcbiAgICBib29sOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYm9vbGVhbicpLFxuICAgIGZ1bmM6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdmdW5jdGlvbicpLFxuICAgIG51bWJlcjogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ251bWJlcicpLFxuICAgIG9iamVjdDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ29iamVjdCcpLFxuICAgIHN0cmluZzogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N0cmluZycpLFxuICAgIHN5bWJvbDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N5bWJvbCcpLFxuXG4gICAgYW55OiBjcmVhdGVBbnlUeXBlQ2hlY2tlcigpLFxuICAgIGFycmF5T2Y6IGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcixcbiAgICBlbGVtZW50OiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSxcbiAgICBlbGVtZW50VHlwZTogY3JlYXRlRWxlbWVudFR5cGVUeXBlQ2hlY2tlcigpLFxuICAgIGluc3RhbmNlT2Y6IGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIsXG4gICAgbm9kZTogY3JlYXRlTm9kZUNoZWNrZXIoKSxcbiAgICBvYmplY3RPZjogY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcixcbiAgICBvbmVPZjogY3JlYXRlRW51bVR5cGVDaGVja2VyLFxuICAgIG9uZU9mVHlwZTogY3JlYXRlVW5pb25UeXBlQ2hlY2tlcixcbiAgICBzaGFwZTogY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcixcbiAgICBleGFjdDogY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcixcbiAgfTtcblxuICAvKipcbiAgICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAgICovXG4gIC8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlKi9cbiAgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAgIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgICBpZiAoeCA9PT0geSkge1xuICAgICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAgICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgICB9XG4gIH1cbiAgLyplc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSovXG5cbiAgLyoqXG4gICAqIFdlIHVzZSBhbiBFcnJvci1saWtlIG9iamVjdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBhcyBwZW9wbGUgbWF5IGNhbGxcbiAgICogUHJvcFR5cGVzIGRpcmVjdGx5IGFuZCBpbnNwZWN0IHRoZWlyIG91dHB1dC4gSG93ZXZlciwgd2UgZG9uJ3QgdXNlIHJlYWxcbiAgICogRXJyb3JzIGFueW1vcmUuIFdlIGRvbid0IGluc3BlY3QgdGhlaXIgc3RhY2sgYW55d2F5LCBhbmQgY3JlYXRpbmcgdGhlbVxuICAgKiBpcyBwcm9oaWJpdGl2ZWx5IGV4cGVuc2l2ZSBpZiB0aGV5IGFyZSBjcmVhdGVkIHRvbyBvZnRlbiwgc3VjaCBhcyB3aGF0XG4gICAqIGhhcHBlbnMgaW4gb25lT2ZUeXBlKCkgZm9yIGFueSB0eXBlIGJlZm9yZSB0aGUgb25lIHRoYXQgbWF0Y2hlZC5cbiAgICovXG4gIGZ1bmN0aW9uIFByb3BUeXBlRXJyb3IobWVzc2FnZSwgZGF0YSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5kYXRhID0gZGF0YSAmJiB0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgPyBkYXRhOiB7fTtcbiAgICB0aGlzLnN0YWNrID0gJyc7XG4gIH1cbiAgLy8gTWFrZSBgaW5zdGFuY2VvZiBFcnJvcmAgc3RpbGwgd29yayBmb3IgcmV0dXJuZWQgZXJyb3JzLlxuICBQcm9wVHlwZUVycm9yLnByb3RvdHlwZSA9IEVycm9yLnByb3RvdHlwZTtcblxuICBmdW5jdGlvbiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgbWFudWFsUHJvcFR5cGVDYWxsQ2FjaGUgPSB7fTtcbiAgICAgIHZhciBtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudCA9IDA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNoZWNrVHlwZShpc1JlcXVpcmVkLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgICAgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudE5hbWUgfHwgQU5PTllNT1VTO1xuICAgICAgcHJvcEZ1bGxOYW1lID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuXG4gICAgICBpZiAoc2VjcmV0ICE9PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgICBpZiAodGhyb3dPbkRpcmVjdEFjY2Vzcykge1xuICAgICAgICAgIC8vIE5ldyBiZWhhdmlvciBvbmx5IGZvciB1c2VycyBvZiBgcHJvcC10eXBlc2AgcGFja2FnZVxuICAgICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAgICAgICAnVXNlIGBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKWAgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgLy8gT2xkIGJlaGF2aW9yIGZvciBwZW9wbGUgdXNpbmcgUmVhY3QuUHJvcFR5cGVzXG4gICAgICAgICAgdmFyIGNhY2hlS2V5ID0gY29tcG9uZW50TmFtZSArICc6JyArIHByb3BOYW1lO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICFtYW51YWxQcm9wVHlwZUNhbGxDYWNoZVtjYWNoZUtleV0gJiZcbiAgICAgICAgICAgIC8vIEF2b2lkIHNwYW1taW5nIHRoZSBjb25zb2xlIGJlY2F1c2UgdGhleSBhcmUgb2Z0ZW4gbm90IGFjdGlvbmFibGUgZXhjZXB0IGZvciBsaWIgYXV0aG9yc1xuICAgICAgICAgICAgbWFudWFsUHJvcFR5cGVXYXJuaW5nQ291bnQgPCAzXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBwcmludFdhcm5pbmcoXG4gICAgICAgICAgICAgICdZb3UgYXJlIG1hbnVhbGx5IGNhbGxpbmcgYSBSZWFjdC5Qcm9wVHlwZXMgdmFsaWRhdGlvbiAnICtcbiAgICAgICAgICAgICAgJ2Z1bmN0aW9uIGZvciB0aGUgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBwcm9wIG9uIGAnICsgY29tcG9uZW50TmFtZSArICdgLiBUaGlzIGlzIGRlcHJlY2F0ZWQgJyArXG4gICAgICAgICAgICAgICdhbmQgd2lsbCB0aHJvdyBpbiB0aGUgc3RhbmRhbG9uZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAgICAgICAgICdZb3UgbWF5IGJlIHNlZWluZyB0aGlzIHdhcm5pbmcgZHVlIHRvIGEgdGhpcmQtcGFydHkgUHJvcFR5cGVzICcgK1xuICAgICAgICAgICAgICAnbGlicmFyeS4gU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1kb250LWNhbGwtcHJvcHR5cGVzICcgKyAnZm9yIGRldGFpbHMuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlQ2FsbENhY2hlW2NhY2hlS2V5XSA9IHRydWU7XG4gICAgICAgICAgICBtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG4gICAgICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdUaGUgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIGlzIG1hcmtlZCBhcyByZXF1aXJlZCAnICsgKCdpbiBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgYnV0IGl0cyB2YWx1ZSBpcyBgbnVsbGAuJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1RoZSAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2AgaXMgbWFya2VkIGFzIHJlcXVpcmVkIGluICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLCBidXQgaXRzIHZhbHVlIGlzIGB1bmRlZmluZWRgLicpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjaGFpbmVkQ2hlY2tUeXBlID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgZmFsc2UpO1xuICAgIGNoYWluZWRDaGVja1R5cGUuaXNSZXF1aXJlZCA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIHRydWUpO1xuXG4gICAgcmV0dXJuIGNoYWluZWRDaGVja1R5cGU7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcihleHBlY3RlZFR5cGUpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICBpZiAocHJvcFR5cGUgIT09IGV4cGVjdGVkVHlwZSkge1xuICAgICAgICAvLyBgcHJvcFZhbHVlYCBiZWluZyBpbnN0YW5jZSBvZiwgc2F5LCBkYXRlL3JlZ2V4cCwgcGFzcyB0aGUgJ29iamVjdCdcbiAgICAgICAgLy8gY2hlY2ssIGJ1dCB3ZSBjYW4gb2ZmZXIgYSBtb3JlIHByZWNpc2UgZXJyb3IgbWVzc2FnZSBoZXJlIHJhdGhlciB0aGFuXG4gICAgICAgIC8vICdvZiB0eXBlIGBvYmplY3RgJy5cbiAgICAgICAgdmFyIHByZWNpc2VUeXBlID0gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoXG4gICAgICAgICAgJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcmVjaXNlVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCAnKSArICgnYCcgKyBleHBlY3RlZFR5cGUgKyAnYC4nKSxcbiAgICAgICAgICB7ZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGV9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUFueVR5cGVDaGVja2VyKCkge1xuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlQ2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1Byb3BlcnR5IGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgY29tcG9uZW50IGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBhcnJheU9mLicpO1xuICAgICAgfVxuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGFuIGFycmF5LicpKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwgaSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICdbJyArIGkgKyAnXScsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkge1xuICAgICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50VHlwZVR5cGVDaGVja2VyKCkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghUmVhY3RJcy5pc1ZhbGlkRWxlbWVudFR5cGUocHJvcFZhbHVlKSkge1xuICAgICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQgdHlwZS4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIoZXhwZWN0ZWRDbGFzcykge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKCEocHJvcHNbcHJvcE5hbWVdIGluc3RhbmNlb2YgZXhwZWN0ZWRDbGFzcykpIHtcbiAgICAgICAgdmFyIGV4cGVjdGVkQ2xhc3NOYW1lID0gZXhwZWN0ZWRDbGFzcy5uYW1lIHx8IEFOT05ZTU9VUztcbiAgICAgICAgdmFyIGFjdHVhbENsYXNzTmFtZSA9IGdldENsYXNzTmFtZShwcm9wc1twcm9wTmFtZV0pO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBhY3R1YWxDbGFzc05hbWUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgJykgKyAoJ2luc3RhbmNlIG9mIGAnICsgZXhwZWN0ZWRDbGFzc05hbWUgKyAnYC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVudW1UeXBlQ2hlY2tlcihleHBlY3RlZFZhbHVlcykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFZhbHVlcykpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHByaW50V2FybmluZyhcbiAgICAgICAgICAgICdJbnZhbGlkIGFyZ3VtZW50cyBzdXBwbGllZCB0byBvbmVPZiwgZXhwZWN0ZWQgYW4gYXJyYXksIGdvdCAnICsgYXJndW1lbnRzLmxlbmd0aCArICcgYXJndW1lbnRzLiAnICtcbiAgICAgICAgICAgICdBIGNvbW1vbiBtaXN0YWtlIGlzIHRvIHdyaXRlIG9uZU9mKHgsIHksIHopIGluc3RlYWQgb2Ygb25lT2YoW3gsIHksIHpdKS4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmludFdhcm5pbmcoJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2YsIGV4cGVjdGVkIGFuIGFycmF5LicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cGVjdGVkVmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpcyhwcm9wVmFsdWUsIGV4cGVjdGVkVmFsdWVzW2ldKSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZXNTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShleHBlY3RlZFZhbHVlcywgZnVuY3Rpb24gcmVwbGFjZXIoa2V5LCB2YWx1ZSkge1xuICAgICAgICB2YXIgdHlwZSA9IGdldFByZWNpc2VUeXBlKHZhbHVlKTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdzeW1ib2wnKSB7XG4gICAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHZhbHVlIGAnICsgU3RyaW5nKHByb3BWYWx1ZSkgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgb25lIG9mICcgKyB2YWx1ZXNTdHJpbmcgKyAnLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdHlwZUNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdQcm9wZXJ0eSBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIGNvbXBvbmVudCBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCBoYXMgaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbiBpbnNpZGUgb2JqZWN0T2YuJyk7XG4gICAgICB9XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJvcFR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYW4gb2JqZWN0LicpKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wVmFsdWUpIHtcbiAgICAgICAgaWYgKGhhcyhwcm9wVmFsdWUsIGtleSkpIHtcbiAgICAgICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIoYXJyYXlPZlR5cGVDaGVja2Vycykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheU9mVHlwZUNoZWNrZXJzKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHByaW50V2FybmluZygnSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZlR5cGUsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LicpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGw7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07XG4gICAgICBpZiAodHlwZW9mIGNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICdJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mVHlwZS4gRXhwZWN0ZWQgYW4gYXJyYXkgb2YgY2hlY2sgZnVuY3Rpb25zLCBidXQgJyArXG4gICAgICAgICAgJ3JlY2VpdmVkICcgKyBnZXRQb3N0Zml4Rm9yVHlwZVdhcm5pbmcoY2hlY2tlcikgKyAnIGF0IGluZGV4ICcgKyBpICsgJy4nXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlPZlR5cGVDaGVja2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07XG4gICAgICAgIHZhciBjaGVja2VyUmVzdWx0ID0gY2hlY2tlcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgaWYgKGNoZWNrZXJSZXN1bHQgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGVja2VyUmVzdWx0LmRhdGEgJiYgaGFzKGNoZWNrZXJSZXN1bHQuZGF0YSwgJ2V4cGVjdGVkVHlwZScpKSB7XG4gICAgICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGNoZWNrZXJSZXN1bHQuZGF0YS5leHBlY3RlZFR5cGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgZXhwZWN0ZWRUeXBlc01lc3NhZ2UgPSAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPiAwKSA/ICcsIGV4cGVjdGVkIG9uZSBvZiB0eXBlIFsnICsgZXhwZWN0ZWRUeXBlcy5qb2luKCcsICcpICsgJ10nOiAnJztcbiAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AnICsgZXhwZWN0ZWRUeXBlc01lc3NhZ2UgKyAnLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU5vZGVDaGVja2VyKCkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKCFpc05vZGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIHN1cHBsaWVkIHRvICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIFJlYWN0Tm9kZS4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludmFsaWRWYWxpZGF0b3JFcnJvcihjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBrZXksIHR5cGUpIHtcbiAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoXG4gICAgICAoY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnKSArICc6ICcgKyBsb2NhdGlvbiArICcgdHlwZSBgJyArIHByb3BGdWxsTmFtZSArICcuJyArIGtleSArICdgIGlzIGludmFsaWQ7ICcgK1xuICAgICAgJ2l0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZSwgYnV0IHJlY2VpdmVkIGAnICsgdHlwZSArICdgLidcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlIGAnICsgcHJvcFR5cGUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYG9iamVjdGAuJykpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHNoYXBlVHlwZXMpIHtcbiAgICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICAgIGlmICh0eXBlb2YgY2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBpbnZhbGlkVmFsaWRhdG9yRXJyb3IoY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwga2V5LCBnZXRQcmVjaXNlVHlwZShjaGVja2VyKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlIGAnICsgcHJvcFR5cGUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYG9iamVjdGAuJykpO1xuICAgICAgfVxuICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayBhbGwga2V5cyBpbiBjYXNlIHNvbWUgYXJlIHJlcXVpcmVkIGJ1dCBtaXNzaW5nIGZyb20gcHJvcHMuXG4gICAgICB2YXIgYWxsS2V5cyA9IGFzc2lnbih7fSwgcHJvcHNbcHJvcE5hbWVdLCBzaGFwZVR5cGVzKTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBhbGxLZXlzKSB7XG4gICAgICAgIHZhciBjaGVja2VyID0gc2hhcGVUeXBlc1trZXldO1xuICAgICAgICBpZiAoaGFzKHNoYXBlVHlwZXMsIGtleSkgJiYgdHlwZW9mIGNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gaW52YWxpZFZhbGlkYXRvckVycm9yKGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIGtleSwgZ2V0UHJlY2lzZVR5cGUoY2hlY2tlcikpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2hlY2tlcikge1xuICAgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcihcbiAgICAgICAgICAgICdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBrZXkgYCcgKyBrZXkgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4nICtcbiAgICAgICAgICAgICdcXG5CYWQgb2JqZWN0OiAnICsgSlNPTi5zdHJpbmdpZnkocHJvcHNbcHJvcE5hbWVdLCBudWxsLCAnICAnKSArXG4gICAgICAgICAgICAnXFxuVmFsaWQga2V5czogJyArIEpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKHNoYXBlVHlwZXMpLCBudWxsLCAnICAnKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc05vZGUocHJvcFZhbHVlKSB7XG4gICAgc3dpdGNoICh0eXBlb2YgcHJvcFZhbHVlKSB7XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIHJldHVybiAhcHJvcFZhbHVlO1xuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBwcm9wVmFsdWUuZXZlcnkoaXNOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcFZhbHVlID09PSBudWxsIHx8IGlzVmFsaWRFbGVtZW50KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihwcm9wVmFsdWUpO1xuICAgICAgICBpZiAoaXRlcmF0b3JGbikge1xuICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChwcm9wVmFsdWUpO1xuICAgICAgICAgIHZhciBzdGVwO1xuICAgICAgICAgIGlmIChpdGVyYXRvckZuICE9PSBwcm9wVmFsdWUuZW50cmllcykge1xuICAgICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgICBpZiAoIWlzTm9kZShzdGVwLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJdGVyYXRvciB3aWxsIHByb3ZpZGUgZW50cnkgW2ssdl0gdHVwbGVzIHJhdGhlciB0aGFuIHZhbHVlcy5cbiAgICAgICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05vZGUoZW50cnlbMV0pKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3ltYm9sKHByb3BUeXBlLCBwcm9wVmFsdWUpIHtcbiAgICAvLyBOYXRpdmUgU3ltYm9sLlxuICAgIGlmIChwcm9wVHlwZSA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIGZhbHN5IHZhbHVlIGNhbid0IGJlIGEgU3ltYm9sXG4gICAgaWYgKCFwcm9wVmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddID09PSAnU3ltYm9sJ1xuICAgIGlmIChwcm9wVmFsdWVbJ0BAdG9TdHJpbmdUYWcnXSA9PT0gJ1N5bWJvbCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIEZhbGxiYWNrIGZvciBub24tc3BlYyBjb21wbGlhbnQgU3ltYm9scyB3aGljaCBhcmUgcG9seWZpbGxlZC5cbiAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBwcm9wVmFsdWUgaW5zdGFuY2VvZiBTeW1ib2wpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIEVxdWl2YWxlbnQgb2YgYHR5cGVvZmAgYnV0IHdpdGggc3BlY2lhbCBoYW5kbGluZyBmb3IgYXJyYXkgYW5kIHJlZ2V4cC5cbiAgZnVuY3Rpb24gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKSB7XG4gICAgdmFyIHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICByZXR1cm4gJ2FycmF5JztcbiAgICB9XG4gICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgLy8gT2xkIHdlYmtpdHMgKGF0IGxlYXN0IHVudGlsIEFuZHJvaWQgNC4wKSByZXR1cm4gJ2Z1bmN0aW9uJyByYXRoZXIgdGhhblxuICAgICAgLy8gJ29iamVjdCcgZm9yIHR5cGVvZiBhIFJlZ0V4cC4gV2UnbGwgbm9ybWFsaXplIHRoaXMgaGVyZSBzbyB0aGF0IC9ibGEvXG4gICAgICAvLyBwYXNzZXMgUHJvcFR5cGVzLm9iamVjdC5cbiAgICAgIHJldHVybiAnb2JqZWN0JztcbiAgICB9XG4gICAgaWYgKGlzU3ltYm9sKHByb3BUeXBlLCBwcm9wVmFsdWUpKSB7XG4gICAgICByZXR1cm4gJ3N5bWJvbCc7XG4gICAgfVxuICAgIHJldHVybiBwcm9wVHlwZTtcbiAgfVxuXG4gIC8vIFRoaXMgaGFuZGxlcyBtb3JlIHR5cGVzIHRoYW4gYGdldFByb3BUeXBlYC4gT25seSB1c2VkIGZvciBlcnJvciBtZXNzYWdlcy5cbiAgLy8gU2VlIGBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcmAuXG4gIGZ1bmN0aW9uIGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSkge1xuICAgIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAndW5kZWZpbmVkJyB8fCBwcm9wVmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJyArIHByb3BWYWx1ZTtcbiAgICB9XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gJ2RhdGUnO1xuICAgICAgfSBlbHNlIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgcmV0dXJuICdyZWdleHAnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvcFR5cGU7XG4gIH1cblxuICAvLyBSZXR1cm5zIGEgc3RyaW5nIHRoYXQgaXMgcG9zdGZpeGVkIHRvIGEgd2FybmluZyBhYm91dCBhbiBpbnZhbGlkIHR5cGUuXG4gIC8vIEZvciBleGFtcGxlLCBcInVuZGVmaW5lZFwiIG9yIFwib2YgdHlwZSBhcnJheVwiXG4gIGZ1bmN0aW9uIGdldFBvc3RmaXhGb3JUeXBlV2FybmluZyh2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gZ2V0UHJlY2lzZVR5cGUodmFsdWUpO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnYXJyYXknOlxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgcmV0dXJuICdhbiAnICsgdHlwZTtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICBjYXNlICdyZWdleHAnOlxuICAgICAgICByZXR1cm4gJ2EgJyArIHR5cGU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG4gIH1cblxuICAvLyBSZXR1cm5zIGNsYXNzIG5hbWUgb2YgdGhlIG9iamVjdCwgaWYgYW55LlxuICBmdW5jdGlvbiBnZXRDbGFzc05hbWUocHJvcFZhbHVlKSB7XG4gICAgaWYgKCFwcm9wVmFsdWUuY29uc3RydWN0b3IgfHwgIXByb3BWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lKSB7XG4gICAgICByZXR1cm4gQU5PTllNT1VTO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcFZhbHVlLmNvbnN0cnVjdG9yLm5hbWU7XG4gIH1cblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGNoZWNrUHJvcFR5cGVzO1xuICBSZWFjdFByb3BUeXBlcy5yZXNldFdhcm5pbmdDYWNoZSA9IGNoZWNrUHJvcFR5cGVzLnJlc2V0V2FybmluZ0NhY2hlO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cblxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIChmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gVGhlIFN5bWJvbCB1c2VkIHRvIHRhZyB0aGUgUmVhY3RFbGVtZW50LWxpa2UgdHlwZXMuIElmIHRoZXJlIGlzIG5vIG5hdGl2ZSBTeW1ib2xcbi8vIG5vciBwb2x5ZmlsbCwgdGhlbiBhIHBsYWluIG51bWJlciBpcyB1c2VkIGZvciBwZXJmb3JtYW5jZS5cbnZhciBoYXNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3I7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpIDogMHhlYWM3O1xudmFyIFJFQUNUX1BPUlRBTF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QucG9ydGFsJykgOiAweGVhY2E7XG52YXIgUkVBQ1RfRlJBR01FTlRfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmZyYWdtZW50JykgOiAweGVhY2I7XG52YXIgUkVBQ1RfU1RSSUNUX01PREVfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnN0cmljdF9tb2RlJykgOiAweGVhY2M7XG52YXIgUkVBQ1RfUFJPRklMRVJfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnByb2ZpbGVyJykgOiAweGVhZDI7XG52YXIgUkVBQ1RfUFJPVklERVJfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnByb3ZpZGVyJykgOiAweGVhY2Q7XG52YXIgUkVBQ1RfQ09OVEVYVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuY29udGV4dCcpIDogMHhlYWNlOyAvLyBUT0RPOiBXZSBkb24ndCB1c2UgQXN5bmNNb2RlIG9yIENvbmN1cnJlbnRNb2RlIGFueW1vcmUuIFRoZXkgd2VyZSB0ZW1wb3Jhcnlcbi8vICh1bnN0YWJsZSkgQVBJcyB0aGF0IGhhdmUgYmVlbiByZW1vdmVkLiBDYW4gd2UgcmVtb3ZlIHRoZSBzeW1ib2xzP1xuXG52YXIgUkVBQ1RfQVNZTkNfTU9ERV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuYXN5bmNfbW9kZScpIDogMHhlYWNmO1xudmFyIFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuY29uY3VycmVudF9tb2RlJykgOiAweGVhY2Y7XG52YXIgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmZvcndhcmRfcmVmJykgOiAweGVhZDA7XG52YXIgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnN1c3BlbnNlJykgOiAweGVhZDE7XG52YXIgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3Quc3VzcGVuc2VfbGlzdCcpIDogMHhlYWQ4O1xudmFyIFJFQUNUX01FTU9fVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0Lm1lbW8nKSA6IDB4ZWFkMztcbnZhciBSRUFDVF9MQVpZX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5sYXp5JykgOiAweGVhZDQ7XG52YXIgUkVBQ1RfQkxPQ0tfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmJsb2NrJykgOiAweGVhZDk7XG52YXIgUkVBQ1RfRlVOREFNRU5UQUxfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmZ1bmRhbWVudGFsJykgOiAweGVhZDU7XG52YXIgUkVBQ1RfUkVTUE9OREVSX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5yZXNwb25kZXInKSA6IDB4ZWFkNjtcbnZhciBSRUFDVF9TQ09QRV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3Quc2NvcGUnKSA6IDB4ZWFkNztcblxuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCAvLyBOb3RlOiBpdHMgdHlwZW9mIG1pZ2h0IGJlIG90aGVyIHRoYW4gJ3N5bWJvbCcgb3IgJ251bWJlcicgaWYgaXQncyBhIHBvbHlmaWxsLlxuICB0eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1BST0ZJTEVSX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSB8fCB0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCAmJiAodHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX01FTU9fVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9QUk9WSURFUl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZVTkRBTUVOVEFMX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfUkVTUE9OREVSX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfU0NPUEVfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9CTE9DS19UWVBFKTtcbn1cblxuZnVuY3Rpb24gdHlwZU9mKG9iamVjdCkge1xuICBpZiAodHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsKSB7XG4gICAgdmFyICQkdHlwZW9mID0gb2JqZWN0LiQkdHlwZW9mO1xuXG4gICAgc3dpdGNoICgkJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgIHZhciB0eXBlID0gb2JqZWN0LnR5cGU7XG5cbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgY2FzZSBSRUFDVF9BU1lOQ19NT0RFX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICAgICAgICByZXR1cm4gdHlwZTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB2YXIgJCR0eXBlb2ZUeXBlID0gdHlwZSAmJiB0eXBlLiQkdHlwZW9mO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKCQkdHlwZW9mVHlwZSkge1xuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0NPTlRFWFRfVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfUFJPVklERVJfVFlQRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gJCR0eXBlb2ZUeXBlO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICQkdHlwZW9mO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgcmV0dXJuICQkdHlwZW9mO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59IC8vIEFzeW5jTW9kZSBpcyBkZXByZWNhdGVkIGFsb25nIHdpdGggaXNBc3luY01vZGVcblxudmFyIEFzeW5jTW9kZSA9IFJFQUNUX0FTWU5DX01PREVfVFlQRTtcbnZhciBDb25jdXJyZW50TW9kZSA9IFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFO1xudmFyIENvbnRleHRDb25zdW1lciA9IFJFQUNUX0NPTlRFWFRfVFlQRTtcbnZhciBDb250ZXh0UHJvdmlkZXIgPSBSRUFDVF9QUk9WSURFUl9UWVBFO1xudmFyIEVsZW1lbnQgPSBSRUFDVF9FTEVNRU5UX1RZUEU7XG52YXIgRm9yd2FyZFJlZiA9IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU7XG52YXIgRnJhZ21lbnQgPSBSRUFDVF9GUkFHTUVOVF9UWVBFO1xudmFyIExhenkgPSBSRUFDVF9MQVpZX1RZUEU7XG52YXIgTWVtbyA9IFJFQUNUX01FTU9fVFlQRTtcbnZhciBQb3J0YWwgPSBSRUFDVF9QT1JUQUxfVFlQRTtcbnZhciBQcm9maWxlciA9IFJFQUNUX1BST0ZJTEVSX1RZUEU7XG52YXIgU3RyaWN0TW9kZSA9IFJFQUNUX1NUUklDVF9NT0RFX1RZUEU7XG52YXIgU3VzcGVuc2UgPSBSRUFDVF9TVVNQRU5TRV9UWVBFO1xudmFyIGhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQXN5bmNNb2RlID0gZmFsc2U7IC8vIEFzeW5jTW9kZSBzaG91bGQgYmUgZGVwcmVjYXRlZFxuXG5mdW5jdGlvbiBpc0FzeW5jTW9kZShvYmplY3QpIHtcbiAge1xuICAgIGlmICghaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNBc3luY01vZGUpIHtcbiAgICAgIGhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQXN5bmNNb2RlID0gdHJ1ZTsgLy8gVXNpbmcgY29uc29sZVsnd2FybiddIHRvIGV2YWRlIEJhYmVsIGFuZCBFU0xpbnRcblxuICAgICAgY29uc29sZVsnd2FybiddKCdUaGUgUmVhY3RJcy5pc0FzeW5jTW9kZSgpIGFsaWFzIGhhcyBiZWVuIGRlcHJlY2F0ZWQsICcgKyAnYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBSZWFjdCAxNysuIFVwZGF0ZSB5b3VyIGNvZGUgdG8gdXNlICcgKyAnUmVhY3RJcy5pc0NvbmN1cnJlbnRNb2RlKCkgaW5zdGVhZC4gSXQgaGFzIHRoZSBleGFjdCBzYW1lIEFQSS4nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaXNDb25jdXJyZW50TW9kZShvYmplY3QpIHx8IHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9BU1lOQ19NT0RFX1RZUEU7XG59XG5mdW5jdGlvbiBpc0NvbmN1cnJlbnRNb2RlKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFO1xufVxuZnVuY3Rpb24gaXNDb250ZXh0Q29uc3VtZXIob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFO1xufVxuZnVuY3Rpb24gaXNDb250ZXh0UHJvdmlkZXIob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfUFJPVklERVJfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIG9iamVjdCAhPT0gbnVsbCAmJiBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzRm9yd2FyZFJlZihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFO1xufVxuZnVuY3Rpb24gaXNGcmFnbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFO1xufVxuZnVuY3Rpb24gaXNMYXp5KG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0xBWllfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzTWVtbyhvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9NRU1PX1RZUEU7XG59XG5mdW5jdGlvbiBpc1BvcnRhbChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QT1JUQUxfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzUHJvZmlsZXIob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfUFJPRklMRVJfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzU3RyaWN0TW9kZShvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFO1xufVxuZnVuY3Rpb24gaXNTdXNwZW5zZShvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFO1xufVxuXG5leHBvcnRzLkFzeW5jTW9kZSA9IEFzeW5jTW9kZTtcbmV4cG9ydHMuQ29uY3VycmVudE1vZGUgPSBDb25jdXJyZW50TW9kZTtcbmV4cG9ydHMuQ29udGV4dENvbnN1bWVyID0gQ29udGV4dENvbnN1bWVyO1xuZXhwb3J0cy5Db250ZXh0UHJvdmlkZXIgPSBDb250ZXh0UHJvdmlkZXI7XG5leHBvcnRzLkVsZW1lbnQgPSBFbGVtZW50O1xuZXhwb3J0cy5Gb3J3YXJkUmVmID0gRm9yd2FyZFJlZjtcbmV4cG9ydHMuRnJhZ21lbnQgPSBGcmFnbWVudDtcbmV4cG9ydHMuTGF6eSA9IExhenk7XG5leHBvcnRzLk1lbW8gPSBNZW1vO1xuZXhwb3J0cy5Qb3J0YWwgPSBQb3J0YWw7XG5leHBvcnRzLlByb2ZpbGVyID0gUHJvZmlsZXI7XG5leHBvcnRzLlN0cmljdE1vZGUgPSBTdHJpY3RNb2RlO1xuZXhwb3J0cy5TdXNwZW5zZSA9IFN1c3BlbnNlO1xuZXhwb3J0cy5pc0FzeW5jTW9kZSA9IGlzQXN5bmNNb2RlO1xuZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlID0gaXNDb25jdXJyZW50TW9kZTtcbmV4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXIgPSBpc0NvbnRleHRDb25zdW1lcjtcbmV4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXIgPSBpc0NvbnRleHRQcm92aWRlcjtcbmV4cG9ydHMuaXNFbGVtZW50ID0gaXNFbGVtZW50O1xuZXhwb3J0cy5pc0ZvcndhcmRSZWYgPSBpc0ZvcndhcmRSZWY7XG5leHBvcnRzLmlzRnJhZ21lbnQgPSBpc0ZyYWdtZW50O1xuZXhwb3J0cy5pc0xhenkgPSBpc0xhenk7XG5leHBvcnRzLmlzTWVtbyA9IGlzTWVtbztcbmV4cG9ydHMuaXNQb3J0YWwgPSBpc1BvcnRhbDtcbmV4cG9ydHMuaXNQcm9maWxlciA9IGlzUHJvZmlsZXI7XG5leHBvcnRzLmlzU3RyaWN0TW9kZSA9IGlzU3RyaWN0TW9kZTtcbmV4cG9ydHMuaXNTdXNwZW5zZSA9IGlzU3VzcGVuc2U7XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZSA9IGlzVmFsaWRFbGVtZW50VHlwZTtcbmV4cG9ydHMudHlwZU9mID0gdHlwZU9mO1xuICB9KSgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1pcy5kZXZlbG9wbWVudC5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAoZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8vIEFUVEVOVElPTlxuLy8gV2hlbiBhZGRpbmcgbmV3IHN5bWJvbHMgdG8gdGhpcyBmaWxlLFxuLy8gUGxlYXNlIGNvbnNpZGVyIGFsc28gYWRkaW5nIHRvICdyZWFjdC1kZXZ0b29scy1zaGFyZWQvc3JjL2JhY2tlbmQvUmVhY3RTeW1ib2xzJ1xuLy8gVGhlIFN5bWJvbCB1c2VkIHRvIHRhZyB0aGUgUmVhY3RFbGVtZW50LWxpa2UgdHlwZXMuXG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpO1xudmFyIFJFQUNUX1BPUlRBTF9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QucG9ydGFsJyk7XG52YXIgUkVBQ1RfRlJBR01FTlRfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmZyYWdtZW50Jyk7XG52YXIgUkVBQ1RfU1RSSUNUX01PREVfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LnN0cmljdF9tb2RlJyk7XG52YXIgUkVBQ1RfUFJPRklMRVJfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LnByb2ZpbGVyJyk7XG52YXIgUkVBQ1RfUFJPVklERVJfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LnByb3ZpZGVyJyk7XG52YXIgUkVBQ1RfQ09OVEVYVF9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QuY29udGV4dCcpO1xudmFyIFJFQUNUX1NFUlZFUl9DT05URVhUX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5zZXJ2ZXJfY29udGV4dCcpO1xudmFyIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5mb3J3YXJkX3JlZicpO1xudmFyIFJFQUNUX1NVU1BFTlNFX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5zdXNwZW5zZScpO1xudmFyIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LnN1c3BlbnNlX2xpc3QnKTtcbnZhciBSRUFDVF9NRU1PX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5tZW1vJyk7XG52YXIgUkVBQ1RfTEFaWV9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QubGF6eScpO1xudmFyIFJFQUNUX09GRlNDUkVFTl9UWVBFID0gU3ltYm9sLmZvcigncmVhY3Qub2Zmc2NyZWVuJyk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBlbmFibGVTY29wZUFQSSA9IGZhbHNlOyAvLyBFeHBlcmltZW50YWwgQ3JlYXRlIEV2ZW50IEhhbmRsZSBBUEkuXG52YXIgZW5hYmxlQ2FjaGVFbGVtZW50ID0gZmFsc2U7XG52YXIgZW5hYmxlVHJhbnNpdGlvblRyYWNpbmcgPSBmYWxzZTsgLy8gTm8ga25vd24gYnVncywgYnV0IG5lZWRzIHBlcmZvcm1hbmNlIHRlc3RpbmdcblxudmFyIGVuYWJsZUxlZ2FjeUhpZGRlbiA9IGZhbHNlOyAvLyBFbmFibGVzIHVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIGZlYXR1cmUgaW4gRmliZXJcbi8vIHN0dWZmLiBJbnRlbmRlZCB0byBlbmFibGUgUmVhY3QgY29yZSBtZW1iZXJzIHRvIG1vcmUgZWFzaWx5IGRlYnVnIHNjaGVkdWxpbmdcbi8vIGlzc3VlcyBpbiBERVYgYnVpbGRzLlxuXG52YXIgZW5hYmxlRGVidWdUcmFjaW5nID0gZmFsc2U7IC8vIFRyYWNrIHdoaWNoIEZpYmVyKHMpIHNjaGVkdWxlIHJlbmRlciB3b3JrLlxuXG52YXIgUkVBQ1RfTU9EVUxFX1JFRkVSRU5DRTtcblxue1xuICBSRUFDVF9NT0RVTEVfUkVGRVJFTkNFID0gU3ltYm9sLmZvcigncmVhY3QubW9kdWxlLnJlZmVyZW5jZScpO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkRWxlbWVudFR5cGUodHlwZSkge1xuICBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gTm90ZTogdHlwZW9mIG1pZ2h0IGJlIG90aGVyIHRoYW4gJ3N5bWJvbCcgb3IgJ251bWJlcicgKGUuZy4gaWYgaXQncyBhIHBvbHlmaWxsKS5cblxuXG4gIGlmICh0eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1BST0ZJTEVSX1RZUEUgfHwgZW5hYmxlRGVidWdUcmFjaW5nICB8fCB0eXBlID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFIHx8IGVuYWJsZUxlZ2FjeUhpZGRlbiAgfHwgdHlwZSA9PT0gUkVBQ1RfT0ZGU0NSRUVOX1RZUEUgfHwgZW5hYmxlU2NvcGVBUEkgIHx8IGVuYWJsZUNhY2hlRWxlbWVudCAgfHwgZW5hYmxlVHJhbnNpdGlvblRyYWNpbmcgKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwpIHtcbiAgICBpZiAodHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX01FTU9fVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9QUk9WSURFUl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIHx8IC8vIFRoaXMgbmVlZHMgdG8gaW5jbHVkZSBhbGwgcG9zc2libGUgbW9kdWxlIHJlZmVyZW5jZSBvYmplY3RcbiAgICAvLyB0eXBlcyBzdXBwb3J0ZWQgYnkgYW55IEZsaWdodCBjb25maWd1cmF0aW9uIGFueXdoZXJlIHNpbmNlXG4gICAgLy8gd2UgZG9uJ3Qga25vdyB3aGljaCBGbGlnaHQgYnVpbGQgdGhpcyB3aWxsIGVuZCB1cCBiZWluZyB1c2VkXG4gICAgLy8gd2l0aC5cbiAgICB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9NT0RVTEVfUkVGRVJFTkNFIHx8IHR5cGUuZ2V0TW9kdWxlSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiB0eXBlT2Yob2JqZWN0KSB7XG4gIGlmICh0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwpIHtcbiAgICB2YXIgJCR0eXBlb2YgPSBvYmplY3QuJCR0eXBlb2Y7XG5cbiAgICBzd2l0Y2ggKCQkdHlwZW9mKSB7XG4gICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgdmFyIHR5cGUgPSBvYmplY3QudHlwZTtcblxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICAgICAgICByZXR1cm4gdHlwZTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB2YXIgJCR0eXBlb2ZUeXBlID0gdHlwZSAmJiB0eXBlLiQkdHlwZW9mO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKCQkdHlwZW9mVHlwZSkge1xuICAgICAgICAgICAgICBjYXNlIFJFQUNUX1NFUlZFUl9DT05URVhUX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9QUk9WSURFUl9UWVBFOlxuICAgICAgICAgICAgICAgIHJldHVybiAkJHR5cGVvZlR5cGU7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJCR0eXBlb2Y7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICByZXR1cm4gJCR0eXBlb2Y7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbnZhciBDb250ZXh0Q29uc3VtZXIgPSBSRUFDVF9DT05URVhUX1RZUEU7XG52YXIgQ29udGV4dFByb3ZpZGVyID0gUkVBQ1RfUFJPVklERVJfVFlQRTtcbnZhciBFbGVtZW50ID0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xudmFyIEZvcndhcmRSZWYgPSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFO1xudmFyIEZyYWdtZW50ID0gUkVBQ1RfRlJBR01FTlRfVFlQRTtcbnZhciBMYXp5ID0gUkVBQ1RfTEFaWV9UWVBFO1xudmFyIE1lbW8gPSBSRUFDVF9NRU1PX1RZUEU7XG52YXIgUG9ydGFsID0gUkVBQ1RfUE9SVEFMX1RZUEU7XG52YXIgUHJvZmlsZXIgPSBSRUFDVF9QUk9GSUxFUl9UWVBFO1xudmFyIFN0cmljdE1vZGUgPSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFO1xudmFyIFN1c3BlbnNlID0gUkVBQ1RfU1VTUEVOU0VfVFlQRTtcbnZhciBTdXNwZW5zZUxpc3QgPSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU7XG52YXIgaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNBc3luY01vZGUgPSBmYWxzZTtcbnZhciBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0NvbmN1cnJlbnRNb2RlID0gZmFsc2U7IC8vIEFzeW5jTW9kZSBzaG91bGQgYmUgZGVwcmVjYXRlZFxuXG5mdW5jdGlvbiBpc0FzeW5jTW9kZShvYmplY3QpIHtcbiAge1xuICAgIGlmICghaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNBc3luY01vZGUpIHtcbiAgICAgIGhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQXN5bmNNb2RlID0gdHJ1ZTsgLy8gVXNpbmcgY29uc29sZVsnd2FybiddIHRvIGV2YWRlIEJhYmVsIGFuZCBFU0xpbnRcblxuICAgICAgY29uc29sZVsnd2FybiddKCdUaGUgUmVhY3RJcy5pc0FzeW5jTW9kZSgpIGFsaWFzIGhhcyBiZWVuIGRlcHJlY2F0ZWQsICcgKyAnYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBSZWFjdCAxOCsuJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNDb25jdXJyZW50TW9kZShvYmplY3QpIHtcbiAge1xuICAgIGlmICghaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNDb25jdXJyZW50TW9kZSkge1xuICAgICAgaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNDb25jdXJyZW50TW9kZSA9IHRydWU7IC8vIFVzaW5nIGNvbnNvbGVbJ3dhcm4nXSB0byBldmFkZSBCYWJlbCBhbmQgRVNMaW50XG5cbiAgICAgIGNvbnNvbGVbJ3dhcm4nXSgnVGhlIFJlYWN0SXMuaXNDb25jdXJyZW50TW9kZSgpIGFsaWFzIGhhcyBiZWVuIGRlcHJlY2F0ZWQsICcgKyAnYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBSZWFjdCAxOCsuJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNDb250ZXh0Q29uc3VtZXIob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFO1xufVxuZnVuY3Rpb24gaXNDb250ZXh0UHJvdmlkZXIob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfUFJPVklERVJfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIG9iamVjdCAhPT0gbnVsbCAmJiBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzRm9yd2FyZFJlZihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFO1xufVxuZnVuY3Rpb24gaXNGcmFnbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFO1xufVxuZnVuY3Rpb24gaXNMYXp5KG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0xBWllfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzTWVtbyhvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9NRU1PX1RZUEU7XG59XG5mdW5jdGlvbiBpc1BvcnRhbChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QT1JUQUxfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzUHJvZmlsZXIob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfUFJPRklMRVJfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzU3RyaWN0TW9kZShvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFO1xufVxuZnVuY3Rpb24gaXNTdXNwZW5zZShvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFO1xufVxuZnVuY3Rpb24gaXNTdXNwZW5zZUxpc3Qob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFO1xufVxuXG5leHBvcnRzLkNvbnRleHRDb25zdW1lciA9IENvbnRleHRDb25zdW1lcjtcbmV4cG9ydHMuQ29udGV4dFByb3ZpZGVyID0gQ29udGV4dFByb3ZpZGVyO1xuZXhwb3J0cy5FbGVtZW50ID0gRWxlbWVudDtcbmV4cG9ydHMuRm9yd2FyZFJlZiA9IEZvcndhcmRSZWY7XG5leHBvcnRzLkZyYWdtZW50ID0gRnJhZ21lbnQ7XG5leHBvcnRzLkxhenkgPSBMYXp5O1xuZXhwb3J0cy5NZW1vID0gTWVtbztcbmV4cG9ydHMuUG9ydGFsID0gUG9ydGFsO1xuZXhwb3J0cy5Qcm9maWxlciA9IFByb2ZpbGVyO1xuZXhwb3J0cy5TdHJpY3RNb2RlID0gU3RyaWN0TW9kZTtcbmV4cG9ydHMuU3VzcGVuc2UgPSBTdXNwZW5zZTtcbmV4cG9ydHMuU3VzcGVuc2VMaXN0ID0gU3VzcGVuc2VMaXN0O1xuZXhwb3J0cy5pc0FzeW5jTW9kZSA9IGlzQXN5bmNNb2RlO1xuZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlID0gaXNDb25jdXJyZW50TW9kZTtcbmV4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXIgPSBpc0NvbnRleHRDb25zdW1lcjtcbmV4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXIgPSBpc0NvbnRleHRQcm92aWRlcjtcbmV4cG9ydHMuaXNFbGVtZW50ID0gaXNFbGVtZW50O1xuZXhwb3J0cy5pc0ZvcndhcmRSZWYgPSBpc0ZvcndhcmRSZWY7XG5leHBvcnRzLmlzRnJhZ21lbnQgPSBpc0ZyYWdtZW50O1xuZXhwb3J0cy5pc0xhenkgPSBpc0xhenk7XG5leHBvcnRzLmlzTWVtbyA9IGlzTWVtbztcbmV4cG9ydHMuaXNQb3J0YWwgPSBpc1BvcnRhbDtcbmV4cG9ydHMuaXNQcm9maWxlciA9IGlzUHJvZmlsZXI7XG5leHBvcnRzLmlzU3RyaWN0TW9kZSA9IGlzU3RyaWN0TW9kZTtcbmV4cG9ydHMuaXNTdXNwZW5zZSA9IGlzU3VzcGVuc2U7XG5leHBvcnRzLmlzU3VzcGVuc2VMaXN0ID0gaXNTdXNwZW5zZUxpc3Q7XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZSA9IGlzVmFsaWRFbGVtZW50VHlwZTtcbmV4cG9ydHMudHlwZU9mID0gdHlwZU9mO1xuICB9KSgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJ2YXIgcGFyc2UgPSByZXF1aXJlKCdpbmxpbmUtc3R5bGUtcGFyc2VyJyk7XG5cbi8qKlxuICogUGFyc2VzIGlubGluZSBzdHlsZSB0byBvYmplY3QuXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIHJldHVybnMgeyAnbGluZS1oZWlnaHQnOiAnNDInIH1cbiAqIFN0eWxlVG9PYmplY3QoJ2xpbmUtaGVpZ2h0OiA0MjsnKTtcbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgc3R5bGUgICAgICAtIFRoZSBpbmxpbmUgc3R5bGUuXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gICAgW2l0ZXJhdG9yXSAtIFRoZSBpdGVyYXRvciBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge251bGx8T2JqZWN0fVxuICovXG5mdW5jdGlvbiBTdHlsZVRvT2JqZWN0KHN0eWxlLCBpdGVyYXRvcikge1xuICB2YXIgb3V0cHV0ID0gbnVsbDtcbiAgaWYgKCFzdHlsZSB8fCB0eXBlb2Ygc3R5bGUgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfVxuXG4gIHZhciBkZWNsYXJhdGlvbjtcbiAgdmFyIGRlY2xhcmF0aW9ucyA9IHBhcnNlKHN0eWxlKTtcbiAgdmFyIGhhc0l0ZXJhdG9yID0gdHlwZW9mIGl0ZXJhdG9yID09PSAnZnVuY3Rpb24nO1xuICB2YXIgcHJvcGVydHk7XG4gIHZhciB2YWx1ZTtcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZGVjbGFyYXRpb25zLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgZGVjbGFyYXRpb24gPSBkZWNsYXJhdGlvbnNbaV07XG4gICAgcHJvcGVydHkgPSBkZWNsYXJhdGlvbi5wcm9wZXJ0eTtcbiAgICB2YWx1ZSA9IGRlY2xhcmF0aW9uLnZhbHVlO1xuXG4gICAgaWYgKGhhc0l0ZXJhdG9yKSB7XG4gICAgICBpdGVyYXRvcihwcm9wZXJ0eSwgdmFsdWUsIGRlY2xhcmF0aW9uKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICBvdXRwdXQgfHwgKG91dHB1dCA9IHt9KTtcbiAgICAgIG91dHB1dFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0eWxlVG9PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gU3R5bGVUb09iamVjdDsgLy8gRVNNIHN1cHBvcnRcbiIsIi8qKlxuICogVGhyb3cgYSBnaXZlbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfG51bGx8dW5kZWZpbmVkfSBbZXJyb3JdXG4gKiAgIE1heWJlIGVycm9yLlxuICogQHJldHVybnMge2Fzc2VydHMgZXJyb3IgaXMgbnVsbHx1bmRlZmluZWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiYWlsKGVycm9yKSB7XG4gIGlmIChlcnJvcikge1xuICAgIHRocm93IGVycm9yXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYgT3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uIGZvciBgc3RyaW5naWZ5YC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3BhZExlZnQ9dHJ1ZV1cbiAqICAgV2hldGhlciB0byBwYWQgYSBzcGFjZSBiZWZvcmUgYSB0b2tlbi5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3BhZFJpZ2h0PWZhbHNlXVxuICogICBXaGV0aGVyIHRvIHBhZCBhIHNwYWNlIGFmdGVyIGEgdG9rZW4uXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T3B0aW9uc30gU3RyaW5naWZ5T3B0aW9uc1xuICogICBQbGVhc2UgdXNlIGBTdHJpbmdpZnlPcHRpb25zYCBpbnN0ZWFkLlxuICovXG5cbi8qKlxuICogUGFyc2UgY29tbWEtc2VwYXJhdGVkIHRva2VucyB0byBhbiBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqICAgQ29tbWEtc2VwYXJhdGVkIHRva2Vucy5cbiAqIEByZXR1cm5zIHtBcnJheTxzdHJpbmc+fVxuICogICBMaXN0IG9mIHRva2Vucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKHZhbHVlKSB7XG4gIC8qKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn0gKi9cbiAgY29uc3QgdG9rZW5zID0gW11cbiAgY29uc3QgaW5wdXQgPSBTdHJpbmcodmFsdWUgfHwgJycpXG4gIGxldCBpbmRleCA9IGlucHV0LmluZGV4T2YoJywnKVxuICBsZXQgc3RhcnQgPSAwXG4gIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgbGV0IGVuZCA9IGZhbHNlXG5cbiAgd2hpbGUgKCFlbmQpIHtcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICBpbmRleCA9IGlucHV0Lmxlbmd0aFxuICAgICAgZW5kID0gdHJ1ZVxuICAgIH1cblxuICAgIGNvbnN0IHRva2VuID0gaW5wdXQuc2xpY2Uoc3RhcnQsIGluZGV4KS50cmltKClcblxuICAgIGlmICh0b2tlbiB8fCAhZW5kKSB7XG4gICAgICB0b2tlbnMucHVzaCh0b2tlbilcbiAgICB9XG5cbiAgICBzdGFydCA9IGluZGV4ICsgMVxuICAgIGluZGV4ID0gaW5wdXQuaW5kZXhPZignLCcsIHN0YXJ0KVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBzdHJpbmdzIG9yIG51bWJlcnMgdG8gY29tbWEtc2VwYXJhdGVkIHRva2Vucy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZ3xudW1iZXI+fSB2YWx1ZXNcbiAqICAgTGlzdCBvZiB0b2tlbnMuXG4gKiBAcGFyYW0ge09wdGlvbnN9IFtvcHRpb25zXVxuICogICBDb25maWd1cmF0aW9uIGZvciBgc3RyaW5naWZ5YCAob3B0aW9uYWwpLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgQ29tbWEtc2VwYXJhdGVkIHRva2Vucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeSh2YWx1ZXMsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc2V0dGluZ3MgPSBvcHRpb25zIHx8IHt9XG5cbiAgLy8gRW5zdXJlIHRoZSBsYXN0IGVtcHR5IGVudHJ5IGlzIHNlZW4uXG4gIGNvbnN0IGlucHV0ID0gdmFsdWVzW3ZhbHVlcy5sZW5ndGggLSAxXSA9PT0gJycgPyBbLi4udmFsdWVzLCAnJ10gOiB2YWx1ZXNcblxuICByZXR1cm4gaW5wdXRcbiAgICAuam9pbihcbiAgICAgIChzZXR0aW5ncy5wYWRSaWdodCA/ICcgJyA6ICcnKSArXG4gICAgICAgICcsJyArXG4gICAgICAgIChzZXR0aW5ncy5wYWRMZWZ0ID09PSBmYWxzZSA/ICcnIDogJyAnKVxuICAgIClcbiAgICAudHJpbSgpXG59XG4iLCIvLy8gPHJlZmVyZW5jZSBsaWI9XCJkb21cIiAvPlxuXG4vKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybnMge3N0cmluZ3xmYWxzZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZU5hbWVkQ2hhcmFjdGVyUmVmZXJlbmNlKHZhbHVlKSB7XG4gIGNvbnN0IGNoYXJhY3RlclJlZmVyZW5jZSA9ICcmJyArIHZhbHVlICsgJzsnXG4gIGVsZW1lbnQuaW5uZXJIVE1MID0gY2hhcmFjdGVyUmVmZXJlbmNlXG4gIGNvbnN0IGNoYXIgPSBlbGVtZW50LnRleHRDb250ZW50XG5cbiAgLy8gU29tZSBuYW1lZCBjaGFyYWN0ZXIgcmVmZXJlbmNlcyBkbyBub3QgcmVxdWlyZSB0aGUgY2xvc2luZyBzZW1pY29sb25cbiAgLy8gKGAmbm90YCwgZm9yIGluc3RhbmNlKSwgd2hpY2ggbGVhZHMgdG8gc2l0dWF0aW9ucyB3aGVyZSBwYXJzaW5nIHRoZSBhc3N1bWVkXG4gIC8vIG5hbWVkIHJlZmVyZW5jZSBvZiBgJm5vdGl0O2Agd2lsbCByZXN1bHQgaW4gdGhlIHN0cmluZyBgwqxpdDtgLlxuICAvLyBXaGVuIHdlIGVuY291bnRlciBhIHRyYWlsaW5nIHNlbWljb2xvbiBhZnRlciBwYXJzaW5nLCBhbmQgdGhlIGNoYXJhY3RlclxuICAvLyByZWZlcmVuY2UgdG8gZGVjb2RlIHdhcyBub3QgYSBzZW1pY29sb24gKGAmc2VtaTtgKSwgd2UgY2FuIGFzc3VtZSB0aGF0IHRoZVxuICAvLyBtYXRjaGluZyB3YXMgbm90IGNvbXBsZXRlLlxuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBUeXBlU2NyaXB0IGlzIHdyb25nIHRoYXQgYHRleHRDb250ZW50YCBvbiBlbGVtZW50cyBjYW5cbiAgLy8geWllbGQgYG51bGxgLlxuICBpZiAoY2hhci5jaGFyQ29kZUF0KGNoYXIubGVuZ3RoIC0gMSkgPT09IDU5IC8qIGA7YCAqLyAmJiB2YWx1ZSAhPT0gJ3NlbWknKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBJZiB0aGUgZGVjb2RlZCBzdHJpbmcgaXMgZXF1YWwgdG8gdGhlIGlucHV0LCB0aGUgY2hhcmFjdGVyIHJlZmVyZW5jZSB3YXNcbiAgLy8gbm90IHZhbGlkLlxuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBUeXBlU2NyaXB0IGlzIHdyb25nIHRoYXQgYHRleHRDb250ZW50YCBvbiBlbGVtZW50cyBjYW5cbiAgLy8geWllbGQgYG51bGxgLlxuICByZXR1cm4gY2hhciA9PT0gY2hhcmFjdGVyUmVmZXJlbmNlID8gZmFsc2UgOiBjaGFyXG59XG4iLCIvKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyAqaW50ZXItZWxlbWVudCB3aGl0ZXNwYWNlKi5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IHRoaW5nXG4gKiAgIFRoaW5nIHRvIGNoZWNrICh0eXBpY2FsbHkgYE5vZGVgIG9yIGBzdHJpbmdgKS5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogICBXaGV0aGVyIHRoZSBgdmFsdWVgIGlzIGludGVyLWVsZW1lbnQgd2hpdGVzcGFjZSAoYGJvb2xlYW5gKTogY29uc2lzdGluZyBvZlxuICogICB6ZXJvIG9yIG1vcmUgb2Ygc3BhY2UsIHRhYiAoYFxcdGApLCBsaW5lIGZlZWQgKGBcXG5gKSwgY2FycmlhZ2UgcmV0dXJuXG4gKiAgIChgXFxyYCksIG9yIGZvcm0gZmVlZCAoYFxcZmApLlxuICogICBJZiBhIG5vZGUgaXMgcGFzc2VkIGl0IG11c3QgYmUgYSBgVGV4dGAgbm9kZSwgd2hvc2UgYHZhbHVlYCBmaWVsZCBpc1xuICogICBjaGVja2VkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gd2hpdGVzcGFjZSh0aGluZykge1xuICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgY29uc3QgdmFsdWUgPVxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgbG9va3MgbGlrZSBhIG5vZGUuXG4gICAgdGhpbmcgJiYgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JyAmJiB0aGluZy50eXBlID09PSAndGV4dCdcbiAgICAgID8gLy8gQHRzLWV4cGVjdC1lcnJvciBsb29rcyBsaWtlIGEgdGV4dC5cbiAgICAgICAgdGhpbmcudmFsdWUgfHwgJydcbiAgICAgIDogdGhpbmdcblxuICAvLyBIVE1MIHdoaXRlc3BhY2UgZXhwcmVzc2lvbi5cbiAgLy8gU2VlIDxodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jYXNjaWktd2hpdGVzcGFjZT4uXG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLnJlcGxhY2UoL1sgXFx0XFxuXFxmXFxyXS9nLCAnJykgPT09ICcnXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuUm9vdH0gUm9vdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Db250ZW50fSBDb250ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkRlZmluaXRpb259IERlZmluaXRpb25cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtSb290IHwgQ29udGVudH0gTm9kZVxuICpcbiAqIEBjYWxsYmFjayBHZXREZWZpbml0aW9uXG4gKiAgIEdldCBhIGRlZmluaXRpb24gYnkgaWRlbnRpZmllci5cbiAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2lkZW50aWZpZXJdXG4gKiAgIElkZW50aWZpZXIgb2YgZGVmaW5pdGlvbi5cbiAqIEByZXR1cm5zIHtEZWZpbml0aW9uIHwgbnVsbH1cbiAqICAgRGVmaW5pdGlvbiBjb3JyZXNwb25kaW5nIHRvIGBpZGVudGlmaWVyYCBvciBgbnVsbGAuXG4gKi9cblxuaW1wb3J0IHt2aXNpdH0gZnJvbSAndW5pc3QtdXRpbC12aXNpdCdcblxuY29uc3Qgb3duID0ge30uaGFzT3duUHJvcGVydHlcblxuLyoqXG4gKiBGaW5kIGRlZmluaXRpb25zIGluIGB0cmVlYC5cbiAqXG4gKiBVc2VzIENvbW1vbk1hcmsgcHJlY2VkZW5jZSwgd2hpY2ggbWVhbnMgdGhhdCBlYXJsaWVyIGRlZmluaXRpb25zIGFyZVxuICogcHJlZmVycmVkIG92ZXIgZHVwbGljYXRlIGxhdGVyIGRlZmluaXRpb25zLlxuICpcbiAqIEBwYXJhbSB7Tm9kZX0gdHJlZVxuICogICBUcmVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge0dldERlZmluaXRpb259XG4gKiAgIEdldHRlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmluaXRpb25zKHRyZWUpIHtcbiAgLyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBEZWZpbml0aW9uPn0gKi9cbiAgY29uc3QgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpXG5cbiAgaWYgKCF0cmVlIHx8ICF0cmVlLnR5cGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21kYXN0LXV0aWwtZGVmaW5pdGlvbnMgZXhwZWN0ZWQgbm9kZScpXG4gIH1cblxuICB2aXNpdCh0cmVlLCAnZGVmaW5pdGlvbicsIChkZWZpbml0aW9uKSA9PiB7XG4gICAgY29uc3QgaWQgPSBjbGVhbihkZWZpbml0aW9uLmlkZW50aWZpZXIpXG4gICAgaWYgKGlkICYmICFvd24uY2FsbChjYWNoZSwgaWQpKSB7XG4gICAgICBjYWNoZVtpZF0gPSBkZWZpbml0aW9uXG4gICAgfVxuICB9KVxuXG4gIHJldHVybiBkZWZpbml0aW9uXG5cbiAgLyoqIEB0eXBlIHtHZXREZWZpbml0aW9ufSAqL1xuICBmdW5jdGlvbiBkZWZpbml0aW9uKGlkZW50aWZpZXIpIHtcbiAgICBjb25zdCBpZCA9IGNsZWFuKGlkZW50aWZpZXIpXG4gICAgLy8gVG8gZG86IG5leHQgbWFqb3I6IHJldHVybiBgdW5kZWZpbmVkYCB3aGVuIG5vdCBmb3VuZC5cbiAgICByZXR1cm4gaWQgJiYgb3duLmNhbGwoY2FjaGUsIGlkKSA/IGNhY2hlW2lkXSA6IG51bGxcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW3ZhbHVlXVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2xlYW4odmFsdWUpIHtcbiAgcmV0dXJuIFN0cmluZyh2YWx1ZSB8fCAnJykudG9VcHBlckNhc2UoKVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkVuY29kaW5nfSBFbmNvZGluZ1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5FdmVudH0gRXZlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuUGFyc2VPcHRpb25zfSBQYXJzZU9wdGlvbnNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW59IFRva2VuXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VuaXplQ29udGV4dH0gVG9rZW5pemVDb250ZXh0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlZhbHVlfSBWYWx1ZVxuICpcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuUGFyZW50fSBVbmlzdFBhcmVudFxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QnKS5Qb2ludH0gUG9pbnRcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlBocmFzaW5nQ29udGVudH0gUGhyYXNpbmdDb250ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlN0YXRpY1BocmFzaW5nQ29udGVudH0gU3RhdGljUGhyYXNpbmdDb250ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkNvbnRlbnR9IENvbnRlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuQnJlYWt9IEJyZWFrXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkJsb2NrcXVvdGV9IEJsb2NrcXVvdGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuQ29kZX0gQ29kZVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5EZWZpbml0aW9ufSBEZWZpbml0aW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkVtcGhhc2lzfSBFbXBoYXNpc1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5IZWFkaW5nfSBIZWFkaW5nXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkhUTUx9IEhUTUxcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuSW1hZ2V9IEltYWdlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkltYWdlUmVmZXJlbmNlfSBJbWFnZVJlZmVyZW5jZVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5JbmxpbmVDb2RlfSBJbmxpbmVDb2RlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkxpbmt9IExpbmtcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuTGlua1JlZmVyZW5jZX0gTGlua1JlZmVyZW5jZVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5MaXN0fSBMaXN0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkxpc3RJdGVtfSBMaXN0SXRlbVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5QYXJhZ3JhcGh9IFBhcmFncmFwaFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Sb290fSBSb290XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlN0cm9uZ30gU3Ryb25nXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlRleHR9IFRleHRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuVGhlbWF0aWNCcmVha30gVGhlbWF0aWNCcmVha1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5SZWZlcmVuY2VUeXBlfSBSZWZlcmVuY2VUeXBlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9pbmRleC5qcycpLkNvbXBpbGVEYXRhfSBDb21waWxlRGF0YVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge1Jvb3QgfCBDb250ZW50fSBOb2RlXG4gKiBAdHlwZWRlZiB7RXh0cmFjdDxOb2RlLCBVbmlzdFBhcmVudD59IFBhcmVudFxuICpcbiAqIEB0eXBlZGVmIHtPbWl0PFVuaXN0UGFyZW50LCAndHlwZScgfCAnY2hpbGRyZW4nPiAmIHt0eXBlOiAnZnJhZ21lbnQnLCBjaGlsZHJlbjogQXJyYXk8UGhyYXNpbmdDb250ZW50Pn19IEZyYWdtZW50XG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgVHJhbnNmb3JtXG4gKiAgIEV4dHJhIHRyYW5zZm9ybSwgdG8gY2hhbmdlIHRoZSBBU1QgYWZ0ZXJ3YXJkcy5cbiAqIEBwYXJhbSB7Um9vdH0gdHJlZVxuICogICBUcmVlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtSb290IHwgdW5kZWZpbmVkIHwgbnVsbCB8IHZvaWR9XG4gKiAgIE5ldyB0cmVlIG9yIG5vdGhpbmcgKGluIHdoaWNoIGNhc2UgdGhlIGN1cnJlbnQgdHJlZSBpcyB1c2VkKS5cbiAqXG4gKiBAY2FsbGJhY2sgSGFuZGxlXG4gKiAgIEhhbmRsZSBhIHRva2VuLlxuICogQHBhcmFtIHtDb21waWxlQ29udGV4dH0gdGhpc1xuICogICBDb250ZXh0LlxuICogQHBhcmFtIHtUb2tlbn0gdG9rZW5cbiAqICAgQ3VycmVudCB0b2tlbi5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICogICBOb3RoaW5nLlxuICpcbiAqIEB0eXBlZGVmIHtSZWNvcmQ8c3RyaW5nLCBIYW5kbGU+fSBIYW5kbGVzXG4gKiAgIFRva2VuIHR5cGVzIG1hcHBpbmcgdG8gaGFuZGxlc1xuICpcbiAqIEBjYWxsYmFjayBPbkVudGVyRXJyb3JcbiAqICAgSGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSBgcmlnaHRgIHRva2VuIGlzIG9wZW4sIGJ1dCBpdCBpcyBjbG9zZWQgKGJ5IHRoZVxuICogICBgbGVmdGAgdG9rZW4pIG9yIGJlY2F1c2Ugd2UgcmVhY2hlZCB0aGUgZW5kIG9mIHRoZSBkb2N1bWVudC5cbiAqIEBwYXJhbSB7T21pdDxDb21waWxlQ29udGV4dCwgJ3NsaWNlU2VyaWFsaXplJz59IHRoaXNcbiAqICAgQ29udGV4dC5cbiAqIEBwYXJhbSB7VG9rZW4gfCB1bmRlZmluZWR9IGxlZnRcbiAqICAgTGVmdCB0b2tlbi5cbiAqIEBwYXJhbSB7VG9rZW59IHJpZ2h0XG4gKiAgIFJpZ2h0IHRva2VuLlxuICogQHJldHVybnMge3ZvaWR9XG4gKiAgIE5vdGhpbmcuXG4gKlxuICogQGNhbGxiYWNrIE9uRXhpdEVycm9yXG4gKiAgIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgYHJpZ2h0YCB0b2tlbiBpcyBvcGVuIGJ1dCBpdCBpcyBjbG9zZWQgYnlcbiAqICAgZXhpdGluZyB0aGUgYGxlZnRgIHRva2VuLlxuICogQHBhcmFtIHtPbWl0PENvbXBpbGVDb250ZXh0LCAnc2xpY2VTZXJpYWxpemUnPn0gdGhpc1xuICogICBDb250ZXh0LlxuICogQHBhcmFtIHtUb2tlbn0gbGVmdFxuICogICBMZWZ0IHRva2VuLlxuICogQHBhcmFtIHtUb2tlbn0gcmlnaHRcbiAqICAgUmlnaHQgdG9rZW4uXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqICAgTm90aGluZy5cbiAqXG4gKiBAdHlwZWRlZiB7W1Rva2VuLCBPbkVudGVyRXJyb3IgfCB1bmRlZmluZWRdfSBUb2tlblR1cGxlXG4gKiAgIE9wZW4gdG9rZW4gb24gdGhlIHN0YWNrLCB3aXRoIGFuIG9wdGlvbmFsIGVycm9yIGhhbmRsZXIgZm9yIHdoZW5cbiAqICAgdGhhdCB0b2tlbiBpc27igJl0IGNsb3NlZCBwcm9wZXJseS5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIENvbmZpZ1xuICogICBDb25maWd1cmF0aW9uLlxuICpcbiAqICAgV2UgaGF2ZSBvdXIgZGVmYXVsdHMsIGJ1dCBleHRlbnNpb25zIHdpbGwgYWRkIG1vcmUuXG4gKiBAcHJvcGVydHkge0FycmF5PHN0cmluZz59IGNhbkNvbnRhaW5Fb2xzXG4gKiAgIFRva2VuIHR5cGVzIHdoZXJlIGxpbmUgZW5kaW5ncyBhcmUgdXNlZC5cbiAqIEBwcm9wZXJ0eSB7SGFuZGxlc30gZW50ZXJcbiAqICAgT3BlbmluZyBoYW5kbGVzLlxuICogQHByb3BlcnR5IHtIYW5kbGVzfSBleGl0XG4gKiAgIENsb3NpbmcgaGFuZGxlcy5cbiAqIEBwcm9wZXJ0eSB7QXJyYXk8VHJhbnNmb3JtPn0gdHJhbnNmb3Jtc1xuICogICBUcmVlIHRyYW5zZm9ybXMuXG4gKlxuICogQHR5cGVkZWYge1BhcnRpYWw8Q29uZmlnPn0gRXh0ZW5zaW9uXG4gKiAgIENoYW5nZSBob3cgbWFya2Rvd24gdG9rZW5zIGZyb20gbWljcm9tYXJrIGFyZSB0dXJuZWQgaW50byBtZGFzdC5cbiAqXG4gKiBAdHlwZWRlZiBDb21waWxlQ29udGV4dFxuICogICBtZGFzdCBjb21waWxlciBjb250ZXh0LlxuICogQHByb3BlcnR5IHtBcnJheTxOb2RlIHwgRnJhZ21lbnQ+fSBzdGFja1xuICogICBTdGFjayBvZiBub2Rlcy5cbiAqIEBwcm9wZXJ0eSB7QXJyYXk8VG9rZW5UdXBsZT59IHRva2VuU3RhY2tcbiAqICAgU3RhY2sgb2YgdG9rZW5zLlxuICogQHByb3BlcnR5IHs8S2V5IGV4dGVuZHMga2V5b2YgQ29tcGlsZURhdGE+KGtleTogS2V5KSA9PiBDb21waWxlRGF0YVtLZXldfSBnZXREYXRhXG4gKiAgIEdldCBkYXRhIGZyb20gdGhlIGtleS92YWx1ZSBzdG9yZS5cbiAqIEBwcm9wZXJ0eSB7PEtleSBleHRlbmRzIGtleW9mIENvbXBpbGVEYXRhPihrZXk6IEtleSwgdmFsdWU/OiBDb21waWxlRGF0YVtLZXldKSA9PiB2b2lkfSBzZXREYXRhXG4gKiAgIFNldCBkYXRhIGludG8gdGhlIGtleS92YWx1ZSBzdG9yZS5cbiAqIEBwcm9wZXJ0eSB7KHRoaXM6IENvbXBpbGVDb250ZXh0KSA9PiB2b2lkfSBidWZmZXJcbiAqICAgQ2FwdHVyZSBzb21lIG9mIHRoZSBvdXRwdXQgZGF0YS5cbiAqIEBwcm9wZXJ0eSB7KHRoaXM6IENvbXBpbGVDb250ZXh0KSA9PiBzdHJpbmd9IHJlc3VtZVxuICogICBTdG9wIGNhcHR1cmluZyBhbmQgYWNjZXNzIHRoZSBvdXRwdXQgZGF0YS5cbiAqIEBwcm9wZXJ0eSB7PEtpbmQgZXh0ZW5kcyBOb2RlPih0aGlzOiBDb21waWxlQ29udGV4dCwgbm9kZTogS2luZCwgdG9rZW46IFRva2VuLCBvbkVycm9yPzogT25FbnRlckVycm9yKSA9PiBLaW5kfSBlbnRlclxuICogICBFbnRlciBhIHRva2VuLlxuICogQHByb3BlcnR5IHsodGhpczogQ29tcGlsZUNvbnRleHQsIHRva2VuOiBUb2tlbiwgb25FcnJvcj86IE9uRXhpdEVycm9yKSA9PiBOb2RlfSBleGl0XG4gKiAgIEV4aXQgYSB0b2tlbi5cbiAqIEBwcm9wZXJ0eSB7VG9rZW5pemVDb250ZXh0WydzbGljZVNlcmlhbGl6ZSddfSBzbGljZVNlcmlhbGl6ZVxuICogICBHZXQgdGhlIHN0cmluZyB2YWx1ZSBvZiBhIHRva2VuLlxuICogQHByb3BlcnR5IHtDb25maWd9IGNvbmZpZ1xuICogICBDb25maWd1cmF0aW9uLlxuICpcbiAqIEB0eXBlZGVmIEZyb21NYXJrZG93bk9wdGlvbnNcbiAqICAgQ29uZmlndXJhdGlvbiBmb3IgaG93IHRvIGJ1aWxkIG1kYXN0LlxuICogQHByb3BlcnR5IHtBcnJheTxFeHRlbnNpb24gfCBBcnJheTxFeHRlbnNpb24+PiB8IG51bGwgfCB1bmRlZmluZWR9IFttZGFzdEV4dGVuc2lvbnNdXG4gKiAgIEV4dGVuc2lvbnMgZm9yIHRoaXMgdXRpbGl0eSB0byBjaGFuZ2UgaG93IHRva2VucyBhcmUgdHVybmVkIGludG8gYSB0cmVlLlxuICpcbiAqIEB0eXBlZGVmIHtQYXJzZU9wdGlvbnMgJiBGcm9tTWFya2Rvd25PcHRpb25zfSBPcHRpb25zXG4gKiAgIENvbmZpZ3VyYXRpb24uXG4gKi9cblxuLy8gVG8gZG86IG1pY3JvbWFyazogY3JlYXRlIGEgcmVnaXN0cnkgb2YgdG9rZW5zP1xuLy8gVG8gZG86IG5leHQgbWFqb3I6IGRvbuKAmXQgcmV0dXJuIGdpdmVuIGBOb2RlYCBmcm9tIGBlbnRlcmAuXG4vLyBUbyBkbzogbmV4dCBtYWpvcjogcmVtb3ZlIHNldHRlci9nZXR0ZXIuXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICd1dnUvYXNzZXJ0J1xuaW1wb3J0IHt0b1N0cmluZ30gZnJvbSAnbWRhc3QtdXRpbC10by1zdHJpbmcnXG5pbXBvcnQge3BhcnNlfSBmcm9tICdtaWNyb21hcmsvbGliL3BhcnNlLmpzJ1xuaW1wb3J0IHtwcmVwcm9jZXNzfSBmcm9tICdtaWNyb21hcmsvbGliL3ByZXByb2Nlc3MuanMnXG5pbXBvcnQge3Bvc3Rwcm9jZXNzfSBmcm9tICdtaWNyb21hcmsvbGliL3Bvc3Rwcm9jZXNzLmpzJ1xuaW1wb3J0IHtkZWNvZGVOdW1lcmljQ2hhcmFjdGVyUmVmZXJlbmNlfSBmcm9tICdtaWNyb21hcmstdXRpbC1kZWNvZGUtbnVtZXJpYy1jaGFyYWN0ZXItcmVmZXJlbmNlJ1xuaW1wb3J0IHtkZWNvZGVTdHJpbmd9IGZyb20gJ21pY3JvbWFyay11dGlsLWRlY29kZS1zdHJpbmcnXG5pbXBvcnQge25vcm1hbGl6ZUlkZW50aWZpZXJ9IGZyb20gJ21pY3JvbWFyay11dGlsLW5vcm1hbGl6ZS1pZGVudGlmaWVyJ1xuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvZGVzLmpzJ1xuaW1wb3J0IHtjb25zdGFudHN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb25zdGFudHMuanMnXG5pbXBvcnQge3R5cGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvdHlwZXMuanMnXG5pbXBvcnQge2RlY29kZU5hbWVkQ2hhcmFjdGVyUmVmZXJlbmNlfSBmcm9tICdkZWNvZGUtbmFtZWQtY2hhcmFjdGVyLXJlZmVyZW5jZSdcbmltcG9ydCB7c3RyaW5naWZ5UG9zaXRpb259IGZyb20gJ3VuaXN0LXV0aWwtc3RyaW5naWZ5LXBvc2l0aW9uJ1xuXG5jb25zdCBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eVxuXG4vKipcbiAqIEBwYXJhbSB2YWx1ZVxuICogICBNYXJrZG93biB0byBwYXJzZS5cbiAqIEBwYXJhbSBlbmNvZGluZ1xuICogICBDaGFyYWN0ZXIgZW5jb2RpbmcgZm9yIHdoZW4gYHZhbHVlYCBpcyBgQnVmZmVyYC5cbiAqIEBwYXJhbSBvcHRpb25zXG4gKiAgIENvbmZpZ3VyYXRpb24uXG4gKiBAcmV0dXJuc1xuICogICBtZGFzdCB0cmVlLlxuICovXG5leHBvcnQgY29uc3QgZnJvbU1hcmtkb3duID1cbiAgLyoqXG4gICAqIEB0eXBlIHsoXG4gICAqICAgKCh2YWx1ZTogVmFsdWUsIGVuY29kaW5nOiBFbmNvZGluZywgb3B0aW9ucz86IE9wdGlvbnMgfCBudWxsIHwgdW5kZWZpbmVkKSA9PiBSb290KSAmXG4gICAqICAgKCh2YWx1ZTogVmFsdWUsIG9wdGlvbnM/OiBPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4gUm9vdClcbiAgICogKX1cbiAgICovXG4gIChcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1ZhbHVlfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7RW5jb2RpbmcgfCBPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2VuY29kaW5nXVxuICAgICAqIEBwYXJhbSB7T3B0aW9ucyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRpb25zXVxuICAgICAqIEByZXR1cm5zIHtSb290fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmcsIG9wdGlvbnMpIHtcbiAgICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG9wdGlvbnMgPSBlbmNvZGluZ1xuICAgICAgICBlbmNvZGluZyA9IHVuZGVmaW5lZFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29tcGlsZXIob3B0aW9ucykoXG4gICAgICAgIHBvc3Rwcm9jZXNzKFxuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IG1pY3JvbWFyayB0eXBlcyBuZWVkIHRvIGFjY2VwdCBgbnVsbGAuXG4gICAgICAgICAgcGFyc2Uob3B0aW9ucykuZG9jdW1lbnQoKS53cml0ZShwcmVwcm9jZXNzKCkodmFsdWUsIGVuY29kaW5nLCB0cnVlKSlcbiAgICAgICAgKVxuICAgICAgKVxuICAgIH1cbiAgKVxuXG4vKipcbiAqIE5vdGUgdGhpcyBjb21waWxlciBvbmx5IHVuZGVyc3RhbmQgY29tcGxldGUgYnVmZmVyaW5nLCBub3Qgc3RyZWFtaW5nLlxuICpcbiAqIEBwYXJhbSB7T3B0aW9ucyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRpb25zXVxuICovXG5mdW5jdGlvbiBjb21waWxlcihvcHRpb25zKSB7XG4gIC8qKiBAdHlwZSB7Q29uZmlnfSAqL1xuICBjb25zdCBjb25maWcgPSB7XG4gICAgdHJhbnNmb3JtczogW10sXG4gICAgY2FuQ29udGFpbkVvbHM6IFsnZW1waGFzaXMnLCAnZnJhZ21lbnQnLCAnaGVhZGluZycsICdwYXJhZ3JhcGgnLCAnc3Ryb25nJ10sXG4gICAgZW50ZXI6IHtcbiAgICAgIGF1dG9saW5rOiBvcGVuZXIobGluayksXG4gICAgICBhdXRvbGlua1Byb3RvY29sOiBvbmVudGVyZGF0YSxcbiAgICAgIGF1dG9saW5rRW1haWw6IG9uZW50ZXJkYXRhLFxuICAgICAgYXR4SGVhZGluZzogb3BlbmVyKGhlYWRpbmcpLFxuICAgICAgYmxvY2tRdW90ZTogb3BlbmVyKGJsb2NrUXVvdGUpLFxuICAgICAgY2hhcmFjdGVyRXNjYXBlOiBvbmVudGVyZGF0YSxcbiAgICAgIGNoYXJhY3RlclJlZmVyZW5jZTogb25lbnRlcmRhdGEsXG4gICAgICBjb2RlRmVuY2VkOiBvcGVuZXIoY29kZUZsb3cpLFxuICAgICAgY29kZUZlbmNlZEZlbmNlSW5mbzogYnVmZmVyLFxuICAgICAgY29kZUZlbmNlZEZlbmNlTWV0YTogYnVmZmVyLFxuICAgICAgY29kZUluZGVudGVkOiBvcGVuZXIoY29kZUZsb3csIGJ1ZmZlciksXG4gICAgICBjb2RlVGV4dDogb3BlbmVyKGNvZGVUZXh0LCBidWZmZXIpLFxuICAgICAgY29kZVRleHREYXRhOiBvbmVudGVyZGF0YSxcbiAgICAgIGRhdGE6IG9uZW50ZXJkYXRhLFxuICAgICAgY29kZUZsb3dWYWx1ZTogb25lbnRlcmRhdGEsXG4gICAgICBkZWZpbml0aW9uOiBvcGVuZXIoZGVmaW5pdGlvbiksXG4gICAgICBkZWZpbml0aW9uRGVzdGluYXRpb25TdHJpbmc6IGJ1ZmZlcixcbiAgICAgIGRlZmluaXRpb25MYWJlbFN0cmluZzogYnVmZmVyLFxuICAgICAgZGVmaW5pdGlvblRpdGxlU3RyaW5nOiBidWZmZXIsXG4gICAgICBlbXBoYXNpczogb3BlbmVyKGVtcGhhc2lzKSxcbiAgICAgIGhhcmRCcmVha0VzY2FwZTogb3BlbmVyKGhhcmRCcmVhayksXG4gICAgICBoYXJkQnJlYWtUcmFpbGluZzogb3BlbmVyKGhhcmRCcmVhayksXG4gICAgICBodG1sRmxvdzogb3BlbmVyKGh0bWwsIGJ1ZmZlciksXG4gICAgICBodG1sRmxvd0RhdGE6IG9uZW50ZXJkYXRhLFxuICAgICAgaHRtbFRleHQ6IG9wZW5lcihodG1sLCBidWZmZXIpLFxuICAgICAgaHRtbFRleHREYXRhOiBvbmVudGVyZGF0YSxcbiAgICAgIGltYWdlOiBvcGVuZXIoaW1hZ2UpLFxuICAgICAgbGFiZWw6IGJ1ZmZlcixcbiAgICAgIGxpbms6IG9wZW5lcihsaW5rKSxcbiAgICAgIGxpc3RJdGVtOiBvcGVuZXIobGlzdEl0ZW0pLFxuICAgICAgbGlzdEl0ZW1WYWx1ZTogb25lbnRlcmxpc3RpdGVtdmFsdWUsXG4gICAgICBsaXN0T3JkZXJlZDogb3BlbmVyKGxpc3QsIG9uZW50ZXJsaXN0b3JkZXJlZCksXG4gICAgICBsaXN0VW5vcmRlcmVkOiBvcGVuZXIobGlzdCksXG4gICAgICBwYXJhZ3JhcGg6IG9wZW5lcihwYXJhZ3JhcGgpLFxuICAgICAgcmVmZXJlbmNlOiBvbmVudGVycmVmZXJlbmNlLFxuICAgICAgcmVmZXJlbmNlU3RyaW5nOiBidWZmZXIsXG4gICAgICByZXNvdXJjZURlc3RpbmF0aW9uU3RyaW5nOiBidWZmZXIsXG4gICAgICByZXNvdXJjZVRpdGxlU3RyaW5nOiBidWZmZXIsXG4gICAgICBzZXRleHRIZWFkaW5nOiBvcGVuZXIoaGVhZGluZyksXG4gICAgICBzdHJvbmc6IG9wZW5lcihzdHJvbmcpLFxuICAgICAgdGhlbWF0aWNCcmVhazogb3BlbmVyKHRoZW1hdGljQnJlYWspXG4gICAgfSxcbiAgICBleGl0OiB7XG4gICAgICBhdHhIZWFkaW5nOiBjbG9zZXIoKSxcbiAgICAgIGF0eEhlYWRpbmdTZXF1ZW5jZTogb25leGl0YXR4aGVhZGluZ3NlcXVlbmNlLFxuICAgICAgYXV0b2xpbms6IGNsb3NlcigpLFxuICAgICAgYXV0b2xpbmtFbWFpbDogb25leGl0YXV0b2xpbmtlbWFpbCxcbiAgICAgIGF1dG9saW5rUHJvdG9jb2w6IG9uZXhpdGF1dG9saW5rcHJvdG9jb2wsXG4gICAgICBibG9ja1F1b3RlOiBjbG9zZXIoKSxcbiAgICAgIGNoYXJhY3RlckVzY2FwZVZhbHVlOiBvbmV4aXRkYXRhLFxuICAgICAgY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VySGV4YWRlY2ltYWw6IG9uZXhpdGNoYXJhY3RlcnJlZmVyZW5jZW1hcmtlcixcbiAgICAgIGNoYXJhY3RlclJlZmVyZW5jZU1hcmtlck51bWVyaWM6IG9uZXhpdGNoYXJhY3RlcnJlZmVyZW5jZW1hcmtlcixcbiAgICAgIGNoYXJhY3RlclJlZmVyZW5jZVZhbHVlOiBvbmV4aXRjaGFyYWN0ZXJyZWZlcmVuY2V2YWx1ZSxcbiAgICAgIGNvZGVGZW5jZWQ6IGNsb3NlcihvbmV4aXRjb2RlZmVuY2VkKSxcbiAgICAgIGNvZGVGZW5jZWRGZW5jZTogb25leGl0Y29kZWZlbmNlZGZlbmNlLFxuICAgICAgY29kZUZlbmNlZEZlbmNlSW5mbzogb25leGl0Y29kZWZlbmNlZGZlbmNlaW5mbyxcbiAgICAgIGNvZGVGZW5jZWRGZW5jZU1ldGE6IG9uZXhpdGNvZGVmZW5jZWRmZW5jZW1ldGEsXG4gICAgICBjb2RlRmxvd1ZhbHVlOiBvbmV4aXRkYXRhLFxuICAgICAgY29kZUluZGVudGVkOiBjbG9zZXIob25leGl0Y29kZWluZGVudGVkKSxcbiAgICAgIGNvZGVUZXh0OiBjbG9zZXIob25leGl0Y29kZXRleHQpLFxuICAgICAgY29kZVRleHREYXRhOiBvbmV4aXRkYXRhLFxuICAgICAgZGF0YTogb25leGl0ZGF0YSxcbiAgICAgIGRlZmluaXRpb246IGNsb3NlcigpLFxuICAgICAgZGVmaW5pdGlvbkRlc3RpbmF0aW9uU3RyaW5nOiBvbmV4aXRkZWZpbml0aW9uZGVzdGluYXRpb25zdHJpbmcsXG4gICAgICBkZWZpbml0aW9uTGFiZWxTdHJpbmc6IG9uZXhpdGRlZmluaXRpb25sYWJlbHN0cmluZyxcbiAgICAgIGRlZmluaXRpb25UaXRsZVN0cmluZzogb25leGl0ZGVmaW5pdGlvbnRpdGxlc3RyaW5nLFxuICAgICAgZW1waGFzaXM6IGNsb3NlcigpLFxuICAgICAgaGFyZEJyZWFrRXNjYXBlOiBjbG9zZXIob25leGl0aGFyZGJyZWFrKSxcbiAgICAgIGhhcmRCcmVha1RyYWlsaW5nOiBjbG9zZXIob25leGl0aGFyZGJyZWFrKSxcbiAgICAgIGh0bWxGbG93OiBjbG9zZXIob25leGl0aHRtbGZsb3cpLFxuICAgICAgaHRtbEZsb3dEYXRhOiBvbmV4aXRkYXRhLFxuICAgICAgaHRtbFRleHQ6IGNsb3NlcihvbmV4aXRodG1sdGV4dCksXG4gICAgICBodG1sVGV4dERhdGE6IG9uZXhpdGRhdGEsXG4gICAgICBpbWFnZTogY2xvc2VyKG9uZXhpdGltYWdlKSxcbiAgICAgIGxhYmVsOiBvbmV4aXRsYWJlbCxcbiAgICAgIGxhYmVsVGV4dDogb25leGl0bGFiZWx0ZXh0LFxuICAgICAgbGluZUVuZGluZzogb25leGl0bGluZWVuZGluZyxcbiAgICAgIGxpbms6IGNsb3NlcihvbmV4aXRsaW5rKSxcbiAgICAgIGxpc3RJdGVtOiBjbG9zZXIoKSxcbiAgICAgIGxpc3RPcmRlcmVkOiBjbG9zZXIoKSxcbiAgICAgIGxpc3RVbm9yZGVyZWQ6IGNsb3NlcigpLFxuICAgICAgcGFyYWdyYXBoOiBjbG9zZXIoKSxcbiAgICAgIHJlZmVyZW5jZVN0cmluZzogb25leGl0cmVmZXJlbmNlc3RyaW5nLFxuICAgICAgcmVzb3VyY2VEZXN0aW5hdGlvblN0cmluZzogb25leGl0cmVzb3VyY2VkZXN0aW5hdGlvbnN0cmluZyxcbiAgICAgIHJlc291cmNlVGl0bGVTdHJpbmc6IG9uZXhpdHJlc291cmNldGl0bGVzdHJpbmcsXG4gICAgICByZXNvdXJjZTogb25leGl0cmVzb3VyY2UsXG4gICAgICBzZXRleHRIZWFkaW5nOiBjbG9zZXIob25leGl0c2V0ZXh0aGVhZGluZyksXG4gICAgICBzZXRleHRIZWFkaW5nTGluZVNlcXVlbmNlOiBvbmV4aXRzZXRleHRoZWFkaW5nbGluZXNlcXVlbmNlLFxuICAgICAgc2V0ZXh0SGVhZGluZ1RleHQ6IG9uZXhpdHNldGV4dGhlYWRpbmd0ZXh0LFxuICAgICAgc3Ryb25nOiBjbG9zZXIoKSxcbiAgICAgIHRoZW1hdGljQnJlYWs6IGNsb3NlcigpXG4gICAgfVxuICB9XG5cbiAgY29uZmlndXJlKGNvbmZpZywgKG9wdGlvbnMgfHwge30pLm1kYXN0RXh0ZW5zaW9ucyB8fCBbXSlcblxuICAvKiogQHR5cGUge0NvbXBpbGVEYXRhfSAqL1xuICBjb25zdCBkYXRhID0ge31cblxuICByZXR1cm4gY29tcGlsZVxuXG4gIC8qKlxuICAgKiBUdXJuIG1pY3JvbWFyayBldmVudHMgaW50byBhbiBtZGFzdCB0cmVlLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5PEV2ZW50Pn0gZXZlbnRzXG4gICAqICAgRXZlbnRzLlxuICAgKiBAcmV0dXJucyB7Um9vdH1cbiAgICogICBtZGFzdCB0cmVlLlxuICAgKi9cbiAgZnVuY3Rpb24gY29tcGlsZShldmVudHMpIHtcbiAgICAvKiogQHR5cGUge1Jvb3R9ICovXG4gICAgbGV0IHRyZWUgPSB7dHlwZTogJ3Jvb3QnLCBjaGlsZHJlbjogW119XG4gICAgLyoqIEB0eXBlIHtPbWl0PENvbXBpbGVDb250ZXh0LCAnc2xpY2VTZXJpYWxpemUnPn0gKi9cbiAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgc3RhY2s6IFt0cmVlXSxcbiAgICAgIHRva2VuU3RhY2s6IFtdLFxuICAgICAgY29uZmlnLFxuICAgICAgZW50ZXIsXG4gICAgICBleGl0LFxuICAgICAgYnVmZmVyLFxuICAgICAgcmVzdW1lLFxuICAgICAgc2V0RGF0YSxcbiAgICAgIGdldERhdGFcbiAgICB9XG4gICAgLyoqIEB0eXBlIHtBcnJheTxudW1iZXI+fSAqL1xuICAgIGNvbnN0IGxpc3RTdGFjayA9IFtdXG4gICAgbGV0IGluZGV4ID0gLTFcblxuICAgIHdoaWxlICgrK2luZGV4IDwgZXZlbnRzLmxlbmd0aCkge1xuICAgICAgLy8gV2UgcHJlcHJvY2VzcyBsaXN0cyB0byBhZGQgYGxpc3RJdGVtYCB0b2tlbnMsIGFuZCB0byBpbmZlciB3aGV0aGVyXG4gICAgICAvLyBpdGVtcyB0aGUgbGlzdCBpdHNlbGYgYXJlIHNwcmVhZCBvdXQuXG4gICAgICBpZiAoXG4gICAgICAgIGV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gdHlwZXMubGlzdE9yZGVyZWQgfHxcbiAgICAgICAgZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSB0eXBlcy5saXN0VW5vcmRlcmVkXG4gICAgICApIHtcbiAgICAgICAgaWYgKGV2ZW50c1tpbmRleF1bMF0gPT09ICdlbnRlcicpIHtcbiAgICAgICAgICBsaXN0U3RhY2sucHVzaChpbmRleClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB0YWlsID0gbGlzdFN0YWNrLnBvcCgpXG4gICAgICAgICAgYXNzZXJ0KHR5cGVvZiB0YWlsID09PSAnbnVtYmVyJywgJ2V4cGVjdGVkIGxpc3Qgb3QgYmUgb3BlbicpXG4gICAgICAgICAgaW5kZXggPSBwcmVwYXJlTGlzdChldmVudHMsIHRhaWwsIGluZGV4KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW5kZXggPSAtMVxuXG4gICAgd2hpbGUgKCsraW5kZXggPCBldmVudHMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBoYW5kbGVyID0gY29uZmlnW2V2ZW50c1tpbmRleF1bMF1dXG5cbiAgICAgIGlmIChvd24uY2FsbChoYW5kbGVyLCBldmVudHNbaW5kZXhdWzFdLnR5cGUpKSB7XG4gICAgICAgIGhhbmRsZXJbZXZlbnRzW2luZGV4XVsxXS50eXBlXS5jYWxsKFxuICAgICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICB7c2xpY2VTZXJpYWxpemU6IGV2ZW50c1tpbmRleF1bMl0uc2xpY2VTZXJpYWxpemV9LFxuICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICksXG4gICAgICAgICAgZXZlbnRzW2luZGV4XVsxXVxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHRva2VucyBzdGlsbCBiZWluZyBvcGVuLlxuICAgIGlmIChjb250ZXh0LnRva2VuU3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgdGFpbCA9IGNvbnRleHQudG9rZW5TdGFja1tjb250ZXh0LnRva2VuU3RhY2subGVuZ3RoIC0gMV1cbiAgICAgIGNvbnN0IGhhbmRsZXIgPSB0YWlsWzFdIHx8IGRlZmF1bHRPbkVycm9yXG4gICAgICBoYW5kbGVyLmNhbGwoY29udGV4dCwgdW5kZWZpbmVkLCB0YWlsWzBdKVxuICAgIH1cblxuICAgIC8vIEZpZ3VyZSBvdXQgYHJvb3RgIHBvc2l0aW9uLlxuICAgIHRyZWUucG9zaXRpb24gPSB7XG4gICAgICBzdGFydDogcG9pbnQoXG4gICAgICAgIGV2ZW50cy5sZW5ndGggPiAwID8gZXZlbnRzWzBdWzFdLnN0YXJ0IDoge2xpbmU6IDEsIGNvbHVtbjogMSwgb2Zmc2V0OiAwfVxuICAgICAgKSxcbiAgICAgIGVuZDogcG9pbnQoXG4gICAgICAgIGV2ZW50cy5sZW5ndGggPiAwXG4gICAgICAgICAgPyBldmVudHNbZXZlbnRzLmxlbmd0aCAtIDJdWzFdLmVuZFxuICAgICAgICAgIDoge2xpbmU6IDEsIGNvbHVtbjogMSwgb2Zmc2V0OiAwfVxuICAgICAgKVxuICAgIH1cblxuICAgIC8vIENhbGwgdHJhbnNmb3Jtcy5cbiAgICBpbmRleCA9IC0xXG4gICAgd2hpbGUgKCsraW5kZXggPCBjb25maWcudHJhbnNmb3Jtcy5sZW5ndGgpIHtcbiAgICAgIHRyZWUgPSBjb25maWcudHJhbnNmb3Jtc1tpbmRleF0odHJlZSkgfHwgdHJlZVxuICAgIH1cblxuICAgIHJldHVybiB0cmVlXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtBcnJheTxFdmVudD59IGV2ZW50c1xuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgZnVuY3Rpb24gcHJlcGFyZUxpc3QoZXZlbnRzLCBzdGFydCwgbGVuZ3RoKSB7XG4gICAgbGV0IGluZGV4ID0gc3RhcnQgLSAxXG4gICAgbGV0IGNvbnRhaW5lckJhbGFuY2UgPSAtMVxuICAgIGxldCBsaXN0U3ByZWFkID0gZmFsc2VcbiAgICAvKiogQHR5cGUge1Rva2VuIHwgdW5kZWZpbmVkfSAqL1xuICAgIGxldCBsaXN0SXRlbVxuICAgIC8qKiBAdHlwZSB7bnVtYmVyIHwgdW5kZWZpbmVkfSAqL1xuICAgIGxldCBsaW5lSW5kZXhcbiAgICAvKiogQHR5cGUge251bWJlciB8IHVuZGVmaW5lZH0gKi9cbiAgICBsZXQgZmlyc3RCbGFua0xpbmVJbmRleFxuICAgIC8qKiBAdHlwZSB7Ym9vbGVhbiB8IHVuZGVmaW5lZH0gKi9cbiAgICBsZXQgYXRNYXJrZXJcblxuICAgIHdoaWxlICgrK2luZGV4IDw9IGxlbmd0aCkge1xuICAgICAgY29uc3QgZXZlbnQgPSBldmVudHNbaW5kZXhdXG5cbiAgICAgIGlmIChcbiAgICAgICAgZXZlbnRbMV0udHlwZSA9PT0gdHlwZXMubGlzdFVub3JkZXJlZCB8fFxuICAgICAgICBldmVudFsxXS50eXBlID09PSB0eXBlcy5saXN0T3JkZXJlZCB8fFxuICAgICAgICBldmVudFsxXS50eXBlID09PSB0eXBlcy5ibG9ja1F1b3RlXG4gICAgICApIHtcbiAgICAgICAgaWYgKGV2ZW50WzBdID09PSAnZW50ZXInKSB7XG4gICAgICAgICAgY29udGFpbmVyQmFsYW5jZSsrXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29udGFpbmVyQmFsYW5jZS0tXG4gICAgICAgIH1cblxuICAgICAgICBhdE1hcmtlciA9IHVuZGVmaW5lZFxuICAgICAgfSBlbHNlIGlmIChldmVudFsxXS50eXBlID09PSB0eXBlcy5saW5lRW5kaW5nQmxhbmspIHtcbiAgICAgICAgaWYgKGV2ZW50WzBdID09PSAnZW50ZXInKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgbGlzdEl0ZW0gJiZcbiAgICAgICAgICAgICFhdE1hcmtlciAmJlxuICAgICAgICAgICAgIWNvbnRhaW5lckJhbGFuY2UgJiZcbiAgICAgICAgICAgICFmaXJzdEJsYW5rTGluZUluZGV4XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBmaXJzdEJsYW5rTGluZUluZGV4ID0gaW5kZXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhdE1hcmtlciA9IHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBldmVudFsxXS50eXBlID09PSB0eXBlcy5saW5lUHJlZml4IHx8XG4gICAgICAgIGV2ZW50WzFdLnR5cGUgPT09IHR5cGVzLmxpc3RJdGVtVmFsdWUgfHxcbiAgICAgICAgZXZlbnRbMV0udHlwZSA9PT0gdHlwZXMubGlzdEl0ZW1NYXJrZXIgfHxcbiAgICAgICAgZXZlbnRbMV0udHlwZSA9PT0gdHlwZXMubGlzdEl0ZW1QcmVmaXggfHxcbiAgICAgICAgZXZlbnRbMV0udHlwZSA9PT0gdHlwZXMubGlzdEl0ZW1QcmVmaXhXaGl0ZXNwYWNlXG4gICAgICApIHtcbiAgICAgICAgLy8gRW1wdHkuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhdE1hcmtlciA9IHVuZGVmaW5lZFxuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgICghY29udGFpbmVyQmFsYW5jZSAmJlxuICAgICAgICAgIGV2ZW50WzBdID09PSAnZW50ZXInICYmXG4gICAgICAgICAgZXZlbnRbMV0udHlwZSA9PT0gdHlwZXMubGlzdEl0ZW1QcmVmaXgpIHx8XG4gICAgICAgIChjb250YWluZXJCYWxhbmNlID09PSAtMSAmJlxuICAgICAgICAgIGV2ZW50WzBdID09PSAnZXhpdCcgJiZcbiAgICAgICAgICAoZXZlbnRbMV0udHlwZSA9PT0gdHlwZXMubGlzdFVub3JkZXJlZCB8fFxuICAgICAgICAgICAgZXZlbnRbMV0udHlwZSA9PT0gdHlwZXMubGlzdE9yZGVyZWQpKVxuICAgICAgKSB7XG4gICAgICAgIGlmIChsaXN0SXRlbSkge1xuICAgICAgICAgIGxldCB0YWlsSW5kZXggPSBpbmRleFxuICAgICAgICAgIGxpbmVJbmRleCA9IHVuZGVmaW5lZFxuXG4gICAgICAgICAgd2hpbGUgKHRhaWxJbmRleC0tKSB7XG4gICAgICAgICAgICBjb25zdCB0YWlsRXZlbnQgPSBldmVudHNbdGFpbEluZGV4XVxuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHRhaWxFdmVudFsxXS50eXBlID09PSB0eXBlcy5saW5lRW5kaW5nIHx8XG4gICAgICAgICAgICAgIHRhaWxFdmVudFsxXS50eXBlID09PSB0eXBlcy5saW5lRW5kaW5nQmxhbmtcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBpZiAodGFpbEV2ZW50WzBdID09PSAnZXhpdCcpIGNvbnRpbnVlXG5cbiAgICAgICAgICAgICAgaWYgKGxpbmVJbmRleCkge1xuICAgICAgICAgICAgICAgIGV2ZW50c1tsaW5lSW5kZXhdWzFdLnR5cGUgPSB0eXBlcy5saW5lRW5kaW5nQmxhbmtcbiAgICAgICAgICAgICAgICBsaXN0U3ByZWFkID0gdHJ1ZVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGFpbEV2ZW50WzFdLnR5cGUgPSB0eXBlcy5saW5lRW5kaW5nXG4gICAgICAgICAgICAgIGxpbmVJbmRleCA9IHRhaWxJbmRleFxuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgdGFpbEV2ZW50WzFdLnR5cGUgPT09IHR5cGVzLmxpbmVQcmVmaXggfHxcbiAgICAgICAgICAgICAgdGFpbEV2ZW50WzFdLnR5cGUgPT09IHR5cGVzLmJsb2NrUXVvdGVQcmVmaXggfHxcbiAgICAgICAgICAgICAgdGFpbEV2ZW50WzFdLnR5cGUgPT09IHR5cGVzLmJsb2NrUXVvdGVQcmVmaXhXaGl0ZXNwYWNlIHx8XG4gICAgICAgICAgICAgIHRhaWxFdmVudFsxXS50eXBlID09PSB0eXBlcy5ibG9ja1F1b3RlTWFya2VyIHx8XG4gICAgICAgICAgICAgIHRhaWxFdmVudFsxXS50eXBlID09PSB0eXBlcy5saXN0SXRlbUluZGVudFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIC8vIEVtcHR5XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGZpcnN0QmxhbmtMaW5lSW5kZXggJiZcbiAgICAgICAgICAgICghbGluZUluZGV4IHx8IGZpcnN0QmxhbmtMaW5lSW5kZXggPCBsaW5lSW5kZXgpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFBhdGNoZWQuXG4gICAgICAgICAgICBsaXN0SXRlbS5fc3ByZWFkID0gdHJ1ZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEZpeCBwb3NpdGlvbi5cbiAgICAgICAgICBsaXN0SXRlbS5lbmQgPSBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAge30sXG4gICAgICAgICAgICBsaW5lSW5kZXggPyBldmVudHNbbGluZUluZGV4XVsxXS5zdGFydCA6IGV2ZW50WzFdLmVuZFxuICAgICAgICAgIClcblxuICAgICAgICAgIGV2ZW50cy5zcGxpY2UobGluZUluZGV4IHx8IGluZGV4LCAwLCBbJ2V4aXQnLCBsaXN0SXRlbSwgZXZlbnRbMl1dKVxuICAgICAgICAgIGluZGV4KytcbiAgICAgICAgICBsZW5ndGgrK1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGxpc3QgaXRlbS5cbiAgICAgICAgaWYgKGV2ZW50WzFdLnR5cGUgPT09IHR5cGVzLmxpc3RJdGVtUHJlZml4KSB7XG4gICAgICAgICAgbGlzdEl0ZW0gPSB7XG4gICAgICAgICAgICB0eXBlOiAnbGlzdEl0ZW0nLFxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBQYXRjaGVkXG4gICAgICAgICAgICBfc3ByZWFkOiBmYWxzZSxcbiAgICAgICAgICAgIHN0YXJ0OiBPYmplY3QuYXNzaWduKHt9LCBldmVudFsxXS5zdGFydClcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogYGxpc3RJdGVtYCBpcyBtb3N0IGRlZmluaXRlbHkgZGVmaW5lZCwgVFMuLi5cbiAgICAgICAgICBldmVudHMuc3BsaWNlKGluZGV4LCAwLCBbJ2VudGVyJywgbGlzdEl0ZW0sIGV2ZW50WzJdXSlcbiAgICAgICAgICBpbmRleCsrXG4gICAgICAgICAgbGVuZ3RoKytcbiAgICAgICAgICBmaXJzdEJsYW5rTGluZUluZGV4ID0gdW5kZWZpbmVkXG4gICAgICAgICAgYXRNYXJrZXIgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFBhdGNoZWQuXG4gICAgZXZlbnRzW3N0YXJ0XVsxXS5fc3ByZWFkID0gbGlzdFNwcmVhZFxuICAgIHJldHVybiBsZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgZGF0YS5cbiAgICpcbiAgICogQHRlbXBsYXRlIHtrZXlvZiBDb21waWxlRGF0YX0gS2V5XG4gICAqICAgRmllbGQgdHlwZS5cbiAgICogQHBhcmFtIHtLZXl9IGtleVxuICAgKiAgIEtleSBvZiBmaWVsZC5cbiAgICogQHBhcmFtIHtDb21waWxlRGF0YVtLZXldfSBbdmFsdWVdXG4gICAqICAgTmV3IHZhbHVlLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICogICBOb3RoaW5nLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0RGF0YShrZXksIHZhbHVlKSB7XG4gICAgZGF0YVtrZXldID0gdmFsdWVcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgZGF0YS5cbiAgICpcbiAgICogQHRlbXBsYXRlIHtrZXlvZiBDb21waWxlRGF0YX0gS2V5XG4gICAqICAgRmllbGQgdHlwZS5cbiAgICogQHBhcmFtIHtLZXl9IGtleVxuICAgKiAgIEtleSBvZiBmaWVsZC5cbiAgICogQHJldHVybnMge0NvbXBpbGVEYXRhW0tleV19XG4gICAqICAgVmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBnZXREYXRhKGtleSkge1xuICAgIHJldHVybiBkYXRhW2tleV1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gb3BlbmVyIGhhbmRsZS5cbiAgICpcbiAgICogQHBhcmFtIHsodG9rZW46IFRva2VuKSA9PiBOb2RlfSBjcmVhdGVcbiAgICogICBDcmVhdGUgYSBub2RlLlxuICAgKiBAcGFyYW0ge0hhbmRsZX0gW2FuZF1cbiAgICogICBPcHRpb25hbCBmdW5jdGlvbiB0byBhbHNvIHJ1bi5cbiAgICogQHJldHVybnMge0hhbmRsZX1cbiAgICogICBIYW5kbGUuXG4gICAqL1xuICBmdW5jdGlvbiBvcGVuZXIoY3JlYXRlLCBhbmQpIHtcbiAgICByZXR1cm4gb3BlblxuXG4gICAgLyoqXG4gICAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgICAqIEBwYXJhbSB7VG9rZW59IHRva2VuXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG4gICAgZnVuY3Rpb24gb3Blbih0b2tlbikge1xuICAgICAgZW50ZXIuY2FsbCh0aGlzLCBjcmVhdGUodG9rZW4pLCB0b2tlbilcbiAgICAgIGlmIChhbmQpIGFuZC5jYWxsKHRoaXMsIHRva2VuKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZnVuY3Rpb24gYnVmZmVyKCkge1xuICAgIHRoaXMuc3RhY2sucHVzaCh7dHlwZTogJ2ZyYWdtZW50JywgY2hpbGRyZW46IFtdfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAdGVtcGxhdGUge05vZGV9IEtpbmRcbiAgICogICBOb2RlIHR5cGUuXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogICBDb250ZXh0LlxuICAgKiBAcGFyYW0ge0tpbmR9IG5vZGVcbiAgICogICBOb2RlIHRvIGVudGVyLlxuICAgKiBAcGFyYW0ge1Rva2VufSB0b2tlblxuICAgKiAgIENvcnJlc3BvbmRpbmcgdG9rZW4uXG4gICAqIEBwYXJhbSB7T25FbnRlckVycm9yIHwgdW5kZWZpbmVkfSBbZXJyb3JIYW5kbGVyXVxuICAgKiAgIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGlzIHRva2VuIGlzIG9wZW4sIGJ1dCBpdCBpcyBjbG9zZWQgYnkgc29tZXRoaW5nIGVsc2UuXG4gICAqIEByZXR1cm5zIHtLaW5kfVxuICAgKiAgIFRoZSBnaXZlbiBub2RlLlxuICAgKi9cbiAgZnVuY3Rpb24gZW50ZXIobm9kZSwgdG9rZW4sIGVycm9ySGFuZGxlcikge1xuICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXVxuICAgIGFzc2VydChwYXJlbnQsICdleHBlY3RlZCBgcGFyZW50YCcpXG4gICAgYXNzZXJ0KCdjaGlsZHJlbicgaW4gcGFyZW50LCAnZXhwZWN0ZWQgYHBhcmVudGAnKVxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IEFzc3VtZSBgTm9kZWAgY2FuIGV4aXN0IGFzIGEgY2hpbGQgb2YgYHBhcmVudGAuXG4gICAgcGFyZW50LmNoaWxkcmVuLnB1c2gobm9kZSlcbiAgICB0aGlzLnN0YWNrLnB1c2gobm9kZSlcbiAgICB0aGlzLnRva2VuU3RhY2sucHVzaChbdG9rZW4sIGVycm9ySGFuZGxlcl0pXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogYGVuZGAgd2lsbCBiZSBwYXRjaGVkIGxhdGVyLlxuICAgIG5vZGUucG9zaXRpb24gPSB7c3RhcnQ6IHBvaW50KHRva2VuLnN0YXJ0KX1cbiAgICByZXR1cm4gbm9kZVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGNsb3NlciBoYW5kbGUuXG4gICAqXG4gICAqIEBwYXJhbSB7SGFuZGxlfSBbYW5kXVxuICAgKiAgIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGFsc28gcnVuLlxuICAgKiBAcmV0dXJucyB7SGFuZGxlfVxuICAgKiAgIEhhbmRsZS5cbiAgICovXG4gIGZ1bmN0aW9uIGNsb3NlcihhbmQpIHtcbiAgICByZXR1cm4gY2xvc2VcblxuICAgIC8qKlxuICAgICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICAgKiBAcGFyYW0ge1Rva2VufSB0b2tlblxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb3NlKHRva2VuKSB7XG4gICAgICBpZiAoYW5kKSBhbmQuY2FsbCh0aGlzLCB0b2tlbilcbiAgICAgIGV4aXQuY2FsbCh0aGlzLCB0b2tlbilcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiAgIENvbnRleHQuXG4gICAqIEBwYXJhbSB7VG9rZW59IHRva2VuXG4gICAqICAgQ29ycmVzcG9uZGluZyB0b2tlbi5cbiAgICogQHBhcmFtIHtPbkV4aXRFcnJvciB8IHVuZGVmaW5lZH0gW29uRXhpdEVycm9yXVxuICAgKiAgIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSBhbm90aGVyIHRva2VuIGlzIG9wZW4uXG4gICAqIEByZXR1cm5zIHtOb2RlfVxuICAgKiAgIFRoZSBjbG9zZWQgbm9kZS5cbiAgICovXG4gIGZ1bmN0aW9uIGV4aXQodG9rZW4sIG9uRXhpdEVycm9yKSB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2sucG9wKClcbiAgICBhc3NlcnQobm9kZSwgJ2V4cGVjdGVkIGBub2RlYCcpXG4gICAgY29uc3Qgb3BlbiA9IHRoaXMudG9rZW5TdGFjay5wb3AoKVxuXG4gICAgaWYgKCFvcGVuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdDYW5ub3QgY2xvc2UgYCcgK1xuICAgICAgICAgIHRva2VuLnR5cGUgK1xuICAgICAgICAgICdgICgnICtcbiAgICAgICAgICBzdHJpbmdpZnlQb3NpdGlvbih7c3RhcnQ6IHRva2VuLnN0YXJ0LCBlbmQ6IHRva2VuLmVuZH0pICtcbiAgICAgICAgICAnKTogaXTigJlzIG5vdCBvcGVuJ1xuICAgICAgKVxuICAgIH0gZWxzZSBpZiAob3BlblswXS50eXBlICE9PSB0b2tlbi50eXBlKSB7XG4gICAgICBpZiAob25FeGl0RXJyb3IpIHtcbiAgICAgICAgb25FeGl0RXJyb3IuY2FsbCh0aGlzLCB0b2tlbiwgb3BlblswXSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBvcGVuWzFdIHx8IGRlZmF1bHRPbkVycm9yXG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCB0b2tlbiwgb3BlblswXSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhc3NlcnQobm9kZS50eXBlICE9PSAnZnJhZ21lbnQnLCAndW5leHBlY3RlZCBmcmFnbWVudCBgZXhpdGBlZCcpXG4gICAgYXNzZXJ0KG5vZGUucG9zaXRpb24sICdleHBlY3RlZCBgcG9zaXRpb25gIHRvIGJlIGRlZmluZWQnKVxuICAgIG5vZGUucG9zaXRpb24uZW5kID0gcG9pbnQodG9rZW4uZW5kKVxuICAgIHJldHVybiBub2RlXG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZnVuY3Rpb24gcmVzdW1lKCkge1xuICAgIHJldHVybiB0b1N0cmluZyh0aGlzLnN0YWNrLnBvcCgpKVxuICB9XG5cbiAgLy9cbiAgLy8gSGFuZGxlcnMuXG4gIC8vXG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9uZW50ZXJsaXN0b3JkZXJlZCgpIHtcbiAgICBzZXREYXRhKCdleHBlY3RpbmdGaXJzdExpc3RJdGVtVmFsdWUnLCB0cnVlKVxuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9uZW50ZXJsaXN0aXRlbXZhbHVlKHRva2VuKSB7XG4gICAgaWYgKGdldERhdGEoJ2V4cGVjdGluZ0ZpcnN0TGlzdEl0ZW1WYWx1ZScpKSB7XG4gICAgICBjb25zdCBhbmNlc3RvciA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAyXVxuICAgICAgYXNzZXJ0KGFuY2VzdG9yLCAnZXhwZWN0ZWQgbm9kZXMgb24gc3RhY2snKVxuICAgICAgYXNzZXJ0KGFuY2VzdG9yLnR5cGUgPT09ICdsaXN0JywgJ2V4cGVjdGVkIGxpc3Qgb24gc3RhY2snKVxuICAgICAgYW5jZXN0b3Iuc3RhcnQgPSBOdW1iZXIucGFyc2VJbnQoXG4gICAgICAgIHRoaXMuc2xpY2VTZXJpYWxpemUodG9rZW4pLFxuICAgICAgICBjb25zdGFudHMubnVtZXJpY0Jhc2VEZWNpbWFsXG4gICAgICApXG4gICAgICBzZXREYXRhKCdleHBlY3RpbmdGaXJzdExpc3RJdGVtVmFsdWUnKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAqIEB0eXBlIHtIYW5kbGV9XG4gICAqL1xuICBmdW5jdGlvbiBvbmV4aXRjb2RlZmVuY2VkZmVuY2VpbmZvKCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnJlc3VtZSgpXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXVxuICAgIGFzc2VydChub2RlLCAnZXhwZWN0ZWQgbm9kZSBvbiBzdGFjaycpXG4gICAgYXNzZXJ0KG5vZGUudHlwZSA9PT0gJ2NvZGUnLCAnZXhwZWN0ZWQgY29kZSBvbiBzdGFjaycpXG4gICAgbm9kZS5sYW5nID0gZGF0YVxuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9uZXhpdGNvZGVmZW5jZWRmZW5jZW1ldGEoKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMucmVzdW1lKClcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdXG4gICAgYXNzZXJ0KG5vZGUsICdleHBlY3RlZCBub2RlIG9uIHN0YWNrJylcbiAgICBhc3NlcnQobm9kZS50eXBlID09PSAnY29kZScsICdleHBlY3RlZCBjb2RlIG9uIHN0YWNrJylcbiAgICBub2RlLm1ldGEgPSBkYXRhXG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cbiAgZnVuY3Rpb24gb25leGl0Y29kZWZlbmNlZGZlbmNlKCkge1xuICAgIC8vIEV4aXQgaWYgdGhpcyBpcyB0aGUgY2xvc2luZyBmZW5jZS5cbiAgICBpZiAoZ2V0RGF0YSgnZmxvd0NvZGVJbnNpZGUnKSkgcmV0dXJuXG4gICAgdGhpcy5idWZmZXIoKVxuICAgIHNldERhdGEoJ2Zsb3dDb2RlSW5zaWRlJywgdHJ1ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAqIEB0eXBlIHtIYW5kbGV9XG4gICAqL1xuICBmdW5jdGlvbiBvbmV4aXRjb2RlZmVuY2VkKCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnJlc3VtZSgpXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXVxuICAgIGFzc2VydChub2RlLCAnZXhwZWN0ZWQgbm9kZSBvbiBzdGFjaycpXG4gICAgYXNzZXJ0KG5vZGUudHlwZSA9PT0gJ2NvZGUnLCAnZXhwZWN0ZWQgY29kZSBvbiBzdGFjaycpXG5cbiAgICBub2RlLnZhbHVlID0gZGF0YS5yZXBsYWNlKC9eKFxccj9cXG58XFxyKXwoXFxyP1xcbnxcXHIpJC9nLCAnJylcbiAgICBzZXREYXRhKCdmbG93Q29kZUluc2lkZScpXG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cbiAgZnVuY3Rpb24gb25leGl0Y29kZWluZGVudGVkKCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnJlc3VtZSgpXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXVxuICAgIGFzc2VydChub2RlLCAnZXhwZWN0ZWQgbm9kZSBvbiBzdGFjaycpXG4gICAgYXNzZXJ0KG5vZGUudHlwZSA9PT0gJ2NvZGUnLCAnZXhwZWN0ZWQgY29kZSBvbiBzdGFjaycpXG5cbiAgICBub2RlLnZhbHVlID0gZGF0YS5yZXBsYWNlKC8oXFxyP1xcbnxcXHIpJC9nLCAnJylcbiAgfVxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAqIEB0eXBlIHtIYW5kbGV9XG4gICAqL1xuICBmdW5jdGlvbiBvbmV4aXRkZWZpbml0aW9ubGFiZWxzdHJpbmcodG9rZW4pIHtcbiAgICBjb25zdCBsYWJlbCA9IHRoaXMucmVzdW1lKClcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdXG4gICAgYXNzZXJ0KG5vZGUsICdleHBlY3RlZCBub2RlIG9uIHN0YWNrJylcbiAgICBhc3NlcnQobm9kZS50eXBlID09PSAnZGVmaW5pdGlvbicsICdleHBlY3RlZCBkZWZpbml0aW9uIG9uIHN0YWNrJylcblxuICAgIG5vZGUubGFiZWwgPSBsYWJlbFxuICAgIG5vZGUuaWRlbnRpZmllciA9IG5vcm1hbGl6ZUlkZW50aWZpZXIoXG4gICAgICB0aGlzLnNsaWNlU2VyaWFsaXplKHRva2VuKVxuICAgICkudG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9uZXhpdGRlZmluaXRpb250aXRsZXN0cmluZygpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5yZXN1bWUoKVxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV1cbiAgICBhc3NlcnQobm9kZSwgJ2V4cGVjdGVkIG5vZGUgb24gc3RhY2snKVxuICAgIGFzc2VydChub2RlLnR5cGUgPT09ICdkZWZpbml0aW9uJywgJ2V4cGVjdGVkIGRlZmluaXRpb24gb24gc3RhY2snKVxuXG4gICAgbm9kZS50aXRsZSA9IGRhdGFcbiAgfVxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAqIEB0eXBlIHtIYW5kbGV9XG4gICAqL1xuICBmdW5jdGlvbiBvbmV4aXRkZWZpbml0aW9uZGVzdGluYXRpb25zdHJpbmcoKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMucmVzdW1lKClcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdXG4gICAgYXNzZXJ0KG5vZGUsICdleHBlY3RlZCBub2RlIG9uIHN0YWNrJylcbiAgICBhc3NlcnQobm9kZS50eXBlID09PSAnZGVmaW5pdGlvbicsICdleHBlY3RlZCBkZWZpbml0aW9uIG9uIHN0YWNrJylcblxuICAgIG5vZGUudXJsID0gZGF0YVxuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9uZXhpdGF0eGhlYWRpbmdzZXF1ZW5jZSh0b2tlbikge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV1cbiAgICBhc3NlcnQobm9kZSwgJ2V4cGVjdGVkIG5vZGUgb24gc3RhY2snKVxuICAgIGFzc2VydChub2RlLnR5cGUgPT09ICdoZWFkaW5nJywgJ2V4cGVjdGVkIGhlYWRpbmcgb24gc3RhY2snKVxuXG4gICAgaWYgKCFub2RlLmRlcHRoKSB7XG4gICAgICBjb25zdCBkZXB0aCA9IHRoaXMuc2xpY2VTZXJpYWxpemUodG9rZW4pLmxlbmd0aFxuXG4gICAgICBhc3NlcnQoXG4gICAgICAgIGRlcHRoID09PSAxIHx8XG4gICAgICAgICAgZGVwdGggPT09IDIgfHxcbiAgICAgICAgICBkZXB0aCA9PT0gMyB8fFxuICAgICAgICAgIGRlcHRoID09PSA0IHx8XG4gICAgICAgICAgZGVwdGggPT09IDUgfHxcbiAgICAgICAgICBkZXB0aCA9PT0gNixcbiAgICAgICAgJ2V4cGVjdGVkIGBkZXB0aGAgYmV0d2VlbiBgMWAgYW5kIGA2YCdcbiAgICAgIClcblxuICAgICAgbm9kZS5kZXB0aCA9IGRlcHRoXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9uZXhpdHNldGV4dGhlYWRpbmd0ZXh0KCkge1xuICAgIHNldERhdGEoJ3NldGV4dEhlYWRpbmdTbHVycExpbmVFbmRpbmcnLCB0cnVlKVxuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9uZXhpdHNldGV4dGhlYWRpbmdsaW5lc2VxdWVuY2UodG9rZW4pIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdXG4gICAgYXNzZXJ0KG5vZGUsICdleHBlY3RlZCBub2RlIG9uIHN0YWNrJylcbiAgICBhc3NlcnQobm9kZS50eXBlID09PSAnaGVhZGluZycsICdleHBlY3RlZCBoZWFkaW5nIG9uIHN0YWNrJylcblxuICAgIG5vZGUuZGVwdGggPVxuICAgICAgdGhpcy5zbGljZVNlcmlhbGl6ZSh0b2tlbikuY2hhckNvZGVBdCgwKSA9PT0gY29kZXMuZXF1YWxzVG8gPyAxIDogMlxuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9uZXhpdHNldGV4dGhlYWRpbmcoKSB7XG4gICAgc2V0RGF0YSgnc2V0ZXh0SGVhZGluZ1NsdXJwTGluZUVuZGluZycpXG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cblxuICBmdW5jdGlvbiBvbmVudGVyZGF0YSh0b2tlbikge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV1cbiAgICBhc3NlcnQobm9kZSwgJ2V4cGVjdGVkIG5vZGUgb24gc3RhY2snKVxuICAgIGFzc2VydCgnY2hpbGRyZW4nIGluIG5vZGUsICdleHBlY3RlZCBwYXJlbnQgb24gc3RhY2snKVxuXG4gICAgbGV0IHRhaWwgPSBub2RlLmNoaWxkcmVuW25vZGUuY2hpbGRyZW4ubGVuZ3RoIC0gMV1cblxuICAgIGlmICghdGFpbCB8fCB0YWlsLnR5cGUgIT09ICd0ZXh0Jykge1xuICAgICAgLy8gQWRkIGEgbmV3IHRleHQgbm9kZS5cbiAgICAgIHRhaWwgPSB0ZXh0KClcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHdl4oCZbGwgYWRkIGBlbmRgIGxhdGVyLlxuICAgICAgdGFpbC5wb3NpdGlvbiA9IHtzdGFydDogcG9pbnQodG9rZW4uc3RhcnQpfVxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogQXNzdW1lIGBwYXJlbnRgIGFjY2VwdHMgYHRleHRgLlxuICAgICAgbm9kZS5jaGlsZHJlbi5wdXNoKHRhaWwpXG4gICAgfVxuXG4gICAgdGhpcy5zdGFjay5wdXNoKHRhaWwpXG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cblxuICBmdW5jdGlvbiBvbmV4aXRkYXRhKHRva2VuKSB7XG4gICAgY29uc3QgdGFpbCA9IHRoaXMuc3RhY2sucG9wKClcbiAgICBhc3NlcnQodGFpbCwgJ2V4cGVjdGVkIGEgYG5vZGVgIHRvIGJlIG9uIHRoZSBzdGFjaycpXG4gICAgYXNzZXJ0KCd2YWx1ZScgaW4gdGFpbCwgJ2V4cGVjdGVkIGEgYGxpdGVyYWxgIHRvIGJlIG9uIHRoZSBzdGFjaycpXG4gICAgYXNzZXJ0KHRhaWwucG9zaXRpb24sICdleHBlY3RlZCBgbm9kZWAgdG8gaGF2ZSBhbiBvcGVuIHBvc2l0aW9uJylcbiAgICB0YWlsLnZhbHVlICs9IHRoaXMuc2xpY2VTZXJpYWxpemUodG9rZW4pXG4gICAgdGFpbC5wb3NpdGlvbi5lbmQgPSBwb2ludCh0b2tlbi5lbmQpXG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cblxuICBmdW5jdGlvbiBvbmV4aXRsaW5lZW5kaW5nKHRva2VuKSB7XG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXVxuICAgIGFzc2VydChjb250ZXh0LCAnZXhwZWN0ZWQgYG5vZGVgJylcblxuICAgIC8vIElmIHdl4oCZcmUgYXQgYSBoYXJkIGJyZWFrLCBpbmNsdWRlIHRoZSBsaW5lIGVuZGluZyBpbiB0aGVyZS5cbiAgICBpZiAoZ2V0RGF0YSgnYXRIYXJkQnJlYWsnKSkge1xuICAgICAgYXNzZXJ0KCdjaGlsZHJlbicgaW4gY29udGV4dCwgJ2V4cGVjdGVkIGBwYXJlbnRgJylcbiAgICAgIGNvbnN0IHRhaWwgPSBjb250ZXh0LmNoaWxkcmVuW2NvbnRleHQuY2hpbGRyZW4ubGVuZ3RoIC0gMV1cbiAgICAgIGFzc2VydCh0YWlsLnBvc2l0aW9uLCAnZXhwZWN0ZWQgdGFpbCB0byBoYXZlIGEgc3RhcnRpbmcgcG9zaXRpb24nKVxuICAgICAgdGFpbC5wb3NpdGlvbi5lbmQgPSBwb2ludCh0b2tlbi5lbmQpXG4gICAgICBzZXREYXRhKCdhdEhhcmRCcmVhaycpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAhZ2V0RGF0YSgnc2V0ZXh0SGVhZGluZ1NsdXJwTGluZUVuZGluZycpICYmXG4gICAgICBjb25maWcuY2FuQ29udGFpbkVvbHMuaW5jbHVkZXMoY29udGV4dC50eXBlKVxuICAgICkge1xuICAgICAgb25lbnRlcmRhdGEuY2FsbCh0aGlzLCB0b2tlbilcbiAgICAgIG9uZXhpdGRhdGEuY2FsbCh0aGlzLCB0b2tlbilcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cblxuICBmdW5jdGlvbiBvbmV4aXRoYXJkYnJlYWsoKSB7XG4gICAgc2V0RGF0YSgnYXRIYXJkQnJlYWsnLCB0cnVlKVxuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG5cbiAgZnVuY3Rpb24gb25leGl0aHRtbGZsb3coKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMucmVzdW1lKClcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdXG4gICAgYXNzZXJ0KG5vZGUsICdleHBlY3RlZCBub2RlIG9uIHN0YWNrJylcbiAgICBhc3NlcnQobm9kZS50eXBlID09PSAnaHRtbCcsICdleHBlY3RlZCBodG1sIG9uIHN0YWNrJylcblxuICAgIG5vZGUudmFsdWUgPSBkYXRhXG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cblxuICBmdW5jdGlvbiBvbmV4aXRodG1sdGV4dCgpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5yZXN1bWUoKVxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV1cbiAgICBhc3NlcnQobm9kZSwgJ2V4cGVjdGVkIG5vZGUgb24gc3RhY2snKVxuICAgIGFzc2VydChub2RlLnR5cGUgPT09ICdodG1sJywgJ2V4cGVjdGVkIGh0bWwgb24gc3RhY2snKVxuXG4gICAgbm9kZS52YWx1ZSA9IGRhdGFcbiAgfVxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAqIEB0eXBlIHtIYW5kbGV9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIG9uZXhpdGNvZGV0ZXh0KCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnJlc3VtZSgpXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXVxuICAgIGFzc2VydChub2RlLCAnZXhwZWN0ZWQgbm9kZSBvbiBzdGFjaycpXG4gICAgYXNzZXJ0KG5vZGUudHlwZSA9PT0gJ2lubGluZUNvZGUnLCAnZXhwZWN0ZWQgaW5saW5lIGNvZGUgb24gc3RhY2snKVxuXG4gICAgbm9kZS52YWx1ZSA9IGRhdGFcbiAgfVxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAqIEB0eXBlIHtIYW5kbGV9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIG9uZXhpdGxpbmsoKSB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXVxuICAgIGFzc2VydChub2RlLCAnZXhwZWN0ZWQgbm9kZSBvbiBzdGFjaycpXG4gICAgYXNzZXJ0KG5vZGUudHlwZSA9PT0gJ2xpbmsnLCAnZXhwZWN0ZWQgbGluayBvbiBzdGFjaycpXG5cbiAgICAvLyBOb3RlOiB0aGVyZSBhcmUgYWxzbyBgaWRlbnRpZmllcmAgYW5kIGBsYWJlbGAgZmllbGRzIG9uIHRoaXMgbGluayBub2RlIVxuICAgIC8vIFRoZXNlIGFyZSB1c2VkIC8gY2xlYW5lZCBoZXJlLlxuXG4gICAgLy8gVG8gZG86IGNsZWFuLlxuICAgIGlmIChnZXREYXRhKCdpblJlZmVyZW5jZScpKSB7XG4gICAgICAvKiogQHR5cGUge1JlZmVyZW5jZVR5cGV9ICovXG4gICAgICBjb25zdCByZWZlcmVuY2VUeXBlID0gZ2V0RGF0YSgncmVmZXJlbmNlVHlwZScpIHx8ICdzaG9ydGN1dCdcblxuICAgICAgbm9kZS50eXBlICs9ICdSZWZlcmVuY2UnXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBtdXRhdGUuXG4gICAgICBub2RlLnJlZmVyZW5jZVR5cGUgPSByZWZlcmVuY2VUeXBlXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBtdXRhdGUuXG4gICAgICBkZWxldGUgbm9kZS51cmxcbiAgICAgIGRlbGV0ZSBub2RlLnRpdGxlXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IG11dGF0ZS5cbiAgICAgIGRlbGV0ZSBub2RlLmlkZW50aWZpZXJcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IG11dGF0ZS5cbiAgICAgIGRlbGV0ZSBub2RlLmxhYmVsXG4gICAgfVxuXG4gICAgc2V0RGF0YSgncmVmZXJlbmNlVHlwZScpXG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cblxuICBmdW5jdGlvbiBvbmV4aXRpbWFnZSgpIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdXG4gICAgYXNzZXJ0KG5vZGUsICdleHBlY3RlZCBub2RlIG9uIHN0YWNrJylcbiAgICBhc3NlcnQobm9kZS50eXBlID09PSAnaW1hZ2UnLCAnZXhwZWN0ZWQgaW1hZ2Ugb24gc3RhY2snKVxuXG4gICAgLy8gTm90ZTogdGhlcmUgYXJlIGFsc28gYGlkZW50aWZpZXJgIGFuZCBgbGFiZWxgIGZpZWxkcyBvbiB0aGlzIGxpbmsgbm9kZSFcbiAgICAvLyBUaGVzZSBhcmUgdXNlZCAvIGNsZWFuZWQgaGVyZS5cblxuICAgIC8vIFRvIGRvOiBjbGVhbi5cbiAgICBpZiAoZ2V0RGF0YSgnaW5SZWZlcmVuY2UnKSkge1xuICAgICAgLyoqIEB0eXBlIHtSZWZlcmVuY2VUeXBlfSAqL1xuICAgICAgY29uc3QgcmVmZXJlbmNlVHlwZSA9IGdldERhdGEoJ3JlZmVyZW5jZVR5cGUnKSB8fCAnc2hvcnRjdXQnXG5cbiAgICAgIG5vZGUudHlwZSArPSAnUmVmZXJlbmNlJ1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogbXV0YXRlLlxuICAgICAgbm9kZS5yZWZlcmVuY2VUeXBlID0gcmVmZXJlbmNlVHlwZVxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogbXV0YXRlLlxuICAgICAgZGVsZXRlIG5vZGUudXJsXG4gICAgICBkZWxldGUgbm9kZS50aXRsZVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBtdXRhdGUuXG4gICAgICBkZWxldGUgbm9kZS5pZGVudGlmaWVyXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBtdXRhdGUuXG4gICAgICBkZWxldGUgbm9kZS5sYWJlbFxuICAgIH1cblxuICAgIHNldERhdGEoJ3JlZmVyZW5jZVR5cGUnKVxuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG5cbiAgZnVuY3Rpb24gb25leGl0bGFiZWx0ZXh0KHRva2VuKSB7XG4gICAgY29uc3Qgc3RyaW5nID0gdGhpcy5zbGljZVNlcmlhbGl6ZSh0b2tlbilcbiAgICBjb25zdCBhbmNlc3RvciA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAyXVxuICAgIGFzc2VydChhbmNlc3RvciwgJ2V4cGVjdGVkIGFuY2VzdG9yIG9uIHN0YWNrJylcbiAgICBhc3NlcnQoXG4gICAgICBhbmNlc3Rvci50eXBlID09PSAnaW1hZ2UnIHx8IGFuY2VzdG9yLnR5cGUgPT09ICdsaW5rJyxcbiAgICAgICdleHBlY3RlZCBpbWFnZSBvciBsaW5rIG9uIHN0YWNrJ1xuICAgIClcblxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHN0YXNoIHRoaXMgb24gdGhlIG5vZGUsIGFzIGl0IG1pZ2h0IGJlY29tZSBhIHJlZmVyZW5jZVxuICAgIC8vIGxhdGVyLlxuICAgIGFuY2VzdG9yLmxhYmVsID0gZGVjb2RlU3RyaW5nKHN0cmluZylcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBzYW1lIGFzIGFib3ZlLlxuICAgIGFuY2VzdG9yLmlkZW50aWZpZXIgPSBub3JtYWxpemVJZGVudGlmaWVyKHN0cmluZykudG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG5cbiAgZnVuY3Rpb24gb25leGl0bGFiZWwoKSB7XG4gICAgY29uc3QgZnJhZ21lbnQgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV1cbiAgICBhc3NlcnQoZnJhZ21lbnQsICdleHBlY3RlZCBub2RlIG9uIHN0YWNrJylcbiAgICBhc3NlcnQoZnJhZ21lbnQudHlwZSA9PT0gJ2ZyYWdtZW50JywgJ2V4cGVjdGVkIGZyYWdtZW50IG9uIHN0YWNrJylcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMucmVzdW1lKClcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdXG4gICAgYXNzZXJ0KG5vZGUsICdleHBlY3RlZCBub2RlIG9uIHN0YWNrJylcbiAgICBhc3NlcnQoXG4gICAgICBub2RlLnR5cGUgPT09ICdpbWFnZScgfHwgbm9kZS50eXBlID09PSAnbGluaycsXG4gICAgICAnZXhwZWN0ZWQgaW1hZ2Ugb3IgbGluayBvbiBzdGFjaydcbiAgICApXG5cbiAgICAvLyBBc3N1bWUgYSByZWZlcmVuY2UuXG4gICAgc2V0RGF0YSgnaW5SZWZlcmVuY2UnLCB0cnVlKVxuXG4gICAgaWYgKG5vZGUudHlwZSA9PT0gJ2xpbmsnKSB7XG4gICAgICAvKiogQHR5cGUge0FycmF5PFN0YXRpY1BocmFzaW5nQ29udGVudD59ICovXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBBc3N1bWUgc3RhdGljIHBocmFzaW5nIGNvbnRlbnQuXG4gICAgICBjb25zdCBjaGlsZHJlbiA9IGZyYWdtZW50LmNoaWxkcmVuXG5cbiAgICAgIG5vZGUuY2hpbGRyZW4gPSBjaGlsZHJlblxuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLmFsdCA9IHZhbHVlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG5cbiAgZnVuY3Rpb24gb25leGl0cmVzb3VyY2VkZXN0aW5hdGlvbnN0cmluZygpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5yZXN1bWUoKVxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV1cbiAgICBhc3NlcnQobm9kZSwgJ2V4cGVjdGVkIG5vZGUgb24gc3RhY2snKVxuICAgIGFzc2VydChcbiAgICAgIG5vZGUudHlwZSA9PT0gJ2ltYWdlJyB8fCBub2RlLnR5cGUgPT09ICdsaW5rJyxcbiAgICAgICdleHBlY3RlZCBpbWFnZSBvciBsaW5rIG9uIHN0YWNrJ1xuICAgIClcbiAgICBub2RlLnVybCA9IGRhdGFcbiAgfVxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAqIEB0eXBlIHtIYW5kbGV9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIG9uZXhpdHJlc291cmNldGl0bGVzdHJpbmcoKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMucmVzdW1lKClcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdXG4gICAgYXNzZXJ0KG5vZGUsICdleHBlY3RlZCBub2RlIG9uIHN0YWNrJylcbiAgICBhc3NlcnQoXG4gICAgICBub2RlLnR5cGUgPT09ICdpbWFnZScgfHwgbm9kZS50eXBlID09PSAnbGluaycsXG4gICAgICAnZXhwZWN0ZWQgaW1hZ2Ugb3IgbGluayBvbiBzdGFjaydcbiAgICApXG4gICAgbm9kZS50aXRsZSA9IGRhdGFcbiAgfVxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAqIEB0eXBlIHtIYW5kbGV9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIG9uZXhpdHJlc291cmNlKCkge1xuICAgIHNldERhdGEoJ2luUmVmZXJlbmNlJylcbiAgfVxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAqIEB0eXBlIHtIYW5kbGV9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIG9uZW50ZXJyZWZlcmVuY2UoKSB7XG4gICAgc2V0RGF0YSgncmVmZXJlbmNlVHlwZScsICdjb2xsYXBzZWQnKVxuICB9XG5cbiAgLyoqXG4gICAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAgICogQHR5cGUge0hhbmRsZX1cbiAgICovXG5cbiAgZnVuY3Rpb24gb25leGl0cmVmZXJlbmNlc3RyaW5nKHRva2VuKSB7XG4gICAgY29uc3QgbGFiZWwgPSB0aGlzLnJlc3VtZSgpXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXVxuICAgIGFzc2VydChub2RlLCAnZXhwZWN0ZWQgbm9kZSBvbiBzdGFjaycpXG4gICAgYXNzZXJ0KFxuICAgICAgbm9kZS50eXBlID09PSAnaW1hZ2UnIHx8IG5vZGUudHlwZSA9PT0gJ2xpbmsnLFxuICAgICAgJ2V4cGVjdGVkIGltYWdlIHJlZmVyZW5jZSBvciBsaW5rIHJlZmVyZW5jZSBvbiBzdGFjaydcbiAgICApXG5cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBzdGFzaCB0aGlzIG9uIHRoZSBub2RlLCBhcyBpdCBtaWdodCBiZWNvbWUgYSByZWZlcmVuY2VcbiAgICAvLyBsYXRlci5cbiAgICBub2RlLmxhYmVsID0gbGFiZWxcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBzYW1lIGFzIGFib3ZlLlxuICAgIG5vZGUuaWRlbnRpZmllciA9IG5vcm1hbGl6ZUlkZW50aWZpZXIoXG4gICAgICB0aGlzLnNsaWNlU2VyaWFsaXplKHRva2VuKVxuICAgICkudG9Mb3dlckNhc2UoKVxuICAgIHNldERhdGEoJ3JlZmVyZW5jZVR5cGUnLCAnZnVsbCcpXG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cblxuICBmdW5jdGlvbiBvbmV4aXRjaGFyYWN0ZXJyZWZlcmVuY2VtYXJrZXIodG9rZW4pIHtcbiAgICBhc3NlcnQoXG4gICAgICB0b2tlbi50eXBlID09PSAnY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VyTnVtZXJpYycgfHxcbiAgICAgICAgdG9rZW4udHlwZSA9PT0gJ2NoYXJhY3RlclJlZmVyZW5jZU1hcmtlckhleGFkZWNpbWFsJ1xuICAgIClcbiAgICBzZXREYXRhKCdjaGFyYWN0ZXJSZWZlcmVuY2VUeXBlJywgdG9rZW4udHlwZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAqIEB0eXBlIHtIYW5kbGV9XG4gICAqL1xuICBmdW5jdGlvbiBvbmV4aXRjaGFyYWN0ZXJyZWZlcmVuY2V2YWx1ZSh0b2tlbikge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnNsaWNlU2VyaWFsaXplKHRva2VuKVxuICAgIGNvbnN0IHR5cGUgPSBnZXREYXRhKCdjaGFyYWN0ZXJSZWZlcmVuY2VUeXBlJylcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICBsZXQgdmFsdWVcblxuICAgIGlmICh0eXBlKSB7XG4gICAgICB2YWx1ZSA9IGRlY29kZU51bWVyaWNDaGFyYWN0ZXJSZWZlcmVuY2UoXG4gICAgICAgIGRhdGEsXG4gICAgICAgIHR5cGUgPT09IHR5cGVzLmNoYXJhY3RlclJlZmVyZW5jZU1hcmtlck51bWVyaWNcbiAgICAgICAgICA/IGNvbnN0YW50cy5udW1lcmljQmFzZURlY2ltYWxcbiAgICAgICAgICA6IGNvbnN0YW50cy5udW1lcmljQmFzZUhleGFkZWNpbWFsXG4gICAgICApXG4gICAgICBzZXREYXRhKCdjaGFyYWN0ZXJSZWZlcmVuY2VUeXBlJylcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcmVzdWx0ID0gZGVjb2RlTmFtZWRDaGFyYWN0ZXJSZWZlcmVuY2UoZGF0YSlcbiAgICAgIGFzc2VydChyZXN1bHQgIT09IGZhbHNlLCAnZXhwZWN0ZWQgcmVmZXJlbmNlIHRvIGRlY29kZScpXG4gICAgICB2YWx1ZSA9IHJlc3VsdFxuICAgIH1cblxuICAgIGNvbnN0IHRhaWwgPSB0aGlzLnN0YWNrLnBvcCgpXG4gICAgYXNzZXJ0KHRhaWwsICdleHBlY3RlZCBgbm9kZWAnKVxuICAgIGFzc2VydCh0YWlsLnBvc2l0aW9uLCAnZXhwZWN0ZWQgYG5vZGUucG9zaXRpb25gJylcbiAgICBhc3NlcnQoJ3ZhbHVlJyBpbiB0YWlsLCAnZXhwZWN0ZWQgYG5vZGUudmFsdWVgJylcbiAgICB0YWlsLnZhbHVlICs9IHZhbHVlXG4gICAgdGFpbC5wb3NpdGlvbi5lbmQgPSBwb2ludCh0b2tlbi5lbmQpXG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICAgKiBAdHlwZSB7SGFuZGxlfVxuICAgKi9cbiAgZnVuY3Rpb24gb25leGl0YXV0b2xpbmtwcm90b2NvbCh0b2tlbikge1xuICAgIG9uZXhpdGRhdGEuY2FsbCh0aGlzLCB0b2tlbilcbiAgICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdXG4gICAgYXNzZXJ0KG5vZGUsICdleHBlY3RlZCBub2RlIG9uIHN0YWNrJylcbiAgICBhc3NlcnQobm9kZS50eXBlID09PSAnbGluaycsICdleHBlY3RlZCBsaW5rIG9uIHN0YWNrJylcblxuICAgIG5vZGUudXJsID0gdGhpcy5zbGljZVNlcmlhbGl6ZSh0b2tlbilcbiAgfVxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gICAqIEB0eXBlIHtIYW5kbGV9XG4gICAqL1xuICBmdW5jdGlvbiBvbmV4aXRhdXRvbGlua2VtYWlsKHRva2VuKSB7XG4gICAgb25leGl0ZGF0YS5jYWxsKHRoaXMsIHRva2VuKVxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV1cbiAgICBhc3NlcnQobm9kZSwgJ2V4cGVjdGVkIG5vZGUgb24gc3RhY2snKVxuICAgIGFzc2VydChub2RlLnR5cGUgPT09ICdsaW5rJywgJ2V4cGVjdGVkIGxpbmsgb24gc3RhY2snKVxuXG4gICAgbm9kZS51cmwgPSAnbWFpbHRvOicgKyB0aGlzLnNsaWNlU2VyaWFsaXplKHRva2VuKVxuICB9XG5cbiAgLy9cbiAgLy8gQ3JlYXRlcnMuXG4gIC8vXG5cbiAgLyoqIEByZXR1cm5zIHtCbG9ja3F1b3RlfSAqL1xuICBmdW5jdGlvbiBibG9ja1F1b3RlKCkge1xuICAgIHJldHVybiB7dHlwZTogJ2Jsb2NrcXVvdGUnLCBjaGlsZHJlbjogW119XG4gIH1cblxuICAvKiogQHJldHVybnMge0NvZGV9ICovXG4gIGZ1bmN0aW9uIGNvZGVGbG93KCkge1xuICAgIHJldHVybiB7dHlwZTogJ2NvZGUnLCBsYW5nOiBudWxsLCBtZXRhOiBudWxsLCB2YWx1ZTogJyd9XG4gIH1cblxuICAvKiogQHJldHVybnMge0lubGluZUNvZGV9ICovXG4gIGZ1bmN0aW9uIGNvZGVUZXh0KCkge1xuICAgIHJldHVybiB7dHlwZTogJ2lubGluZUNvZGUnLCB2YWx1ZTogJyd9XG4gIH1cblxuICAvKiogQHJldHVybnMge0RlZmluaXRpb259ICovXG4gIGZ1bmN0aW9uIGRlZmluaXRpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdkZWZpbml0aW9uJyxcbiAgICAgIGlkZW50aWZpZXI6ICcnLFxuICAgICAgbGFiZWw6IG51bGwsXG4gICAgICB0aXRsZTogbnVsbCxcbiAgICAgIHVybDogJydcbiAgICB9XG4gIH1cblxuICAvKiogQHJldHVybnMge0VtcGhhc2lzfSAqL1xuICBmdW5jdGlvbiBlbXBoYXNpcygpIHtcbiAgICByZXR1cm4ge3R5cGU6ICdlbXBoYXNpcycsIGNoaWxkcmVuOiBbXX1cbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7SGVhZGluZ30gKi9cbiAgZnVuY3Rpb24gaGVhZGluZygpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGBkZXB0aGAgd2lsbCBiZSBzZXQgbGF0ZXIuXG4gICAgcmV0dXJuIHt0eXBlOiAnaGVhZGluZycsIGRlcHRoOiB1bmRlZmluZWQsIGNoaWxkcmVuOiBbXX1cbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7QnJlYWt9ICovXG4gIGZ1bmN0aW9uIGhhcmRCcmVhaygpIHtcbiAgICByZXR1cm4ge3R5cGU6ICdicmVhayd9XG4gIH1cblxuICAvKiogQHJldHVybnMge0hUTUx9ICovXG4gIGZ1bmN0aW9uIGh0bWwoKSB7XG4gICAgcmV0dXJuIHt0eXBlOiAnaHRtbCcsIHZhbHVlOiAnJ31cbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7SW1hZ2V9ICovXG4gIGZ1bmN0aW9uIGltYWdlKCkge1xuICAgIHJldHVybiB7dHlwZTogJ2ltYWdlJywgdGl0bGU6IG51bGwsIHVybDogJycsIGFsdDogbnVsbH1cbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7TGlua30gKi9cbiAgZnVuY3Rpb24gbGluaygpIHtcbiAgICByZXR1cm4ge3R5cGU6ICdsaW5rJywgdGl0bGU6IG51bGwsIHVybDogJycsIGNoaWxkcmVuOiBbXX1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1Rva2VufSB0b2tlblxuICAgKiBAcmV0dXJucyB7TGlzdH1cbiAgICovXG4gIGZ1bmN0aW9uIGxpc3QodG9rZW4pIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2xpc3QnLFxuICAgICAgb3JkZXJlZDogdG9rZW4udHlwZSA9PT0gJ2xpc3RPcmRlcmVkJyxcbiAgICAgIHN0YXJ0OiBudWxsLFxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBQYXRjaGVkLlxuICAgICAgc3ByZWFkOiB0b2tlbi5fc3ByZWFkLFxuICAgICAgY2hpbGRyZW46IFtdXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VG9rZW59IHRva2VuXG4gICAqIEByZXR1cm5zIHtMaXN0SXRlbX1cbiAgICovXG4gIGZ1bmN0aW9uIGxpc3RJdGVtKHRva2VuKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdsaXN0SXRlbScsXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFBhdGNoZWQuXG4gICAgICBzcHJlYWQ6IHRva2VuLl9zcHJlYWQsXG4gICAgICBjaGVja2VkOiBudWxsLFxuICAgICAgY2hpbGRyZW46IFtdXG4gICAgfVxuICB9XG5cbiAgLyoqIEByZXR1cm5zIHtQYXJhZ3JhcGh9ICovXG4gIGZ1bmN0aW9uIHBhcmFncmFwaCgpIHtcbiAgICByZXR1cm4ge3R5cGU6ICdwYXJhZ3JhcGgnLCBjaGlsZHJlbjogW119XG4gIH1cblxuICAvKiogQHJldHVybnMge1N0cm9uZ30gKi9cbiAgZnVuY3Rpb24gc3Ryb25nKCkge1xuICAgIHJldHVybiB7dHlwZTogJ3N0cm9uZycsIGNoaWxkcmVuOiBbXX1cbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7VGV4dH0gKi9cbiAgZnVuY3Rpb24gdGV4dCgpIHtcbiAgICByZXR1cm4ge3R5cGU6ICd0ZXh0JywgdmFsdWU6ICcnfVxuICB9XG5cbiAgLyoqIEByZXR1cm5zIHtUaGVtYXRpY0JyZWFrfSAqL1xuICBmdW5jdGlvbiB0aGVtYXRpY0JyZWFrKCkge1xuICAgIHJldHVybiB7dHlwZTogJ3RoZW1hdGljQnJlYWsnfVxuICB9XG59XG5cbi8qKlxuICogQ29weSBhIHBvaW50LWxpa2UgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtQb2ludH0gZFxuICogICBQb2ludC1saWtlIHZhbHVlLlxuICogQHJldHVybnMge1BvaW50fVxuICogICB1bmlzdCBwb2ludC5cbiAqL1xuZnVuY3Rpb24gcG9pbnQoZCkge1xuICByZXR1cm4ge2xpbmU6IGQubGluZSwgY29sdW1uOiBkLmNvbHVtbiwgb2Zmc2V0OiBkLm9mZnNldH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NvbmZpZ30gY29tYmluZWRcbiAqIEBwYXJhbSB7QXJyYXk8RXh0ZW5zaW9uIHwgQXJyYXk8RXh0ZW5zaW9uPj59IGV4dGVuc2lvbnNcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBjb25maWd1cmUoY29tYmluZWQsIGV4dGVuc2lvbnMpIHtcbiAgbGV0IGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IGV4dGVuc2lvbnMubGVuZ3RoKSB7XG4gICAgY29uc3QgdmFsdWUgPSBleHRlbnNpb25zW2luZGV4XVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBjb25maWd1cmUoY29tYmluZWQsIHZhbHVlKVxuICAgIH0gZWxzZSB7XG4gICAgICBleHRlbnNpb24oY29tYmluZWQsIHZhbHVlKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Q29uZmlnfSBjb21iaW5lZFxuICogQHBhcmFtIHtFeHRlbnNpb259IGV4dGVuc2lvblxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIGV4dGVuc2lvbihjb21iaW5lZCwgZXh0ZW5zaW9uKSB7XG4gIC8qKiBAdHlwZSB7a2V5b2YgRXh0ZW5zaW9ufSAqL1xuICBsZXQga2V5XG5cbiAgZm9yIChrZXkgaW4gZXh0ZW5zaW9uKSB7XG4gICAgaWYgKG93bi5jYWxsKGV4dGVuc2lvbiwga2V5KSkge1xuICAgICAgaWYgKGtleSA9PT0gJ2NhbkNvbnRhaW5Fb2xzJykge1xuICAgICAgICBjb25zdCByaWdodCA9IGV4dGVuc2lvbltrZXldXG4gICAgICAgIGlmIChyaWdodCkge1xuICAgICAgICAgIGNvbWJpbmVkW2tleV0ucHVzaCguLi5yaWdodClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICd0cmFuc2Zvcm1zJykge1xuICAgICAgICBjb25zdCByaWdodCA9IGV4dGVuc2lvbltrZXldXG4gICAgICAgIGlmIChyaWdodCkge1xuICAgICAgICAgIGNvbWJpbmVkW2tleV0ucHVzaCguLi5yaWdodClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdlbnRlcicgfHwga2V5ID09PSAnZXhpdCcpIHtcbiAgICAgICAgY29uc3QgcmlnaHQgPSBleHRlbnNpb25ba2V5XVxuICAgICAgICBpZiAocmlnaHQpIHtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKGNvbWJpbmVkW2tleV0sIHJpZ2h0KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKiBAdHlwZSB7T25FbnRlckVycm9yfSAqL1xuZnVuY3Rpb24gZGVmYXVsdE9uRXJyb3IobGVmdCwgcmlnaHQpIHtcbiAgaWYgKGxlZnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQ2Fubm90IGNsb3NlIGAnICtcbiAgICAgICAgbGVmdC50eXBlICtcbiAgICAgICAgJ2AgKCcgK1xuICAgICAgICBzdHJpbmdpZnlQb3NpdGlvbih7c3RhcnQ6IGxlZnQuc3RhcnQsIGVuZDogbGVmdC5lbmR9KSArXG4gICAgICAgICcpOiBhIGRpZmZlcmVudCB0b2tlbiAoYCcgK1xuICAgICAgICByaWdodC50eXBlICtcbiAgICAgICAgJ2AsICcgK1xuICAgICAgICBzdHJpbmdpZnlQb3NpdGlvbih7c3RhcnQ6IHJpZ2h0LnN0YXJ0LCBlbmQ6IHJpZ2h0LmVuZH0pICtcbiAgICAgICAgJykgaXMgb3BlbidcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0Nhbm5vdCBjbG9zZSBkb2N1bWVudCwgYSB0b2tlbiAoYCcgK1xuICAgICAgICByaWdodC50eXBlICtcbiAgICAgICAgJ2AsICcgK1xuICAgICAgICBzdHJpbmdpZnlQb3NpdGlvbih7c3RhcnQ6IHJpZ2h0LnN0YXJ0LCBlbmQ6IHJpZ2h0LmVuZH0pICtcbiAgICAgICAgJykgaXMgc3RpbGwgb3BlbidcbiAgICApXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50Q29udGVudH0gRWxlbWVudENvbnRlbnRcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuaW1wb3J0IHtub3JtYWxpemVVcml9IGZyb20gJ21pY3JvbWFyay11dGlsLXNhbml0aXplLXVyaSdcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGhhc3QgZm9vdGVyIGZvciBjYWxsZWQgZm9vdG5vdGUgZGVmaW5pdGlvbnMuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHJldHVybnMge0VsZW1lbnQgfCB1bmRlZmluZWR9XG4gKiAgIGBzZWN0aW9uYCBlbGVtZW50IG9yIGB1bmRlZmluZWRgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9vdGVyKHN0YXRlKSB7XG4gIC8qKiBAdHlwZSB7QXJyYXk8RWxlbWVudENvbnRlbnQ+fSAqL1xuICBjb25zdCBsaXN0SXRlbXMgPSBbXVxuICBsZXQgaW5kZXggPSAtMVxuXG4gIHdoaWxlICgrK2luZGV4IDwgc3RhdGUuZm9vdG5vdGVPcmRlci5sZW5ndGgpIHtcbiAgICBjb25zdCBkZWYgPSBzdGF0ZS5mb290bm90ZUJ5SWRbc3RhdGUuZm9vdG5vdGVPcmRlcltpbmRleF1dXG5cbiAgICBpZiAoIWRlZikge1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBjb25zdCBjb250ZW50ID0gc3RhdGUuYWxsKGRlZilcbiAgICBjb25zdCBpZCA9IFN0cmluZyhkZWYuaWRlbnRpZmllcikudG9VcHBlckNhc2UoKVxuICAgIGNvbnN0IHNhZmVJZCA9IG5vcm1hbGl6ZVVyaShpZC50b0xvd2VyQ2FzZSgpKVxuICAgIGxldCByZWZlcmVuY2VJbmRleCA9IDBcbiAgICAvKiogQHR5cGUge0FycmF5PEVsZW1lbnRDb250ZW50Pn0gKi9cbiAgICBjb25zdCBiYWNrUmVmZXJlbmNlcyA9IFtdXG5cbiAgICB3aGlsZSAoKytyZWZlcmVuY2VJbmRleCA8PSBzdGF0ZS5mb290bm90ZUNvdW50c1tpZF0pIHtcbiAgICAgIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgICAgIGNvbnN0IGJhY2tSZWZlcmVuY2UgPSB7XG4gICAgICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICAgICAgdGFnTmFtZTogJ2EnLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgaHJlZjpcbiAgICAgICAgICAgICcjJyArXG4gICAgICAgICAgICBzdGF0ZS5jbG9iYmVyUHJlZml4ICtcbiAgICAgICAgICAgICdmbnJlZi0nICtcbiAgICAgICAgICAgIHNhZmVJZCArXG4gICAgICAgICAgICAocmVmZXJlbmNlSW5kZXggPiAxID8gJy0nICsgcmVmZXJlbmNlSW5kZXggOiAnJyksXG4gICAgICAgICAgZGF0YUZvb3Rub3RlQmFja3JlZjogdHJ1ZSxcbiAgICAgICAgICBjbGFzc05hbWU6IFsnZGF0YS1mb290bm90ZS1iYWNrcmVmJ10sXG4gICAgICAgICAgYXJpYUxhYmVsOiBzdGF0ZS5mb290bm90ZUJhY2tMYWJlbFxuICAgICAgICB9LFxuICAgICAgICBjaGlsZHJlbjogW3t0eXBlOiAndGV4dCcsIHZhbHVlOiAn4oapJ31dXG4gICAgICB9XG5cbiAgICAgIGlmIChyZWZlcmVuY2VJbmRleCA+IDEpIHtcbiAgICAgICAgYmFja1JlZmVyZW5jZS5jaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgICAgICAgdGFnTmFtZTogJ3N1cCcsXG4gICAgICAgICAgY2hpbGRyZW46IFt7dHlwZTogJ3RleHQnLCB2YWx1ZTogU3RyaW5nKHJlZmVyZW5jZUluZGV4KX1dXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGlmIChiYWNrUmVmZXJlbmNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGJhY2tSZWZlcmVuY2VzLnB1c2goe3R5cGU6ICd0ZXh0JywgdmFsdWU6ICcgJ30pXG4gICAgICB9XG5cbiAgICAgIGJhY2tSZWZlcmVuY2VzLnB1c2goYmFja1JlZmVyZW5jZSlcbiAgICB9XG5cbiAgICBjb25zdCB0YWlsID0gY29udGVudFtjb250ZW50Lmxlbmd0aCAtIDFdXG5cbiAgICBpZiAodGFpbCAmJiB0YWlsLnR5cGUgPT09ICdlbGVtZW50JyAmJiB0YWlsLnRhZ05hbWUgPT09ICdwJykge1xuICAgICAgY29uc3QgdGFpbFRhaWwgPSB0YWlsLmNoaWxkcmVuW3RhaWwuY2hpbGRyZW4ubGVuZ3RoIC0gMV1cbiAgICAgIGlmICh0YWlsVGFpbCAmJiB0YWlsVGFpbC50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgdGFpbFRhaWwudmFsdWUgKz0gJyAnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YWlsLmNoaWxkcmVuLnB1c2goe3R5cGU6ICd0ZXh0JywgdmFsdWU6ICcgJ30pXG4gICAgICB9XG5cbiAgICAgIHRhaWwuY2hpbGRyZW4ucHVzaCguLi5iYWNrUmVmZXJlbmNlcylcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGVudC5wdXNoKC4uLmJhY2tSZWZlcmVuY2VzKVxuICAgIH1cblxuICAgIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgICBjb25zdCBsaXN0SXRlbSA9IHtcbiAgICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICAgIHRhZ05hbWU6ICdsaScsXG4gICAgICBwcm9wZXJ0aWVzOiB7aWQ6IHN0YXRlLmNsb2JiZXJQcmVmaXggKyAnZm4tJyArIHNhZmVJZH0sXG4gICAgICBjaGlsZHJlbjogc3RhdGUud3JhcChjb250ZW50LCB0cnVlKVxuICAgIH1cblxuICAgIHN0YXRlLnBhdGNoKGRlZiwgbGlzdEl0ZW0pXG5cbiAgICBsaXN0SXRlbXMucHVzaChsaXN0SXRlbSlcbiAgfVxuXG4gIGlmIChsaXN0SXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAnc2VjdGlvbicsXG4gICAgcHJvcGVydGllczoge2RhdGFGb290bm90ZXM6IHRydWUsIGNsYXNzTmFtZTogWydmb290bm90ZXMnXX0sXG4gICAgY2hpbGRyZW46IFtcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ2VsZW1lbnQnLFxuICAgICAgICB0YWdOYW1lOiBzdGF0ZS5mb290bm90ZUxhYmVsVGFnTmFtZSxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIC8vIFRvIGRvOiB1c2Ugc3RydWN0dXJlZCBjbG9uZS5cbiAgICAgICAgICAuLi5KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0YXRlLmZvb3Rub3RlTGFiZWxQcm9wZXJ0aWVzKSksXG4gICAgICAgICAgaWQ6ICdmb290bm90ZS1sYWJlbCdcbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRyZW46IFt7dHlwZTogJ3RleHQnLCB2YWx1ZTogc3RhdGUuZm9vdG5vdGVMYWJlbH1dXG4gICAgICB9LFxuICAgICAge3R5cGU6ICd0ZXh0JywgdmFsdWU6ICdcXG4nfSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ2VsZW1lbnQnLFxuICAgICAgICB0YWdOYW1lOiAnb2wnLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgY2hpbGRyZW46IHN0YXRlLndyYXAobGlzdEl0ZW1zLCB0cnVlKVxuICAgICAgfSxcbiAgICAgIHt0eXBlOiAndGV4dCcsIHZhbHVlOiAnXFxuJ31cbiAgICBdXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuQmxvY2txdW90ZX0gQmxvY2txdW90ZVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYGJsb2NrcXVvdGVgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7QmxvY2txdW90ZX0gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0VsZW1lbnR9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJsb2NrcXVvdGUoc3RhdGUsIG5vZGUpIHtcbiAgLyoqIEB0eXBlIHtFbGVtZW50fSAqL1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgdHlwZTogJ2VsZW1lbnQnLFxuICAgIHRhZ05hbWU6ICdibG9ja3F1b3RlJyxcbiAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICBjaGlsZHJlbjogc3RhdGUud3JhcChzdGF0ZS5hbGwobm9kZSksIHRydWUpXG4gIH1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5UZXh0fSBUZXh0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkJyZWFrfSBCcmVha1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYGJyZWFrYCBub2RlIGludG8gaGFzdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge0JyZWFrfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7QXJyYXk8RWxlbWVudCB8IFRleHQ+fVxuICogICBoYXN0IGVsZW1lbnQgY29udGVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhcmRCcmVhayhzdGF0ZSwgbm9kZSkge1xuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGNvbnN0IHJlc3VsdCA9IHt0eXBlOiAnZWxlbWVudCcsIHRhZ05hbWU6ICdicicsIHByb3BlcnRpZXM6IHt9LCBjaGlsZHJlbjogW119XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIFtzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KSwge3R5cGU6ICd0ZXh0JywgdmFsdWU6ICdcXG4nfV1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Qcm9wZXJ0aWVzfSBQcm9wZXJ0aWVzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkNvZGV9IENvZGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG5cbiAqL1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYGNvZGVgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7Q29kZX0gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0VsZW1lbnR9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvZGUoc3RhdGUsIG5vZGUpIHtcbiAgY29uc3QgdmFsdWUgPSBub2RlLnZhbHVlID8gbm9kZS52YWx1ZSArICdcXG4nIDogJydcbiAgLy8gVG8gZG86IG5leHQgbWFqb3IsIHVzZSBgbm9kZS5sYW5nYCB3L28gcmVnZXgsIHRoZSBzcGxpdHRpbmfigJlzIGJlZW4gZ29pbmdcbiAgLy8gb24gZm9yIHllYXJzIGluIHJlbWFyayBub3cuXG4gIGNvbnN0IGxhbmcgPSBub2RlLmxhbmcgPyBub2RlLmxhbmcubWF0Y2goL15bXiBcXHRdKyg/PVsgXFx0XXwkKS8pIDogbnVsbFxuICAvKiogQHR5cGUge1Byb3BlcnRpZXN9ICovXG4gIGNvbnN0IHByb3BlcnRpZXMgPSB7fVxuXG4gIGlmIChsYW5nKSB7XG4gICAgcHJvcGVydGllcy5jbGFzc05hbWUgPSBbJ2xhbmd1YWdlLScgKyBsYW5nXVxuICB9XG5cbiAgLy8gQ3JlYXRlIGA8Y29kZT5gLlxuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGxldCByZXN1bHQgPSB7XG4gICAgdHlwZTogJ2VsZW1lbnQnLFxuICAgIHRhZ05hbWU6ICdjb2RlJyxcbiAgICBwcm9wZXJ0aWVzLFxuICAgIGNoaWxkcmVuOiBbe3R5cGU6ICd0ZXh0JywgdmFsdWV9XVxuICB9XG5cbiAgaWYgKG5vZGUubWV0YSkge1xuICAgIHJlc3VsdC5kYXRhID0ge21ldGE6IG5vZGUubWV0YX1cbiAgfVxuXG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmVzdWx0ID0gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcblxuICAvLyBDcmVhdGUgYDxwcmU+YC5cbiAgcmVzdWx0ID0ge3R5cGU6ICdlbGVtZW50JywgdGFnTmFtZTogJ3ByZScsIHByb3BlcnRpZXM6IHt9LCBjaGlsZHJlbjogW3Jlc3VsdF19XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHJlc3VsdFxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5EZWxldGV9IERlbGV0ZVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcblxuICovXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgZGVsZXRlYCBub2RlIGludG8gaGFzdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge0RlbGV0ZX0gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0VsZW1lbnR9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmlrZXRocm91Z2goc3RhdGUsIG5vZGUpIHtcbiAgLyoqIEB0eXBlIHtFbGVtZW50fSAqL1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgdHlwZTogJ2VsZW1lbnQnLFxuICAgIHRhZ05hbWU6ICdkZWwnLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGNoaWxkcmVuOiBzdGF0ZS5hbGwobm9kZSlcbiAgfVxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5FbXBoYXNpc30gRW1waGFzaXNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGBlbXBoYXNpc2Agbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtFbXBoYXNpc30gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0VsZW1lbnR9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVtcGhhc2lzKHN0YXRlLCBub2RlKSB7XG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAnZW0nLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGNoaWxkcmVuOiBzdGF0ZS5hbGwobm9kZSlcbiAgfVxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkZvb3Rub3RlUmVmZXJlbmNlfSBGb290bm90ZVJlZmVyZW5jZVxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuaW1wb3J0IHtub3JtYWxpemVVcml9IGZyb20gJ21pY3JvbWFyay11dGlsLXNhbml0aXplLXVyaSdcblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGBmb290bm90ZVJlZmVyZW5jZWAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtGb290bm90ZVJlZmVyZW5jZX0gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0VsZW1lbnR9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvb3Rub3RlUmVmZXJlbmNlKHN0YXRlLCBub2RlKSB7XG4gIGNvbnN0IGlkID0gU3RyaW5nKG5vZGUuaWRlbnRpZmllcikudG9VcHBlckNhc2UoKVxuICBjb25zdCBzYWZlSWQgPSBub3JtYWxpemVVcmkoaWQudG9Mb3dlckNhc2UoKSlcbiAgY29uc3QgaW5kZXggPSBzdGF0ZS5mb290bm90ZU9yZGVyLmluZGV4T2YoaWQpXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICBsZXQgY291bnRlclxuXG4gIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICBzdGF0ZS5mb290bm90ZU9yZGVyLnB1c2goaWQpXG4gICAgc3RhdGUuZm9vdG5vdGVDb3VudHNbaWRdID0gMVxuICAgIGNvdW50ZXIgPSBzdGF0ZS5mb290bm90ZU9yZGVyLmxlbmd0aFxuICB9IGVsc2Uge1xuICAgIHN0YXRlLmZvb3Rub3RlQ291bnRzW2lkXSsrXG4gICAgY291bnRlciA9IGluZGV4ICsgMVxuICB9XG5cbiAgY29uc3QgcmV1c2VDb3VudGVyID0gc3RhdGUuZm9vdG5vdGVDb3VudHNbaWRdXG5cbiAgLyoqIEB0eXBlIHtFbGVtZW50fSAqL1xuICBjb25zdCBsaW5rID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAnYScsXG4gICAgcHJvcGVydGllczoge1xuICAgICAgaHJlZjogJyMnICsgc3RhdGUuY2xvYmJlclByZWZpeCArICdmbi0nICsgc2FmZUlkLFxuICAgICAgaWQ6XG4gICAgICAgIHN0YXRlLmNsb2JiZXJQcmVmaXggK1xuICAgICAgICAnZm5yZWYtJyArXG4gICAgICAgIHNhZmVJZCArXG4gICAgICAgIChyZXVzZUNvdW50ZXIgPiAxID8gJy0nICsgcmV1c2VDb3VudGVyIDogJycpLFxuICAgICAgZGF0YUZvb3Rub3RlUmVmOiB0cnVlLFxuICAgICAgYXJpYURlc2NyaWJlZEJ5OiBbJ2Zvb3Rub3RlLWxhYmVsJ11cbiAgICB9LFxuICAgIGNoaWxkcmVuOiBbe3R5cGU6ICd0ZXh0JywgdmFsdWU6IFN0cmluZyhjb3VudGVyKX1dXG4gIH1cbiAgc3RhdGUucGF0Y2gobm9kZSwgbGluaylcblxuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGNvbnN0IHN1cCA9IHtcbiAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgdGFnTmFtZTogJ3N1cCcsXG4gICAgcHJvcGVydGllczoge30sXG4gICAgY2hpbGRyZW46IFtsaW5rXVxuICB9XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHN1cClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCBzdXApXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkZvb3Rub3RlfSBGb290bm90ZVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG5pbXBvcnQge2Zvb3Rub3RlUmVmZXJlbmNlfSBmcm9tICcuL2Zvb3Rub3RlLXJlZmVyZW5jZS5qcydcblxuLy8gVG8gZG86IHdoZW4gYm90aDpcbi8vICogPGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb21hcmsvbWljcm9tYXJrLWV4dGVuc2lvbi1mb290bm90ZT5cbi8vICogPGh0dHBzOi8vZ2l0aHViLmNvbS9zeW50YXgtdHJlZS9tZGFzdC11dGlsLWZvb3Rub3RlPlxuLy8g4oCmYXJlIGFyY2hpdmVkLCByZW1vdmUgdGhpcyAoYWxzbyBmcm9tIG1kYXN0KS5cbi8vIFRoZXNlIGlubGluZSBub3RlcyBhcmUgbm90IHVzZWQgaW4gR0ZNLlxuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYGZvb3Rub3RlYCBub2RlIGludG8gaGFzdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge0Zvb3Rub3RlfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9vdG5vdGUoc3RhdGUsIG5vZGUpIHtcbiAgY29uc3QgZm9vdG5vdGVCeUlkID0gc3RhdGUuZm9vdG5vdGVCeUlkXG4gIGxldCBubyA9IDFcblxuICB3aGlsZSAobm8gaW4gZm9vdG5vdGVCeUlkKSBubysrXG5cbiAgY29uc3QgaWRlbnRpZmllciA9IFN0cmluZyhubylcblxuICBmb290bm90ZUJ5SWRbaWRlbnRpZmllcl0gPSB7XG4gICAgdHlwZTogJ2Zvb3Rub3RlRGVmaW5pdGlvbicsXG4gICAgaWRlbnRpZmllcixcbiAgICBjaGlsZHJlbjogW3t0eXBlOiAncGFyYWdyYXBoJywgY2hpbGRyZW46IG5vZGUuY2hpbGRyZW59XSxcbiAgICBwb3NpdGlvbjogbm9kZS5wb3NpdGlvblxuICB9XG5cbiAgcmV0dXJuIGZvb3Rub3RlUmVmZXJlbmNlKHN0YXRlLCB7XG4gICAgdHlwZTogJ2Zvb3Rub3RlUmVmZXJlbmNlJyxcbiAgICBpZGVudGlmaWVyLFxuICAgIHBvc2l0aW9uOiBub2RlLnBvc2l0aW9uXG4gIH0pXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkhlYWRpbmd9IEhlYWRpbmdcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGBoZWFkaW5nYCBub2RlIGludG8gaGFzdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge0hlYWRpbmd9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoZWFkaW5nKHN0YXRlLCBub2RlKSB7XG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAnaCcgKyBub2RlLmRlcHRoLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGNoaWxkcmVuOiBzdGF0ZS5hbGwobm9kZSlcbiAgfVxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5IVE1MfSBIdG1sXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vaW5kZXguanMnKS5SYXd9IFJhd1xuICovXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgaHRtbGAgbm9kZSBpbnRvIGhhc3QgKGByYXdgIG5vZGUgaW4gZGFuZ2Vyb3VzIG1vZGUsIG90aGVyd2lzZVxuICogbm90aGluZykuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtIdG1sfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7UmF3IHwgRWxlbWVudCB8IG51bGx9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGh0bWwoc3RhdGUsIG5vZGUpIHtcbiAgaWYgKHN0YXRlLmRhbmdlcm91cykge1xuICAgIC8qKiBAdHlwZSB7UmF3fSAqL1xuICAgIGNvbnN0IHJlc3VsdCA9IHt0eXBlOiAncmF3JywgdmFsdWU6IG5vZGUudmFsdWV9XG4gICAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICAgIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxuICB9XG5cbiAgLy8gVG8gZG86IG5leHQgbWFqb3I6IHJldHVybiBgdW5kZWZpbmVkYC5cbiAgcmV0dXJuIG51bGxcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnRDb250ZW50fSBFbGVtZW50Q29udGVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Qcm9wZXJ0aWVzfSBQcm9wZXJ0aWVzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkltYWdlUmVmZXJlbmNlfSBJbWFnZVJlZmVyZW5jZVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG5pbXBvcnQge25vcm1hbGl6ZVVyaX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtc2FuaXRpemUtdXJpJ1xuaW1wb3J0IHtyZXZlcnR9IGZyb20gJy4uL3JldmVydC5qcydcblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGBpbWFnZVJlZmVyZW5jZWAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtJbWFnZVJlZmVyZW5jZX0gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0VsZW1lbnRDb250ZW50IHwgQXJyYXk8RWxlbWVudENvbnRlbnQ+fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbWFnZVJlZmVyZW5jZShzdGF0ZSwgbm9kZSkge1xuICBjb25zdCBkZWYgPSBzdGF0ZS5kZWZpbml0aW9uKG5vZGUuaWRlbnRpZmllcilcblxuICBpZiAoIWRlZikge1xuICAgIHJldHVybiByZXZlcnQoc3RhdGUsIG5vZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1Byb3BlcnRpZXN9ICovXG4gIGNvbnN0IHByb3BlcnRpZXMgPSB7c3JjOiBub3JtYWxpemVVcmkoZGVmLnVybCB8fCAnJyksIGFsdDogbm9kZS5hbHR9XG5cbiAgaWYgKGRlZi50aXRsZSAhPT0gbnVsbCAmJiBkZWYudGl0bGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHByb3BlcnRpZXMudGl0bGUgPSBkZWYudGl0bGVcbiAgfVxuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge3R5cGU6ICdlbGVtZW50JywgdGFnTmFtZTogJ2ltZycsIHByb3BlcnRpZXMsIGNoaWxkcmVuOiBbXX1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Qcm9wZXJ0aWVzfSBQcm9wZXJ0aWVzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkltYWdlfSBJbWFnZVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG5pbXBvcnQge25vcm1hbGl6ZVVyaX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtc2FuaXRpemUtdXJpJ1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYGltYWdlYCBub2RlIGludG8gaGFzdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge0ltYWdlfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW1hZ2Uoc3RhdGUsIG5vZGUpIHtcbiAgLyoqIEB0eXBlIHtQcm9wZXJ0aWVzfSAqL1xuICBjb25zdCBwcm9wZXJ0aWVzID0ge3NyYzogbm9ybWFsaXplVXJpKG5vZGUudXJsKX1cblxuICBpZiAobm9kZS5hbHQgIT09IG51bGwgJiYgbm9kZS5hbHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHByb3BlcnRpZXMuYWx0ID0gbm9kZS5hbHRcbiAgfVxuXG4gIGlmIChub2RlLnRpdGxlICE9PSBudWxsICYmIG5vZGUudGl0bGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHByb3BlcnRpZXMudGl0bGUgPSBub2RlLnRpdGxlXG4gIH1cblxuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGNvbnN0IHJlc3VsdCA9IHt0eXBlOiAnZWxlbWVudCcsIHRhZ05hbWU6ICdpbWcnLCBwcm9wZXJ0aWVzLCBjaGlsZHJlbjogW119XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG4iLCJpbXBvcnQge2Jsb2NrcXVvdGV9IGZyb20gJy4vYmxvY2txdW90ZS5qcydcbmltcG9ydCB7aGFyZEJyZWFrfSBmcm9tICcuL2JyZWFrLmpzJ1xuaW1wb3J0IHtjb2RlfSBmcm9tICcuL2NvZGUuanMnXG5pbXBvcnQge3N0cmlrZXRocm91Z2h9IGZyb20gJy4vZGVsZXRlLmpzJ1xuaW1wb3J0IHtlbXBoYXNpc30gZnJvbSAnLi9lbXBoYXNpcy5qcydcbmltcG9ydCB7Zm9vdG5vdGVSZWZlcmVuY2V9IGZyb20gJy4vZm9vdG5vdGUtcmVmZXJlbmNlLmpzJ1xuaW1wb3J0IHtmb290bm90ZX0gZnJvbSAnLi9mb290bm90ZS5qcydcbmltcG9ydCB7aGVhZGluZ30gZnJvbSAnLi9oZWFkaW5nLmpzJ1xuaW1wb3J0IHtodG1sfSBmcm9tICcuL2h0bWwuanMnXG5pbXBvcnQge2ltYWdlUmVmZXJlbmNlfSBmcm9tICcuL2ltYWdlLXJlZmVyZW5jZS5qcydcbmltcG9ydCB7aW1hZ2V9IGZyb20gJy4vaW1hZ2UuanMnXG5pbXBvcnQge2lubGluZUNvZGV9IGZyb20gJy4vaW5saW5lLWNvZGUuanMnXG5pbXBvcnQge2xpbmtSZWZlcmVuY2V9IGZyb20gJy4vbGluay1yZWZlcmVuY2UuanMnXG5pbXBvcnQge2xpbmt9IGZyb20gJy4vbGluay5qcydcbmltcG9ydCB7bGlzdEl0ZW19IGZyb20gJy4vbGlzdC1pdGVtLmpzJ1xuaW1wb3J0IHtsaXN0fSBmcm9tICcuL2xpc3QuanMnXG5pbXBvcnQge3BhcmFncmFwaH0gZnJvbSAnLi9wYXJhZ3JhcGguanMnXG5pbXBvcnQge3Jvb3R9IGZyb20gJy4vcm9vdC5qcydcbmltcG9ydCB7c3Ryb25nfSBmcm9tICcuL3N0cm9uZy5qcydcbmltcG9ydCB7dGFibGV9IGZyb20gJy4vdGFibGUuanMnXG5pbXBvcnQge3RhYmxlUm93fSBmcm9tICcuL3RhYmxlLXJvdy5qcydcbmltcG9ydCB7dGFibGVDZWxsfSBmcm9tICcuL3RhYmxlLWNlbGwuanMnXG5pbXBvcnQge3RleHR9IGZyb20gJy4vdGV4dC5qcydcbmltcG9ydCB7dGhlbWF0aWNCcmVha30gZnJvbSAnLi90aGVtYXRpYy1icmVhay5qcydcblxuLyoqXG4gKiBEZWZhdWx0IGhhbmRsZXJzIGZvciBub2Rlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IGhhbmRsZXJzID0ge1xuICBibG9ja3F1b3RlLFxuICBicmVhazogaGFyZEJyZWFrLFxuICBjb2RlLFxuICBkZWxldGU6IHN0cmlrZXRocm91Z2gsXG4gIGVtcGhhc2lzLFxuICBmb290bm90ZVJlZmVyZW5jZSxcbiAgZm9vdG5vdGUsXG4gIGhlYWRpbmcsXG4gIGh0bWwsXG4gIGltYWdlUmVmZXJlbmNlLFxuICBpbWFnZSxcbiAgaW5saW5lQ29kZSxcbiAgbGlua1JlZmVyZW5jZSxcbiAgbGluayxcbiAgbGlzdEl0ZW0sXG4gIGxpc3QsXG4gIHBhcmFncmFwaCxcbiAgcm9vdCxcbiAgc3Ryb25nLFxuICB0YWJsZSxcbiAgdGFibGVDZWxsLFxuICB0YWJsZVJvdyxcbiAgdGV4dCxcbiAgdGhlbWF0aWNCcmVhayxcbiAgdG9tbDogaWdub3JlLFxuICB5YW1sOiBpZ25vcmUsXG4gIGRlZmluaXRpb246IGlnbm9yZSxcbiAgZm9vdG5vdGVEZWZpbml0aW9uOiBpZ25vcmVcbn1cblxuLy8gUmV0dXJuIG5vdGhpbmcgZm9yIG5vZGVzIHRoYXQgYXJlIGlnbm9yZWQuXG5mdW5jdGlvbiBpZ25vcmUoKSB7XG4gIC8vIFRvIGRvOiBuZXh0IG1ham9yOiByZXR1cm4gYHVuZGVmaW5lZGAuXG4gIHJldHVybiBudWxsXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuVGV4dH0gVGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5JbmxpbmVDb2RlfSBJbmxpbmVDb2RlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgaW5saW5lQ29kZWAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtJbmxpbmVDb2RlfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5saW5lQ29kZShzdGF0ZSwgbm9kZSkge1xuICAvKiogQHR5cGUge1RleHR9ICovXG4gIGNvbnN0IHRleHQgPSB7dHlwZTogJ3RleHQnLCB2YWx1ZTogbm9kZS52YWx1ZS5yZXBsYWNlKC9cXHI/XFxufFxcci9nLCAnICcpfVxuICBzdGF0ZS5wYXRjaChub2RlLCB0ZXh0KVxuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAnY29kZScsXG4gICAgcHJvcGVydGllczoge30sXG4gICAgY2hpbGRyZW46IFt0ZXh0XVxuICB9XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudENvbnRlbnR9IEVsZW1lbnRDb250ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuUHJvcGVydGllc30gUHJvcGVydGllc1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5MaW5rUmVmZXJlbmNlfSBMaW5rUmVmZXJlbmNlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbmltcG9ydCB7bm9ybWFsaXplVXJpfSBmcm9tICdtaWNyb21hcmstdXRpbC1zYW5pdGl6ZS11cmknXG5pbXBvcnQge3JldmVydH0gZnJvbSAnLi4vcmV2ZXJ0LmpzJ1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYGxpbmtSZWZlcmVuY2VgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7TGlua1JlZmVyZW5jZX0gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0VsZW1lbnRDb250ZW50IHwgQXJyYXk8RWxlbWVudENvbnRlbnQ+fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaW5rUmVmZXJlbmNlKHN0YXRlLCBub2RlKSB7XG4gIGNvbnN0IGRlZiA9IHN0YXRlLmRlZmluaXRpb24obm9kZS5pZGVudGlmaWVyKVxuXG4gIGlmICghZGVmKSB7XG4gICAgcmV0dXJuIHJldmVydChzdGF0ZSwgbm9kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7UHJvcGVydGllc30gKi9cbiAgY29uc3QgcHJvcGVydGllcyA9IHtocmVmOiBub3JtYWxpemVVcmkoZGVmLnVybCB8fCAnJyl9XG5cbiAgaWYgKGRlZi50aXRsZSAhPT0gbnVsbCAmJiBkZWYudGl0bGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHByb3BlcnRpZXMudGl0bGUgPSBkZWYudGl0bGVcbiAgfVxuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAnYScsXG4gICAgcHJvcGVydGllcyxcbiAgICBjaGlsZHJlbjogc3RhdGUuYWxsKG5vZGUpXG4gIH1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Qcm9wZXJ0aWVzfSBQcm9wZXJ0aWVzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkxpbmt9IExpbmtcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuaW1wb3J0IHtub3JtYWxpemVVcml9IGZyb20gJ21pY3JvbWFyay11dGlsLXNhbml0aXplLXVyaSdcblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGBsaW5rYCBub2RlIGludG8gaGFzdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge0xpbmt9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaW5rKHN0YXRlLCBub2RlKSB7XG4gIC8qKiBAdHlwZSB7UHJvcGVydGllc30gKi9cbiAgY29uc3QgcHJvcGVydGllcyA9IHtocmVmOiBub3JtYWxpemVVcmkobm9kZS51cmwpfVxuXG4gIGlmIChub2RlLnRpdGxlICE9PSBudWxsICYmIG5vZGUudGl0bGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHByb3BlcnRpZXMudGl0bGUgPSBub2RlLnRpdGxlXG4gIH1cblxuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgdGFnTmFtZTogJ2EnLFxuICAgIHByb3BlcnRpZXMsXG4gICAgY2hpbGRyZW46IHN0YXRlLmFsbChub2RlKVxuICB9XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudENvbnRlbnR9IEVsZW1lbnRDb250ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuUHJvcGVydGllc30gUHJvcGVydGllc1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Db250ZW50fSBDb250ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkxpc3RJdGVtfSBMaXN0SXRlbVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5QYXJlbnR9IFBhcmVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Sb290fSBSb290XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge1Jvb3QgfCBDb250ZW50fSBOb2Rlc1xuICogQHR5cGVkZWYge0V4dHJhY3Q8Tm9kZXMsIFBhcmVudD59IFBhcmVudHNcbiAqL1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYGxpc3RJdGVtYCBub2RlIGludG8gaGFzdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge0xpc3RJdGVtfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcGFyYW0ge1BhcmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBwYXJlbnRcbiAqICAgUGFyZW50IG9mIGBub2RlYC5cbiAqIEByZXR1cm5zIHtFbGVtZW50fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaXN0SXRlbShzdGF0ZSwgbm9kZSwgcGFyZW50KSB7XG4gIGNvbnN0IHJlc3VsdHMgPSBzdGF0ZS5hbGwobm9kZSlcbiAgY29uc3QgbG9vc2UgPSBwYXJlbnQgPyBsaXN0TG9vc2UocGFyZW50KSA6IGxpc3RJdGVtTG9vc2Uobm9kZSlcbiAgLyoqIEB0eXBlIHtQcm9wZXJ0aWVzfSAqL1xuICBjb25zdCBwcm9wZXJ0aWVzID0ge31cbiAgLyoqIEB0eXBlIHtBcnJheTxFbGVtZW50Q29udGVudD59ICovXG4gIGNvbnN0IGNoaWxkcmVuID0gW11cblxuICBpZiAodHlwZW9mIG5vZGUuY2hlY2tlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgY29uc3QgaGVhZCA9IHJlc3VsdHNbMF1cbiAgICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gICAgbGV0IHBhcmFncmFwaFxuXG4gICAgaWYgKGhlYWQgJiYgaGVhZC50eXBlID09PSAnZWxlbWVudCcgJiYgaGVhZC50YWdOYW1lID09PSAncCcpIHtcbiAgICAgIHBhcmFncmFwaCA9IGhlYWRcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyYWdyYXBoID0ge3R5cGU6ICdlbGVtZW50JywgdGFnTmFtZTogJ3AnLCBwcm9wZXJ0aWVzOiB7fSwgY2hpbGRyZW46IFtdfVxuICAgICAgcmVzdWx0cy51bnNoaWZ0KHBhcmFncmFwaClcbiAgICB9XG5cbiAgICBpZiAocGFyYWdyYXBoLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIHBhcmFncmFwaC5jaGlsZHJlbi51bnNoaWZ0KHt0eXBlOiAndGV4dCcsIHZhbHVlOiAnICd9KVxuICAgIH1cblxuICAgIHBhcmFncmFwaC5jaGlsZHJlbi51bnNoaWZ0KHtcbiAgICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICAgIHRhZ05hbWU6ICdpbnB1dCcsXG4gICAgICBwcm9wZXJ0aWVzOiB7dHlwZTogJ2NoZWNrYm94JywgY2hlY2tlZDogbm9kZS5jaGVja2VkLCBkaXNhYmxlZDogdHJ1ZX0sXG4gICAgICBjaGlsZHJlbjogW11cbiAgICB9KVxuXG4gICAgLy8gQWNjb3JkaW5nIHRvIGdpdGh1Yi1tYXJrZG93bi1jc3MsIHRoaXMgY2xhc3MgaGlkZXMgYnVsbGV0LlxuICAgIC8vIFNlZTogPGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvZ2l0aHViLW1hcmtkb3duLWNzcz4uXG4gICAgcHJvcGVydGllcy5jbGFzc05hbWUgPSBbJ3Rhc2stbGlzdC1pdGVtJ11cbiAgfVxuXG4gIGxldCBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCByZXN1bHRzLmxlbmd0aCkge1xuICAgIGNvbnN0IGNoaWxkID0gcmVzdWx0c1tpbmRleF1cblxuICAgIC8vIEFkZCBlb2xzIGJlZm9yZSBub2RlcywgZXhjZXB0IGlmIHRoaXMgaXMgYSBsb29zZSwgZmlyc3QgcGFyYWdyYXBoLlxuICAgIGlmIChcbiAgICAgIGxvb3NlIHx8XG4gICAgICBpbmRleCAhPT0gMCB8fFxuICAgICAgY2hpbGQudHlwZSAhPT0gJ2VsZW1lbnQnIHx8XG4gICAgICBjaGlsZC50YWdOYW1lICE9PSAncCdcbiAgICApIHtcbiAgICAgIGNoaWxkcmVuLnB1c2goe3R5cGU6ICd0ZXh0JywgdmFsdWU6ICdcXG4nfSlcbiAgICB9XG5cbiAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ2VsZW1lbnQnICYmIGNoaWxkLnRhZ05hbWUgPT09ICdwJyAmJiAhbG9vc2UpIHtcbiAgICAgIGNoaWxkcmVuLnB1c2goLi4uY2hpbGQuY2hpbGRyZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGQpXG4gICAgfVxuICB9XG5cbiAgY29uc3QgdGFpbCA9IHJlc3VsdHNbcmVzdWx0cy5sZW5ndGggLSAxXVxuXG4gIC8vIEFkZCBhIGZpbmFsIGVvbC5cbiAgaWYgKHRhaWwgJiYgKGxvb3NlIHx8IHRhaWwudHlwZSAhPT0gJ2VsZW1lbnQnIHx8IHRhaWwudGFnTmFtZSAhPT0gJ3AnKSkge1xuICAgIGNoaWxkcmVuLnB1c2goe3R5cGU6ICd0ZXh0JywgdmFsdWU6ICdcXG4nfSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge3R5cGU6ICdlbGVtZW50JywgdGFnTmFtZTogJ2xpJywgcHJvcGVydGllcywgY2hpbGRyZW59XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtQYXJlbnRzfSBub2RlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBsaXN0TG9vc2Uobm9kZSkge1xuICBsZXQgbG9vc2UgPSBmYWxzZVxuICBpZiAobm9kZS50eXBlID09PSAnbGlzdCcpIHtcbiAgICBsb29zZSA9IG5vZGUuc3ByZWFkIHx8IGZhbHNlXG4gICAgY29uc3QgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuXG4gICAgbGV0IGluZGV4ID0gLTFcblxuICAgIHdoaWxlICghbG9vc2UgJiYgKytpbmRleCA8IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgbG9vc2UgPSBsaXN0SXRlbUxvb3NlKGNoaWxkcmVuW2luZGV4XSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9vc2Vcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0xpc3RJdGVtfSBub2RlXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBsaXN0SXRlbUxvb3NlKG5vZGUpIHtcbiAgY29uc3Qgc3ByZWFkID0gbm9kZS5zcHJlYWRcblxuICByZXR1cm4gc3ByZWFkID09PSB1bmRlZmluZWQgfHwgc3ByZWFkID09PSBudWxsXG4gICAgPyBub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDFcbiAgICA6IHNwcmVhZFxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLlByb3BlcnRpZXN9IFByb3BlcnRpZXNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuTGlzdH0gTGlzdFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYGxpc3RgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7TGlzdH0gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0VsZW1lbnR9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpc3Qoc3RhdGUsIG5vZGUpIHtcbiAgLyoqIEB0eXBlIHtQcm9wZXJ0aWVzfSAqL1xuICBjb25zdCBwcm9wZXJ0aWVzID0ge31cbiAgY29uc3QgcmVzdWx0cyA9IHN0YXRlLmFsbChub2RlKVxuICBsZXQgaW5kZXggPSAtMVxuXG4gIGlmICh0eXBlb2Ygbm9kZS5zdGFydCA9PT0gJ251bWJlcicgJiYgbm9kZS5zdGFydCAhPT0gMSkge1xuICAgIHByb3BlcnRpZXMuc3RhcnQgPSBub2RlLnN0YXJ0XG4gIH1cblxuICAvLyBMaWtlIEdpdEh1YiwgYWRkIGEgY2xhc3MgZm9yIGN1c3RvbSBzdHlsaW5nLlxuICB3aGlsZSAoKytpbmRleCA8IHJlc3VsdHMubGVuZ3RoKSB7XG4gICAgY29uc3QgY2hpbGQgPSByZXN1bHRzW2luZGV4XVxuXG4gICAgaWYgKFxuICAgICAgY2hpbGQudHlwZSA9PT0gJ2VsZW1lbnQnICYmXG4gICAgICBjaGlsZC50YWdOYW1lID09PSAnbGknICYmXG4gICAgICBjaGlsZC5wcm9wZXJ0aWVzICYmXG4gICAgICBBcnJheS5pc0FycmF5KGNoaWxkLnByb3BlcnRpZXMuY2xhc3NOYW1lKSAmJlxuICAgICAgY2hpbGQucHJvcGVydGllcy5jbGFzc05hbWUuaW5jbHVkZXMoJ3Rhc2stbGlzdC1pdGVtJylcbiAgICApIHtcbiAgICAgIHByb3BlcnRpZXMuY2xhc3NOYW1lID0gWydjb250YWlucy10YXNrLWxpc3QnXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgdGFnTmFtZTogbm9kZS5vcmRlcmVkID8gJ29sJyA6ICd1bCcsXG4gICAgcHJvcGVydGllcyxcbiAgICBjaGlsZHJlbjogc3RhdGUud3JhcChyZXN1bHRzLCB0cnVlKVxuICB9XG4gIHN0YXRlLnBhdGNoKG5vZGUsIHJlc3VsdClcbiAgcmV0dXJuIHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlBhcmFncmFwaH0gUGFyYWdyYXBoXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zdGF0ZS5qcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgcGFyYWdyYXBoYCBub2RlIGludG8gaGFzdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge1BhcmFncmFwaH0gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0VsZW1lbnR9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcmFncmFwaChzdGF0ZSwgbm9kZSkge1xuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgdGFnTmFtZTogJ3AnLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGNoaWxkcmVuOiBzdGF0ZS5hbGwobm9kZSlcbiAgfVxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuUm9vdH0gSGFzdFJvb3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBIYXN0RWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Sb290fSBNZGFzdFJvb3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGByb290YCBub2RlIGludG8gaGFzdC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge01kYXN0Um9vdH0gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0hhc3RSb290IHwgSGFzdEVsZW1lbnR9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvb3Qoc3RhdGUsIG5vZGUpIHtcbiAgLyoqIEB0eXBlIHtIYXN0Um9vdH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge3R5cGU6ICdyb290JywgY2hpbGRyZW46IHN0YXRlLndyYXAoc3RhdGUuYWxsKG5vZGUpKX1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuU3Ryb25nfSBTdHJvbmdcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGBzdHJvbmdgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7U3Ryb25nfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3Ryb25nKHN0YXRlLCBub2RlKSB7XG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAnc3Ryb25nJyxcbiAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICBjaGlsZHJlbjogc3RhdGUuYWxsKG5vZGUpXG4gIH1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuVGFibGVDZWxsfSBUYWJsZUNlbGxcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGB0YWJsZUNlbGxgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7VGFibGVDZWxsfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcmV0dXJucyB7RWxlbWVudH1cbiAqICAgaGFzdCBub2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFibGVDZWxsKHN0YXRlLCBub2RlKSB7XG4gIC8vIE5vdGU6IHRoaXMgZnVuY3Rpb24gaXMgbm9ybWFsbHkgbm90IGNhbGxlZDogc2VlIGB0YWJsZS1yb3dgIGZvciBob3cgcm93c1xuICAvLyBhbmQgdGhlaXIgY2VsbHMgYXJlIGNvbXBpbGVkLlxuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgdGFnTmFtZTogJ3RkJywgLy8gQXNzdW1lIGJvZHkgY2VsbC5cbiAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICBjaGlsZHJlbjogc3RhdGUuYWxsKG5vZGUpXG4gIH1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLlByb3BlcnRpZXN9IFByb3BlcnRpZXNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudENvbnRlbnR9IEVsZW1lbnRDb250ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkNvbnRlbnR9IENvbnRlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuUGFyZW50fSBQYXJlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuUm9vdH0gUm9vdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5UYWJsZVJvd30gVGFibGVSb3dcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7Um9vdCB8IENvbnRlbnR9IE5vZGVzXG4gKiBAdHlwZWRlZiB7RXh0cmFjdDxOb2RlcywgUGFyZW50Pn0gUGFyZW50c1xuICovXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgdGFibGVSb3dgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7VGFibGVSb3d9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEBwYXJhbSB7UGFyZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IHBhcmVudFxuICogICBQYXJlbnQgb2YgYG5vZGVgLlxuICogQHJldHVybnMge0VsZW1lbnR9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRhYmxlUm93KHN0YXRlLCBub2RlLCBwYXJlbnQpIHtcbiAgY29uc3Qgc2libGluZ3MgPSBwYXJlbnQgPyBwYXJlbnQuY2hpbGRyZW4gOiB1bmRlZmluZWRcbiAgLy8gR2VuZXJhdGUgYSBib2R5IHJvdyB3aGVuIHdpdGhvdXQgcGFyZW50LlxuICBjb25zdCByb3dJbmRleCA9IHNpYmxpbmdzID8gc2libGluZ3MuaW5kZXhPZihub2RlKSA6IDFcbiAgY29uc3QgdGFnTmFtZSA9IHJvd0luZGV4ID09PSAwID8gJ3RoJyA6ICd0ZCdcbiAgY29uc3QgYWxpZ24gPSBwYXJlbnQgJiYgcGFyZW50LnR5cGUgPT09ICd0YWJsZScgPyBwYXJlbnQuYWxpZ24gOiB1bmRlZmluZWRcbiAgY29uc3QgbGVuZ3RoID0gYWxpZ24gPyBhbGlnbi5sZW5ndGggOiBub2RlLmNoaWxkcmVuLmxlbmd0aFxuICBsZXQgY2VsbEluZGV4ID0gLTFcbiAgLyoqIEB0eXBlIHtBcnJheTxFbGVtZW50Q29udGVudD59ICovXG4gIGNvbnN0IGNlbGxzID0gW11cblxuICB3aGlsZSAoKytjZWxsSW5kZXggPCBsZW5ndGgpIHtcbiAgICAvLyBOb3RlOiBjYW4gYWxzbyBiZSB1bmRlZmluZWQuXG4gICAgY29uc3QgY2VsbCA9IG5vZGUuY2hpbGRyZW5bY2VsbEluZGV4XVxuICAgIC8qKiBAdHlwZSB7UHJvcGVydGllc30gKi9cbiAgICBjb25zdCBwcm9wZXJ0aWVzID0ge31cbiAgICBjb25zdCBhbGlnblZhbHVlID0gYWxpZ24gPyBhbGlnbltjZWxsSW5kZXhdIDogdW5kZWZpbmVkXG5cbiAgICBpZiAoYWxpZ25WYWx1ZSkge1xuICAgICAgcHJvcGVydGllcy5hbGlnbiA9IGFsaWduVmFsdWVcbiAgICB9XG5cbiAgICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gICAgbGV0IHJlc3VsdCA9IHt0eXBlOiAnZWxlbWVudCcsIHRhZ05hbWUsIHByb3BlcnRpZXMsIGNoaWxkcmVuOiBbXX1cblxuICAgIGlmIChjZWxsKSB7XG4gICAgICByZXN1bHQuY2hpbGRyZW4gPSBzdGF0ZS5hbGwoY2VsbClcbiAgICAgIHN0YXRlLnBhdGNoKGNlbGwsIHJlc3VsdClcbiAgICAgIHJlc3VsdCA9IHN0YXRlLmFwcGx5RGF0YShub2RlLCByZXN1bHQpXG4gICAgfVxuXG4gICAgY2VsbHMucHVzaChyZXN1bHQpXG4gIH1cblxuICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgdGFnTmFtZTogJ3RyJyxcbiAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICBjaGlsZHJlbjogc3RhdGUud3JhcChjZWxscywgdHJ1ZSlcbiAgfVxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5UYWJsZX0gVGFibGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuaW1wb3J0IHtwb2ludFN0YXJ0LCBwb2ludEVuZH0gZnJvbSAndW5pc3QtdXRpbC1wb3NpdGlvbidcblxuLyoqXG4gKiBUdXJuIGFuIG1kYXN0IGB0YWJsZWAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtUYWJsZX0gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0VsZW1lbnR9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRhYmxlKHN0YXRlLCBub2RlKSB7XG4gIGNvbnN0IHJvd3MgPSBzdGF0ZS5hbGwobm9kZSlcbiAgY29uc3QgZmlyc3RSb3cgPSByb3dzLnNoaWZ0KClcbiAgLyoqIEB0eXBlIHtBcnJheTxFbGVtZW50Pn0gKi9cbiAgY29uc3QgdGFibGVDb250ZW50ID0gW11cblxuICBpZiAoZmlyc3RSb3cpIHtcbiAgICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gICAgY29uc3QgaGVhZCA9IHtcbiAgICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICAgIHRhZ05hbWU6ICd0aGVhZCcsXG4gICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgIGNoaWxkcmVuOiBzdGF0ZS53cmFwKFtmaXJzdFJvd10sIHRydWUpXG4gICAgfVxuICAgIHN0YXRlLnBhdGNoKG5vZGUuY2hpbGRyZW5bMF0sIGhlYWQpXG4gICAgdGFibGVDb250ZW50LnB1c2goaGVhZClcbiAgfVxuXG4gIGlmIChyb3dzLmxlbmd0aCA+IDApIHtcbiAgICAvKiogQHR5cGUge0VsZW1lbnR9ICovXG4gICAgY29uc3QgYm9keSA9IHtcbiAgICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICAgIHRhZ05hbWU6ICd0Ym9keScsXG4gICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgIGNoaWxkcmVuOiBzdGF0ZS53cmFwKHJvd3MsIHRydWUpXG4gICAgfVxuXG4gICAgY29uc3Qgc3RhcnQgPSBwb2ludFN0YXJ0KG5vZGUuY2hpbGRyZW5bMV0pXG4gICAgY29uc3QgZW5kID0gcG9pbnRFbmQobm9kZS5jaGlsZHJlbltub2RlLmNoaWxkcmVuLmxlbmd0aCAtIDFdKVxuICAgIGlmIChzdGFydC5saW5lICYmIGVuZC5saW5lKSBib2R5LnBvc2l0aW9uID0ge3N0YXJ0LCBlbmR9XG4gICAgdGFibGVDb250ZW50LnB1c2goYm9keSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7RWxlbWVudH0gKi9cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiAndGFibGUnLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGNoaWxkcmVuOiBzdGF0ZS53cmFwKHRhYmxlQ29udGVudCwgdHJ1ZSlcbiAgfVxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gSGFzdEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5UZXh0fSBIYXN0VGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5UZXh0fSBNZGFzdFRleHRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuaW1wb3J0IHt0cmltTGluZXN9IGZyb20gJ3RyaW0tbGluZXMnXG5cbi8qKlxuICogVHVybiBhbiBtZGFzdCBgdGV4dGAgbm9kZSBpbnRvIGhhc3QuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtNZGFzdFRleHR9IG5vZGVcbiAqICAgbWRhc3Qgbm9kZS5cbiAqIEByZXR1cm5zIHtIYXN0VGV4dCB8IEhhc3RFbGVtZW50fVxuICogICBoYXN0IG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZXh0KHN0YXRlLCBub2RlKSB7XG4gIC8qKiBAdHlwZSB7SGFzdFRleHR9ICovXG4gIGNvbnN0IHJlc3VsdCA9IHt0eXBlOiAndGV4dCcsIHZhbHVlOiB0cmltTGluZXMoU3RyaW5nKG5vZGUudmFsdWUpKX1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuVGhlbWF0aWNCcmVha30gVGhlbWF0aWNCcmVha1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vc3RhdGUuanMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG4vKipcbiAqIFR1cm4gYW4gbWRhc3QgYHRoZW1hdGljQnJlYWtgIG5vZGUgaW50byBoYXN0LlxuICpcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7VGhlbWF0aWNCcmVha30gbm9kZVxuICogICBtZGFzdCBub2RlLlxuICogQHJldHVybnMge0VsZW1lbnR9XG4gKiAgIGhhc3Qgbm9kZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRoZW1hdGljQnJlYWsoc3RhdGUsIG5vZGUpIHtcbiAgLyoqIEB0eXBlIHtFbGVtZW50fSAqL1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgdHlwZTogJ2VsZW1lbnQnLFxuICAgIHRhZ05hbWU6ICdocicsXG4gICAgcHJvcGVydGllczoge30sXG4gICAgY2hpbGRyZW46IFtdXG4gIH1cbiAgc3RhdGUucGF0Y2gobm9kZSwgcmVzdWx0KVxuICByZXR1cm4gc3RhdGUuYXBwbHlEYXRhKG5vZGUsIHJlc3VsdClcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkNvbnRlbnR9IEhhc3RDb250ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuUm9vdH0gSGFzdFJvb3RcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkNvbnRlbnR9IE1kYXN0Q29udGVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Sb290fSBNZGFzdFJvb3RcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3N0YXRlLmpzJykuT3B0aW9uc30gT3B0aW9uc1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYge0hhc3RSb290IHwgSGFzdENvbnRlbnR9IEhhc3ROb2Rlc1xuICogQHR5cGVkZWYge01kYXN0Um9vdCB8IE1kYXN0Q29udGVudH0gTWRhc3ROb2Rlc1xuICovXG5cbmltcG9ydCB7Zm9vdGVyfSBmcm9tICcuL2Zvb3Rlci5qcydcbmltcG9ydCB7Y3JlYXRlU3RhdGV9IGZyb20gJy4vc3RhdGUuanMnXG5cbi8qKlxuICogVHJhbnNmb3JtIG1kYXN0IHRvIGhhc3QuXG4gKlxuICogIyMjIyMgTm90ZXNcbiAqXG4gKiAjIyMjIyMgSFRNTFxuICpcbiAqIFJhdyBIVE1MIGlzIGF2YWlsYWJsZSBpbiBtZGFzdCBhcyBgaHRtbGAgbm9kZXMgYW5kIGNhbiBiZSBlbWJlZGRlZCBpbiBoYXN0XG4gKiBhcyBzZW1pc3RhbmRhcmQgYHJhd2Agbm9kZXMuXG4gKiBNb3N0IHV0aWxpdGllcyBpZ25vcmUgYHJhd2Agbm9kZXMgYnV0IHR3byBub3RhYmxlIG9uZXMgZG9u4oCZdDpcbiAqXG4gKiAqICAgYGhhc3QtdXRpbC10by1odG1sYCBhbHNvIGhhcyBhbiBvcHRpb24gYGFsbG93RGFuZ2Vyb3VzSHRtbGAgd2hpY2ggd2lsbFxuICogICAgIG91dHB1dCB0aGUgcmF3IEhUTUwuXG4gKiAgICAgVGhpcyBpcyB0eXBpY2FsbHkgZGlzY291cmFnZWQgYXMgbm90ZWQgYnkgdGhlIG9wdGlvbiBuYW1lIGJ1dCBpcyB1c2VmdWxcbiAqICAgICBpZiB5b3UgY29tcGxldGVseSB0cnVzdCBhdXRob3JzXG4gKiAqICAgYGhhc3QtdXRpbC1yYXdgIGNhbiBoYW5kbGUgdGhlIHJhdyBlbWJlZGRlZCBIVE1MIHN0cmluZ3MgYnkgcGFyc2luZyB0aGVtXG4gKiAgICAgaW50byBzdGFuZGFyZCBoYXN0IG5vZGVzIChgZWxlbWVudGAsIGB0ZXh0YCwgZXRjKS5cbiAqICAgICBUaGlzIGlzIGEgaGVhdnkgdGFzayBhcyBpdCBuZWVkcyBhIGZ1bGwgSFRNTCBwYXJzZXIsIGJ1dCBpdCBpcyB0aGUgb25seVxuICogICAgIHdheSB0byBzdXBwb3J0IHVudHJ1c3RlZCBjb250ZW50XG4gKlxuICogIyMjIyMjIEZvb3Rub3Rlc1xuICpcbiAqIE1hbnkgb3B0aW9ucyBzdXBwb3J0ZWQgaGVyZSByZWxhdGUgdG8gZm9vdG5vdGVzLlxuICogRm9vdG5vdGVzIGFyZSBub3Qgc3BlY2lmaWVkIGJ5IENvbW1vbk1hcmssIHdoaWNoIHdlIGZvbGxvdyBieSBkZWZhdWx0LlxuICogVGhleSBhcmUgc3VwcG9ydGVkIGJ5IEdpdEh1Yiwgc28gZm9vdG5vdGVzIGNhbiBiZSBlbmFibGVkIGluIG1hcmtkb3duIHdpdGhcbiAqIGBtZGFzdC11dGlsLWdmbWAuXG4gKlxuICogVGhlIG9wdGlvbnMgYGZvb3Rub3RlQmFja0xhYmVsYCBhbmQgYGZvb3Rub3RlTGFiZWxgIGRlZmluZSBuYXR1cmFsIGxhbmd1YWdlXG4gKiB0aGF0IGV4cGxhaW5zIGZvb3Rub3Rlcywgd2hpY2ggaXMgaGlkZGVuIGZvciBzaWdodGVkIHVzZXJzIGJ1dCBzaG93biB0b1xuICogYXNzaXN0aXZlIHRlY2hub2xvZ3kuXG4gKiBXaGVuIHlvdXIgcGFnZSBpcyBub3QgaW4gRW5nbGlzaCwgeW91IG11c3QgZGVmaW5lIHRyYW5zbGF0ZWQgdmFsdWVzLlxuICpcbiAqIEJhY2sgcmVmZXJlbmNlcyB1c2UgQVJJQSBhdHRyaWJ1dGVzLCBidXQgdGhlIHNlY3Rpb24gbGFiZWwgaXRzZWxmIHVzZXMgYVxuICogaGVhZGluZyB0aGF0IGlzIGhpZGRlbiB3aXRoIGFuIGBzci1vbmx5YCBjbGFzcy5cbiAqIFRvIHNob3cgaXQgdG8gc2lnaHRlZCB1c2VycywgZGVmaW5lIGRpZmZlcmVudCBhdHRyaWJ1dGVzIGluXG4gKiBgZm9vdG5vdGVMYWJlbFByb3BlcnRpZXNgLlxuICpcbiAqICMjIyMjIyBDbG9iYmVyaW5nXG4gKlxuICogRm9vdG5vdGVzIGludHJvZHVjZXMgYSBwcm9ibGVtLCBhcyBpdCBsaW5rcyBmb290bm90ZSBjYWxscyB0byBmb290bm90ZVxuICogZGVmaW5pdGlvbnMgb24gdGhlIHBhZ2UgdGhyb3VnaCBgaWRgIGF0dHJpYnV0ZXMgZ2VuZXJhdGVkIGZyb20gdXNlciBjb250ZW50LFxuICogd2hpY2ggcmVzdWx0cyBpbiBET00gY2xvYmJlcmluZy5cbiAqXG4gKiBET00gY2xvYmJlcmluZyBpcyB0aGlzOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxwIGlkPXg+PC9wPlxuICogPHNjcmlwdD5hbGVydCh4KSAvLyBgeGAgbm93IHJlZmVycyB0byB0aGUgRE9NIGBwI3hgIGVsZW1lbnQ8L3NjcmlwdD5cbiAqIGBgYFxuICpcbiAqIEVsZW1lbnRzIGJ5IHRoZWlyIElEIGFyZSBtYWRlIGF2YWlsYWJsZSBieSBicm93c2VycyBvbiB0aGUgYHdpbmRvd2Agb2JqZWN0LFxuICogd2hpY2ggaXMgYSBzZWN1cml0eSByaXNrLlxuICogVXNpbmcgYSBwcmVmaXggc29sdmVzIHRoaXMgcHJvYmxlbS5cbiAqXG4gKiBNb3JlIGluZm9ybWF0aW9uIG9uIGhvdyB0byBoYW5kbGUgY2xvYmJlcmluZyBhbmQgdGhlIHByZWZpeCBpcyBleHBsYWluZWQgaW5cbiAqIEV4YW1wbGU6IGhlYWRpbmdzIChET00gY2xvYmJlcmluZykgaW4gYHJlaHlwZS1zYW5pdGl6ZWAuXG4gKlxuICogIyMjIyMjIFVua25vd24gbm9kZXNcbiAqXG4gKiBVbmtub3duIG5vZGVzIGFyZSBub2RlcyB3aXRoIGEgdHlwZSB0aGF0IGlzbuKAmXQgaW4gYGhhbmRsZXJzYCBvciBgcGFzc1Rocm91Z2hgLlxuICogVGhlIGRlZmF1bHQgYmVoYXZpb3IgZm9yIHVua25vd24gbm9kZXMgaXM6XG4gKlxuICogKiAgIHdoZW4gdGhlIG5vZGUgaGFzIGEgYHZhbHVlYCAoYW5kIGRvZXNu4oCZdCBoYXZlIGBkYXRhLmhOYW1lYCxcbiAqICAgICBgZGF0YS5oUHJvcGVydGllc2AsIG9yIGBkYXRhLmhDaGlsZHJlbmAsIHNlZSBsYXRlciksIGNyZWF0ZSBhIGhhc3QgYHRleHRgXG4gKiAgICAgbm9kZVxuICogKiAgIG90aGVyd2lzZSwgY3JlYXRlIGEgYDxkaXY+YCBlbGVtZW50ICh3aGljaCBjb3VsZCBiZSBjaGFuZ2VkIHdpdGhcbiAqICAgICBgZGF0YS5oTmFtZWApLCB3aXRoIGl0cyBjaGlsZHJlbiBtYXBwZWQgZnJvbSBtZGFzdCB0byBoYXN0IGFzIHdlbGxcbiAqXG4gKiBUaGlzIGJlaGF2aW9yIGNhbiBiZSBjaGFuZ2VkIGJ5IHBhc3NpbmcgYW4gYHVua25vd25IYW5kbGVyYC5cbiAqXG4gKiBAcGFyYW0ge01kYXN0Tm9kZXN9IHRyZWVcbiAqICAgbWRhc3QgdHJlZS5cbiAqIEBwYXJhbSB7T3B0aW9ucyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRpb25zXVxuICogICBDb25maWd1cmF0aW9uLlxuICogQHJldHVybnMge0hhc3ROb2RlcyB8IG51bGwgfCB1bmRlZmluZWR9XG4gKiAgIGhhc3QgdHJlZS5cbiAqL1xuLy8gVG8gZG86IG5leHQgbWFqb3I6IGFsd2F5cyByZXR1cm4gYSBzaW5nbGUgYHJvb3RgLlxuZXhwb3J0IGZ1bmN0aW9uIHRvSGFzdCh0cmVlLCBvcHRpb25zKSB7XG4gIGNvbnN0IHN0YXRlID0gY3JlYXRlU3RhdGUodHJlZSwgb3B0aW9ucylcbiAgY29uc3Qgbm9kZSA9IHN0YXRlLm9uZSh0cmVlLCBudWxsKVxuICBjb25zdCBmb290ID0gZm9vdGVyKHN0YXRlKVxuXG4gIGlmIChmb290KSB7XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBJZiB0aGVyZeKAmXMgYSBmb290ZXIsIHRoZXJlIHdlcmUgZGVmaW5pdGlvbnMsIG1lYW5pbmcgYmxvY2tcbiAgICAvLyBjb250ZW50LlxuICAgIC8vIFNvIGFzc3VtZSBgbm9kZWAgaXMgYSBwYXJlbnQgbm9kZS5cbiAgICBub2RlLmNoaWxkcmVuLnB1c2goe3R5cGU6ICd0ZXh0JywgdmFsdWU6ICdcXG4nfSwgZm9vdClcbiAgfVxuXG4gIC8vIFRvIGRvOiBuZXh0IG1ham9yOiBhbHdheXMgcmV0dXJuIHJvb3Q/XG4gIHJldHVybiBBcnJheS5pc0FycmF5KG5vZGUpID8ge3R5cGU6ICdyb290JywgY2hpbGRyZW46IG5vZGV9IDogbm9kZVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudENvbnRlbnR9IEVsZW1lbnRDb250ZW50XG4gKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Db250ZW50fSBDb250ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlJlZmVyZW5jZX0gUmVmZXJlbmNlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlJvb3R9IFJvb3RcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3N0YXRlLmpzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7Um9vdCB8IENvbnRlbnR9IE5vZGVzXG4gKiBAdHlwZWRlZiB7RXh0cmFjdDxOb2RlcywgUmVmZXJlbmNlPn0gUmVmZXJlbmNlc1xuICovXG5cbi8vIFRvIGRvOiBuZXh0IG1ham9yOiBhbHdheXMgcmV0dXJuIGFycmF5LlxuXG4vKipcbiAqIFJldHVybiB0aGUgY29udGVudCBvZiBhIHJlZmVyZW5jZSB3aXRob3V0IGRlZmluaXRpb24gYXMgcGxhaW4gdGV4dC5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge1JlZmVyZW5jZXN9IG5vZGVcbiAqICAgUmVmZXJlbmNlIG5vZGUgKGltYWdlLCBsaW5rKS5cbiAqIEByZXR1cm5zIHtFbGVtZW50Q29udGVudCB8IEFycmF5PEVsZW1lbnRDb250ZW50Pn1cbiAqICAgaGFzdCBjb250ZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmV2ZXJ0KHN0YXRlLCBub2RlKSB7XG4gIGNvbnN0IHN1YnR5cGUgPSBub2RlLnJlZmVyZW5jZVR5cGVcbiAgbGV0IHN1ZmZpeCA9ICddJ1xuXG4gIGlmIChzdWJ0eXBlID09PSAnY29sbGFwc2VkJykge1xuICAgIHN1ZmZpeCArPSAnW10nXG4gIH0gZWxzZSBpZiAoc3VidHlwZSA9PT0gJ2Z1bGwnKSB7XG4gICAgc3VmZml4ICs9ICdbJyArIChub2RlLmxhYmVsIHx8IG5vZGUuaWRlbnRpZmllcikgKyAnXSdcbiAgfVxuXG4gIGlmIChub2RlLnR5cGUgPT09ICdpbWFnZVJlZmVyZW5jZScpIHtcbiAgICByZXR1cm4ge3R5cGU6ICd0ZXh0JywgdmFsdWU6ICchWycgKyBub2RlLmFsdCArIHN1ZmZpeH1cbiAgfVxuXG4gIGNvbnN0IGNvbnRlbnRzID0gc3RhdGUuYWxsKG5vZGUpXG4gIGNvbnN0IGhlYWQgPSBjb250ZW50c1swXVxuXG4gIGlmIChoZWFkICYmIGhlYWQudHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgaGVhZC52YWx1ZSA9ICdbJyArIGhlYWQudmFsdWVcbiAgfSBlbHNlIHtcbiAgICBjb250ZW50cy51bnNoaWZ0KHt0eXBlOiAndGV4dCcsIHZhbHVlOiAnWyd9KVxuICB9XG5cbiAgY29uc3QgdGFpbCA9IGNvbnRlbnRzW2NvbnRlbnRzLmxlbmd0aCAtIDFdXG5cbiAgaWYgKHRhaWwgJiYgdGFpbC50eXBlID09PSAndGV4dCcpIHtcbiAgICB0YWlsLnZhbHVlICs9IHN1ZmZpeFxuICB9IGVsc2Uge1xuICAgIGNvbnRlbnRzLnB1c2goe3R5cGU6ICd0ZXh0JywgdmFsdWU6IHN1ZmZpeH0pXG4gIH1cblxuICByZXR1cm4gY29udGVudHNcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkNvbnRlbnR9IEhhc3RDb250ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gSGFzdEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50Q29udGVudH0gSGFzdEVsZW1lbnRDb250ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuUHJvcGVydGllc30gSGFzdFByb3BlcnRpZXNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Sb290fSBIYXN0Um9vdFxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLlRleHR9IEhhc3RUZXh0XG4gKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Db250ZW50fSBNZGFzdENvbnRlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuRGVmaW5pdGlvbn0gTWRhc3REZWZpbml0aW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLkZvb3Rub3RlRGVmaW5pdGlvbn0gTWRhc3RGb290bm90ZURlZmluaXRpb25cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuUGFyZW50fSBNZGFzdFBhcmVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Sb290fSBNZGFzdFJvb3RcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtIYXN0Um9vdCB8IEhhc3RDb250ZW50fSBIYXN0Tm9kZXNcbiAqIEB0eXBlZGVmIHtNZGFzdFJvb3QgfCBNZGFzdENvbnRlbnR9IE1kYXN0Tm9kZXNcbiAqIEB0eXBlZGVmIHtFeHRyYWN0PE1kYXN0Tm9kZXMsIE1kYXN0UGFyZW50Pn0gTWRhc3RQYXJlbnRzXG4gKlxuICogQHR5cGVkZWYgRW1iZWRkZWRIYXN0RmllbGRzXG4gKiAgIGhhc3QgZmllbGRzLlxuICogQHByb3BlcnR5IHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbaE5hbWVdXG4gKiAgIEdlbmVyYXRlIGEgc3BlY2lmaWMgZWxlbWVudCB3aXRoIHRoaXMgdGFnIG5hbWUgaW5zdGVhZC5cbiAqIEBwcm9wZXJ0eSB7SGFzdFByb3BlcnRpZXMgfCBudWxsIHwgdW5kZWZpbmVkfSBbaFByb3BlcnRpZXNdXG4gKiAgIEdlbmVyYXRlIGFuIGVsZW1lbnQgd2l0aCB0aGVzZSBwcm9wZXJ0aWVzIGluc3RlYWQuXG4gKiBAcHJvcGVydHkge0FycmF5PEhhc3RFbGVtZW50Q29udGVudD4gfCBudWxsIHwgdW5kZWZpbmVkfSBbaENoaWxkcmVuXVxuICogICBHZW5lcmF0ZSBhbiBlbGVtZW50IHdpdGggdGhpcyBjb250ZW50IGluc3RlYWQuXG4gKlxuICogQHR5cGVkZWYge1JlY29yZDxzdHJpbmcsIHVua25vd24+ICYgRW1iZWRkZWRIYXN0RmllbGRzfSBNZGFzdERhdGFcbiAqICAgbWRhc3QgZGF0YSB3aXRoIGVtYmVkZGVkIGhhc3QgZmllbGRzLlxuICpcbiAqIEB0eXBlZGVmIHtNZGFzdE5vZGVzICYge2RhdGE/OiBNZGFzdERhdGEgfCBudWxsIHwgdW5kZWZpbmVkfX0gTWRhc3ROb2RlV2l0aERhdGFcbiAqICAgbWRhc3Qgbm9kZSB3aXRoIGVtYmVkZGVkIGhhc3QgZGF0YS5cbiAqXG4gKiBAdHlwZWRlZiBQb2ludExpa2VcbiAqICAgUG9pbnQtbGlrZSB2YWx1ZS5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2xpbmVdXG4gKiAgIExpbmUuXG4gKiBAcHJvcGVydHkge251bWJlciB8IG51bGwgfCB1bmRlZmluZWR9IFtjb2x1bW5dXG4gKiAgIENvbHVtbi5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29mZnNldF1cbiAqICAgT2Zmc2V0LlxuICpcbiAqIEB0eXBlZGVmIFBvc2l0aW9uTGlrZVxuICogICBQb3NpdGlvbi1saWtlIHZhbHVlLlxuICogQHByb3BlcnR5IHtQb2ludExpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBbc3RhcnRdXG4gKiAgIFBvaW50LWxpa2UgdmFsdWUuXG4gKiBAcHJvcGVydHkge1BvaW50TGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IFtlbmRdXG4gKiAgIFBvaW50LWxpa2UgdmFsdWUuXG4gKlxuICogQGNhbGxiYWNrIEhhbmRsZXJcbiAqICAgSGFuZGxlIGEgbm9kZS5cbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqIEBwYXJhbSB7YW55fSBub2RlXG4gKiAgIG1kYXN0IG5vZGUgdG8gaGFuZGxlLlxuICogQHBhcmFtIHtNZGFzdFBhcmVudHMgfCBudWxsIHwgdW5kZWZpbmVkfSBwYXJlbnRcbiAqICAgUGFyZW50IG9mIGBub2RlYC5cbiAqIEByZXR1cm5zIHtIYXN0RWxlbWVudENvbnRlbnQgfCBBcnJheTxIYXN0RWxlbWVudENvbnRlbnQ+IHwgbnVsbCB8IHVuZGVmaW5lZH1cbiAqICAgaGFzdCBub2RlLlxuICpcbiAqIEBjYWxsYmFjayBIRnVuY3Rpb25Qcm9wc1xuICogICBTaWduYXR1cmUgb2YgYHN0YXRlYCBmb3Igd2hlbiBwcm9wcyBhcmUgcGFzc2VkLlxuICogQHBhcmFtIHtNZGFzdE5vZGVzIHwgUG9zaXRpb25MaWtlIHwgbnVsbCB8IHVuZGVmaW5lZH0gbm9kZVxuICogICBtZGFzdCBub2RlIG9yIHVuaXN0IHBvc2l0aW9uLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAqICAgSFRNTCB0YWcgbmFtZS5cbiAqIEBwYXJhbSB7SGFzdFByb3BlcnRpZXN9IHByb3BzXG4gKiAgIFByb3BlcnRpZXMuXG4gKiBAcGFyYW0ge0FycmF5PEhhc3RFbGVtZW50Q29udGVudD4gfCBudWxsIHwgdW5kZWZpbmVkfSBbY2hpbGRyZW5dXG4gKiAgIGhhc3QgY29udGVudC5cbiAqIEByZXR1cm5zIHtIYXN0RWxlbWVudH1cbiAqICAgQ29tcGlsZWQgZWxlbWVudC5cbiAqXG4gKiBAY2FsbGJhY2sgSEZ1bmN0aW9uTm9Qcm9wc1xuICogICBTaWduYXR1cmUgb2YgYHN0YXRlYCBmb3Igd2hlbiBubyBwcm9wcyBhcmUgcGFzc2VkLlxuICogQHBhcmFtIHtNZGFzdE5vZGVzIHwgUG9zaXRpb25MaWtlIHwgbnVsbCB8IHVuZGVmaW5lZH0gbm9kZVxuICogICBtZGFzdCBub2RlIG9yIHVuaXN0IHBvc2l0aW9uLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAqICAgSFRNTCB0YWcgbmFtZS5cbiAqIEBwYXJhbSB7QXJyYXk8SGFzdEVsZW1lbnRDb250ZW50PiB8IG51bGwgfCB1bmRlZmluZWR9IFtjaGlsZHJlbl1cbiAqICAgaGFzdCBjb250ZW50LlxuICogQHJldHVybnMge0hhc3RFbGVtZW50fVxuICogICBDb21waWxlZCBlbGVtZW50LlxuICpcbiAqIEB0eXBlZGVmIEhGaWVsZHNcbiAqICAgSW5mbyBvbiBgc3RhdGVgLlxuICogQHByb3BlcnR5IHtib29sZWFufSBkYW5nZXJvdXNcbiAqICAgV2hldGhlciBIVE1MIGlzIGFsbG93ZWQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY2xvYmJlclByZWZpeFxuICogICBQcmVmaXggdG8gdXNlIHRvIHByZXZlbnQgRE9NIGNsb2JiZXJpbmcuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZm9vdG5vdGVMYWJlbFxuICogICBMYWJlbCB0byB1c2UgdG8gaW50cm9kdWNlIHRoZSBmb290bm90ZSBzZWN0aW9uLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGZvb3Rub3RlTGFiZWxUYWdOYW1lXG4gKiAgIEhUTUwgdXNlZCBmb3IgdGhlIGZvb3Rub3RlIGxhYmVsLlxuICogQHByb3BlcnR5IHtIYXN0UHJvcGVydGllc30gZm9vdG5vdGVMYWJlbFByb3BlcnRpZXNcbiAqICAgUHJvcGVydGllcyBvbiB0aGUgSFRNTCB0YWcgdXNlZCBmb3IgdGhlIGZvb3Rub3RlIGxhYmVsLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGZvb3Rub3RlQmFja0xhYmVsXG4gKiAgIExhYmVsIHRvIHVzZSBmcm9tIGJhY2tyZWZlcmVuY2VzIGJhY2sgdG8gdGhlaXIgZm9vdG5vdGUgY2FsbC5cbiAqIEBwcm9wZXJ0eSB7KGlkZW50aWZpZXI6IHN0cmluZykgPT4gTWRhc3REZWZpbml0aW9uIHwgbnVsbH0gZGVmaW5pdGlvblxuICogICBEZWZpbml0aW9uIGNhY2hlLlxuICogQHByb3BlcnR5IHtSZWNvcmQ8c3RyaW5nLCBNZGFzdEZvb3Rub3RlRGVmaW5pdGlvbj59IGZvb3Rub3RlQnlJZFxuICogICBGb290bm90ZSBkZWZpbml0aW9ucyBieSB0aGVpciBpZGVudGlmaWVyLlxuICogQHByb3BlcnR5IHtBcnJheTxzdHJpbmc+fSBmb290bm90ZU9yZGVyXG4gKiAgIElkZW50aWZpZXJzIG9mIG9yZGVyIHdoZW4gZm9vdG5vdGUgY2FsbHMgZmlyc3QgYXBwZWFyIGluIHRyZWUgb3JkZXIuXG4gKiBAcHJvcGVydHkge1JlY29yZDxzdHJpbmcsIG51bWJlcj59IGZvb3Rub3RlQ291bnRzXG4gKiAgIENvdW50cyBmb3IgaG93IG9mdGVuIHRoZSBzYW1lIGZvb3Rub3RlIHdhcyBjYWxsZWQuXG4gKiBAcHJvcGVydHkge0hhbmRsZXJzfSBoYW5kbGVyc1xuICogICBBcHBsaWVkIGhhbmRsZXJzLlxuICogQHByb3BlcnR5IHtIYW5kbGVyfSB1bmtub3duSGFuZGxlclxuICogICBIYW5kbGVyIGZvciBhbnkgbm9uZSBub3QgaW4gYHBhc3NUaHJvdWdoYCBvciBvdGhlcndpc2UgaGFuZGxlZC5cbiAqIEBwcm9wZXJ0eSB7KGZyb206IE1kYXN0Tm9kZXMsIG5vZGU6IEhhc3ROb2RlcykgPT4gdm9pZH0gcGF0Y2hcbiAqICAgQ29weSBhIG5vZGXigJlzIHBvc2l0aW9uYWwgaW5mby5cbiAqIEBwcm9wZXJ0eSB7PFR5cGUgZXh0ZW5kcyBIYXN0Tm9kZXM+KGZyb206IE1kYXN0Tm9kZXMsIHRvOiBUeXBlKSA9PiBUeXBlIHwgSGFzdEVsZW1lbnR9IGFwcGx5RGF0YVxuICogICBIb25vciB0aGUgYGRhdGFgIG9mIGBmcm9tYCwgYW5kIGdlbmVyYXRlIGFuIGVsZW1lbnQgaW5zdGVhZCBvZiBgbm9kZWAuXG4gKiBAcHJvcGVydHkgeyhub2RlOiBNZGFzdE5vZGVzLCBwYXJlbnQ6IE1kYXN0UGFyZW50cyB8IG51bGwgfCB1bmRlZmluZWQpID0+IEhhc3RFbGVtZW50Q29udGVudCB8IEFycmF5PEhhc3RFbGVtZW50Q29udGVudD4gfCBudWxsIHwgdW5kZWZpbmVkfSBvbmVcbiAqICAgVHJhbnNmb3JtIGFuIG1kYXN0IG5vZGUgdG8gaGFzdC5cbiAqIEBwcm9wZXJ0eSB7KG5vZGU6IE1kYXN0Tm9kZXMpID0+IEFycmF5PEhhc3RFbGVtZW50Q29udGVudD59IGFsbFxuICogICBUcmFuc2Zvcm0gdGhlIGNoaWxkcmVuIG9mIGFuIG1kYXN0IHBhcmVudCB0byBoYXN0LlxuICogQHByb3BlcnR5IHs8VHlwZSBleHRlbmRzIEhhc3RDb250ZW50Pihub2RlczogQXJyYXk8VHlwZT4sIGxvb3NlPzogYm9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWQpID0+IEFycmF5PFR5cGUgfCBIYXN0VGV4dD59IHdyYXBcbiAqICAgV3JhcCBgbm9kZXNgIHdpdGggbGluZSBlbmRpbmdzIGJldHdlZW4gZWFjaCBub2RlLCBhZGRzIGluaXRpYWwvZmluYWwgbGluZSBlbmRpbmdzIHdoZW4gYGxvb3NlYC5cbiAqIEBwcm9wZXJ0eSB7KGxlZnQ6IE1kYXN0Tm9kZVdpdGhEYXRhIHwgUG9zaXRpb25MaWtlIHwgbnVsbCB8IHVuZGVmaW5lZCwgcmlnaHQ6IEhhc3RFbGVtZW50Q29udGVudCkgPT4gSGFzdEVsZW1lbnRDb250ZW50fSBhdWdtZW50XG4gKiAgIExpa2UgYHN0YXRlYCBidXQgbG93ZXItbGV2ZWwgYW5kIHVzYWJsZSBvbiBub24tZWxlbWVudHMuXG4gKiAgIERlcHJlY2F0ZWQ6IHVzZSBgcGF0Y2hgIGFuZCBgYXBwbHlEYXRhYC5cbiAqIEBwcm9wZXJ0eSB7QXJyYXk8c3RyaW5nPn0gcGFzc1Rocm91Z2hcbiAqICAgTGlzdCBvZiBub2RlIHR5cGVzIHRvIHBhc3MgdGhyb3VnaCB1bnRvdWNoZWQgKGV4Y2VwdCBmb3IgdGhlaXIgY2hpbGRyZW4pLlxuICpcbiAqIEB0eXBlZGVmIE9wdGlvbnNcbiAqICAgQ29uZmlndXJhdGlvbiAob3B0aW9uYWwpLlxuICogQHByb3BlcnR5IHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2FsbG93RGFuZ2Vyb3VzSHRtbD1mYWxzZV1cbiAqICAgV2hldGhlciB0byBwZXJzaXN0IHJhdyBIVE1MIGluIG1hcmtkb3duIGluIHRoZSBoYXN0IHRyZWUuXG4gKiBAcHJvcGVydHkge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtjbG9iYmVyUHJlZml4PSd1c2VyLWNvbnRlbnQtJ11cbiAqICAgUHJlZml4IHRvIHVzZSBiZWZvcmUgdGhlIGBpZGAgYXR0cmlidXRlIG9uIGZvb3Rub3RlcyB0byBwcmV2ZW50IGl0IGZyb21cbiAqICAgKmNsb2JiZXJpbmcqLlxuICogQHByb3BlcnR5IHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbZm9vdG5vdGVCYWNrTGFiZWw9J0JhY2sgdG8gY29udGVudCddXG4gKiAgIExhYmVsIHRvIHVzZSBmcm9tIGJhY2tyZWZlcmVuY2VzIGJhY2sgdG8gdGhlaXIgZm9vdG5vdGUgY2FsbCAoYWZmZWN0c1xuICogICBzY3JlZW4gcmVhZGVycykuXG4gKiBAcHJvcGVydHkge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtmb290bm90ZUxhYmVsPSdGb290bm90ZXMnXVxuICogICBMYWJlbCB0byB1c2UgZm9yIHRoZSBmb290bm90ZXMgc2VjdGlvbiAoYWZmZWN0cyBzY3JlZW4gcmVhZGVycykuXG4gKiBAcHJvcGVydHkge0hhc3RQcm9wZXJ0aWVzIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Zvb3Rub3RlTGFiZWxQcm9wZXJ0aWVzPXtjbGFzc05hbWU6IFsnc3Itb25seSddfV1cbiAqICAgUHJvcGVydGllcyB0byB1c2Ugb24gdGhlIGZvb3Rub3RlIGxhYmVsIChub3RlIHRoYXQgYGlkOiAnZm9vdG5vdGUtbGFiZWwnYFxuICogICBpcyBhbHdheXMgYWRkZWQgYXMgZm9vdG5vdGUgY2FsbHMgdXNlIGl0IHdpdGggYGFyaWEtZGVzY3JpYmVkYnlgIHRvXG4gKiAgIHByb3ZpZGUgYW4gYWNjZXNzaWJsZSBsYWJlbCkuXG4gKiBAcHJvcGVydHkge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtmb290bm90ZUxhYmVsVGFnTmFtZT0naDInXVxuICogICBUYWcgbmFtZSB0byB1c2UgZm9yIHRoZSBmb290bm90ZSBsYWJlbC5cbiAqIEBwcm9wZXJ0eSB7SGFuZGxlcnMgfCBudWxsIHwgdW5kZWZpbmVkfSBbaGFuZGxlcnNdXG4gKiAgIEV4dHJhIGhhbmRsZXJzIGZvciBub2Rlcy5cbiAqIEBwcm9wZXJ0eSB7QXJyYXk8c3RyaW5nPiB8IG51bGwgfCB1bmRlZmluZWR9IFtwYXNzVGhyb3VnaF1cbiAqICAgTGlzdCBvZiBjdXN0b20gbWRhc3Qgbm9kZSB0eXBlcyB0byBwYXNzIHRocm91Z2ggKGtlZXApIGluIGhhc3QgKG5vdGUgdGhhdFxuICogICB0aGUgbm9kZSBpdHNlbGYgaXMgcGFzc2VkLCBidXQgZXZlbnR1YWwgY2hpbGRyZW4gYXJlIHRyYW5zZm9ybWVkKS5cbiAqIEBwcm9wZXJ0eSB7SGFuZGxlciB8IG51bGwgfCB1bmRlZmluZWR9IFt1bmtub3duSGFuZGxlcl1cbiAqICAgSGFuZGxlciBmb3IgYWxsIHVua25vd24gbm9kZXMuXG4gKlxuICogQHR5cGVkZWYge1JlY29yZDxzdHJpbmcsIEhhbmRsZXI+fSBIYW5kbGVyc1xuICogICBIYW5kbGUgbm9kZXMuXG4gKlxuICogQHR5cGVkZWYge0hGdW5jdGlvblByb3BzICYgSEZ1bmN0aW9uTm9Qcm9wcyAmIEhGaWVsZHN9IFN0YXRlXG4gKiAgIEluZm8gcGFzc2VkIGFyb3VuZC5cbiAqL1xuXG5pbXBvcnQge3Zpc2l0fSBmcm9tICd1bmlzdC11dGlsLXZpc2l0J1xuaW1wb3J0IHtwb3NpdGlvbiwgcG9pbnRTdGFydCwgcG9pbnRFbmR9IGZyb20gJ3VuaXN0LXV0aWwtcG9zaXRpb24nXG5pbXBvcnQge2dlbmVyYXRlZH0gZnJvbSAndW5pc3QtdXRpbC1nZW5lcmF0ZWQnXG5pbXBvcnQge2RlZmluaXRpb25zfSBmcm9tICdtZGFzdC11dGlsLWRlZmluaXRpb25zJ1xuaW1wb3J0IHtoYW5kbGVyc30gZnJvbSAnLi9oYW5kbGVycy9pbmRleC5qcydcblxuY29uc3Qgb3duID0ge30uaGFzT3duUHJvcGVydHlcblxuLyoqXG4gKiBDcmVhdGUgYHN0YXRlYCBmcm9tIGFuIG1kYXN0IHRyZWUuXG4gKlxuICogQHBhcmFtIHtNZGFzdE5vZGVzfSB0cmVlXG4gKiAgIG1kYXN0IG5vZGUgdG8gdHJhbnNmb3JtLlxuICogQHBhcmFtIHtPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24uXG4gKiBAcmV0dXJucyB7U3RhdGV9XG4gKiAgIGBzdGF0ZWAgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdGF0ZSh0cmVlLCBvcHRpb25zKSB7XG4gIGNvbnN0IHNldHRpbmdzID0gb3B0aW9ucyB8fCB7fVxuICBjb25zdCBkYW5nZXJvdXMgPSBzZXR0aW5ncy5hbGxvd0Rhbmdlcm91c0h0bWwgfHwgZmFsc2VcbiAgLyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBNZGFzdEZvb3Rub3RlRGVmaW5pdGlvbj59ICovXG4gIGNvbnN0IGZvb3Rub3RlQnlJZCA9IHt9XG5cbiAgLy8gVG8gZG86IG5leHQgbWFqb3I6IGFkZCBgb3B0aW9uc2AgdG8gc3RhdGUsIHJlbW92ZTpcbiAgLy8gYGRhbmdlcm91c2AsIGBjbG9iYmVyUHJlZml4YCwgYGZvb3Rub3RlTGFiZWxgLCBgZm9vdG5vdGVMYWJlbFRhZ05hbWVgLFxuICAvLyBgZm9vdG5vdGVMYWJlbFByb3BlcnRpZXNgLCBgZm9vdG5vdGVCYWNrTGFiZWxgLCBgcGFzc1Rocm91Z2hgLFxuICAvLyBgdW5rbm93bkhhbmRsZXJgLlxuXG4gIC8vIFRvIGRvOiBuZXh0IG1ham9yOiBtb3ZlIHRvIGBzdGF0ZS5vcHRpb25zLmFsbG93RGFuZ2Vyb3VzSHRtbGAuXG4gIHN0YXRlLmRhbmdlcm91cyA9IGRhbmdlcm91c1xuICAvLyBUbyBkbzogbmV4dCBtYWpvcjogbW92ZSB0byBgc3RhdGUub3B0aW9uc2AuXG4gIHN0YXRlLmNsb2JiZXJQcmVmaXggPVxuICAgIHNldHRpbmdzLmNsb2JiZXJQcmVmaXggPT09IHVuZGVmaW5lZCB8fCBzZXR0aW5ncy5jbG9iYmVyUHJlZml4ID09PSBudWxsXG4gICAgICA/ICd1c2VyLWNvbnRlbnQtJ1xuICAgICAgOiBzZXR0aW5ncy5jbG9iYmVyUHJlZml4XG4gIC8vIFRvIGRvOiBuZXh0IG1ham9yOiBtb3ZlIHRvIGBzdGF0ZS5vcHRpb25zYC5cbiAgc3RhdGUuZm9vdG5vdGVMYWJlbCA9IHNldHRpbmdzLmZvb3Rub3RlTGFiZWwgfHwgJ0Zvb3Rub3RlcydcbiAgLy8gVG8gZG86IG5leHQgbWFqb3I6IG1vdmUgdG8gYHN0YXRlLm9wdGlvbnNgLlxuICBzdGF0ZS5mb290bm90ZUxhYmVsVGFnTmFtZSA9IHNldHRpbmdzLmZvb3Rub3RlTGFiZWxUYWdOYW1lIHx8ICdoMidcbiAgLy8gVG8gZG86IG5leHQgbWFqb3I6IG1vdmUgdG8gYHN0YXRlLm9wdGlvbnNgLlxuICBzdGF0ZS5mb290bm90ZUxhYmVsUHJvcGVydGllcyA9IHNldHRpbmdzLmZvb3Rub3RlTGFiZWxQcm9wZXJ0aWVzIHx8IHtcbiAgICBjbGFzc05hbWU6IFsnc3Itb25seSddXG4gIH1cbiAgLy8gVG8gZG86IG5leHQgbWFqb3I6IG1vdmUgdG8gYHN0YXRlLm9wdGlvbnNgLlxuICBzdGF0ZS5mb290bm90ZUJhY2tMYWJlbCA9IHNldHRpbmdzLmZvb3Rub3RlQmFja0xhYmVsIHx8ICdCYWNrIHRvIGNvbnRlbnQnXG4gIC8vIFRvIGRvOiBuZXh0IG1ham9yOiBtb3ZlIHRvIGBzdGF0ZS5vcHRpb25zYC5cbiAgc3RhdGUudW5rbm93bkhhbmRsZXIgPSBzZXR0aW5ncy51bmtub3duSGFuZGxlclxuICAvLyBUbyBkbzogbmV4dCBtYWpvcjogbW92ZSB0byBgc3RhdGUub3B0aW9uc2AuXG4gIHN0YXRlLnBhc3NUaHJvdWdoID0gc2V0dGluZ3MucGFzc1Rocm91Z2hcblxuICBzdGF0ZS5oYW5kbGVycyA9IHsuLi5oYW5kbGVycywgLi4uc2V0dGluZ3MuaGFuZGxlcnN9XG5cbiAgLy8gVG8gZG86IG5leHQgbWFqb3I6IHJlcGxhY2UgdXRpbGl0eSB3aXRoIGBkZWZpbml0aW9uQnlJZGAgb2JqZWN0LCBzbyB3ZVxuICAvLyBvbmx5IHdhbGsgb25jZSAoYXMgd2UgbmVlZCBmb290bm90ZXMgdG9vKS5cbiAgc3RhdGUuZGVmaW5pdGlvbiA9IGRlZmluaXRpb25zKHRyZWUpXG4gIHN0YXRlLmZvb3Rub3RlQnlJZCA9IGZvb3Rub3RlQnlJZFxuICAvKiogQHR5cGUge0FycmF5PHN0cmluZz59ICovXG4gIHN0YXRlLmZvb3Rub3RlT3JkZXIgPSBbXVxuICAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIG51bWJlcj59ICovXG4gIHN0YXRlLmZvb3Rub3RlQ291bnRzID0ge31cblxuICBzdGF0ZS5wYXRjaCA9IHBhdGNoXG4gIHN0YXRlLmFwcGx5RGF0YSA9IGFwcGx5RGF0YVxuICBzdGF0ZS5vbmUgPSBvbmVCb3VuZFxuICBzdGF0ZS5hbGwgPSBhbGxCb3VuZFxuICBzdGF0ZS53cmFwID0gd3JhcFxuICAvLyBUbyBkbzogbmV4dCBtYWpvcjogcmVtb3ZlIGBhdWdtZW50YC5cbiAgc3RhdGUuYXVnbWVudCA9IGF1Z21lbnRcblxuICB2aXNpdCh0cmVlLCAnZm9vdG5vdGVEZWZpbml0aW9uJywgKGRlZmluaXRpb24pID0+IHtcbiAgICBjb25zdCBpZCA9IFN0cmluZyhkZWZpbml0aW9uLmlkZW50aWZpZXIpLnRvVXBwZXJDYXNlKClcblxuICAgIC8vIE1pbWljayBDTSBiZWhhdmlvciBvZiBsaW5rIGRlZmluaXRpb25zLlxuICAgIC8vIFNlZTogPGh0dHBzOi8vZ2l0aHViLmNvbS9zeW50YXgtdHJlZS9tZGFzdC11dGlsLWRlZmluaXRpb25zL2Jsb2IvODI5MDk5OS9pbmRleC5qcyNMMjY+LlxuICAgIGlmICghb3duLmNhbGwoZm9vdG5vdGVCeUlkLCBpZCkpIHtcbiAgICAgIGZvb3Rub3RlQnlJZFtpZF0gPSBkZWZpbml0aW9uXG4gICAgfVxuICB9KVxuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgSHVzaCwgaXTigJlzIGZpbmUhXG4gIHJldHVybiBzdGF0ZVxuXG4gIC8qKlxuICAgKiBGaW5hbGlzZSB0aGUgY3JlYXRlZCBgcmlnaHRgLCBhIGhhc3Qgbm9kZSwgZnJvbSBgbGVmdGAsIGFuIG1kYXN0IG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7TWRhc3ROb2RlV2l0aERhdGEgfCBQb3NpdGlvbkxpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBsZWZ0XG4gICAqIEBwYXJhbSB7SGFzdEVsZW1lbnRDb250ZW50fSByaWdodFxuICAgKiBAcmV0dXJucyB7SGFzdEVsZW1lbnRDb250ZW50fVxuICAgKi9cbiAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gIC8vIFRvIGRvOiBuZXh0IG1ham9yOiByZW1vdmUuXG4gIGZ1bmN0aW9uIGF1Z21lbnQobGVmdCwgcmlnaHQpIHtcbiAgICAvLyBIYW5kbGUgYGRhdGEuaE5hbWVgLCBgZGF0YS5oUHJvcGVydGllcywgYGRhdGEuaENoaWxkcmVuYC5cbiAgICBpZiAobGVmdCAmJiAnZGF0YScgaW4gbGVmdCAmJiBsZWZ0LmRhdGEpIHtcbiAgICAgIC8qKiBAdHlwZSB7TWRhc3REYXRhfSAqL1xuICAgICAgY29uc3QgZGF0YSA9IGxlZnQuZGF0YVxuXG4gICAgICBpZiAoZGF0YS5oTmFtZSkge1xuICAgICAgICBpZiAocmlnaHQudHlwZSAhPT0gJ2VsZW1lbnQnKSB7XG4gICAgICAgICAgcmlnaHQgPSB7XG4gICAgICAgICAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgICAgICAgICB0YWdOYW1lOiAnJyxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmlnaHQudGFnTmFtZSA9IGRhdGEuaE5hbWVcbiAgICAgIH1cblxuICAgICAgaWYgKHJpZ2h0LnR5cGUgPT09ICdlbGVtZW50JyAmJiBkYXRhLmhQcm9wZXJ0aWVzKSB7XG4gICAgICAgIHJpZ2h0LnByb3BlcnRpZXMgPSB7Li4ucmlnaHQucHJvcGVydGllcywgLi4uZGF0YS5oUHJvcGVydGllc31cbiAgICAgIH1cblxuICAgICAgaWYgKCdjaGlsZHJlbicgaW4gcmlnaHQgJiYgcmlnaHQuY2hpbGRyZW4gJiYgZGF0YS5oQ2hpbGRyZW4pIHtcbiAgICAgICAgcmlnaHQuY2hpbGRyZW4gPSBkYXRhLmhDaGlsZHJlblxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChsZWZ0KSB7XG4gICAgICBjb25zdCBjdHggPSAndHlwZScgaW4gbGVmdCA/IGxlZnQgOiB7cG9zaXRpb246IGxlZnR9XG5cbiAgICAgIGlmICghZ2VuZXJhdGVkKGN0eCkpIHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogZmluZS5cbiAgICAgICAgcmlnaHQucG9zaXRpb24gPSB7c3RhcnQ6IHBvaW50U3RhcnQoY3R4KSwgZW5kOiBwb2ludEVuZChjdHgpfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByaWdodFxuICB9XG4gIC8qIGM4IGlnbm9yZSBzdG9wICovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBlbGVtZW50IGZvciBgbm9kZWAuXG4gICAqXG4gICAqIEB0eXBlIHtIRnVuY3Rpb25Qcm9wc31cbiAgICovXG4gIC8qIGM4IGlnbm9yZSBzdGFydCAqL1xuICAvLyBUbyBkbzogbmV4dCBtYWpvcjogcmVtb3ZlLlxuICBmdW5jdGlvbiBzdGF0ZShub2RlLCB0YWdOYW1lLCBwcm9wcywgY2hpbGRyZW4pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICAgIGNoaWxkcmVuID0gcHJvcHNcbiAgICAgIHByb3BzID0ge31cbiAgICB9XG5cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGF1Z21lbnRpbmcgYW4gZWxlbWVudCB5aWVsZHMgYW4gZWxlbWVudC5cbiAgICByZXR1cm4gYXVnbWVudChub2RlLCB7XG4gICAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgICB0YWdOYW1lLFxuICAgICAgcHJvcGVydGllczogcHJvcHMgfHwge30sXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW4gfHwgW11cbiAgICB9KVxuICB9XG4gIC8qIGM4IGlnbm9yZSBzdG9wICovXG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybSBhbiBtZGFzdCBub2RlIGludG8gYSBoYXN0IG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7TWRhc3ROb2Rlc30gbm9kZVxuICAgKiAgIG1kYXN0IG5vZGUuXG4gICAqIEBwYXJhbSB7TWRhc3RQYXJlbnRzIHwgbnVsbCB8IHVuZGVmaW5lZH0gW3BhcmVudF1cbiAgICogICBQYXJlbnQgb2YgYG5vZGVgLlxuICAgKiBAcmV0dXJucyB7SGFzdEVsZW1lbnRDb250ZW50IHwgQXJyYXk8SGFzdEVsZW1lbnRDb250ZW50PiB8IG51bGwgfCB1bmRlZmluZWR9XG4gICAqICAgUmVzdWx0aW5nIGhhc3Qgbm9kZS5cbiAgICovXG4gIGZ1bmN0aW9uIG9uZUJvdW5kKG5vZGUsIHBhcmVudCkge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHRoYXTigJlzIGEgc3RhdGUgOilcbiAgICByZXR1cm4gb25lKHN0YXRlLCBub2RlLCBwYXJlbnQpXG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtIHRoZSBjaGlsZHJlbiBvZiBhbiBtZGFzdCBub2RlIGludG8gaGFzdCBub2Rlcy5cbiAgICpcbiAgICogQHBhcmFtIHtNZGFzdE5vZGVzfSBwYXJlbnRcbiAgICogICBtZGFzdCBub2RlIHRvIGNvbXBpbGVcbiAgICogQHJldHVybnMge0FycmF5PEhhc3RFbGVtZW50Q29udGVudD59XG4gICAqICAgUmVzdWx0aW5nIGhhc3Qgbm9kZXMuXG4gICAqL1xuICBmdW5jdGlvbiBhbGxCb3VuZChwYXJlbnQpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiB0aGF04oCZcyBhIHN0YXRlIDopXG4gICAgcmV0dXJuIGFsbChzdGF0ZSwgcGFyZW50KVxuICB9XG59XG5cbi8qKlxuICogQ29weSBhIG5vZGXigJlzIHBvc2l0aW9uYWwgaW5mby5cbiAqXG4gKiBAcGFyYW0ge01kYXN0Tm9kZXN9IGZyb21cbiAqICAgbWRhc3Qgbm9kZSB0byBjb3B5IGZyb20uXG4gKiBAcGFyYW0ge0hhc3ROb2Rlc30gdG9cbiAqICAgaGFzdCBub2RlIHRvIGNvcHkgaW50by5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICogICBOb3RoaW5nLlxuICovXG5mdW5jdGlvbiBwYXRjaChmcm9tLCB0bykge1xuICBpZiAoZnJvbS5wb3NpdGlvbikgdG8ucG9zaXRpb24gPSBwb3NpdGlvbihmcm9tKVxufVxuXG4vKipcbiAqIEhvbm9yIHRoZSBgZGF0YWAgb2YgYGZyb21gIGFuZCBtYXliZSBnZW5lcmF0ZSBhbiBlbGVtZW50IGluc3RlYWQgb2YgYHRvYC5cbiAqXG4gKiBAdGVtcGxhdGUge0hhc3ROb2Rlc30gVHlwZVxuICogICBOb2RlIHR5cGUuXG4gKiBAcGFyYW0ge01kYXN0Tm9kZXN9IGZyb21cbiAqICAgbWRhc3Qgbm9kZSB0byB1c2UgZGF0YSBmcm9tLlxuICogQHBhcmFtIHtUeXBlfSB0b1xuICogICBoYXN0IG5vZGUgdG8gY2hhbmdlLlxuICogQHJldHVybnMge1R5cGUgfCBIYXN0RWxlbWVudH1cbiAqICAgTm90aGluZy5cbiAqL1xuZnVuY3Rpb24gYXBwbHlEYXRhKGZyb20sIHRvKSB7XG4gIC8qKiBAdHlwZSB7VHlwZSB8IEhhc3RFbGVtZW50fSAqL1xuICBsZXQgcmVzdWx0ID0gdG9cblxuICAvLyBIYW5kbGUgYGRhdGEuaE5hbWVgLCBgZGF0YS5oUHJvcGVydGllcywgYGRhdGEuaENoaWxkcmVuYC5cbiAgaWYgKGZyb20gJiYgZnJvbS5kYXRhKSB7XG4gICAgY29uc3QgaE5hbWUgPSBmcm9tLmRhdGEuaE5hbWVcbiAgICBjb25zdCBoQ2hpbGRyZW4gPSBmcm9tLmRhdGEuaENoaWxkcmVuXG4gICAgY29uc3QgaFByb3BlcnRpZXMgPSBmcm9tLmRhdGEuaFByb3BlcnRpZXNcblxuICAgIGlmICh0eXBlb2YgaE5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBUcmFuc2Zvcm1pbmcgdGhlIG5vZGUgcmVzdWx0ZWQgaW4gYW4gZWxlbWVudCB3aXRoIGEgZGlmZmVyZW50IG5hbWVcbiAgICAgIC8vIHRoYW4gd2FudGVkOlxuICAgICAgaWYgKHJlc3VsdC50eXBlID09PSAnZWxlbWVudCcpIHtcbiAgICAgICAgcmVzdWx0LnRhZ05hbWUgPSBoTmFtZVxuICAgICAgfVxuICAgICAgLy8gVHJhbnNmb3JtaW5nIHRoZSBub2RlIHJlc3VsdGVkIGluIGEgbm9uLWVsZW1lbnQsIHdoaWNoIGhhcHBlbnMgZm9yXG4gICAgICAvLyByYXcsIHRleHQsIGFuZCByb290IG5vZGVzICh1bmxlc3MgY3VzdG9tIGhhbmRsZXJzIGFyZSBwYXNzZWQpLlxuICAgICAgLy8gVGhlIGludGVudCBpcyBsaWtlbHkgdG8ga2VlcCB0aGUgY29udGVudCBhcm91bmQgKG90aGVyd2lzZTogcGFzc1xuICAgICAgLy8gYGhDaGlsZHJlbmApLlxuICAgICAgZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICB0eXBlOiAnZWxlbWVudCcsXG4gICAgICAgICAgdGFnTmFtZTogaE5hbWUsXG4gICAgICAgICAgcHJvcGVydGllczoge30sXG4gICAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICAgIH1cblxuICAgICAgICAvLyBUbyBkbzogbmV4dCBtYWpvcjogdGFrZSB0aGUgY2hpbGRyZW4gZnJvbSB0aGUgYHJvb3RgLCBvciBpbmplY3QgdGhlXG4gICAgICAgIC8vIHJhdy90ZXh0L2NvbW1lbnQgb3Igc28gaW50byB0aGUgZWxlbWVudD9cbiAgICAgICAgLy8gaWYgKCdjaGlsZHJlbicgaW4gbm9kZSkge1xuICAgICAgICAvLyAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGFzc3VtZSBgY2hpbGRyZW5gIGFyZSBhbGxvd2VkIGluIGVsZW1lbnRzLlxuICAgICAgICAvLyAgIHJlc3VsdC5jaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW5cbiAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgLy8gICAvLyBAdHMtZXhwZWN0LWVycm9yOiBhc3N1bWUgYG5vZGVgIGlzIGFsbG93ZWQgaW4gZWxlbWVudHMuXG4gICAgICAgIC8vICAgcmVzdWx0LmNoaWxkcmVuLnB1c2gobm9kZSlcbiAgICAgICAgLy8gfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyZXN1bHQudHlwZSA9PT0gJ2VsZW1lbnQnICYmIGhQcm9wZXJ0aWVzKSB7XG4gICAgICByZXN1bHQucHJvcGVydGllcyA9IHsuLi5yZXN1bHQucHJvcGVydGllcywgLi4uaFByb3BlcnRpZXN9XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgJ2NoaWxkcmVuJyBpbiByZXN1bHQgJiZcbiAgICAgIHJlc3VsdC5jaGlsZHJlbiAmJlxuICAgICAgaENoaWxkcmVuICE9PSBudWxsICYmXG4gICAgICBoQ2hpbGRyZW4gIT09IHVuZGVmaW5lZFxuICAgICkge1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogYXNzdW1lIHZhbGlkIGNoaWxkcmVuIGFyZSBkZWZpbmVkLlxuICAgICAgcmVzdWx0LmNoaWxkcmVuID0gaENoaWxkcmVuXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBtZGFzdCBub2RlIGludG8gYSBoYXN0IG5vZGUuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtNZGFzdE5vZGVzfSBub2RlXG4gKiAgIG1kYXN0IG5vZGUuXG4gKiBAcGFyYW0ge01kYXN0UGFyZW50cyB8IG51bGwgfCB1bmRlZmluZWR9IFtwYXJlbnRdXG4gKiAgIFBhcmVudCBvZiBgbm9kZWAuXG4gKiBAcmV0dXJucyB7SGFzdEVsZW1lbnRDb250ZW50IHwgQXJyYXk8SGFzdEVsZW1lbnRDb250ZW50PiB8IG51bGwgfCB1bmRlZmluZWR9XG4gKiAgIFJlc3VsdGluZyBoYXN0IG5vZGUuXG4gKi9cbi8vIFRvIGRvOiBuZXh0IG1ham9yOiBkbyBub3QgZXhwb3NlLCBrZWVwIGJvdW5kLlxuZXhwb3J0IGZ1bmN0aW9uIG9uZShzdGF0ZSwgbm9kZSwgcGFyZW50KSB7XG4gIGNvbnN0IHR5cGUgPSBub2RlICYmIG5vZGUudHlwZVxuXG4gIC8vIEZhaWwgb24gbm9uLW5vZGVzLlxuICBpZiAoIXR5cGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIG5vZGUsIGdvdCBgJyArIG5vZGUgKyAnYCcpXG4gIH1cblxuICBpZiAob3duLmNhbGwoc3RhdGUuaGFuZGxlcnMsIHR5cGUpKSB7XG4gICAgcmV0dXJuIHN0YXRlLmhhbmRsZXJzW3R5cGVdKHN0YXRlLCBub2RlLCBwYXJlbnQpXG4gIH1cblxuICBpZiAoc3RhdGUucGFzc1Rocm91Z2ggJiYgc3RhdGUucGFzc1Rocm91Z2guaW5jbHVkZXModHlwZSkpIHtcbiAgICAvLyBUbyBkbzogbmV4dCBtYWpvcjogZGVlcCBjbG9uZS5cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiB0eXBlcyBvZiBwYXNzZWQgdGhyb3VnaCBub2RlcyBhcmUgZXhwZWN0ZWQgdG8gYmUgYWRkZWQgbWFudWFsbHkuXG4gICAgcmV0dXJuICdjaGlsZHJlbicgaW4gbm9kZSA/IHsuLi5ub2RlLCBjaGlsZHJlbjogYWxsKHN0YXRlLCBub2RlKX0gOiBub2RlXG4gIH1cblxuICBpZiAoc3RhdGUudW5rbm93bkhhbmRsZXIpIHtcbiAgICByZXR1cm4gc3RhdGUudW5rbm93bkhhbmRsZXIoc3RhdGUsIG5vZGUsIHBhcmVudClcbiAgfVxuXG4gIHJldHVybiBkZWZhdWx0VW5rbm93bkhhbmRsZXIoc3RhdGUsIG5vZGUpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBjaGlsZHJlbiBvZiBhbiBtZGFzdCBub2RlIGludG8gaGFzdCBub2Rlcy5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogICBJbmZvIHBhc3NlZCBhcm91bmQuXG4gKiBAcGFyYW0ge01kYXN0Tm9kZXN9IHBhcmVudFxuICogICBtZGFzdCBub2RlIHRvIGNvbXBpbGVcbiAqIEByZXR1cm5zIHtBcnJheTxIYXN0RWxlbWVudENvbnRlbnQ+fVxuICogICBSZXN1bHRpbmcgaGFzdCBub2Rlcy5cbiAqL1xuLy8gVG8gZG86IG5leHQgbWFqb3I6IGRvIG5vdCBleHBvc2UsIGtlZXAgYm91bmQuXG5leHBvcnQgZnVuY3Rpb24gYWxsKHN0YXRlLCBwYXJlbnQpIHtcbiAgLyoqIEB0eXBlIHtBcnJheTxIYXN0RWxlbWVudENvbnRlbnQ+fSAqL1xuICBjb25zdCB2YWx1ZXMgPSBbXVxuXG4gIGlmICgnY2hpbGRyZW4nIGluIHBhcmVudCkge1xuICAgIGNvbnN0IG5vZGVzID0gcGFyZW50LmNoaWxkcmVuXG4gICAgbGV0IGluZGV4ID0gLTFcbiAgICB3aGlsZSAoKytpbmRleCA8IG5vZGVzLmxlbmd0aCkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gb25lKHN0YXRlLCBub2Rlc1tpbmRleF0sIHBhcmVudClcblxuICAgICAgLy8gVG8gZG86IHNlZSBpZiB3ZSB2YW4gY2xlYW4gdGhpcz8gQ2FuIHdlIG1lcmdlIHRleHRzP1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICBpZiAoaW5kZXggJiYgbm9kZXNbaW5kZXggLSAxXS50eXBlID09PSAnYnJlYWsnKSB7XG4gICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlc3VsdCkgJiYgcmVzdWx0LnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgcmVzdWx0LnZhbHVlID0gcmVzdWx0LnZhbHVlLnJlcGxhY2UoL15cXHMrLywgJycpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlc3VsdCkgJiYgcmVzdWx0LnR5cGUgPT09ICdlbGVtZW50Jykge1xuICAgICAgICAgICAgY29uc3QgaGVhZCA9IHJlc3VsdC5jaGlsZHJlblswXVxuXG4gICAgICAgICAgICBpZiAoaGVhZCAmJiBoZWFkLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICBoZWFkLnZhbHVlID0gaGVhZC52YWx1ZS5yZXBsYWNlKC9eXFxzKy8sICcnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgICAgICB2YWx1ZXMucHVzaCguLi5yZXN1bHQpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWVzLnB1c2gocmVzdWx0KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhbHVlc1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiB1bmtub3duIG5vZGUuXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kLlxuICogQHBhcmFtIHtNZGFzdE5vZGVzfSBub2RlXG4gKiAgIFVua25vd24gbWRhc3Qgbm9kZS5cbiAqIEByZXR1cm5zIHtIYXN0VGV4dCB8IEhhc3RFbGVtZW50fVxuICogICBSZXN1bHRpbmcgaGFzdCBub2RlLlxuICovXG5mdW5jdGlvbiBkZWZhdWx0VW5rbm93bkhhbmRsZXIoc3RhdGUsIG5vZGUpIHtcbiAgY29uc3QgZGF0YSA9IG5vZGUuZGF0YSB8fCB7fVxuICAvKiogQHR5cGUge0hhc3RUZXh0IHwgSGFzdEVsZW1lbnR9ICovXG4gIGNvbnN0IHJlc3VsdCA9XG4gICAgJ3ZhbHVlJyBpbiBub2RlICYmXG4gICAgIShvd24uY2FsbChkYXRhLCAnaFByb3BlcnRpZXMnKSB8fCBvd24uY2FsbChkYXRhLCAnaENoaWxkcmVuJykpXG4gICAgICA/IHt0eXBlOiAndGV4dCcsIHZhbHVlOiBub2RlLnZhbHVlfVxuICAgICAgOiB7XG4gICAgICAgICAgdHlwZTogJ2VsZW1lbnQnLFxuICAgICAgICAgIHRhZ05hbWU6ICdkaXYnLFxuICAgICAgICAgIHByb3BlcnRpZXM6IHt9LFxuICAgICAgICAgIGNoaWxkcmVuOiBhbGwoc3RhdGUsIG5vZGUpXG4gICAgICAgIH1cblxuICBzdGF0ZS5wYXRjaChub2RlLCByZXN1bHQpXG4gIHJldHVybiBzdGF0ZS5hcHBseURhdGEobm9kZSwgcmVzdWx0KVxufVxuXG4vKipcbiAqIFdyYXAgYG5vZGVzYCB3aXRoIGxpbmUgZW5kaW5ncyBiZXR3ZWVuIGVhY2ggbm9kZS5cbiAqXG4gKiBAdGVtcGxhdGUge0hhc3RDb250ZW50fSBUeXBlXG4gKiAgIE5vZGUgdHlwZS5cbiAqIEBwYXJhbSB7QXJyYXk8VHlwZT59IG5vZGVzXG4gKiAgIExpc3Qgb2Ygbm9kZXMgdG8gd3JhcC5cbiAqIEBwYXJhbSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtsb29zZT1mYWxzZV1cbiAqICAgV2hldGhlciB0byBhZGQgbGluZSBlbmRpbmdzIGF0IHN0YXJ0IGFuZCBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXk8VHlwZSB8IEhhc3RUZXh0Pn1cbiAqICAgV3JhcHBlZCBub2Rlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXAobm9kZXMsIGxvb3NlKSB7XG4gIC8qKiBAdHlwZSB7QXJyYXk8VHlwZSB8IEhhc3RUZXh0Pn0gKi9cbiAgY29uc3QgcmVzdWx0ID0gW11cbiAgbGV0IGluZGV4ID0gLTFcblxuICBpZiAobG9vc2UpIHtcbiAgICByZXN1bHQucHVzaCh7dHlwZTogJ3RleHQnLCB2YWx1ZTogJ1xcbid9KVxuICB9XG5cbiAgd2hpbGUgKCsraW5kZXggPCBub2Rlcy5sZW5ndGgpIHtcbiAgICBpZiAoaW5kZXgpIHJlc3VsdC5wdXNoKHt0eXBlOiAndGV4dCcsIHZhbHVlOiAnXFxuJ30pXG4gICAgcmVzdWx0LnB1c2gobm9kZXNbaW5kZXhdKVxuICB9XG5cbiAgaWYgKGxvb3NlICYmIG5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICByZXN1bHQucHVzaCh7dHlwZTogJ3RleHQnLCB2YWx1ZTogJ1xcbid9KVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlJvb3R8aW1wb3J0KCdtZGFzdCcpLkNvbnRlbnR9IE5vZGVcbiAqXG4gKiBAdHlwZWRlZiBPcHRpb25zXG4gKiAgIENvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtpbmNsdWRlSW1hZ2VBbHQ9dHJ1ZV1cbiAqICAgV2hldGhlciB0byB1c2UgYGFsdGAgZm9yIGBpbWFnZWBzLlxuICovXG5cbi8qKlxuICogR2V0IHRoZSB0ZXh0IGNvbnRlbnQgb2YgYSBub2RlIG9yIGxpc3Qgb2Ygbm9kZXMuXG4gKlxuICogUHJlZmVycyB0aGUgbm9kZeKAmXMgcGxhaW4tdGV4dCBmaWVsZHMsIG90aGVyd2lzZSBzZXJpYWxpemVzIGl0cyBjaGlsZHJlbixcbiAqIGFuZCBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gYXJyYXksIHNlcmlhbGl6ZSB0aGUgbm9kZXMgaW4gaXQuXG4gKlxuICogQHBhcmFtIHt1bmtub3dufSB2YWx1ZVxuICogICBUaGluZyB0byBzZXJpYWxpemUsIHR5cGljYWxseSBgTm9kZWAuXG4gKiBAcGFyYW0ge09wdGlvbnMgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0aW9uc11cbiAqICAgQ29uZmlndXJhdGlvbiAob3B0aW9uYWwpLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgU2VyaWFsaXplZCBgdmFsdWVgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUsIG9wdGlvbnMpIHtcbiAgY29uc3QgaW5jbHVkZUltYWdlQWx0ID0gKG9wdGlvbnMgfHwge30pLmluY2x1ZGVJbWFnZUFsdFxuICByZXR1cm4gb25lKFxuICAgIHZhbHVlLFxuICAgIHR5cGVvZiBpbmNsdWRlSW1hZ2VBbHQgPT09ICdib29sZWFuJyA/IGluY2x1ZGVJbWFnZUFsdCA6IHRydWVcbiAgKVxufVxuXG4vKipcbiAqIE9uZSBub2RlIG9yIHNldmVyYWwgbm9kZXMuXG4gKlxuICogQHBhcmFtIHt1bmtub3dufSB2YWx1ZVxuICogICBUaGluZyB0byBzZXJpYWxpemUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluY2x1ZGVJbWFnZUFsdFxuICogICBJbmNsdWRlIGltYWdlIGBhbHRgcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKiAgIFNlcmlhbGl6ZWQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gb25lKHZhbHVlLCBpbmNsdWRlSW1hZ2VBbHQpIHtcbiAgcmV0dXJuIChcbiAgICAobm9kZSh2YWx1ZSkgJiZcbiAgICAgICgoJ3ZhbHVlJyBpbiB2YWx1ZSAmJiB2YWx1ZS52YWx1ZSkgfHxcbiAgICAgICAgKGluY2x1ZGVJbWFnZUFsdCAmJiAnYWx0JyBpbiB2YWx1ZSAmJiB2YWx1ZS5hbHQpIHx8XG4gICAgICAgICgnY2hpbGRyZW4nIGluIHZhbHVlICYmIGFsbCh2YWx1ZS5jaGlsZHJlbiwgaW5jbHVkZUltYWdlQWx0KSkpKSB8fFxuICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiBhbGwodmFsdWUsIGluY2x1ZGVJbWFnZUFsdCkpIHx8XG4gICAgJydcbiAgKVxufVxuXG4vKipcbiAqIFNlcmlhbGl6ZSBhIGxpc3Qgb2Ygbm9kZXMuXG4gKlxuICogQHBhcmFtIHtBcnJheTx1bmtub3duPn0gdmFsdWVzXG4gKiAgIFRoaW5nIHRvIHNlcmlhbGl6ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5jbHVkZUltYWdlQWx0XG4gKiAgIEluY2x1ZGUgaW1hZ2UgYGFsdGBzLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgU2VyaWFsaXplZCBub2Rlcy5cbiAqL1xuZnVuY3Rpb24gYWxsKHZhbHVlcywgaW5jbHVkZUltYWdlQWx0KSB7XG4gIC8qKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn0gKi9cbiAgY29uc3QgcmVzdWx0ID0gW11cbiAgbGV0IGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IHZhbHVlcy5sZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gb25lKHZhbHVlc1tpbmRleF0sIGluY2x1ZGVJbWFnZUFsdClcbiAgfVxuXG4gIHJldHVybiByZXN1bHQuam9pbignJylcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBgdmFsdWVgIGxvb2tzIGxpa2UgYSBub2RlLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gdmFsdWVcbiAqICAgVGhpbmcuXG4gKiBAcmV0dXJucyB7dmFsdWUgaXMgTm9kZX1cbiAqICAgV2hldGhlciBgdmFsdWVgIGlzIGEgbm9kZS5cbiAqL1xuZnVuY3Rpb24gbm9kZSh2YWx1ZSkge1xuICByZXR1cm4gQm9vbGVhbih2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvbnN0cnVjdH0gQ29uc3RydWN0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VuaXplcn0gVG9rZW5pemVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlJlc29sdmVyfSBSZXNvbHZlclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW59IFRva2VuXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkV2ZW50fSBFdmVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db2RlfSBDb2RlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlBvaW50fSBQb2ludFxuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICd1dnUvYXNzZXJ0J1xuaW1wb3J0IHtwdXNoLCBzcGxpY2V9IGZyb20gJ21pY3JvbWFyay11dGlsLWNodW5rZWQnXG5pbXBvcnQge2NsYXNzaWZ5Q2hhcmFjdGVyfSBmcm9tICdtaWNyb21hcmstdXRpbC1jbGFzc2lmeS1jaGFyYWN0ZXInXG5pbXBvcnQge3Jlc29sdmVBbGx9IGZyb20gJ21pY3JvbWFyay11dGlsLXJlc29sdmUtYWxsJ1xuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvZGVzLmpzJ1xuaW1wb3J0IHtjb25zdGFudHN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb25zdGFudHMuanMnXG5pbXBvcnQge3R5cGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvdHlwZXMuanMnXG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGF0dGVudGlvbiA9IHtcbiAgbmFtZTogJ2F0dGVudGlvbicsXG4gIHRva2VuaXplOiB0b2tlbml6ZUF0dGVudGlvbixcbiAgcmVzb2x2ZUFsbDogcmVzb2x2ZUFsbEF0dGVudGlvblxufVxuXG4vKipcbiAqIFRha2UgYWxsIGV2ZW50cyBhbmQgcmVzb2x2ZSBhdHRlbnRpb24gdG8gZW1waGFzaXMgb3Igc3Ryb25nLlxuICpcbiAqIEB0eXBlIHtSZXNvbHZlcn1cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFsbEF0dGVudGlvbihldmVudHMsIGNvbnRleHQpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gIGxldCBvcGVuXG4gIC8qKiBAdHlwZSB7VG9rZW59ICovXG4gIGxldCBncm91cFxuICAvKiogQHR5cGUge1Rva2VufSAqL1xuICBsZXQgdGV4dFxuICAvKiogQHR5cGUge1Rva2VufSAqL1xuICBsZXQgb3BlbmluZ1NlcXVlbmNlXG4gIC8qKiBAdHlwZSB7VG9rZW59ICovXG4gIGxldCBjbG9zaW5nU2VxdWVuY2VcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gIGxldCB1c2VcbiAgLyoqIEB0eXBlIHtFdmVudFtdfSAqL1xuICBsZXQgbmV4dEV2ZW50c1xuICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgbGV0IG9mZnNldFxuXG4gIC8vIFdhbGsgdGhyb3VnaCBhbGwgZXZlbnRzLlxuICAvL1xuICAvLyBOb3RlOiBwZXJmb3JtYW5jZSBvZiB0aGlzIGlzIGZpbmUgb24gYW4gbWIgb2Ygbm9ybWFsIG1hcmtkb3duLCBidXQgaXTigJlzXG4gIC8vIGEgYm90dGxlbmVjayBmb3IgbWFsaWNpb3VzIHN0dWZmLlxuICB3aGlsZSAoKytpbmRleCA8IGV2ZW50cy5sZW5ndGgpIHtcbiAgICAvLyBGaW5kIGEgdG9rZW4gdGhhdCBjYW4gY2xvc2UuXG4gICAgaWYgKFxuICAgICAgZXZlbnRzW2luZGV4XVswXSA9PT0gJ2VudGVyJyAmJlxuICAgICAgZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSAnYXR0ZW50aW9uU2VxdWVuY2UnICYmXG4gICAgICBldmVudHNbaW5kZXhdWzFdLl9jbG9zZVxuICAgICkge1xuICAgICAgb3BlbiA9IGluZGV4XG5cbiAgICAgIC8vIE5vdyB3YWxrIGJhY2sgdG8gZmluZCBhbiBvcGVuZXIuXG4gICAgICB3aGlsZSAob3Blbi0tKSB7XG4gICAgICAgIC8vIEZpbmQgYSB0b2tlbiB0aGF0IGNhbiBvcGVuIHRoZSBjbG9zZXIuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBldmVudHNbb3Blbl1bMF0gPT09ICdleGl0JyAmJlxuICAgICAgICAgIGV2ZW50c1tvcGVuXVsxXS50eXBlID09PSAnYXR0ZW50aW9uU2VxdWVuY2UnICYmXG4gICAgICAgICAgZXZlbnRzW29wZW5dWzFdLl9vcGVuICYmXG4gICAgICAgICAgLy8gSWYgdGhlIG1hcmtlcnMgYXJlIHRoZSBzYW1lOlxuICAgICAgICAgIGNvbnRleHQuc2xpY2VTZXJpYWxpemUoZXZlbnRzW29wZW5dWzFdKS5jaGFyQ29kZUF0KDApID09PVxuICAgICAgICAgICAgY29udGV4dC5zbGljZVNlcmlhbGl6ZShldmVudHNbaW5kZXhdWzFdKS5jaGFyQ29kZUF0KDApXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIElmIHRoZSBvcGVuaW5nIGNhbiBjbG9zZSBvciB0aGUgY2xvc2luZyBjYW4gb3BlbixcbiAgICAgICAgICAvLyBhbmQgdGhlIGNsb3NlIHNpemUgKmlzIG5vdCogYSBtdWx0aXBsZSBvZiB0aHJlZSxcbiAgICAgICAgICAvLyBidXQgdGhlIHN1bSBvZiB0aGUgb3BlbmluZyBhbmQgY2xvc2luZyBzaXplICppcyogbXVsdGlwbGUgb2YgdGhyZWUsXG4gICAgICAgICAgLy8gdGhlbiBkb27igJl0IG1hdGNoLlxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIChldmVudHNbb3Blbl1bMV0uX2Nsb3NlIHx8IGV2ZW50c1tpbmRleF1bMV0uX29wZW4pICYmXG4gICAgICAgICAgICAoZXZlbnRzW2luZGV4XVsxXS5lbmQub2Zmc2V0IC0gZXZlbnRzW2luZGV4XVsxXS5zdGFydC5vZmZzZXQpICUgMyAmJlxuICAgICAgICAgICAgIShcbiAgICAgICAgICAgICAgKGV2ZW50c1tvcGVuXVsxXS5lbmQub2Zmc2V0IC1cbiAgICAgICAgICAgICAgICBldmVudHNbb3Blbl1bMV0uc3RhcnQub2Zmc2V0ICtcbiAgICAgICAgICAgICAgICBldmVudHNbaW5kZXhdWzFdLmVuZC5vZmZzZXQgLVxuICAgICAgICAgICAgICAgIGV2ZW50c1tpbmRleF1bMV0uc3RhcnQub2Zmc2V0KSAlXG4gICAgICAgICAgICAgIDNcbiAgICAgICAgICAgIClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gTnVtYmVyIG9mIG1hcmtlcnMgdG8gdXNlIGZyb20gdGhlIHNlcXVlbmNlLlxuICAgICAgICAgIHVzZSA9XG4gICAgICAgICAgICBldmVudHNbb3Blbl1bMV0uZW5kLm9mZnNldCAtIGV2ZW50c1tvcGVuXVsxXS5zdGFydC5vZmZzZXQgPiAxICYmXG4gICAgICAgICAgICBldmVudHNbaW5kZXhdWzFdLmVuZC5vZmZzZXQgLSBldmVudHNbaW5kZXhdWzFdLnN0YXJ0Lm9mZnNldCA+IDFcbiAgICAgICAgICAgICAgPyAyXG4gICAgICAgICAgICAgIDogMVxuXG4gICAgICAgICAgY29uc3Qgc3RhcnQgPSBPYmplY3QuYXNzaWduKHt9LCBldmVudHNbb3Blbl1bMV0uZW5kKVxuICAgICAgICAgIGNvbnN0IGVuZCA9IE9iamVjdC5hc3NpZ24oe30sIGV2ZW50c1tpbmRleF1bMV0uc3RhcnQpXG4gICAgICAgICAgbW92ZVBvaW50KHN0YXJ0LCAtdXNlKVxuICAgICAgICAgIG1vdmVQb2ludChlbmQsIHVzZSlcblxuICAgICAgICAgIG9wZW5pbmdTZXF1ZW5jZSA9IHtcbiAgICAgICAgICAgIHR5cGU6IHVzZSA+IDEgPyB0eXBlcy5zdHJvbmdTZXF1ZW5jZSA6IHR5cGVzLmVtcGhhc2lzU2VxdWVuY2UsXG4gICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgIGVuZDogT2JqZWN0LmFzc2lnbih7fSwgZXZlbnRzW29wZW5dWzFdLmVuZClcbiAgICAgICAgICB9XG4gICAgICAgICAgY2xvc2luZ1NlcXVlbmNlID0ge1xuICAgICAgICAgICAgdHlwZTogdXNlID4gMSA/IHR5cGVzLnN0cm9uZ1NlcXVlbmNlIDogdHlwZXMuZW1waGFzaXNTZXF1ZW5jZSxcbiAgICAgICAgICAgIHN0YXJ0OiBPYmplY3QuYXNzaWduKHt9LCBldmVudHNbaW5kZXhdWzFdLnN0YXJ0KSxcbiAgICAgICAgICAgIGVuZFxuICAgICAgICAgIH1cbiAgICAgICAgICB0ZXh0ID0ge1xuICAgICAgICAgICAgdHlwZTogdXNlID4gMSA/IHR5cGVzLnN0cm9uZ1RleHQgOiB0eXBlcy5lbXBoYXNpc1RleHQsXG4gICAgICAgICAgICBzdGFydDogT2JqZWN0LmFzc2lnbih7fSwgZXZlbnRzW29wZW5dWzFdLmVuZCksXG4gICAgICAgICAgICBlbmQ6IE9iamVjdC5hc3NpZ24oe30sIGV2ZW50c1tpbmRleF1bMV0uc3RhcnQpXG4gICAgICAgICAgfVxuICAgICAgICAgIGdyb3VwID0ge1xuICAgICAgICAgICAgdHlwZTogdXNlID4gMSA/IHR5cGVzLnN0cm9uZyA6IHR5cGVzLmVtcGhhc2lzLFxuICAgICAgICAgICAgc3RhcnQ6IE9iamVjdC5hc3NpZ24oe30sIG9wZW5pbmdTZXF1ZW5jZS5zdGFydCksXG4gICAgICAgICAgICBlbmQ6IE9iamVjdC5hc3NpZ24oe30sIGNsb3NpbmdTZXF1ZW5jZS5lbmQpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZXZlbnRzW29wZW5dWzFdLmVuZCA9IE9iamVjdC5hc3NpZ24oe30sIG9wZW5pbmdTZXF1ZW5jZS5zdGFydClcbiAgICAgICAgICBldmVudHNbaW5kZXhdWzFdLnN0YXJ0ID0gT2JqZWN0LmFzc2lnbih7fSwgY2xvc2luZ1NlcXVlbmNlLmVuZClcblxuICAgICAgICAgIG5leHRFdmVudHMgPSBbXVxuXG4gICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG1vcmUgbWFya2VycyBpbiB0aGUgb3BlbmluZywgYWRkIHRoZW0gYmVmb3JlLlxuICAgICAgICAgIGlmIChldmVudHNbb3Blbl1bMV0uZW5kLm9mZnNldCAtIGV2ZW50c1tvcGVuXVsxXS5zdGFydC5vZmZzZXQpIHtcbiAgICAgICAgICAgIG5leHRFdmVudHMgPSBwdXNoKG5leHRFdmVudHMsIFtcbiAgICAgICAgICAgICAgWydlbnRlcicsIGV2ZW50c1tvcGVuXVsxXSwgY29udGV4dF0sXG4gICAgICAgICAgICAgIFsnZXhpdCcsIGV2ZW50c1tvcGVuXVsxXSwgY29udGV4dF1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gT3BlbmluZy5cbiAgICAgICAgICBuZXh0RXZlbnRzID0gcHVzaChuZXh0RXZlbnRzLCBbXG4gICAgICAgICAgICBbJ2VudGVyJywgZ3JvdXAsIGNvbnRleHRdLFxuICAgICAgICAgICAgWydlbnRlcicsIG9wZW5pbmdTZXF1ZW5jZSwgY29udGV4dF0sXG4gICAgICAgICAgICBbJ2V4aXQnLCBvcGVuaW5nU2VxdWVuY2UsIGNvbnRleHRdLFxuICAgICAgICAgICAgWydlbnRlcicsIHRleHQsIGNvbnRleHRdXG4gICAgICAgICAgXSlcblxuICAgICAgICAgIC8vIEJldHdlZW4uXG4gICAgICAgICAgbmV4dEV2ZW50cyA9IHB1c2goXG4gICAgICAgICAgICBuZXh0RXZlbnRzLFxuICAgICAgICAgICAgcmVzb2x2ZUFsbChcbiAgICAgICAgICAgICAgY29udGV4dC5wYXJzZXIuY29uc3RydWN0cy5pbnNpZGVTcGFuLm51bGwsXG4gICAgICAgICAgICAgIGV2ZW50cy5zbGljZShvcGVuICsgMSwgaW5kZXgpLFxuICAgICAgICAgICAgICBjb250ZXh0XG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuXG4gICAgICAgICAgLy8gQ2xvc2luZy5cbiAgICAgICAgICBuZXh0RXZlbnRzID0gcHVzaChuZXh0RXZlbnRzLCBbXG4gICAgICAgICAgICBbJ2V4aXQnLCB0ZXh0LCBjb250ZXh0XSxcbiAgICAgICAgICAgIFsnZW50ZXInLCBjbG9zaW5nU2VxdWVuY2UsIGNvbnRleHRdLFxuICAgICAgICAgICAgWydleGl0JywgY2xvc2luZ1NlcXVlbmNlLCBjb250ZXh0XSxcbiAgICAgICAgICAgIFsnZXhpdCcsIGdyb3VwLCBjb250ZXh0XVxuICAgICAgICAgIF0pXG5cbiAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbW9yZSBtYXJrZXJzIGluIHRoZSBjbG9zaW5nLCBhZGQgdGhlbSBhZnRlci5cbiAgICAgICAgICBpZiAoZXZlbnRzW2luZGV4XVsxXS5lbmQub2Zmc2V0IC0gZXZlbnRzW2luZGV4XVsxXS5zdGFydC5vZmZzZXQpIHtcbiAgICAgICAgICAgIG9mZnNldCA9IDJcbiAgICAgICAgICAgIG5leHRFdmVudHMgPSBwdXNoKG5leHRFdmVudHMsIFtcbiAgICAgICAgICAgICAgWydlbnRlcicsIGV2ZW50c1tpbmRleF1bMV0sIGNvbnRleHRdLFxuICAgICAgICAgICAgICBbJ2V4aXQnLCBldmVudHNbaW5kZXhdWzFdLCBjb250ZXh0XVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2Zmc2V0ID0gMFxuICAgICAgICAgIH1cblxuICAgICAgICAgIHNwbGljZShldmVudHMsIG9wZW4gLSAxLCBpbmRleCAtIG9wZW4gKyAzLCBuZXh0RXZlbnRzKVxuXG4gICAgICAgICAgaW5kZXggPSBvcGVuICsgbmV4dEV2ZW50cy5sZW5ndGggLSBvZmZzZXQgLSAyXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFJlbW92ZSByZW1haW5pbmcgc2VxdWVuY2VzLlxuICBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBldmVudHMubGVuZ3RoKSB7XG4gICAgaWYgKGV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gJ2F0dGVudGlvblNlcXVlbmNlJykge1xuICAgICAgZXZlbnRzW2luZGV4XVsxXS50eXBlID0gJ2RhdGEnXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGV2ZW50c1xufVxuXG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cbmZ1bmN0aW9uIHRva2VuaXplQXR0ZW50aW9uKGVmZmVjdHMsIG9rKSB7XG4gIGNvbnN0IGF0dGVudGlvbk1hcmtlcnMgPSB0aGlzLnBhcnNlci5jb25zdHJ1Y3RzLmF0dGVudGlvbk1hcmtlcnMubnVsbFxuICBjb25zdCBwcmV2aW91cyA9IHRoaXMucHJldmlvdXNcbiAgY29uc3QgYmVmb3JlID0gY2xhc3NpZnlDaGFyYWN0ZXIocHJldmlvdXMpXG5cbiAgLyoqIEB0eXBlIHtOb25OdWxsYWJsZTxDb2RlPn0gKi9cbiAgbGV0IG1hcmtlclxuXG4gIHJldHVybiBzdGFydFxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBhc3NlcnQoXG4gICAgICBjb2RlID09PSBjb2Rlcy5hc3RlcmlzayB8fCBjb2RlID09PSBjb2Rlcy51bmRlcnNjb3JlLFxuICAgICAgJ2V4cGVjdGVkIGFzdGVyaXNrIG9yIHVuZGVyc2NvcmUnXG4gICAgKVxuICAgIGVmZmVjdHMuZW50ZXIoJ2F0dGVudGlvblNlcXVlbmNlJylcbiAgICBtYXJrZXIgPSBjb2RlXG4gICAgcmV0dXJuIHNlcXVlbmNlKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzZXF1ZW5jZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG1hcmtlcikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gc2VxdWVuY2VcbiAgICB9XG5cbiAgICBjb25zdCB0b2tlbiA9IGVmZmVjdHMuZXhpdCgnYXR0ZW50aW9uU2VxdWVuY2UnKVxuICAgIGNvbnN0IGFmdGVyID0gY2xhc3NpZnlDaGFyYWN0ZXIoY29kZSlcblxuICAgIGNvbnN0IG9wZW4gPVxuICAgICAgIWFmdGVyIHx8XG4gICAgICAoYWZ0ZXIgPT09IGNvbnN0YW50cy5jaGFyYWN0ZXJHcm91cFB1bmN0dWF0aW9uICYmIGJlZm9yZSkgfHxcbiAgICAgIGF0dGVudGlvbk1hcmtlcnMuaW5jbHVkZXMoY29kZSlcbiAgICBjb25zdCBjbG9zZSA9XG4gICAgICAhYmVmb3JlIHx8XG4gICAgICAoYmVmb3JlID09PSBjb25zdGFudHMuY2hhcmFjdGVyR3JvdXBQdW5jdHVhdGlvbiAmJiBhZnRlcikgfHxcbiAgICAgIGF0dGVudGlvbk1hcmtlcnMuaW5jbHVkZXMocHJldmlvdXMpXG5cbiAgICB0b2tlbi5fb3BlbiA9IEJvb2xlYW4oXG4gICAgICBtYXJrZXIgPT09IGNvZGVzLmFzdGVyaXNrID8gb3BlbiA6IG9wZW4gJiYgKGJlZm9yZSB8fCAhY2xvc2UpXG4gICAgKVxuICAgIHRva2VuLl9jbG9zZSA9IEJvb2xlYW4oXG4gICAgICBtYXJrZXIgPT09IGNvZGVzLmFzdGVyaXNrID8gY2xvc2UgOiBjbG9zZSAmJiAoYWZ0ZXIgfHwgIW9wZW4pXG4gICAgKVxuICAgIHJldHVybiBvayhjb2RlKVxuICB9XG59XG5cbi8qKlxuICogTW92ZSBhIHBvaW50IGEgYml0LlxuICpcbiAqIE5vdGU6IGBtb3ZlYCBvbmx5IHdvcmtzIGluc2lkZSBsaW5lcyEgSXTigJlzIG5vdCBwb3NzaWJsZSB0byBtb3ZlIHBhc3Qgb3RoZXJcbiAqIGNodW5rcyAocmVwbGFjZW1lbnQgY2hhcmFjdGVycywgdGFicywgb3IgbGluZSBlbmRpbmdzKS5cbiAqXG4gKiBAcGFyYW0ge1BvaW50fSBwb2ludFxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIG1vdmVQb2ludChwb2ludCwgb2Zmc2V0KSB7XG4gIHBvaW50LmNvbHVtbiArPSBvZmZzZXRcbiAgcG9pbnQub2Zmc2V0ICs9IG9mZnNldFxuICBwb2ludC5fYnVmZmVySW5kZXggKz0gb2Zmc2V0XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29uc3RydWN0fSBDb25zdHJ1Y3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVyfSBUb2tlbml6ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ3V2dS9hc3NlcnQnXG5pbXBvcnQge1xuICBhc2NpaUFscGhhLFxuICBhc2NpaUFscGhhbnVtZXJpYyxcbiAgYXNjaWlBdGV4dCxcbiAgYXNjaWlDb250cm9sXG59IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcbmltcG9ydCB7Y29kZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb2Rlcy5qcydcbmltcG9ydCB7Y29uc3RhbnRzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvY29uc3RhbnRzLmpzJ1xuaW1wb3J0IHt0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL3R5cGVzLmpzJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBhdXRvbGluayA9IHtuYW1lOiAnYXV0b2xpbmsnLCB0b2tlbml6ZTogdG9rZW5pemVBdXRvbGlua31cblxuLyoqIEB0eXBlIHtUb2tlbml6ZXJ9ICovXG5mdW5jdGlvbiB0b2tlbml6ZUF1dG9saW5rKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgbGV0IHNpemUgPSAxXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGFzc2VydChjb2RlID09PSBjb2Rlcy5sZXNzVGhhbiwgJ2V4cGVjdGVkIGA8YCcpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5hdXRvbGluaylcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmF1dG9saW5rTWFya2VyKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5hdXRvbGlua01hcmtlcilcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmF1dG9saW5rUHJvdG9jb2wpXG4gICAgcmV0dXJuIG9wZW5cbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIG9wZW4oY29kZSkge1xuICAgIGlmIChhc2NpaUFscGhhKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBzY2hlbWVPckVtYWlsQXRleHRcbiAgICB9XG5cbiAgICByZXR1cm4gYXNjaWlBdGV4dChjb2RlKSA/IGVtYWlsQXRleHQoY29kZSkgOiBub2soY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHNjaGVtZU9yRW1haWxBdGV4dChjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPT09IGNvZGVzLnBsdXNTaWduIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5kYXNoIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5kb3QgfHxcbiAgICAgIGFzY2lpQWxwaGFudW1lcmljKGNvZGUpXG4gICAgICA/IHNjaGVtZUluc2lkZU9yRW1haWxBdGV4dChjb2RlKVxuICAgICAgOiBlbWFpbEF0ZXh0KGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzY2hlbWVJbnNpZGVPckVtYWlsQXRleHQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5jb2xvbikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gdXJsSW5zaWRlXG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgKGNvZGUgPT09IGNvZGVzLnBsdXNTaWduIHx8XG4gICAgICAgIGNvZGUgPT09IGNvZGVzLmRhc2ggfHxcbiAgICAgICAgY29kZSA9PT0gY29kZXMuZG90IHx8XG4gICAgICAgIGFzY2lpQWxwaGFudW1lcmljKGNvZGUpKSAmJlxuICAgICAgc2l6ZSsrIDwgY29uc3RhbnRzLmF1dG9saW5rU2NoZW1lU2l6ZU1heFxuICAgICkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gc2NoZW1lSW5zaWRlT3JFbWFpbEF0ZXh0XG4gICAgfVxuXG4gICAgcmV0dXJuIGVtYWlsQXRleHQoY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHVybEluc2lkZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmdyZWF0ZXJUaGFuKSB7XG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMuYXV0b2xpbmtQcm90b2NvbClcbiAgICAgIHJldHVybiBlbmQoY29kZSlcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBjb2RlID09PSBjb2Rlcy5lb2YgfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLnNwYWNlIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5sZXNzVGhhbiB8fFxuICAgICAgYXNjaWlDb250cm9sKGNvZGUpXG4gICAgKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIHVybEluc2lkZVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gZW1haWxBdGV4dChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmF0U2lnbikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBzaXplID0gMFxuICAgICAgcmV0dXJuIGVtYWlsQXRTaWduT3JEb3RcbiAgICB9XG5cbiAgICBpZiAoYXNjaWlBdGV4dChjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gZW1haWxBdGV4dFxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGVtYWlsQXRTaWduT3JEb3QoY29kZSkge1xuICAgIHJldHVybiBhc2NpaUFscGhhbnVtZXJpYyhjb2RlKSA/IGVtYWlsTGFiZWwoY29kZSkgOiBub2soY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGVtYWlsTGFiZWwoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5kb3QpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgc2l6ZSA9IDBcbiAgICAgIHJldHVybiBlbWFpbEF0U2lnbk9yRG90XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmdyZWF0ZXJUaGFuKSB7XG4gICAgICAvLyBFeGl0LCB0aGVuIGNoYW5nZSB0aGUgdHlwZS5cbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5hdXRvbGlua1Byb3RvY29sKS50eXBlID0gdHlwZXMuYXV0b2xpbmtFbWFpbFxuICAgICAgcmV0dXJuIGVuZChjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBlbWFpbFZhbHVlKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBlbWFpbFZhbHVlKGNvZGUpIHtcbiAgICBpZiAoXG4gICAgICAoY29kZSA9PT0gY29kZXMuZGFzaCB8fCBhc2NpaUFscGhhbnVtZXJpYyhjb2RlKSkgJiZcbiAgICAgIHNpemUrKyA8IGNvbnN0YW50cy5hdXRvbGlua0RvbWFpblNpemVNYXhcbiAgICApIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvZGUgPT09IGNvZGVzLmRhc2ggPyBlbWFpbFZhbHVlIDogZW1haWxMYWJlbFxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGVuZChjb2RlKSB7XG4gICAgYXNzZXJ0KGNvZGUgPT09IGNvZGVzLmdyZWF0ZXJUaGFuLCAnZXhwZWN0ZWQgYD5gJylcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmF1dG9saW5rTWFya2VyKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5hdXRvbGlua01hcmtlcilcbiAgICBlZmZlY3RzLmV4aXQodHlwZXMuYXV0b2xpbmspXG4gICAgcmV0dXJuIG9rXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZ30gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvZGVzLmpzJ1xuaW1wb3J0IHt0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL3R5cGVzLmpzJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBibGFua0xpbmUgPSB7dG9rZW5pemU6IHRva2VuaXplQmxhbmtMaW5lLCBwYXJ0aWFsOiB0cnVlfVxuXG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cbmZ1bmN0aW9uIHRva2VuaXplQmxhbmtMaW5lKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgcmV0dXJuIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBhZnRlcldoaXRlc3BhY2UsIHR5cGVzLmxpbmVQcmVmaXgpXG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gYWZ0ZXJXaGl0ZXNwYWNlKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA9PT0gY29kZXMuZW9mIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSA/IG9rKGNvZGUpIDogbm9rKGNvZGUpXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5FeGl0ZXJ9IEV4aXRlclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAndXZ1L2Fzc2VydCdcbmltcG9ydCB7ZmFjdG9yeVNwYWNlfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSdcbmltcG9ydCB7bWFya2Rvd25TcGFjZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvZGVzLmpzJ1xuaW1wb3J0IHtjb25zdGFudHN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb25zdGFudHMuanMnXG5pbXBvcnQge3R5cGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvdHlwZXMuanMnXG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGJsb2NrUXVvdGUgPSB7XG4gIG5hbWU6ICdibG9ja1F1b3RlJyxcbiAgdG9rZW5pemU6IHRva2VuaXplQmxvY2tRdW90ZVN0YXJ0LFxuICBjb250aW51YXRpb246IHt0b2tlbml6ZTogdG9rZW5pemVCbG9ja1F1b3RlQ29udGludWF0aW9ufSxcbiAgZXhpdFxufVxuXG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cbmZ1bmN0aW9uIHRva2VuaXplQmxvY2tRdW90ZVN0YXJ0KGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcblxuICByZXR1cm4gc3RhcnRcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmdyZWF0ZXJUaGFuKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHNlbGYuY29udGFpbmVyU3RhdGVcblxuICAgICAgYXNzZXJ0KHN0YXRlLCAnZXhwZWN0ZWQgYGNvbnRhaW5lclN0YXRlYCB0byBiZSBkZWZpbmVkIGluIGNvbnRhaW5lcicpXG5cbiAgICAgIGlmICghc3RhdGUub3Blbikge1xuICAgICAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmJsb2NrUXVvdGUsIHtfY29udGFpbmVyOiB0cnVlfSlcbiAgICAgICAgc3RhdGUub3BlbiA9IHRydWVcbiAgICAgIH1cblxuICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy5ibG9ja1F1b3RlUHJlZml4KVxuICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy5ibG9ja1F1b3RlTWFya2VyKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMuYmxvY2tRdW90ZU1hcmtlcilcbiAgICAgIHJldHVybiBhZnRlclxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGFmdGVyKGNvZGUpIHtcbiAgICBpZiAobWFya2Rvd25TcGFjZShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy5ibG9ja1F1b3RlUHJlZml4V2hpdGVzcGFjZSlcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmJsb2NrUXVvdGVQcmVmaXhXaGl0ZXNwYWNlKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmJsb2NrUXVvdGVQcmVmaXgpXG4gICAgICByZXR1cm4gb2tcbiAgICB9XG5cbiAgICBlZmZlY3RzLmV4aXQodHlwZXMuYmxvY2tRdW90ZVByZWZpeClcbiAgICByZXR1cm4gb2soY29kZSlcbiAgfVxufVxuXG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cbmZ1bmN0aW9uIHRva2VuaXplQmxvY2tRdW90ZUNvbnRpbnVhdGlvbihlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiBmYWN0b3J5U3BhY2UoXG4gICAgZWZmZWN0cyxcbiAgICBlZmZlY3RzLmF0dGVtcHQoYmxvY2tRdW90ZSwgb2ssIG5vayksXG4gICAgdHlwZXMubGluZVByZWZpeCxcbiAgICB0aGlzLnBhcnNlci5jb25zdHJ1Y3RzLmRpc2FibGUubnVsbC5pbmNsdWRlcygnY29kZUluZGVudGVkJylcbiAgICAgID8gdW5kZWZpbmVkXG4gICAgICA6IGNvbnN0YW50cy50YWJTaXplXG4gIClcbn1cblxuLyoqIEB0eXBlIHtFeGl0ZXJ9ICovXG5mdW5jdGlvbiBleGl0KGVmZmVjdHMpIHtcbiAgZWZmZWN0cy5leGl0KHR5cGVzLmJsb2NrUXVvdGUpXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29uc3RydWN0fSBDb25zdHJ1Y3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVyfSBUb2tlbml6ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ3V2dS9hc3NlcnQnXG5pbXBvcnQge2FzY2lpUHVuY3R1YXRpb259IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcbmltcG9ydCB7Y29kZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb2Rlcy5qcydcbmltcG9ydCB7dHlwZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC90eXBlcy5qcydcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgY2hhcmFjdGVyRXNjYXBlID0ge1xuICBuYW1lOiAnY2hhcmFjdGVyRXNjYXBlJyxcbiAgdG9rZW5pemU6IHRva2VuaXplQ2hhcmFjdGVyRXNjYXBlXG59XG5cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuZnVuY3Rpb24gdG9rZW5pemVDaGFyYWN0ZXJFc2NhcGUoZWZmZWN0cywgb2ssIG5vaykge1xuICByZXR1cm4gc3RhcnRcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgYXNzZXJ0KGNvZGUgPT09IGNvZGVzLmJhY2tzbGFzaCwgJ2V4cGVjdGVkIGBcXFxcYCcpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5jaGFyYWN0ZXJFc2NhcGUpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5lc2NhcGVNYXJrZXIpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KHR5cGVzLmVzY2FwZU1hcmtlcilcbiAgICByZXR1cm4gb3BlblxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gb3Blbihjb2RlKSB7XG4gICAgaWYgKGFzY2lpUHVuY3R1YXRpb24oY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuY2hhcmFjdGVyRXNjYXBlVmFsdWUpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5jaGFyYWN0ZXJFc2NhcGVWYWx1ZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5jaGFyYWN0ZXJFc2NhcGUpXG4gICAgICByZXR1cm4gb2tcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbn0gVG9rZW5cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvZGV9IENvZGVcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAndXZ1L2Fzc2VydCdcbmltcG9ydCB7ZGVjb2RlTmFtZWRDaGFyYWN0ZXJSZWZlcmVuY2V9IGZyb20gJ2RlY29kZS1uYW1lZC1jaGFyYWN0ZXItcmVmZXJlbmNlJ1xuaW1wb3J0IHtcbiAgYXNjaWlBbHBoYW51bWVyaWMsXG4gIGFzY2lpRGlnaXQsXG4gIGFzY2lpSGV4RGlnaXRcbn0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvZGVzLmpzJ1xuaW1wb3J0IHtjb25zdGFudHN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb25zdGFudHMuanMnXG5pbXBvcnQge3R5cGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvdHlwZXMuanMnXG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGNoYXJhY3RlclJlZmVyZW5jZSA9IHtcbiAgbmFtZTogJ2NoYXJhY3RlclJlZmVyZW5jZScsXG4gIHRva2VuaXplOiB0b2tlbml6ZUNoYXJhY3RlclJlZmVyZW5jZVxufVxuXG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cbmZ1bmN0aW9uIHRva2VuaXplQ2hhcmFjdGVyUmVmZXJlbmNlKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgbGV0IHNpemUgPSAwXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICBsZXQgbWF4XG4gIC8qKiBAdHlwZSB7KGNvZGU6IENvZGUpID0+IGNvZGUgaXMgbnVtYmVyfSAqL1xuICBsZXQgdGVzdFxuXG4gIHJldHVybiBzdGFydFxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBhc3NlcnQoY29kZSA9PT0gY29kZXMuYW1wZXJzYW5kLCAnZXhwZWN0ZWQgYCZgJylcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmNoYXJhY3RlclJlZmVyZW5jZSlcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmNoYXJhY3RlclJlZmVyZW5jZU1hcmtlcilcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQodHlwZXMuY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VyKVxuICAgIHJldHVybiBvcGVuXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBvcGVuKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMubnVtYmVyU2lnbikge1xuICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy5jaGFyYWN0ZXJSZWZlcmVuY2VNYXJrZXJOdW1lcmljKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMuY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VyTnVtZXJpYylcbiAgICAgIHJldHVybiBudW1lcmljXG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5jaGFyYWN0ZXJSZWZlcmVuY2VWYWx1ZSlcbiAgICBtYXggPSBjb25zdGFudHMuY2hhcmFjdGVyUmVmZXJlbmNlTmFtZWRTaXplTWF4XG4gICAgdGVzdCA9IGFzY2lpQWxwaGFudW1lcmljXG4gICAgcmV0dXJuIHZhbHVlKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBudW1lcmljKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMudXBwZXJjYXNlWCB8fCBjb2RlID09PSBjb2Rlcy5sb3dlcmNhc2VYKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmNoYXJhY3RlclJlZmVyZW5jZU1hcmtlckhleGFkZWNpbWFsKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMuY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VySGV4YWRlY2ltYWwpXG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmNoYXJhY3RlclJlZmVyZW5jZVZhbHVlKVxuICAgICAgbWF4ID0gY29uc3RhbnRzLmNoYXJhY3RlclJlZmVyZW5jZUhleGFkZWNpbWFsU2l6ZU1heFxuICAgICAgdGVzdCA9IGFzY2lpSGV4RGlnaXRcbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuY2hhcmFjdGVyUmVmZXJlbmNlVmFsdWUpXG4gICAgbWF4ID0gY29uc3RhbnRzLmNoYXJhY3RlclJlZmVyZW5jZURlY2ltYWxTaXplTWF4XG4gICAgdGVzdCA9IGFzY2lpRGlnaXRcbiAgICByZXR1cm4gdmFsdWUoY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHZhbHVlKGNvZGUpIHtcbiAgICAvKiogQHR5cGUge1Rva2VufSAqL1xuICAgIGxldCB0b2tlblxuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLnNlbWljb2xvbiAmJiBzaXplKSB7XG4gICAgICB0b2tlbiA9IGVmZmVjdHMuZXhpdCh0eXBlcy5jaGFyYWN0ZXJSZWZlcmVuY2VWYWx1ZSlcblxuICAgICAgaWYgKFxuICAgICAgICB0ZXN0ID09PSBhc2NpaUFscGhhbnVtZXJpYyAmJlxuICAgICAgICAhZGVjb2RlTmFtZWRDaGFyYWN0ZXJSZWZlcmVuY2Uoc2VsZi5zbGljZVNlcmlhbGl6ZSh0b2tlbikpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgICAgfVxuXG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmNoYXJhY3RlclJlZmVyZW5jZU1hcmtlcilcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmNoYXJhY3RlclJlZmVyZW5jZU1hcmtlcilcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5jaGFyYWN0ZXJSZWZlcmVuY2UpXG4gICAgICByZXR1cm4gb2tcbiAgICB9XG5cbiAgICBpZiAodGVzdChjb2RlKSAmJiBzaXplKysgPCBtYXgpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29uc3RydWN0fSBDb25zdHJ1Y3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVyfSBUb2tlbml6ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvZGV9IENvZGVcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAndXZ1L2Fzc2VydCdcbmltcG9ydCB7ZmFjdG9yeVNwYWNlfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSdcbmltcG9ydCB7XG4gIG1hcmtkb3duTGluZUVuZGluZyxcbiAgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZVxufSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge2NvZGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvY29kZXMuanMnXG5pbXBvcnQge2NvbnN0YW50c30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvbnN0YW50cy5qcydcbmltcG9ydCB7dHlwZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC90eXBlcy5qcydcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgY29kZUZlbmNlZCA9IHtcbiAgbmFtZTogJ2NvZGVGZW5jZWQnLFxuICB0b2tlbml6ZTogdG9rZW5pemVDb2RlRmVuY2VkLFxuICBjb25jcmV0ZTogdHJ1ZVxufVxuXG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cbmZ1bmN0aW9uIHRva2VuaXplQ29kZUZlbmNlZChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIC8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuICBjb25zdCBjbG9zaW5nRmVuY2VDb25zdHJ1Y3QgPSB7dG9rZW5pemU6IHRva2VuaXplQ2xvc2luZ0ZlbmNlLCBwYXJ0aWFsOiB0cnVlfVxuICAvKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbiAgY29uc3Qgbm9uTGF6eUxpbmUgPSB7dG9rZW5pemU6IHRva2VuaXplTm9uTGF6eUxpbmUsIHBhcnRpYWw6IHRydWV9XG4gIGNvbnN0IHRhaWwgPSB0aGlzLmV2ZW50c1t0aGlzLmV2ZW50cy5sZW5ndGggLSAxXVxuICBjb25zdCBpbml0aWFsUHJlZml4ID1cbiAgICB0YWlsICYmIHRhaWxbMV0udHlwZSA9PT0gdHlwZXMubGluZVByZWZpeFxuICAgICAgPyB0YWlsWzJdLnNsaWNlU2VyaWFsaXplKHRhaWxbMV0sIHRydWUpLmxlbmd0aFxuICAgICAgOiAwXG4gIGxldCBzaXplT3BlbiA9IDBcbiAgLyoqIEB0eXBlIHtOb25OdWxsYWJsZTxDb2RlPn0gKi9cbiAgbGV0IG1hcmtlclxuXG4gIHJldHVybiBzdGFydFxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBhc3NlcnQoXG4gICAgICBjb2RlID09PSBjb2Rlcy5ncmF2ZUFjY2VudCB8fCBjb2RlID09PSBjb2Rlcy50aWxkZSxcbiAgICAgICdleHBlY3RlZCBgYCBgIGBgIG9yIGB+YCdcbiAgICApXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5jb2RlRmVuY2VkKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuY29kZUZlbmNlZEZlbmNlKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuY29kZUZlbmNlZEZlbmNlU2VxdWVuY2UpXG4gICAgbWFya2VyID0gY29kZVxuICAgIHJldHVybiBzZXF1ZW5jZU9wZW4oY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHNlcXVlbmNlT3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG1hcmtlcikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBzaXplT3BlbisrXG4gICAgICByZXR1cm4gc2VxdWVuY2VPcGVuXG4gICAgfVxuXG4gICAgZWZmZWN0cy5leGl0KHR5cGVzLmNvZGVGZW5jZWRGZW5jZVNlcXVlbmNlKVxuICAgIHJldHVybiBzaXplT3BlbiA8IGNvbnN0YW50cy5jb2RlRmVuY2VkU2VxdWVuY2VTaXplTWluXG4gICAgICA/IG5vayhjb2RlKVxuICAgICAgOiBmYWN0b3J5U3BhY2UoZWZmZWN0cywgaW5mb09wZW4sIHR5cGVzLndoaXRlc3BhY2UpKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBpbmZvT3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmVvZiB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVybiBvcGVuQWZ0ZXIoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmNvZGVGZW5jZWRGZW5jZUluZm8pXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5jaHVua1N0cmluZywge2NvbnRlbnRUeXBlOiBjb25zdGFudHMuY29udGVudFR5cGVTdHJpbmd9KVxuICAgIHJldHVybiBpbmZvKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBpbmZvKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mIHx8IG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5jaHVua1N0cmluZylcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5jb2RlRmVuY2VkRmVuY2VJbmZvKVxuICAgICAgcmV0dXJuIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBpbmZvQWZ0ZXIsIHR5cGVzLndoaXRlc3BhY2UpKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmdyYXZlQWNjZW50ICYmIGNvZGUgPT09IG1hcmtlcikgcmV0dXJuIG5vayhjb2RlKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBpbmZvXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBpbmZvQWZ0ZXIoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5lb2YgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICByZXR1cm4gb3BlbkFmdGVyKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5jb2RlRmVuY2VkRmVuY2VNZXRhKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuY2h1bmtTdHJpbmcsIHtjb250ZW50VHlwZTogY29uc3RhbnRzLmNvbnRlbnRUeXBlU3RyaW5nfSlcbiAgICByZXR1cm4gbWV0YShjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gbWV0YShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmVvZiB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5jaHVua1N0cmluZylcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5jb2RlRmVuY2VkRmVuY2VNZXRhKVxuICAgICAgcmV0dXJuIG9wZW5BZnRlcihjb2RlKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSBjb2Rlcy5ncmF2ZUFjY2VudCAmJiBjb2RlID09PSBtYXJrZXIpIHJldHVybiBub2soY29kZSlcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gbWV0YVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gb3BlbkFmdGVyKGNvZGUpIHtcbiAgICBlZmZlY3RzLmV4aXQodHlwZXMuY29kZUZlbmNlZEZlbmNlKVxuICAgIHJldHVybiBzZWxmLmludGVycnVwdCA/IG9rKGNvZGUpIDogY29udGVudFN0YXJ0KGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBjb250ZW50U3RhcnQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5lb2YpIHtcbiAgICAgIHJldHVybiBhZnRlcihjb2RlKVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVybiBlZmZlY3RzLmF0dGVtcHQoXG4gICAgICAgIG5vbkxhenlMaW5lLFxuICAgICAgICBlZmZlY3RzLmF0dGVtcHQoXG4gICAgICAgICAgY2xvc2luZ0ZlbmNlQ29uc3RydWN0LFxuICAgICAgICAgIGFmdGVyLFxuICAgICAgICAgIGluaXRpYWxQcmVmaXhcbiAgICAgICAgICAgID8gZmFjdG9yeVNwYWNlKFxuICAgICAgICAgICAgICAgIGVmZmVjdHMsXG4gICAgICAgICAgICAgICAgY29udGVudFN0YXJ0LFxuICAgICAgICAgICAgICAgIHR5cGVzLmxpbmVQcmVmaXgsXG4gICAgICAgICAgICAgICAgaW5pdGlhbFByZWZpeCArIDFcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgOiBjb250ZW50U3RhcnRcbiAgICAgICAgKSxcbiAgICAgICAgYWZ0ZXJcbiAgICAgICkoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmNvZGVGbG93VmFsdWUpXG4gICAgcmV0dXJuIGNvbnRlbnRDb250aW51ZShjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gY29udGVudENvbnRpbnVlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmNvZGVGbG93VmFsdWUpXG4gICAgICByZXR1cm4gY29udGVudFN0YXJ0KGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGNvbnRlbnRDb250aW51ZVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gYWZ0ZXIoY29kZSkge1xuICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5jb2RlRmVuY2VkKVxuICAgIHJldHVybiBvayhjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtUb2tlbml6ZXJ9ICovXG4gIGZ1bmN0aW9uIHRva2VuaXplTm9uTGF6eUxpbmUoZWZmZWN0cywgb2ssIG5vaykge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgICByZXR1cm4gc3RhcnRcblxuICAgIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gICAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgICAgYXNzZXJ0KG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSwgJ2V4cGVjdGVkIGVvbCcpXG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmxpbmVFbmRpbmcpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5saW5lRW5kaW5nKVxuICAgICAgcmV0dXJuIGxpbmVTdGFydFxuICAgIH1cblxuICAgIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gICAgZnVuY3Rpb24gbGluZVN0YXJ0KGNvZGUpIHtcbiAgICAgIHJldHVybiBzZWxmLnBhcnNlci5sYXp5W3NlbGYubm93KCkubGluZV0gPyBub2soY29kZSkgOiBvayhjb2RlKVxuICAgIH1cbiAgfVxuXG4gIC8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuICBmdW5jdGlvbiB0b2tlbml6ZUNsb3NpbmdGZW5jZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gICAgbGV0IHNpemUgPSAwXG5cbiAgICByZXR1cm4gZmFjdG9yeVNwYWNlKFxuICAgICAgZWZmZWN0cyxcbiAgICAgIGNsb3NpbmdTZXF1ZW5jZVN0YXJ0LFxuICAgICAgdHlwZXMubGluZVByZWZpeCxcbiAgICAgIHRoaXMucGFyc2VyLmNvbnN0cnVjdHMuZGlzYWJsZS5udWxsLmluY2x1ZGVzKCdjb2RlSW5kZW50ZWQnKVxuICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICA6IGNvbnN0YW50cy50YWJTaXplXG4gICAgKVxuXG4gICAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgICBmdW5jdGlvbiBjbG9zaW5nU2VxdWVuY2VTdGFydChjb2RlKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmNvZGVGZW5jZWRGZW5jZSlcbiAgICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuY29kZUZlbmNlZEZlbmNlU2VxdWVuY2UpXG4gICAgICByZXR1cm4gY2xvc2luZ1NlcXVlbmNlKGNvZGUpXG4gICAgfVxuXG4gICAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgICBmdW5jdGlvbiBjbG9zaW5nU2VxdWVuY2UoY29kZSkge1xuICAgICAgaWYgKGNvZGUgPT09IG1hcmtlcikge1xuICAgICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgICAgc2l6ZSsrXG4gICAgICAgIHJldHVybiBjbG9zaW5nU2VxdWVuY2VcbiAgICAgIH1cblxuICAgICAgaWYgKHNpemUgPCBzaXplT3BlbikgcmV0dXJuIG5vayhjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmNvZGVGZW5jZWRGZW5jZVNlcXVlbmNlKVxuICAgICAgcmV0dXJuIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBjbG9zaW5nU2VxdWVuY2VFbmQsIHR5cGVzLndoaXRlc3BhY2UpKGNvZGUpXG4gICAgfVxuXG4gICAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgICBmdW5jdGlvbiBjbG9zaW5nU2VxdWVuY2VFbmQoY29kZSkge1xuICAgICAgaWYgKGNvZGUgPT09IGNvZGVzLmVvZiB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmNvZGVGZW5jZWRGZW5jZSlcbiAgICAgICAgcmV0dXJuIG9rKGNvZGUpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5SZXNvbHZlcn0gUmVzb2x2ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW59IFRva2VuXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbmltcG9ydCB7ZmFjdG9yeVNwYWNlfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSdcbmltcG9ydCB7bWFya2Rvd25MaW5lRW5kaW5nfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge2NvZGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvY29kZXMuanMnXG5pbXBvcnQge2NvbnN0YW50c30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvbnN0YW50cy5qcydcbmltcG9ydCB7dHlwZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC90eXBlcy5qcydcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgY29kZUluZGVudGVkID0ge1xuICBuYW1lOiAnY29kZUluZGVudGVkJyxcbiAgdG9rZW5pemU6IHRva2VuaXplQ29kZUluZGVudGVkXG59XG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuY29uc3QgaW5kZW50ZWRDb250ZW50ID0ge3Rva2VuaXplOiB0b2tlbml6ZUluZGVudGVkQ29udGVudCwgcGFydGlhbDogdHJ1ZX1cblxuLyoqIEB0eXBlIHtUb2tlbml6ZXJ9ICovXG5mdW5jdGlvbiB0b2tlbml6ZUNvZGVJbmRlbnRlZChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHJldHVybiBzdGFydFxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmNvZGVJbmRlbnRlZClcbiAgICByZXR1cm4gZmFjdG9yeVNwYWNlKFxuICAgICAgZWZmZWN0cyxcbiAgICAgIGFmdGVyU3RhcnRQcmVmaXgsXG4gICAgICB0eXBlcy5saW5lUHJlZml4LFxuICAgICAgY29uc3RhbnRzLnRhYlNpemUgKyAxXG4gICAgKShjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gYWZ0ZXJTdGFydFByZWZpeChjb2RlKSB7XG4gICAgY29uc3QgdGFpbCA9IHNlbGYuZXZlbnRzW3NlbGYuZXZlbnRzLmxlbmd0aCAtIDFdXG4gICAgcmV0dXJuIHRhaWwgJiZcbiAgICAgIHRhaWxbMV0udHlwZSA9PT0gdHlwZXMubGluZVByZWZpeCAmJlxuICAgICAgdGFpbFsyXS5zbGljZVNlcmlhbGl6ZSh0YWlsWzFdLCB0cnVlKS5sZW5ndGggPj0gY29uc3RhbnRzLnRhYlNpemVcbiAgICAgID8gYWZ0ZXJQcmVmaXgoY29kZSlcbiAgICAgIDogbm9rKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBhZnRlclByZWZpeChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmVvZikge1xuICAgICAgcmV0dXJuIGFmdGVyKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuIGVmZmVjdHMuYXR0ZW1wdChpbmRlbnRlZENvbnRlbnQsIGFmdGVyUHJlZml4LCBhZnRlcikoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmNvZGVGbG93VmFsdWUpXG4gICAgcmV0dXJuIGNvbnRlbnQoY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGNvbnRlbnQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5lb2YgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMuY29kZUZsb3dWYWx1ZSlcbiAgICAgIHJldHVybiBhZnRlclByZWZpeChjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBjb250ZW50XG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBhZnRlcihjb2RlKSB7XG4gICAgZWZmZWN0cy5leGl0KHR5cGVzLmNvZGVJbmRlbnRlZClcbiAgICByZXR1cm4gb2soY29kZSlcbiAgfVxufVxuXG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cbmZ1bmN0aW9uIHRva2VuaXplSW5kZW50ZWRDb250ZW50KGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcblxuICByZXR1cm4gc3RhcnRcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgLy8gSWYgdGhpcyBpcyBhIGxhenkgbGluZSwgaXQgY2Fu4oCZdCBiZSBjb2RlLlxuICAgIGlmIChzZWxmLnBhcnNlci5sYXp5W3NlbGYubm93KCkubGluZV0pIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmxpbmVFbmRpbmcpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5saW5lRW5kaW5nKVxuICAgICAgcmV0dXJuIHN0YXJ0XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhY3RvcnlTcGFjZShcbiAgICAgIGVmZmVjdHMsXG4gICAgICBhZnRlclByZWZpeCxcbiAgICAgIHR5cGVzLmxpbmVQcmVmaXgsXG4gICAgICBjb25zdGFudHMudGFiU2l6ZSArIDFcbiAgICApKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBhZnRlclByZWZpeChjb2RlKSB7XG4gICAgY29uc3QgdGFpbCA9IHNlbGYuZXZlbnRzW3NlbGYuZXZlbnRzLmxlbmd0aCAtIDFdXG4gICAgcmV0dXJuIHRhaWwgJiZcbiAgICAgIHRhaWxbMV0udHlwZSA9PT0gdHlwZXMubGluZVByZWZpeCAmJlxuICAgICAgdGFpbFsyXS5zbGljZVNlcmlhbGl6ZSh0YWlsWzFdLCB0cnVlKS5sZW5ndGggPj0gY29uc3RhbnRzLnRhYlNpemVcbiAgICAgID8gb2soY29kZSlcbiAgICAgIDogbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpXG4gICAgICA/IHN0YXJ0KGNvZGUpXG4gICAgICA6IG5vayhjb2RlKVxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29uc3RydWN0fSBDb25zdHJ1Y3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuUmVzb2x2ZXJ9IFJlc29sdmVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VuaXplcn0gVG9rZW5pemVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlByZXZpb3VzfSBQcmV2aW91c1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbn0gVG9rZW5cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ3V2dS9hc3NlcnQnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZ30gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvZGVzLmpzJ1xuaW1wb3J0IHt0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL3R5cGVzLmpzJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBjb2RlVGV4dCA9IHtcbiAgbmFtZTogJ2NvZGVUZXh0JyxcbiAgdG9rZW5pemU6IHRva2VuaXplQ29kZVRleHQsXG4gIHJlc29sdmU6IHJlc29sdmVDb2RlVGV4dCxcbiAgcHJldmlvdXNcbn1cblxuLyoqIEB0eXBlIHtSZXNvbHZlcn0gKi9cbmZ1bmN0aW9uIHJlc29sdmVDb2RlVGV4dChldmVudHMpIHtcbiAgbGV0IHRhaWxFeGl0SW5kZXggPSBldmVudHMubGVuZ3RoIC0gNFxuICBsZXQgaGVhZEVudGVySW5kZXggPSAzXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICBsZXQgaW5kZXhcbiAgLyoqIEB0eXBlIHtudW1iZXJ8dW5kZWZpbmVkfSAqL1xuICBsZXQgZW50ZXJcblxuICAvLyBJZiB3ZSBzdGFydCBhbmQgZW5kIHdpdGggYW4gRU9MIG9yIGEgc3BhY2UuXG4gIGlmIChcbiAgICAoZXZlbnRzW2hlYWRFbnRlckluZGV4XVsxXS50eXBlID09PSB0eXBlcy5saW5lRW5kaW5nIHx8XG4gICAgICBldmVudHNbaGVhZEVudGVySW5kZXhdWzFdLnR5cGUgPT09ICdzcGFjZScpICYmXG4gICAgKGV2ZW50c1t0YWlsRXhpdEluZGV4XVsxXS50eXBlID09PSB0eXBlcy5saW5lRW5kaW5nIHx8XG4gICAgICBldmVudHNbdGFpbEV4aXRJbmRleF1bMV0udHlwZSA9PT0gJ3NwYWNlJylcbiAgKSB7XG4gICAgaW5kZXggPSBoZWFkRW50ZXJJbmRleFxuXG4gICAgLy8gQW5kIHdlIGhhdmUgZGF0YS5cbiAgICB3aGlsZSAoKytpbmRleCA8IHRhaWxFeGl0SW5kZXgpIHtcbiAgICAgIGlmIChldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09IHR5cGVzLmNvZGVUZXh0RGF0YSkge1xuICAgICAgICAvLyBUaGVuIHdlIGhhdmUgcGFkZGluZy5cbiAgICAgICAgZXZlbnRzW2hlYWRFbnRlckluZGV4XVsxXS50eXBlID0gdHlwZXMuY29kZVRleHRQYWRkaW5nXG4gICAgICAgIGV2ZW50c1t0YWlsRXhpdEluZGV4XVsxXS50eXBlID0gdHlwZXMuY29kZVRleHRQYWRkaW5nXG4gICAgICAgIGhlYWRFbnRlckluZGV4ICs9IDJcbiAgICAgICAgdGFpbEV4aXRJbmRleCAtPSAyXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gTWVyZ2UgYWRqYWNlbnQgc3BhY2VzIGFuZCBkYXRhLlxuICBpbmRleCA9IGhlYWRFbnRlckluZGV4IC0gMVxuICB0YWlsRXhpdEluZGV4KytcblxuICB3aGlsZSAoKytpbmRleCA8PSB0YWlsRXhpdEluZGV4KSB7XG4gICAgaWYgKGVudGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChcbiAgICAgICAgaW5kZXggIT09IHRhaWxFeGl0SW5kZXggJiZcbiAgICAgICAgZXZlbnRzW2luZGV4XVsxXS50eXBlICE9PSB0eXBlcy5saW5lRW5kaW5nXG4gICAgICApIHtcbiAgICAgICAgZW50ZXIgPSBpbmRleFxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICBpbmRleCA9PT0gdGFpbEV4aXRJbmRleCB8fFxuICAgICAgZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSB0eXBlcy5saW5lRW5kaW5nXG4gICAgKSB7XG4gICAgICBldmVudHNbZW50ZXJdWzFdLnR5cGUgPSB0eXBlcy5jb2RlVGV4dERhdGFcblxuICAgICAgaWYgKGluZGV4ICE9PSBlbnRlciArIDIpIHtcbiAgICAgICAgZXZlbnRzW2VudGVyXVsxXS5lbmQgPSBldmVudHNbaW5kZXggLSAxXVsxXS5lbmRcbiAgICAgICAgZXZlbnRzLnNwbGljZShlbnRlciArIDIsIGluZGV4IC0gZW50ZXIgLSAyKVxuICAgICAgICB0YWlsRXhpdEluZGV4IC09IGluZGV4IC0gZW50ZXIgLSAyXG4gICAgICAgIGluZGV4ID0gZW50ZXIgKyAyXG4gICAgICB9XG5cbiAgICAgIGVudGVyID0gdW5kZWZpbmVkXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGV2ZW50c1xufVxuXG4vKiogQHR5cGUge1ByZXZpb3VzfSAqL1xuZnVuY3Rpb24gcHJldmlvdXMoY29kZSkge1xuICAvLyBJZiB0aGVyZSBpcyBhIHByZXZpb3VzIGNvZGUsIHRoZXJlIHdpbGwgYWx3YXlzIGJlIGEgdGFpbC5cbiAgcmV0dXJuIChcbiAgICBjb2RlICE9PSBjb2Rlcy5ncmF2ZUFjY2VudCB8fFxuICAgIHRoaXMuZXZlbnRzW3RoaXMuZXZlbnRzLmxlbmd0aCAtIDFdWzFdLnR5cGUgPT09IHR5cGVzLmNoYXJhY3RlckVzY2FwZVxuICApXG59XG5cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuZnVuY3Rpb24gdG9rZW5pemVDb2RlVGV4dChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGxldCBzaXplT3BlbiA9IDBcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gIGxldCBzaXplXG4gIC8qKiBAdHlwZSB7VG9rZW59ICovXG4gIGxldCB0b2tlblxuXG4gIHJldHVybiBzdGFydFxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBhc3NlcnQoY29kZSA9PT0gY29kZXMuZ3JhdmVBY2NlbnQsICdleHBlY3RlZCBgYCBgIGBgJylcbiAgICBhc3NlcnQocHJldmlvdXMuY2FsbChzZWxmLCBzZWxmLnByZXZpb3VzKSwgJ2V4cGVjdGVkIGNvcnJlY3QgcHJldmlvdXMnKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuY29kZVRleHQpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5jb2RlVGV4dFNlcXVlbmNlKVxuICAgIHJldHVybiBvcGVuaW5nU2VxdWVuY2UoY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIG9wZW5pbmdTZXF1ZW5jZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmdyYXZlQWNjZW50KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHNpemVPcGVuKytcbiAgICAgIHJldHVybiBvcGVuaW5nU2VxdWVuY2VcbiAgICB9XG5cbiAgICBlZmZlY3RzLmV4aXQodHlwZXMuY29kZVRleHRTZXF1ZW5jZSlcbiAgICByZXR1cm4gZ2FwKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBnYXAoY29kZSkge1xuICAgIC8vIEVPRi5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgLy8gQ2xvc2luZyBmZW5jZT9cbiAgICAvLyBDb3VsZCBhbHNvIGJlIGRhdGEuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmdyYXZlQWNjZW50KSB7XG4gICAgICB0b2tlbiA9IGVmZmVjdHMuZW50ZXIodHlwZXMuY29kZVRleHRTZXF1ZW5jZSlcbiAgICAgIHNpemUgPSAwXG4gICAgICByZXR1cm4gY2xvc2luZ1NlcXVlbmNlKGNvZGUpXG4gICAgfVxuXG4gICAgLy8gVGFicyBkb27igJl0IHdvcmssIGFuZCB2aXJ0dWFsIHNwYWNlcyBkb27igJl0IG1ha2Ugc2Vuc2UuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLnNwYWNlKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCdzcGFjZScpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgnc3BhY2UnKVxuICAgICAgcmV0dXJuIGdhcFxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIodHlwZXMubGluZUVuZGluZylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmxpbmVFbmRpbmcpXG4gICAgICByZXR1cm4gZ2FwXG4gICAgfVxuXG4gICAgLy8gRGF0YS5cbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmNvZGVUZXh0RGF0YSlcbiAgICByZXR1cm4gZGF0YShjb2RlKVxuICB9XG5cbiAgLy8gSW4gY29kZS5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gZGF0YShjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gY29kZXMuZW9mIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5zcGFjZSB8fFxuICAgICAgY29kZSA9PT0gY29kZXMuZ3JhdmVBY2NlbnQgfHxcbiAgICAgIG1hcmtkb3duTGluZUVuZGluZyhjb2RlKVxuICAgICkge1xuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmNvZGVUZXh0RGF0YSlcbiAgICAgIHJldHVybiBnYXAoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgLy8gQ2xvc2luZyBmZW5jZS5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gY2xvc2luZ1NlcXVlbmNlKGNvZGUpIHtcbiAgICAvLyBNb3JlLlxuICAgIGlmIChjb2RlID09PSBjb2Rlcy5ncmF2ZUFjY2VudCkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBzaXplKytcbiAgICAgIHJldHVybiBjbG9zaW5nU2VxdWVuY2VcbiAgICB9XG5cbiAgICAvLyBEb25lIVxuICAgIGlmIChzaXplID09PSBzaXplT3Blbikge1xuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmNvZGVUZXh0U2VxdWVuY2UpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMuY29kZVRleHQpXG4gICAgICByZXR1cm4gb2soY29kZSlcbiAgICB9XG5cbiAgICAvLyBNb3JlIG9yIGxlc3MgYWNjZW50czogbWFyayBhcyBkYXRhLlxuICAgIHRva2VuLnR5cGUgPSB0eXBlcy5jb2RlVGV4dERhdGFcbiAgICByZXR1cm4gZGF0YShjb2RlKVxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29uc3RydWN0fSBDb25zdHJ1Y3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuUmVzb2x2ZXJ9IFJlc29sdmVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VuaXplcn0gVG9rZW5pemVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VufSBUb2tlblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAndXZ1L2Fzc2VydCdcbmltcG9ydCB7ZmFjdG9yeVNwYWNlfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSdcbmltcG9ydCB7bWFya2Rvd25MaW5lRW5kaW5nfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge3N1YnRva2VuaXplfSBmcm9tICdtaWNyb21hcmstdXRpbC1zdWJ0b2tlbml6ZSdcbmltcG9ydCB7Y29kZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb2Rlcy5qcydcbmltcG9ydCB7Y29uc3RhbnRzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvY29uc3RhbnRzLmpzJ1xuaW1wb3J0IHt0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL3R5cGVzLmpzJ1xuXG4vKipcbiAqIE5vIG5hbWUgYmVjYXVzZSBpdCBtdXN0IG5vdCBiZSB0dXJuZWQgb2ZmLlxuICogQHR5cGUge0NvbnN0cnVjdH1cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbnRlbnQgPSB7dG9rZW5pemU6IHRva2VuaXplQ29udGVudCwgcmVzb2x2ZTogcmVzb2x2ZUNvbnRlbnR9XG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuY29uc3QgY29udGludWF0aW9uQ29uc3RydWN0ID0ge3Rva2VuaXplOiB0b2tlbml6ZUNvbnRpbnVhdGlvbiwgcGFydGlhbDogdHJ1ZX1cblxuLyoqXG4gKiBDb250ZW50IGlzIHRyYW5zcGFyZW50OiBpdOKAmXMgcGFyc2VkIHJpZ2h0IG5vdy4gVGhhdCB3YXksIGRlZmluaXRpb25zIGFyZSBhbHNvXG4gKiBwYXJzZWQgcmlnaHQgbm93OiBiZWZvcmUgdGV4dCBpbiBwYXJhZ3JhcGhzIChzcGVjaWZpY2FsbHksIG1lZGlhKSBhcmUgcGFyc2VkLlxuICpcbiAqIEB0eXBlIHtSZXNvbHZlcn1cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUNvbnRlbnQoZXZlbnRzKSB7XG4gIHN1YnRva2VuaXplKGV2ZW50cylcbiAgcmV0dXJuIGV2ZW50c1xufVxuXG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cbmZ1bmN0aW9uIHRva2VuaXplQ29udGVudChlZmZlY3RzLCBvaykge1xuICAvKiogQHR5cGUge1Rva2VufSAqL1xuICBsZXQgcHJldmlvdXNcblxuICByZXR1cm4gc3RhcnRcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgYXNzZXJ0KFxuICAgICAgY29kZSAhPT0gY29kZXMuZW9mICYmICFtYXJrZG93bkxpbmVFbmRpbmcoY29kZSksXG4gICAgICAnZXhwZWN0ZWQgbm8gZW9mIG9yIGVvbCdcbiAgICApXG5cbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmNvbnRlbnQpXG4gICAgcHJldmlvdXMgPSBlZmZlY3RzLmVudGVyKHR5cGVzLmNodW5rQ29udGVudCwge1xuICAgICAgY29udGVudFR5cGU6IGNvbnN0YW50cy5jb250ZW50VHlwZUNvbnRlbnRcbiAgICB9KVxuICAgIHJldHVybiBkYXRhKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBkYXRhKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mKSB7XG4gICAgICByZXR1cm4gY29udGVudEVuZChjb2RlKVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVybiBlZmZlY3RzLmNoZWNrKFxuICAgICAgICBjb250aW51YXRpb25Db25zdHJ1Y3QsXG4gICAgICAgIGNvbnRlbnRDb250aW51ZSxcbiAgICAgICAgY29udGVudEVuZFxuICAgICAgKShjb2RlKVxuICAgIH1cblxuICAgIC8vIERhdGEuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGRhdGFcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGNvbnRlbnRFbmQoY29kZSkge1xuICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5jaHVua0NvbnRlbnQpXG4gICAgZWZmZWN0cy5leGl0KHR5cGVzLmNvbnRlbnQpXG4gICAgcmV0dXJuIG9rKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBjb250ZW50Q29udGludWUoY29kZSkge1xuICAgIGFzc2VydChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSksICdleHBlY3RlZCBlb2wnKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5jaHVua0NvbnRlbnQpXG4gICAgcHJldmlvdXMubmV4dCA9IGVmZmVjdHMuZW50ZXIodHlwZXMuY2h1bmtDb250ZW50LCB7XG4gICAgICBjb250ZW50VHlwZTogY29uc3RhbnRzLmNvbnRlbnRUeXBlQ29udGVudCxcbiAgICAgIHByZXZpb3VzXG4gICAgfSlcbiAgICBwcmV2aW91cyA9IHByZXZpb3VzLm5leHRcbiAgICByZXR1cm4gZGF0YVxuICB9XG59XG5cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuZnVuY3Rpb24gdG9rZW5pemVDb250aW51YXRpb24oZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuXG4gIHJldHVybiBzdGFydExvb2thaGVhZFxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHN0YXJ0TG9va2FoZWFkKGNvZGUpIHtcbiAgICBhc3NlcnQobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpLCAnZXhwZWN0ZWQgYSBsaW5lIGVuZGluZycpXG4gICAgZWZmZWN0cy5leGl0KHR5cGVzLmNodW5rQ29udGVudClcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmxpbmVFbmRpbmcpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KHR5cGVzLmxpbmVFbmRpbmcpXG4gICAgcmV0dXJuIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBwcmVmaXhlZCwgdHlwZXMubGluZVByZWZpeClcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHByZWZpeGVkKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIGNvbnN0IHRhaWwgPSBzZWxmLmV2ZW50c1tzZWxmLmV2ZW50cy5sZW5ndGggLSAxXVxuXG4gICAgaWYgKFxuICAgICAgIXNlbGYucGFyc2VyLmNvbnN0cnVjdHMuZGlzYWJsZS5udWxsLmluY2x1ZGVzKCdjb2RlSW5kZW50ZWQnKSAmJlxuICAgICAgdGFpbCAmJlxuICAgICAgdGFpbFsxXS50eXBlID09PSB0eXBlcy5saW5lUHJlZml4ICYmXG4gICAgICB0YWlsWzJdLnNsaWNlU2VyaWFsaXplKHRhaWxbMV0sIHRydWUpLmxlbmd0aCA+PSBjb25zdGFudHMudGFiU2l6ZVxuICAgICkge1xuICAgICAgcmV0dXJuIG9rKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGVmZmVjdHMuaW50ZXJydXB0KHNlbGYucGFyc2VyLmNvbnN0cnVjdHMuZmxvdywgbm9rLCBvaykoY29kZSlcbiAgfVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvbnN0cnVjdH0gQ29uc3RydWN0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VuaXplcn0gVG9rZW5pemVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICd1dnUvYXNzZXJ0J1xuaW1wb3J0IHtmYWN0b3J5RGVzdGluYXRpb259IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LWRlc3RpbmF0aW9uJ1xuaW1wb3J0IHtmYWN0b3J5TGFiZWx9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LWxhYmVsJ1xuaW1wb3J0IHtmYWN0b3J5U3BhY2V9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXNwYWNlJ1xuaW1wb3J0IHtmYWN0b3J5VGl0bGV9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXRpdGxlJ1xuaW1wb3J0IHtmYWN0b3J5V2hpdGVzcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktd2hpdGVzcGFjZSdcbmltcG9ydCB7bm9ybWFsaXplSWRlbnRpZmllcn0gZnJvbSAnbWljcm9tYXJrLXV0aWwtbm9ybWFsaXplLWlkZW50aWZpZXInXG5pbXBvcnQge1xuICBtYXJrZG93bkxpbmVFbmRpbmcsXG4gIG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2Vcbn0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvZGVzLmpzJ1xuaW1wb3J0IHt0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL3R5cGVzLmpzJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBkZWZpbml0aW9uID0ge25hbWU6ICdkZWZpbml0aW9uJywgdG9rZW5pemU6IHRva2VuaXplRGVmaW5pdGlvbn1cblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5jb25zdCB0aXRsZUNvbnN0cnVjdCA9IHt0b2tlbml6ZTogdG9rZW5pemVUaXRsZSwgcGFydGlhbDogdHJ1ZX1cblxuLyoqIEB0eXBlIHtUb2tlbml6ZXJ9ICovXG5mdW5jdGlvbiB0b2tlbml6ZURlZmluaXRpb24oZWZmZWN0cywgb2ssIG5vaykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgbGV0IGlkZW50aWZpZXJcblxuICByZXR1cm4gc3RhcnRcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgYXNzZXJ0KGNvZGUgPT09IGNvZGVzLmxlZnRTcXVhcmVCcmFja2V0LCAnZXhwZWN0ZWQgYFtgJylcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmRlZmluaXRpb24pXG4gICAgcmV0dXJuIGZhY3RvcnlMYWJlbC5jYWxsKFxuICAgICAgc2VsZixcbiAgICAgIGVmZmVjdHMsXG4gICAgICBsYWJlbEFmdGVyLFxuICAgICAgbm9rLFxuICAgICAgdHlwZXMuZGVmaW5pdGlvbkxhYmVsLFxuICAgICAgdHlwZXMuZGVmaW5pdGlvbkxhYmVsTWFya2VyLFxuICAgICAgdHlwZXMuZGVmaW5pdGlvbkxhYmVsU3RyaW5nXG4gICAgKShjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gbGFiZWxBZnRlcihjb2RlKSB7XG4gICAgaWRlbnRpZmllciA9IG5vcm1hbGl6ZUlkZW50aWZpZXIoXG4gICAgICBzZWxmLnNsaWNlU2VyaWFsaXplKHNlbGYuZXZlbnRzW3NlbGYuZXZlbnRzLmxlbmd0aCAtIDFdWzFdKS5zbGljZSgxLCAtMSlcbiAgICApXG5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMuY29sb24pIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuZGVmaW5pdGlvbk1hcmtlcilcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmRlZmluaXRpb25NYXJrZXIpXG5cbiAgICAgIC8vIE5vdGU6IGJsYW5rIGxpbmVzIGNhbuKAmXQgZXhpc3QgaW4gY29udGVudC5cbiAgICAgIHJldHVybiBmYWN0b3J5V2hpdGVzcGFjZShcbiAgICAgICAgZWZmZWN0cyxcbiAgICAgICAgZmFjdG9yeURlc3RpbmF0aW9uKFxuICAgICAgICAgIGVmZmVjdHMsXG4gICAgICAgICAgZWZmZWN0cy5hdHRlbXB0KFxuICAgICAgICAgICAgdGl0bGVDb25zdHJ1Y3QsXG4gICAgICAgICAgICBmYWN0b3J5U3BhY2UoZWZmZWN0cywgYWZ0ZXIsIHR5cGVzLndoaXRlc3BhY2UpLFxuICAgICAgICAgICAgZmFjdG9yeVNwYWNlKGVmZmVjdHMsIGFmdGVyLCB0eXBlcy53aGl0ZXNwYWNlKVxuICAgICAgICAgICksXG4gICAgICAgICAgbm9rLFxuICAgICAgICAgIHR5cGVzLmRlZmluaXRpb25EZXN0aW5hdGlvbixcbiAgICAgICAgICB0eXBlcy5kZWZpbml0aW9uRGVzdGluYXRpb25MaXRlcmFsLFxuICAgICAgICAgIHR5cGVzLmRlZmluaXRpb25EZXN0aW5hdGlvbkxpdGVyYWxNYXJrZXIsXG4gICAgICAgICAgdHlwZXMuZGVmaW5pdGlvbkRlc3RpbmF0aW9uUmF3LFxuICAgICAgICAgIHR5cGVzLmRlZmluaXRpb25EZXN0aW5hdGlvblN0cmluZ1xuICAgICAgICApXG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gYWZ0ZXIoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5lb2YgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMuZGVmaW5pdGlvbilcblxuICAgICAgaWYgKCFzZWxmLnBhcnNlci5kZWZpbmVkLmluY2x1ZGVzKGlkZW50aWZpZXIpKSB7XG4gICAgICAgIHNlbGYucGFyc2VyLmRlZmluZWQucHVzaChpZGVudGlmaWVyKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2soY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbn1cblxuLyoqIEB0eXBlIHtUb2tlbml6ZXJ9ICovXG5mdW5jdGlvbiB0b2tlbml6ZVRpdGxlKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgcmV0dXJuIHN0YXJ0XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIHJldHVybiBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpXG4gICAgICA/IGZhY3RvcnlXaGl0ZXNwYWNlKGVmZmVjdHMsIGJlZm9yZSkoY29kZSlcbiAgICAgIDogbm9rKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBiZWZvcmUoY29kZSkge1xuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IGNvZGVzLnF1b3RhdGlvbk1hcmsgfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmFwb3N0cm9waGUgfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmxlZnRQYXJlbnRoZXNpc1xuICAgICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnlUaXRsZShcbiAgICAgICAgZWZmZWN0cyxcbiAgICAgICAgZmFjdG9yeVNwYWNlKGVmZmVjdHMsIGFmdGVyLCB0eXBlcy53aGl0ZXNwYWNlKSxcbiAgICAgICAgbm9rLFxuICAgICAgICB0eXBlcy5kZWZpbml0aW9uVGl0bGUsXG4gICAgICAgIHR5cGVzLmRlZmluaXRpb25UaXRsZU1hcmtlcixcbiAgICAgICAgdHlwZXMuZGVmaW5pdGlvblRpdGxlU3RyaW5nXG4gICAgICApKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gYWZ0ZXIoY29kZSkge1xuICAgIHJldHVybiBjb2RlID09PSBjb2Rlcy5lb2YgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpID8gb2soY29kZSkgOiBub2soY29kZSlcbiAgfVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvbnN0cnVjdH0gQ29uc3RydWN0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VuaXplcn0gVG9rZW5pemVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICd1dnUvYXNzZXJ0J1xuaW1wb3J0IHttYXJrZG93bkxpbmVFbmRpbmd9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcbmltcG9ydCB7Y29kZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb2Rlcy5qcydcbmltcG9ydCB7dHlwZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC90eXBlcy5qcydcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgaGFyZEJyZWFrRXNjYXBlID0ge1xuICBuYW1lOiAnaGFyZEJyZWFrRXNjYXBlJyxcbiAgdG9rZW5pemU6IHRva2VuaXplSGFyZEJyZWFrRXNjYXBlXG59XG5cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuZnVuY3Rpb24gdG9rZW5pemVIYXJkQnJlYWtFc2NhcGUoZWZmZWN0cywgb2ssIG5vaykge1xuICByZXR1cm4gc3RhcnRcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgYXNzZXJ0KGNvZGUgPT09IGNvZGVzLmJhY2tzbGFzaCwgJ2V4cGVjdGVkIGBcXFxcYCcpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5oYXJkQnJlYWtFc2NhcGUpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5lc2NhcGVNYXJrZXIpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIG9wZW5cbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIG9wZW4oY29kZSkge1xuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5lc2NhcGVNYXJrZXIpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMuaGFyZEJyZWFrRXNjYXBlKVxuICAgICAgcmV0dXJuIG9rKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29uc3RydWN0fSBDb25zdHJ1Y3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuUmVzb2x2ZXJ9IFJlc29sdmVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VuaXplcn0gVG9rZW5pemVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VufSBUb2tlblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAndXZ1L2Fzc2VydCdcbmltcG9ydCB7ZmFjdG9yeVNwYWNlfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSdcbmltcG9ydCB7XG4gIG1hcmtkb3duTGluZUVuZGluZyxcbiAgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZSxcbiAgbWFya2Rvd25TcGFjZVxufSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge3NwbGljZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2h1bmtlZCdcbmltcG9ydCB7Y29kZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb2Rlcy5qcydcbmltcG9ydCB7Y29uc3RhbnRzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvY29uc3RhbnRzLmpzJ1xuaW1wb3J0IHt0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL3R5cGVzLmpzJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBoZWFkaW5nQXR4ID0ge1xuICBuYW1lOiAnaGVhZGluZ0F0eCcsXG4gIHRva2VuaXplOiB0b2tlbml6ZUhlYWRpbmdBdHgsXG4gIHJlc29sdmU6IHJlc29sdmVIZWFkaW5nQXR4XG59XG5cbi8qKiBAdHlwZSB7UmVzb2x2ZXJ9ICovXG5mdW5jdGlvbiByZXNvbHZlSGVhZGluZ0F0eChldmVudHMsIGNvbnRleHQpIHtcbiAgbGV0IGNvbnRlbnRFbmQgPSBldmVudHMubGVuZ3RoIC0gMlxuICBsZXQgY29udGVudFN0YXJ0ID0gM1xuICAvKiogQHR5cGUge1Rva2VufSAqL1xuICBsZXQgY29udGVudFxuICAvKiogQHR5cGUge1Rva2VufSAqL1xuICBsZXQgdGV4dFxuXG4gIC8vIFByZWZpeCB3aGl0ZXNwYWNlLCBwYXJ0IG9mIHRoZSBvcGVuaW5nLlxuICBpZiAoZXZlbnRzW2NvbnRlbnRTdGFydF1bMV0udHlwZSA9PT0gdHlwZXMud2hpdGVzcGFjZSkge1xuICAgIGNvbnRlbnRTdGFydCArPSAyXG4gIH1cblxuICAvLyBTdWZmaXggd2hpdGVzcGFjZSwgcGFydCBvZiB0aGUgY2xvc2luZy5cbiAgaWYgKFxuICAgIGNvbnRlbnRFbmQgLSAyID4gY29udGVudFN0YXJ0ICYmXG4gICAgZXZlbnRzW2NvbnRlbnRFbmRdWzFdLnR5cGUgPT09IHR5cGVzLndoaXRlc3BhY2VcbiAgKSB7XG4gICAgY29udGVudEVuZCAtPSAyXG4gIH1cblxuICBpZiAoXG4gICAgZXZlbnRzW2NvbnRlbnRFbmRdWzFdLnR5cGUgPT09IHR5cGVzLmF0eEhlYWRpbmdTZXF1ZW5jZSAmJlxuICAgIChjb250ZW50U3RhcnQgPT09IGNvbnRlbnRFbmQgLSAxIHx8XG4gICAgICAoY29udGVudEVuZCAtIDQgPiBjb250ZW50U3RhcnQgJiZcbiAgICAgICAgZXZlbnRzW2NvbnRlbnRFbmQgLSAyXVsxXS50eXBlID09PSB0eXBlcy53aGl0ZXNwYWNlKSlcbiAgKSB7XG4gICAgY29udGVudEVuZCAtPSBjb250ZW50U3RhcnQgKyAxID09PSBjb250ZW50RW5kID8gMiA6IDRcbiAgfVxuXG4gIGlmIChjb250ZW50RW5kID4gY29udGVudFN0YXJ0KSB7XG4gICAgY29udGVudCA9IHtcbiAgICAgIHR5cGU6IHR5cGVzLmF0eEhlYWRpbmdUZXh0LFxuICAgICAgc3RhcnQ6IGV2ZW50c1tjb250ZW50U3RhcnRdWzFdLnN0YXJ0LFxuICAgICAgZW5kOiBldmVudHNbY29udGVudEVuZF1bMV0uZW5kXG4gICAgfVxuICAgIHRleHQgPSB7XG4gICAgICB0eXBlOiB0eXBlcy5jaHVua1RleHQsXG4gICAgICBzdGFydDogZXZlbnRzW2NvbnRlbnRTdGFydF1bMV0uc3RhcnQsXG4gICAgICBlbmQ6IGV2ZW50c1tjb250ZW50RW5kXVsxXS5lbmQsXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIENvbnN0YW50cyBhcmUgZmluZSB0byBhc3NpZ24uXG4gICAgICBjb250ZW50VHlwZTogY29uc3RhbnRzLmNvbnRlbnRUeXBlVGV4dFxuICAgIH1cblxuICAgIHNwbGljZShldmVudHMsIGNvbnRlbnRTdGFydCwgY29udGVudEVuZCAtIGNvbnRlbnRTdGFydCArIDEsIFtcbiAgICAgIFsnZW50ZXInLCBjb250ZW50LCBjb250ZXh0XSxcbiAgICAgIFsnZW50ZXInLCB0ZXh0LCBjb250ZXh0XSxcbiAgICAgIFsnZXhpdCcsIHRleHQsIGNvbnRleHRdLFxuICAgICAgWydleGl0JywgY29udGVudCwgY29udGV4dF1cbiAgICBdKVxuICB9XG5cbiAgcmV0dXJuIGV2ZW50c1xufVxuXG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cbmZ1bmN0aW9uIHRva2VuaXplSGVhZGluZ0F0eChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGxldCBzaXplID0gMFxuXG4gIHJldHVybiBzdGFydFxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBhc3NlcnQoY29kZSA9PT0gY29kZXMubnVtYmVyU2lnbiwgJ2V4cGVjdGVkIGAjYCcpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5hdHhIZWFkaW5nKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuYXR4SGVhZGluZ1NlcXVlbmNlKVxuICAgIHJldHVybiBmZW5jZU9wZW5JbnNpZGUoY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGZlbmNlT3Blbkluc2lkZShjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gY29kZXMubnVtYmVyU2lnbiAmJlxuICAgICAgc2l6ZSsrIDwgY29uc3RhbnRzLmF0eEhlYWRpbmdPcGVuaW5nRmVuY2VTaXplTWF4XG4gICAgKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBmZW5jZU9wZW5JbnNpZGVcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mIHx8IG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5hdHhIZWFkaW5nU2VxdWVuY2UpXG4gICAgICByZXR1cm4gc2VsZi5pbnRlcnJ1cHQgPyBvayhjb2RlKSA6IGhlYWRpbmdCcmVhayhjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGhlYWRpbmdCcmVhayhjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLm51bWJlclNpZ24pIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuYXR4SGVhZGluZ1NlcXVlbmNlKVxuICAgICAgcmV0dXJuIHNlcXVlbmNlKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmVvZiB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5hdHhIZWFkaW5nKVxuICAgICAgcmV0dXJuIG9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIHJldHVybiBmYWN0b3J5U3BhY2UoZWZmZWN0cywgaGVhZGluZ0JyZWFrLCB0eXBlcy53aGl0ZXNwYWNlKShjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuYXR4SGVhZGluZ1RleHQpXG4gICAgcmV0dXJuIGRhdGEoY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHNlcXVlbmNlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMubnVtYmVyU2lnbikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gc2VxdWVuY2VcbiAgICB9XG5cbiAgICBlZmZlY3RzLmV4aXQodHlwZXMuYXR4SGVhZGluZ1NlcXVlbmNlKVxuICAgIHJldHVybiBoZWFkaW5nQnJlYWsoY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGRhdGEoY29kZSkge1xuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IGNvZGVzLmVvZiB8fFxuICAgICAgY29kZSA9PT0gY29kZXMubnVtYmVyU2lnbiB8fFxuICAgICAgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKVxuICAgICkge1xuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmF0eEhlYWRpbmdUZXh0KVxuICAgICAgcmV0dXJuIGhlYWRpbmdCcmVhayhjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBkYXRhXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5SZXNvbHZlcn0gUmVzb2x2ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVyfSBUb2tlbml6ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvZGV9IENvZGVcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAndXZ1L2Fzc2VydCdcbmltcG9ydCB7XG4gIGFzY2lpQWxwaGEsXG4gIGFzY2lpQWxwaGFudW1lcmljLFxuICBtYXJrZG93bkxpbmVFbmRpbmcsXG4gIG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UsXG4gIG1hcmtkb3duU3BhY2Vcbn0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtodG1sQmxvY2tOYW1lcywgaHRtbFJhd05hbWVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1odG1sLXRhZy1uYW1lJ1xuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvZGVzLmpzJ1xuaW1wb3J0IHtjb25zdGFudHN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb25zdGFudHMuanMnXG5pbXBvcnQge3R5cGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvdHlwZXMuanMnXG5pbXBvcnQge2JsYW5rTGluZX0gZnJvbSAnLi9ibGFuay1saW5lLmpzJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBodG1sRmxvdyA9IHtcbiAgbmFtZTogJ2h0bWxGbG93JyxcbiAgdG9rZW5pemU6IHRva2VuaXplSHRtbEZsb3csXG4gIHJlc29sdmVUbzogcmVzb2x2ZVRvSHRtbEZsb3csXG4gIGNvbmNyZXRlOiB0cnVlXG59XG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuY29uc3QgbmV4dEJsYW5rQ29uc3RydWN0ID0ge3Rva2VuaXplOiB0b2tlbml6ZU5leHRCbGFuaywgcGFydGlhbDogdHJ1ZX1cblxuLyoqIEB0eXBlIHtSZXNvbHZlcn0gKi9cbmZ1bmN0aW9uIHJlc29sdmVUb0h0bWxGbG93KGV2ZW50cykge1xuICBsZXQgaW5kZXggPSBldmVudHMubGVuZ3RoXG5cbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICBpZiAoXG4gICAgICBldmVudHNbaW5kZXhdWzBdID09PSAnZW50ZXInICYmXG4gICAgICBldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09IHR5cGVzLmh0bWxGbG93XG4gICAgKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmIChpbmRleCA+IDEgJiYgZXZlbnRzW2luZGV4IC0gMl1bMV0udHlwZSA9PT0gdHlwZXMubGluZVByZWZpeCkge1xuICAgIC8vIEFkZCB0aGUgcHJlZml4IHN0YXJ0IHRvIHRoZSBIVE1MIHRva2VuLlxuICAgIGV2ZW50c1tpbmRleF1bMV0uc3RhcnQgPSBldmVudHNbaW5kZXggLSAyXVsxXS5zdGFydFxuICAgIC8vIEFkZCB0aGUgcHJlZml4IHN0YXJ0IHRvIHRoZSBIVE1MIGxpbmUgdG9rZW4uXG4gICAgZXZlbnRzW2luZGV4ICsgMV1bMV0uc3RhcnQgPSBldmVudHNbaW5kZXggLSAyXVsxXS5zdGFydFxuICAgIC8vIFJlbW92ZSB0aGUgbGluZSBwcmVmaXguXG4gICAgZXZlbnRzLnNwbGljZShpbmRleCAtIDIsIDIpXG4gIH1cblxuICByZXR1cm4gZXZlbnRzXG59XG5cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuZnVuY3Rpb24gdG9rZW5pemVIdG1sRmxvdyhlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICBsZXQga2luZFxuICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gIGxldCBzdGFydFRhZ1xuICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgbGV0IGJ1ZmZlclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgbGV0IGluZGV4XG4gIC8qKiBAdHlwZSB7Q29kZX0gKi9cbiAgbGV0IG1hcmtlclxuXG4gIHJldHVybiBzdGFydFxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBhc3NlcnQoY29kZSA9PT0gY29kZXMubGVzc1RoYW4sICdleHBlY3RlZCBgPGAnKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuaHRtbEZsb3cpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5odG1sRmxvd0RhdGEpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIG9wZW5cbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIG9wZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5leGNsYW1hdGlvbk1hcmspIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGRlY2xhcmF0aW9uU3RhcnRcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMuc2xhc2gpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHRhZ0Nsb3NlU3RhcnRcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMucXVlc3Rpb25NYXJrKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGtpbmQgPSBjb25zdGFudHMuaHRtbEluc3RydWN0aW9uXG4gICAgICAvLyBXaGlsZSB3ZeKAmXJlIGluIGFuIGluc3RydWN0aW9uIGluc3RlYWQgb2YgYSBkZWNsYXJhdGlvbiwgd2XigJlyZSBvbiBhIGA/YFxuICAgICAgLy8gcmlnaHQgbm93LCBzbyB3ZSBkbyBuZWVkIHRvIHNlYXJjaCBmb3IgYD5gLCBzaW1pbGFyIHRvIGRlY2xhcmF0aW9ucy5cbiAgICAgIHJldHVybiBzZWxmLmludGVycnVwdCA/IG9rIDogY29udGludWF0aW9uRGVjbGFyYXRpb25JbnNpZGVcbiAgICB9XG5cbiAgICBpZiAoYXNjaWlBbHBoYShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBidWZmZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICBzdGFydFRhZyA9IHRydWVcbiAgICAgIHJldHVybiB0YWdOYW1lXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gZGVjbGFyYXRpb25TdGFydChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmRhc2gpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAga2luZCA9IGNvbnN0YW50cy5odG1sQ29tbWVudFxuICAgICAgcmV0dXJuIGNvbW1lbnRPcGVuSW5zaWRlXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmxlZnRTcXVhcmVCcmFja2V0KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGtpbmQgPSBjb25zdGFudHMuaHRtbENkYXRhXG4gICAgICBidWZmZXIgPSBjb25zdGFudHMuY2RhdGFPcGVuaW5nU3RyaW5nXG4gICAgICBpbmRleCA9IDBcbiAgICAgIHJldHVybiBjZGF0YU9wZW5JbnNpZGVcbiAgICB9XG5cbiAgICBpZiAoYXNjaWlBbHBoYShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBraW5kID0gY29uc3RhbnRzLmh0bWxEZWNsYXJhdGlvblxuICAgICAgcmV0dXJuIHNlbGYuaW50ZXJydXB0ID8gb2sgOiBjb250aW51YXRpb25EZWNsYXJhdGlvbkluc2lkZVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGNvbW1lbnRPcGVuSW5zaWRlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZGFzaCkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gc2VsZi5pbnRlcnJ1cHQgPyBvayA6IGNvbnRpbnVhdGlvbkRlY2xhcmF0aW9uSW5zaWRlXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gY2RhdGFPcGVuSW5zaWRlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gYnVmZmVyLmNoYXJDb2RlQXQoaW5kZXgrKykpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGluZGV4ID09PSBidWZmZXIubGVuZ3RoXG4gICAgICAgID8gc2VsZi5pbnRlcnJ1cHRcbiAgICAgICAgICA/IG9rXG4gICAgICAgICAgOiBjb250aW51YXRpb25cbiAgICAgICAgOiBjZGF0YU9wZW5JbnNpZGVcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiB0YWdDbG9zZVN0YXJ0KGNvZGUpIHtcbiAgICBpZiAoYXNjaWlBbHBoYShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBidWZmZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICByZXR1cm4gdGFnTmFtZVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHRhZ05hbWUoY29kZSkge1xuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IGNvZGVzLmVvZiB8fFxuICAgICAgY29kZSA9PT0gY29kZXMuc2xhc2ggfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmdyZWF0ZXJUaGFuIHx8XG4gICAgICBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpXG4gICAgKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGNvZGUgIT09IGNvZGVzLnNsYXNoICYmXG4gICAgICAgIHN0YXJ0VGFnICYmXG4gICAgICAgIGh0bWxSYXdOYW1lcy5pbmNsdWRlcyhidWZmZXIudG9Mb3dlckNhc2UoKSlcbiAgICAgICkge1xuICAgICAgICBraW5kID0gY29uc3RhbnRzLmh0bWxSYXdcbiAgICAgICAgcmV0dXJuIHNlbGYuaW50ZXJydXB0ID8gb2soY29kZSkgOiBjb250aW51YXRpb24oY29kZSlcbiAgICAgIH1cblxuICAgICAgaWYgKGh0bWxCbG9ja05hbWVzLmluY2x1ZGVzKGJ1ZmZlci50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICBraW5kID0gY29uc3RhbnRzLmh0bWxCYXNpY1xuXG4gICAgICAgIGlmIChjb2RlID09PSBjb2Rlcy5zbGFzaCkge1xuICAgICAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgICAgIHJldHVybiBiYXNpY1NlbGZDbG9zaW5nXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VsZi5pbnRlcnJ1cHQgPyBvayhjb2RlKSA6IGNvbnRpbnVhdGlvbihjb2RlKVxuICAgICAgfVxuXG4gICAgICBraW5kID0gY29uc3RhbnRzLmh0bWxDb21wbGV0ZVxuICAgICAgLy8gRG8gbm90IHN1cHBvcnQgY29tcGxldGUgSFRNTCB3aGVuIGludGVycnVwdGluZ1xuICAgICAgcmV0dXJuIHNlbGYuaW50ZXJydXB0ICYmICFzZWxmLnBhcnNlci5sYXp5W3NlbGYubm93KCkubGluZV1cbiAgICAgICAgPyBub2soY29kZSlcbiAgICAgICAgOiBzdGFydFRhZ1xuICAgICAgICA/IGNvbXBsZXRlQXR0cmlidXRlTmFtZUJlZm9yZShjb2RlKVxuICAgICAgICA6IGNvbXBsZXRlQ2xvc2luZ1RhZ0FmdGVyKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmRhc2ggfHwgYXNjaWlBbHBoYW51bWVyaWMoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgYnVmZmVyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgIHJldHVybiB0YWdOYW1lXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gYmFzaWNTZWxmQ2xvc2luZyhjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmdyZWF0ZXJUaGFuKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBzZWxmLmludGVycnVwdCA/IG9rIDogY29udGludWF0aW9uXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gY29tcGxldGVDbG9zaW5nVGFnQWZ0ZXIoY29kZSkge1xuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb21wbGV0ZUNsb3NpbmdUYWdBZnRlclxuICAgIH1cblxuICAgIHJldHVybiBjb21wbGV0ZUVuZChjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gY29tcGxldGVBdHRyaWJ1dGVOYW1lQmVmb3JlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuc2xhc2gpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbXBsZXRlRW5kXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmNvbG9uIHx8IGNvZGUgPT09IGNvZGVzLnVuZGVyc2NvcmUgfHwgYXNjaWlBbHBoYShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVOYW1lXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbXBsZXRlQXR0cmlidXRlTmFtZUJlZm9yZVxuICAgIH1cblxuICAgIHJldHVybiBjb21wbGV0ZUVuZChjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gY29tcGxldGVBdHRyaWJ1dGVOYW1lKGNvZGUpIHtcbiAgICBpZiAoXG4gICAgICBjb2RlID09PSBjb2Rlcy5kYXNoIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5kb3QgfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmNvbG9uIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy51bmRlcnNjb3JlIHx8XG4gICAgICBhc2NpaUFscGhhbnVtZXJpYyhjb2RlKVxuICAgICkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVOYW1lXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBsZXRlQXR0cmlidXRlTmFtZUFmdGVyKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBjb21wbGV0ZUF0dHJpYnV0ZU5hbWVBZnRlcihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmVxdWFsc1RvKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb21wbGV0ZUF0dHJpYnV0ZVZhbHVlQmVmb3JlXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbXBsZXRlQXR0cmlidXRlTmFtZUFmdGVyXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBsZXRlQXR0cmlidXRlTmFtZUJlZm9yZShjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gY29tcGxldGVBdHRyaWJ1dGVWYWx1ZUJlZm9yZShjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gY29kZXMuZW9mIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5sZXNzVGhhbiB8fFxuICAgICAgY29kZSA9PT0gY29kZXMuZXF1YWxzVG8gfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmdyZWF0ZXJUaGFuIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5ncmF2ZUFjY2VudFxuICAgICkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSBjb2Rlcy5xdW90YXRpb25NYXJrIHx8IGNvZGUgPT09IGNvZGVzLmFwb3N0cm9waGUpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgbWFya2VyID0gY29kZVxuICAgICAgcmV0dXJuIGNvbXBsZXRlQXR0cmlidXRlVmFsdWVRdW90ZWRcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25TcGFjZShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVWYWx1ZUJlZm9yZVxuICAgIH1cblxuICAgIG1hcmtlciA9IG51bGxcbiAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVWYWx1ZVVucXVvdGVkKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBjb21wbGV0ZUF0dHJpYnV0ZVZhbHVlUXVvdGVkKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSBtYXJrZXIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbXBsZXRlQXR0cmlidXRlVmFsdWVRdW90ZWRBZnRlclxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBjb21wbGV0ZUF0dHJpYnV0ZVZhbHVlUXVvdGVkXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBjb21wbGV0ZUF0dHJpYnV0ZVZhbHVlVW5xdW90ZWQoY29kZSkge1xuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IGNvZGVzLmVvZiB8fFxuICAgICAgY29kZSA9PT0gY29kZXMucXVvdGF0aW9uTWFyayB8fFxuICAgICAgY29kZSA9PT0gY29kZXMuYXBvc3Ryb3BoZSB8fFxuICAgICAgY29kZSA9PT0gY29kZXMubGVzc1RoYW4gfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmVxdWFsc1RvIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5ncmVhdGVyVGhhbiB8fFxuICAgICAgY29kZSA9PT0gY29kZXMuZ3JhdmVBY2NlbnQgfHxcbiAgICAgIG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSlcbiAgICApIHtcbiAgICAgIHJldHVybiBjb21wbGV0ZUF0dHJpYnV0ZU5hbWVBZnRlcihjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBjb21wbGV0ZUF0dHJpYnV0ZVZhbHVlVW5xdW90ZWRcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGNvbXBsZXRlQXR0cmlidXRlVmFsdWVRdW90ZWRBZnRlcihjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gY29kZXMuc2xhc2ggfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmdyZWF0ZXJUaGFuIHx8XG4gICAgICBtYXJrZG93blNwYWNlKGNvZGUpXG4gICAgKSB7XG4gICAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVOYW1lQmVmb3JlKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gY29tcGxldGVFbmQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5ncmVhdGVyVGhhbikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29tcGxldGVBZnRlclxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGNvbXBsZXRlQWZ0ZXIoY29kZSkge1xuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb21wbGV0ZUFmdGVyXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvZGUgPT09IGNvZGVzLmVvZiB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSlcbiAgICAgID8gY29udGludWF0aW9uKGNvZGUpXG4gICAgICA6IG5vayhjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gY29udGludWF0aW9uKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZGFzaCAmJiBraW5kID09PSBjb25zdGFudHMuaHRtbENvbW1lbnQpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvbkNvbW1lbnRJbnNpZGVcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMubGVzc1RoYW4gJiYga2luZCA9PT0gY29uc3RhbnRzLmh0bWxSYXcpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvblJhd1RhZ09wZW5cbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZ3JlYXRlclRoYW4gJiYga2luZCA9PT0gY29uc3RhbnRzLmh0bWxEZWNsYXJhdGlvbikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29udGludWF0aW9uQ2xvc2VcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMucXVlc3Rpb25NYXJrICYmIGtpbmQgPT09IGNvbnN0YW50cy5odG1sSW5zdHJ1Y3Rpb24pIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvbkRlY2xhcmF0aW9uSW5zaWRlXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLnJpZ2h0U3F1YXJlQnJhY2tldCAmJiBraW5kID09PSBjb25zdGFudHMuaHRtbENkYXRhKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb250aW51YXRpb25DaGFyYWN0ZXJEYXRhSW5zaWRlXG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpICYmXG4gICAgICAoa2luZCA9PT0gY29uc3RhbnRzLmh0bWxCYXNpYyB8fCBraW5kID09PSBjb25zdGFudHMuaHRtbENvbXBsZXRlKVxuICAgICkge1xuICAgICAgcmV0dXJuIGVmZmVjdHMuY2hlY2soXG4gICAgICAgIG5leHRCbGFua0NvbnN0cnVjdCxcbiAgICAgICAgY29udGludWF0aW9uQ2xvc2UsXG4gICAgICAgIGNvbnRpbnVhdGlvbkF0TGluZUVuZGluZ1xuICAgICAgKShjb2RlKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSBjb2Rlcy5lb2YgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICByZXR1cm4gY29udGludWF0aW9uQXRMaW5lRW5kaW5nKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGNvbnRpbnVhdGlvblxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gY29udGludWF0aW9uQXRMaW5lRW5kaW5nKGNvZGUpIHtcbiAgICBlZmZlY3RzLmV4aXQodHlwZXMuaHRtbEZsb3dEYXRhKVxuICAgIHJldHVybiBodG1sQ29udGludWVTdGFydChjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gaHRtbENvbnRpbnVlU3RhcnQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5lb2YpIHtcbiAgICAgIHJldHVybiBkb25lKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuIGVmZmVjdHMuYXR0ZW1wdChcbiAgICAgICAge3Rva2VuaXplOiBodG1sTGluZUVuZCwgcGFydGlhbDogdHJ1ZX0sXG4gICAgICAgIGh0bWxDb250aW51ZVN0YXJ0LFxuICAgICAgICBkb25lXG4gICAgICApKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5odG1sRmxvd0RhdGEpXG4gICAgcmV0dXJuIGNvbnRpbnVhdGlvbihjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtUb2tlbml6ZXJ9ICovXG4gIGZ1bmN0aW9uIGh0bWxMaW5lRW5kKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgICByZXR1cm4gc3RhcnRcblxuICAgIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gICAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgICAgYXNzZXJ0KG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSwgJ2V4cGVjdGVkIGVvbCcpXG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmxpbmVFbmRpbmcpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5saW5lRW5kaW5nKVxuICAgICAgcmV0dXJuIGxpbmVTdGFydFxuICAgIH1cblxuICAgIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gICAgZnVuY3Rpb24gbGluZVN0YXJ0KGNvZGUpIHtcbiAgICAgIHJldHVybiBzZWxmLnBhcnNlci5sYXp5W3NlbGYubm93KCkubGluZV0gPyBub2soY29kZSkgOiBvayhjb2RlKVxuICAgIH1cbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGNvbnRpbnVhdGlvbkNvbW1lbnRJbnNpZGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5kYXNoKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb250aW51YXRpb25EZWNsYXJhdGlvbkluc2lkZVxuICAgIH1cblxuICAgIHJldHVybiBjb250aW51YXRpb24oY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGNvbnRpbnVhdGlvblJhd1RhZ09wZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5zbGFzaCkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBidWZmZXIgPSAnJ1xuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvblJhd0VuZFRhZ1xuICAgIH1cblxuICAgIHJldHVybiBjb250aW51YXRpb24oY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGNvbnRpbnVhdGlvblJhd0VuZFRhZyhjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gY29kZXMuZ3JlYXRlclRoYW4gJiZcbiAgICAgIGh0bWxSYXdOYW1lcy5pbmNsdWRlcyhidWZmZXIudG9Mb3dlckNhc2UoKSlcbiAgICApIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvbkNsb3NlXG4gICAgfVxuXG4gICAgaWYgKGFzY2lpQWxwaGEoY29kZSkgJiYgYnVmZmVyLmxlbmd0aCA8IGNvbnN0YW50cy5odG1sUmF3U2l6ZU1heCkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBidWZmZXIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvblJhd0VuZFRhZ1xuICAgIH1cblxuICAgIHJldHVybiBjb250aW51YXRpb24oY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGNvbnRpbnVhdGlvbkNoYXJhY3RlckRhdGFJbnNpZGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5yaWdodFNxdWFyZUJyYWNrZXQpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvbkRlY2xhcmF0aW9uSW5zaWRlXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRpbnVhdGlvbihjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gY29udGludWF0aW9uRGVjbGFyYXRpb25JbnNpZGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5ncmVhdGVyVGhhbikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29udGludWF0aW9uQ2xvc2VcbiAgICB9XG5cbiAgICAvLyBNb3JlIGRhc2hlcy5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZGFzaCAmJiBraW5kID09PSBjb25zdGFudHMuaHRtbENvbW1lbnQpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvbkRlY2xhcmF0aW9uSW5zaWRlXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRpbnVhdGlvbihjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gY29udGludWF0aW9uQ2xvc2UoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5lb2YgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMuaHRtbEZsb3dEYXRhKVxuICAgICAgcmV0dXJuIGRvbmUoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gY29udGludWF0aW9uQ2xvc2VcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGRvbmUoY29kZSkge1xuICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5odG1sRmxvdylcbiAgICByZXR1cm4gb2soY29kZSlcbiAgfVxufVxuXG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cbmZ1bmN0aW9uIHRva2VuaXplTmV4dEJsYW5rKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgcmV0dXJuIHN0YXJ0XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGFzc2VydChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSksICdleHBlY3RlZCBhIGxpbmUgZW5kaW5nJylcbiAgICBlZmZlY3RzLmV4aXQodHlwZXMuaHRtbEZsb3dEYXRhKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMubGluZUVuZGluZ0JsYW5rKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5saW5lRW5kaW5nQmxhbmspXG4gICAgcmV0dXJuIGVmZmVjdHMuYXR0ZW1wdChibGFua0xpbmUsIG9rLCBub2spXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29kZX0gQ29kZVxuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICd1dnUvYXNzZXJ0J1xuaW1wb3J0IHtmYWN0b3J5U3BhY2V9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXNwYWNlJ1xuaW1wb3J0IHtcbiAgYXNjaWlBbHBoYSxcbiAgYXNjaWlBbHBoYW51bWVyaWMsXG4gIG1hcmtkb3duTGluZUVuZGluZyxcbiAgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZSxcbiAgbWFya2Rvd25TcGFjZVxufSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge2NvZGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvY29kZXMuanMnXG5pbXBvcnQge2NvbnN0YW50c30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvbnN0YW50cy5qcydcbmltcG9ydCB7dHlwZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC90eXBlcy5qcydcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgaHRtbFRleHQgPSB7bmFtZTogJ2h0bWxUZXh0JywgdG9rZW5pemU6IHRva2VuaXplSHRtbFRleHR9XG5cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuZnVuY3Rpb24gdG9rZW5pemVIdG1sVGV4dChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIC8qKiBAdHlwZSB7Tm9uTnVsbGFibGU8Q29kZT58dW5kZWZpbmVkfSAqL1xuICBsZXQgbWFya2VyXG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICBsZXQgYnVmZmVyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICBsZXQgaW5kZXhcbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgbGV0IHJldHVyblN0YXRlXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGFzc2VydChjb2RlID09PSBjb2Rlcy5sZXNzVGhhbiwgJ2V4cGVjdGVkIGA8YCcpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5odG1sVGV4dClcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmh0bWxUZXh0RGF0YSlcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gb3BlblxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gb3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmV4Y2xhbWF0aW9uTWFyaykge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gZGVjbGFyYXRpb25PcGVuXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLnNsYXNoKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0YWdDbG9zZVN0YXJ0XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLnF1ZXN0aW9uTWFyaykge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gaW5zdHJ1Y3Rpb25cbiAgICB9XG5cbiAgICBpZiAoYXNjaWlBbHBoYShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gdGFnT3BlblxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGRlY2xhcmF0aW9uT3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmRhc2gpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbW1lbnRPcGVuXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmxlZnRTcXVhcmVCcmFja2V0KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGJ1ZmZlciA9IGNvbnN0YW50cy5jZGF0YU9wZW5pbmdTdHJpbmdcbiAgICAgIGluZGV4ID0gMFxuICAgICAgcmV0dXJuIGNkYXRhT3BlblxuICAgIH1cblxuICAgIGlmIChhc2NpaUFscGhhKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBkZWNsYXJhdGlvblxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGNvbW1lbnRPcGVuKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZGFzaCkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29tbWVudFN0YXJ0XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gY29tbWVudFN0YXJ0KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mIHx8IGNvZGUgPT09IGNvZGVzLmdyZWF0ZXJUaGFuKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmRhc2gpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbW1lbnRTdGFydERhc2hcbiAgICB9XG5cbiAgICByZXR1cm4gY29tbWVudChjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gY29tbWVudFN0YXJ0RGFzaChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmVvZiB8fCBjb2RlID09PSBjb2Rlcy5ncmVhdGVyVGhhbikge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBjb21tZW50KGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBjb21tZW50KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmRhc2gpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbW1lbnRDbG9zZVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVyblN0YXRlID0gY29tbWVudFxuICAgICAgcmV0dXJuIGF0TGluZUVuZGluZyhjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBjb21tZW50XG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBjb21tZW50Q2xvc2UoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5kYXNoKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBlbmRcbiAgICB9XG5cbiAgICByZXR1cm4gY29tbWVudChjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gY2RhdGFPcGVuKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gYnVmZmVyLmNoYXJDb2RlQXQoaW5kZXgrKykpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGluZGV4ID09PSBidWZmZXIubGVuZ3RoID8gY2RhdGEgOiBjZGF0YU9wZW5cbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBjZGF0YShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmVvZikge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSBjb2Rlcy5yaWdodFNxdWFyZUJyYWNrZXQpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNkYXRhQ2xvc2VcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICByZXR1cm5TdGF0ZSA9IGNkYXRhXG4gICAgICByZXR1cm4gYXRMaW5lRW5kaW5nKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGNkYXRhXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBjZGF0YUNsb3NlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMucmlnaHRTcXVhcmVCcmFja2V0KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjZGF0YUVuZFxuICAgIH1cblxuICAgIHJldHVybiBjZGF0YShjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gY2RhdGFFbmQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5ncmVhdGVyVGhhbikge1xuICAgICAgcmV0dXJuIGVuZChjb2RlKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSBjb2Rlcy5yaWdodFNxdWFyZUJyYWNrZXQpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNkYXRhRW5kXG4gICAgfVxuXG4gICAgcmV0dXJuIGNkYXRhKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBkZWNsYXJhdGlvbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmVvZiB8fCBjb2RlID09PSBjb2Rlcy5ncmVhdGVyVGhhbikge1xuICAgICAgcmV0dXJuIGVuZChjb2RlKVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVyblN0YXRlID0gZGVjbGFyYXRpb25cbiAgICAgIHJldHVybiBhdExpbmVFbmRpbmcoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gZGVjbGFyYXRpb25cbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGluc3RydWN0aW9uKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLnF1ZXN0aW9uTWFyaykge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gaW5zdHJ1Y3Rpb25DbG9zZVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVyblN0YXRlID0gaW5zdHJ1Y3Rpb25cbiAgICAgIHJldHVybiBhdExpbmVFbmRpbmcoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gaW5zdHJ1Y3Rpb25cbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGluc3RydWN0aW9uQ2xvc2UoY29kZSkge1xuICAgIHJldHVybiBjb2RlID09PSBjb2Rlcy5ncmVhdGVyVGhhbiA/IGVuZChjb2RlKSA6IGluc3RydWN0aW9uKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiB0YWdDbG9zZVN0YXJ0KGNvZGUpIHtcbiAgICBpZiAoYXNjaWlBbHBoYShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gdGFnQ2xvc2VcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiB0YWdDbG9zZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmRhc2ggfHwgYXNjaWlBbHBoYW51bWVyaWMoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHRhZ0Nsb3NlXG4gICAgfVxuXG4gICAgcmV0dXJuIHRhZ0Nsb3NlQmV0d2Vlbihjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gdGFnQ2xvc2VCZXR3ZWVuKGNvZGUpIHtcbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICByZXR1cm5TdGF0ZSA9IHRhZ0Nsb3NlQmV0d2VlblxuICAgICAgcmV0dXJuIGF0TGluZUVuZGluZyhjb2RlKVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0YWdDbG9zZUJldHdlZW5cbiAgICB9XG5cbiAgICByZXR1cm4gZW5kKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiB0YWdPcGVuKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZGFzaCB8fCBhc2NpaUFscGhhbnVtZXJpYyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gdGFnT3BlblxuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IGNvZGVzLnNsYXNoIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5ncmVhdGVyVGhhbiB8fFxuICAgICAgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKVxuICAgICkge1xuICAgICAgcmV0dXJuIHRhZ09wZW5CZXR3ZWVuKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gdGFnT3BlbkJldHdlZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5zbGFzaCkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gZW5kXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmNvbG9uIHx8IGNvZGUgPT09IGNvZGVzLnVuZGVyc2NvcmUgfHwgYXNjaWlBbHBoYShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gdGFnT3BlbkF0dHJpYnV0ZU5hbWVcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICByZXR1cm5TdGF0ZSA9IHRhZ09wZW5CZXR3ZWVuXG4gICAgICByZXR1cm4gYXRMaW5lRW5kaW5nKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHRhZ09wZW5CZXR3ZWVuXG4gICAgfVxuXG4gICAgcmV0dXJuIGVuZChjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gdGFnT3BlbkF0dHJpYnV0ZU5hbWUoY29kZSkge1xuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IGNvZGVzLmRhc2ggfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmRvdCB8fFxuICAgICAgY29kZSA9PT0gY29kZXMuY29sb24gfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLnVuZGVyc2NvcmUgfHxcbiAgICAgIGFzY2lpQWxwaGFudW1lcmljKGNvZGUpXG4gICAgKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0YWdPcGVuQXR0cmlidXRlTmFtZVxuICAgIH1cblxuICAgIHJldHVybiB0YWdPcGVuQXR0cmlidXRlTmFtZUFmdGVyKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiB0YWdPcGVuQXR0cmlidXRlTmFtZUFmdGVyKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZXF1YWxzVG8pIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHRhZ09wZW5BdHRyaWJ1dGVWYWx1ZUJlZm9yZVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVyblN0YXRlID0gdGFnT3BlbkF0dHJpYnV0ZU5hbWVBZnRlclxuICAgICAgcmV0dXJuIGF0TGluZUVuZGluZyhjb2RlKVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0YWdPcGVuQXR0cmlidXRlTmFtZUFmdGVyXG4gICAgfVxuXG4gICAgcmV0dXJuIHRhZ09wZW5CZXR3ZWVuKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiB0YWdPcGVuQXR0cmlidXRlVmFsdWVCZWZvcmUoY29kZSkge1xuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IGNvZGVzLmVvZiB8fFxuICAgICAgY29kZSA9PT0gY29kZXMubGVzc1RoYW4gfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmVxdWFsc1RvIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5ncmVhdGVyVGhhbiB8fFxuICAgICAgY29kZSA9PT0gY29kZXMuZ3JhdmVBY2NlbnRcbiAgICApIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMucXVvdGF0aW9uTWFyayB8fCBjb2RlID09PSBjb2Rlcy5hcG9zdHJvcGhlKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIG1hcmtlciA9IGNvZGVcbiAgICAgIHJldHVybiB0YWdPcGVuQXR0cmlidXRlVmFsdWVRdW90ZWRcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICByZXR1cm5TdGF0ZSA9IHRhZ09wZW5BdHRyaWJ1dGVWYWx1ZUJlZm9yZVxuICAgICAgcmV0dXJuIGF0TGluZUVuZGluZyhjb2RlKVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0YWdPcGVuQXR0cmlidXRlVmFsdWVCZWZvcmVcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBtYXJrZXIgPSB1bmRlZmluZWRcbiAgICByZXR1cm4gdGFnT3BlbkF0dHJpYnV0ZVZhbHVlVW5xdW90ZWRcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHRhZ09wZW5BdHRyaWJ1dGVWYWx1ZVF1b3RlZChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG1hcmtlcikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gdGFnT3BlbkF0dHJpYnV0ZVZhbHVlUXVvdGVkQWZ0ZXJcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuU3RhdGUgPSB0YWdPcGVuQXR0cmlidXRlVmFsdWVRdW90ZWRcbiAgICAgIHJldHVybiBhdExpbmVFbmRpbmcoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gdGFnT3BlbkF0dHJpYnV0ZVZhbHVlUXVvdGVkXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiB0YWdPcGVuQXR0cmlidXRlVmFsdWVRdW90ZWRBZnRlcihjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gY29kZXMuZ3JlYXRlclRoYW4gfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLnNsYXNoIHx8XG4gICAgICBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpXG4gICAgKSB7XG4gICAgICByZXR1cm4gdGFnT3BlbkJldHdlZW4oY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiB0YWdPcGVuQXR0cmlidXRlVmFsdWVVbnF1b3RlZChjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gY29kZXMuZW9mIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5xdW90YXRpb25NYXJrIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5hcG9zdHJvcGhlIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5sZXNzVGhhbiB8fFxuICAgICAgY29kZSA9PT0gY29kZXMuZXF1YWxzVG8gfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmdyYXZlQWNjZW50XG4gICAgKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmdyZWF0ZXJUaGFuIHx8IG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSkpIHtcbiAgICAgIHJldHVybiB0YWdPcGVuQmV0d2Vlbihjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiB0YWdPcGVuQXR0cmlidXRlVmFsdWVVbnF1b3RlZFxuICB9XG5cbiAgLy8gV2UgY2Fu4oCZdCBoYXZlIGJsYW5rIGxpbmVzIGluIGNvbnRlbnQsIHNvIG5vIG5lZWQgdG8gd29ycnkgYWJvdXQgZW1wdHlcbiAgLy8gdG9rZW5zLlxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBhdExpbmVFbmRpbmcoY29kZSkge1xuICAgIGFzc2VydChyZXR1cm5TdGF0ZSwgJ2V4cGVjdGVkIHJldHVybiBzdGF0ZScpXG4gICAgYXNzZXJ0KG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSwgJ2V4cGVjdGVkIGVvbCcpXG4gICAgZWZmZWN0cy5leGl0KHR5cGVzLmh0bWxUZXh0RGF0YSlcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmxpbmVFbmRpbmcpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KHR5cGVzLmxpbmVFbmRpbmcpXG4gICAgcmV0dXJuIGZhY3RvcnlTcGFjZShcbiAgICAgIGVmZmVjdHMsXG4gICAgICBhZnRlclByZWZpeCxcbiAgICAgIHR5cGVzLmxpbmVQcmVmaXgsXG4gICAgICBzZWxmLnBhcnNlci5jb25zdHJ1Y3RzLmRpc2FibGUubnVsbC5pbmNsdWRlcygnY29kZUluZGVudGVkJylcbiAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgOiBjb25zdGFudHMudGFiU2l6ZVxuICAgIClcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGFmdGVyUHJlZml4KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmh0bWxUZXh0RGF0YSlcbiAgICByZXR1cm4gcmV0dXJuU3RhdGUoY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGVuZChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmdyZWF0ZXJUaGFuKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5odG1sVGV4dERhdGEpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMuaHRtbFRleHQpXG4gICAgICByZXR1cm4gb2tcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5SZXNvbHZlcn0gUmVzb2x2ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVyfSBUb2tlbml6ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuRXZlbnR9IEV2ZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VufSBUb2tlblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29kZX0gQ29kZVxuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICd1dnUvYXNzZXJ0J1xuaW1wb3J0IHtmYWN0b3J5RGVzdGluYXRpb259IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LWRlc3RpbmF0aW9uJ1xuaW1wb3J0IHtmYWN0b3J5TGFiZWx9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LWxhYmVsJ1xuaW1wb3J0IHtmYWN0b3J5VGl0bGV9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXRpdGxlJ1xuaW1wb3J0IHtmYWN0b3J5V2hpdGVzcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktd2hpdGVzcGFjZSdcbmltcG9ydCB7bWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtwdXNoLCBzcGxpY2V9IGZyb20gJ21pY3JvbWFyay11dGlsLWNodW5rZWQnXG5pbXBvcnQge25vcm1hbGl6ZUlkZW50aWZpZXJ9IGZyb20gJ21pY3JvbWFyay11dGlsLW5vcm1hbGl6ZS1pZGVudGlmaWVyJ1xuaW1wb3J0IHtyZXNvbHZlQWxsfSBmcm9tICdtaWNyb21hcmstdXRpbC1yZXNvbHZlLWFsbCdcbmltcG9ydCB7Y29kZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb2Rlcy5qcydcbmltcG9ydCB7Y29uc3RhbnRzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvY29uc3RhbnRzLmpzJ1xuaW1wb3J0IHt0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL3R5cGVzLmpzJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBsYWJlbEVuZCA9IHtcbiAgbmFtZTogJ2xhYmVsRW5kJyxcbiAgdG9rZW5pemU6IHRva2VuaXplTGFiZWxFbmQsXG4gIHJlc29sdmVUbzogcmVzb2x2ZVRvTGFiZWxFbmQsXG4gIHJlc29sdmVBbGw6IHJlc29sdmVBbGxMYWJlbEVuZFxufVxuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmNvbnN0IHJlc291cmNlQ29uc3RydWN0ID0ge3Rva2VuaXplOiB0b2tlbml6ZVJlc291cmNlfVxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5jb25zdCBmdWxsUmVmZXJlbmNlQ29uc3RydWN0ID0ge3Rva2VuaXplOiB0b2tlbml6ZUZ1bGxSZWZlcmVuY2V9XG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmNvbnN0IGNvbGxhcHNlZFJlZmVyZW5jZUNvbnN0cnVjdCA9IHt0b2tlbml6ZTogdG9rZW5pemVDb2xsYXBzZWRSZWZlcmVuY2V9XG5cbi8qKiBAdHlwZSB7UmVzb2x2ZXJ9ICovXG5mdW5jdGlvbiByZXNvbHZlQWxsTGFiZWxFbmQoZXZlbnRzKSB7XG4gIGxldCBpbmRleCA9IC0xXG4gIC8qKiBAdHlwZSB7VG9rZW59ICovXG4gIGxldCB0b2tlblxuXG4gIHdoaWxlICgrK2luZGV4IDwgZXZlbnRzLmxlbmd0aCkge1xuICAgIHRva2VuID0gZXZlbnRzW2luZGV4XVsxXVxuXG4gICAgaWYgKFxuICAgICAgdG9rZW4udHlwZSA9PT0gdHlwZXMubGFiZWxJbWFnZSB8fFxuICAgICAgdG9rZW4udHlwZSA9PT0gdHlwZXMubGFiZWxMaW5rIHx8XG4gICAgICB0b2tlbi50eXBlID09PSB0eXBlcy5sYWJlbEVuZFxuICAgICkge1xuICAgICAgLy8gUmVtb3ZlIHRoZSBtYXJrZXIuXG4gICAgICBldmVudHMuc3BsaWNlKGluZGV4ICsgMSwgdG9rZW4udHlwZSA9PT0gdHlwZXMubGFiZWxJbWFnZSA/IDQgOiAyKVxuICAgICAgdG9rZW4udHlwZSA9IHR5cGVzLmRhdGFcbiAgICAgIGluZGV4KytcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXZlbnRzXG59XG5cbi8qKiBAdHlwZSB7UmVzb2x2ZXJ9ICovXG5mdW5jdGlvbiByZXNvbHZlVG9MYWJlbEVuZChldmVudHMsIGNvbnRleHQpIHtcbiAgbGV0IGluZGV4ID0gZXZlbnRzLmxlbmd0aFxuICBsZXQgb2Zmc2V0ID0gMFxuICAvKiogQHR5cGUge1Rva2VufSAqL1xuICBsZXQgdG9rZW5cbiAgLyoqIEB0eXBlIHtudW1iZXJ8dW5kZWZpbmVkfSAqL1xuICBsZXQgb3BlblxuICAvKiogQHR5cGUge251bWJlcnx1bmRlZmluZWR9ICovXG4gIGxldCBjbG9zZVxuICAvKiogQHR5cGUge0V2ZW50W119ICovXG4gIGxldCBtZWRpYVxuXG4gIC8vIEZpbmQgYW4gb3BlbmluZy5cbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB0b2tlbiA9IGV2ZW50c1tpbmRleF1bMV1cblxuICAgIGlmIChvcGVuKSB7XG4gICAgICAvLyBJZiB3ZSBzZWUgYW5vdGhlciBsaW5rLCBvciBpbmFjdGl2ZSBsaW5rIGxhYmVsLCB3ZeKAmXZlIGJlZW4gaGVyZSBiZWZvcmUuXG4gICAgICBpZiAoXG4gICAgICAgIHRva2VuLnR5cGUgPT09IHR5cGVzLmxpbmsgfHxcbiAgICAgICAgKHRva2VuLnR5cGUgPT09IHR5cGVzLmxhYmVsTGluayAmJiB0b2tlbi5faW5hY3RpdmUpXG4gICAgICApIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgLy8gTWFyayBvdGhlciBsaW5rIG9wZW5pbmdzIGFzIGluYWN0aXZlLCBhcyB3ZSBjYW7igJl0IGhhdmUgbGlua3MgaW5cbiAgICAgIC8vIGxpbmtzLlxuICAgICAgaWYgKGV2ZW50c1tpbmRleF1bMF0gPT09ICdlbnRlcicgJiYgdG9rZW4udHlwZSA9PT0gdHlwZXMubGFiZWxMaW5rKSB7XG4gICAgICAgIHRva2VuLl9pbmFjdGl2ZSA9IHRydWVcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNsb3NlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGV2ZW50c1tpbmRleF1bMF0gPT09ICdlbnRlcicgJiZcbiAgICAgICAgKHRva2VuLnR5cGUgPT09IHR5cGVzLmxhYmVsSW1hZ2UgfHwgdG9rZW4udHlwZSA9PT0gdHlwZXMubGFiZWxMaW5rKSAmJlxuICAgICAgICAhdG9rZW4uX2JhbGFuY2VkXG4gICAgICApIHtcbiAgICAgICAgb3BlbiA9IGluZGV4XG5cbiAgICAgICAgaWYgKHRva2VuLnR5cGUgIT09IHR5cGVzLmxhYmVsTGluaykge1xuICAgICAgICAgIG9mZnNldCA9IDJcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0b2tlbi50eXBlID09PSB0eXBlcy5sYWJlbEVuZCkge1xuICAgICAgY2xvc2UgPSBpbmRleFxuICAgIH1cbiAgfVxuXG4gIGFzc2VydChvcGVuICE9PSB1bmRlZmluZWQsICdgb3BlbmAgaXMgc3VwcG9zZWQgdG8gYmUgZm91bmQnKVxuICBhc3NlcnQoY2xvc2UgIT09IHVuZGVmaW5lZCwgJ2BjbG9zZWAgaXMgc3VwcG9zZWQgdG8gYmUgZm91bmQnKVxuXG4gIGNvbnN0IGdyb3VwID0ge1xuICAgIHR5cGU6IGV2ZW50c1tvcGVuXVsxXS50eXBlID09PSB0eXBlcy5sYWJlbExpbmsgPyB0eXBlcy5saW5rIDogdHlwZXMuaW1hZ2UsXG4gICAgc3RhcnQ6IE9iamVjdC5hc3NpZ24oe30sIGV2ZW50c1tvcGVuXVsxXS5zdGFydCksXG4gICAgZW5kOiBPYmplY3QuYXNzaWduKHt9LCBldmVudHNbZXZlbnRzLmxlbmd0aCAtIDFdWzFdLmVuZClcbiAgfVxuXG4gIGNvbnN0IGxhYmVsID0ge1xuICAgIHR5cGU6IHR5cGVzLmxhYmVsLFxuICAgIHN0YXJ0OiBPYmplY3QuYXNzaWduKHt9LCBldmVudHNbb3Blbl1bMV0uc3RhcnQpLFxuICAgIGVuZDogT2JqZWN0LmFzc2lnbih7fSwgZXZlbnRzW2Nsb3NlXVsxXS5lbmQpXG4gIH1cblxuICBjb25zdCB0ZXh0ID0ge1xuICAgIHR5cGU6IHR5cGVzLmxhYmVsVGV4dCxcbiAgICBzdGFydDogT2JqZWN0LmFzc2lnbih7fSwgZXZlbnRzW29wZW4gKyBvZmZzZXQgKyAyXVsxXS5lbmQpLFxuICAgIGVuZDogT2JqZWN0LmFzc2lnbih7fSwgZXZlbnRzW2Nsb3NlIC0gMl1bMV0uc3RhcnQpXG4gIH1cblxuICBtZWRpYSA9IFtcbiAgICBbJ2VudGVyJywgZ3JvdXAsIGNvbnRleHRdLFxuICAgIFsnZW50ZXInLCBsYWJlbCwgY29udGV4dF1cbiAgXVxuXG4gIC8vIE9wZW5pbmcgbWFya2VyLlxuICBtZWRpYSA9IHB1c2gobWVkaWEsIGV2ZW50cy5zbGljZShvcGVuICsgMSwgb3BlbiArIG9mZnNldCArIDMpKVxuXG4gIC8vIFRleHQgb3Blbi5cbiAgbWVkaWEgPSBwdXNoKG1lZGlhLCBbWydlbnRlcicsIHRleHQsIGNvbnRleHRdXSlcblxuICAvLyBCZXR3ZWVuLlxuICBtZWRpYSA9IHB1c2goXG4gICAgbWVkaWEsXG4gICAgcmVzb2x2ZUFsbChcbiAgICAgIGNvbnRleHQucGFyc2VyLmNvbnN0cnVjdHMuaW5zaWRlU3Bhbi5udWxsLFxuICAgICAgZXZlbnRzLnNsaWNlKG9wZW4gKyBvZmZzZXQgKyA0LCBjbG9zZSAtIDMpLFxuICAgICAgY29udGV4dFxuICAgIClcbiAgKVxuXG4gIC8vIFRleHQgY2xvc2UsIG1hcmtlciBjbG9zZSwgbGFiZWwgY2xvc2UuXG4gIG1lZGlhID0gcHVzaChtZWRpYSwgW1xuICAgIFsnZXhpdCcsIHRleHQsIGNvbnRleHRdLFxuICAgIGV2ZW50c1tjbG9zZSAtIDJdLFxuICAgIGV2ZW50c1tjbG9zZSAtIDFdLFxuICAgIFsnZXhpdCcsIGxhYmVsLCBjb250ZXh0XVxuICBdKVxuXG4gIC8vIFJlZmVyZW5jZSwgcmVzb3VyY2UsIG9yIHNvLlxuICBtZWRpYSA9IHB1c2gobWVkaWEsIGV2ZW50cy5zbGljZShjbG9zZSArIDEpKVxuXG4gIC8vIE1lZGlhIGNsb3NlLlxuICBtZWRpYSA9IHB1c2gobWVkaWEsIFtbJ2V4aXQnLCBncm91cCwgY29udGV4dF1dKVxuXG4gIHNwbGljZShldmVudHMsIG9wZW4sIGV2ZW50cy5sZW5ndGgsIG1lZGlhKVxuXG4gIHJldHVybiBldmVudHNcbn1cblxuLyoqIEB0eXBlIHtUb2tlbml6ZXJ9ICovXG5mdW5jdGlvbiB0b2tlbml6ZUxhYmVsRW5kKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgbGV0IGluZGV4ID0gc2VsZi5ldmVudHMubGVuZ3RoXG4gIC8qKiBAdHlwZSB7VG9rZW59ICovXG4gIGxldCBsYWJlbFN0YXJ0XG4gIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgbGV0IGRlZmluZWRcblxuICAvLyBGaW5kIGFuIG9wZW5pbmcuXG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgaWYgKFxuICAgICAgKHNlbGYuZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSB0eXBlcy5sYWJlbEltYWdlIHx8XG4gICAgICAgIHNlbGYuZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSB0eXBlcy5sYWJlbExpbmspICYmXG4gICAgICAhc2VsZi5ldmVudHNbaW5kZXhdWzFdLl9iYWxhbmNlZFxuICAgICkge1xuICAgICAgbGFiZWxTdGFydCA9IHNlbGYuZXZlbnRzW2luZGV4XVsxXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RhcnRcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgYXNzZXJ0KGNvZGUgPT09IGNvZGVzLnJpZ2h0U3F1YXJlQnJhY2tldCwgJ2V4cGVjdGVkIGBdYCcpXG5cbiAgICBpZiAoIWxhYmVsU3RhcnQpIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICAvLyBJdOKAmXMgYSBiYWxhbmNlZCBicmFja2V0LCBidXQgY29udGFpbnMgYSBsaW5rLlxuICAgIGlmIChsYWJlbFN0YXJ0Ll9pbmFjdGl2ZSkgcmV0dXJuIGJhbGFuY2VkKGNvZGUpXG4gICAgZGVmaW5lZCA9IHNlbGYucGFyc2VyLmRlZmluZWQuaW5jbHVkZXMoXG4gICAgICBub3JtYWxpemVJZGVudGlmaWVyKFxuICAgICAgICBzZWxmLnNsaWNlU2VyaWFsaXplKHtzdGFydDogbGFiZWxTdGFydC5lbmQsIGVuZDogc2VsZi5ub3coKX0pXG4gICAgICApXG4gICAgKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMubGFiZWxFbmQpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5sYWJlbE1hcmtlcilcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQodHlwZXMubGFiZWxNYXJrZXIpXG4gICAgZWZmZWN0cy5leGl0KHR5cGVzLmxhYmVsRW5kKVxuICAgIHJldHVybiBhZnRlckxhYmVsRW5kXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBhZnRlckxhYmVsRW5kKGNvZGUpIHtcbiAgICAvLyBSZXNvdXJjZTogYFthc2RdKGZnaClgLlxuICAgIGlmIChjb2RlID09PSBjb2Rlcy5sZWZ0UGFyZW50aGVzaXMpIHtcbiAgICAgIHJldHVybiBlZmZlY3RzLmF0dGVtcHQoXG4gICAgICAgIHJlc291cmNlQ29uc3RydWN0LFxuICAgICAgICBvayxcbiAgICAgICAgZGVmaW5lZCA/IG9rIDogYmFsYW5jZWRcbiAgICAgICkoY29kZSlcbiAgICB9XG5cbiAgICAvLyBDb2xsYXBzZWQgKGBbYXNkXVtdYCkgb3IgZnVsbCAoYFthc2RdW2ZnaF1gKSByZWZlcmVuY2U/XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmxlZnRTcXVhcmVCcmFja2V0KSB7XG4gICAgICByZXR1cm4gZWZmZWN0cy5hdHRlbXB0KFxuICAgICAgICBmdWxsUmVmZXJlbmNlQ29uc3RydWN0LFxuICAgICAgICBvayxcbiAgICAgICAgZGVmaW5lZFxuICAgICAgICAgID8gZWZmZWN0cy5hdHRlbXB0KGNvbGxhcHNlZFJlZmVyZW5jZUNvbnN0cnVjdCwgb2ssIGJhbGFuY2VkKVxuICAgICAgICAgIDogYmFsYW5jZWRcbiAgICAgICkoY29kZSlcbiAgICB9XG5cbiAgICAvLyBTaG9ydGN1dCByZWZlcmVuY2U6IGBbYXNkXWA/XG4gICAgcmV0dXJuIGRlZmluZWQgPyBvayhjb2RlKSA6IGJhbGFuY2VkKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBiYWxhbmNlZChjb2RlKSB7XG4gICAgbGFiZWxTdGFydC5fYmFsYW5jZWQgPSB0cnVlXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG59XG5cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuZnVuY3Rpb24gdG9rZW5pemVSZXNvdXJjZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiBzdGFydFxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBhc3NlcnQoY29kZSA9PT0gY29kZXMubGVmdFBhcmVudGhlc2lzLCAnZXhwZWN0ZWQgbGVmdCBwYXJlbicpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5yZXNvdXJjZSlcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLnJlc291cmNlTWFya2VyKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5yZXNvdXJjZU1hcmtlcilcbiAgICByZXR1cm4gZmFjdG9yeVdoaXRlc3BhY2UoZWZmZWN0cywgb3BlbilcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIG9wZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5yaWdodFBhcmVudGhlc2lzKSB7XG4gICAgICByZXR1cm4gZW5kKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhY3RvcnlEZXN0aW5hdGlvbihcbiAgICAgIGVmZmVjdHMsXG4gICAgICBkZXN0aW5hdGlvbkFmdGVyLFxuICAgICAgbm9rLFxuICAgICAgdHlwZXMucmVzb3VyY2VEZXN0aW5hdGlvbixcbiAgICAgIHR5cGVzLnJlc291cmNlRGVzdGluYXRpb25MaXRlcmFsLFxuICAgICAgdHlwZXMucmVzb3VyY2VEZXN0aW5hdGlvbkxpdGVyYWxNYXJrZXIsXG4gICAgICB0eXBlcy5yZXNvdXJjZURlc3RpbmF0aW9uUmF3LFxuICAgICAgdHlwZXMucmVzb3VyY2VEZXN0aW5hdGlvblN0cmluZyxcbiAgICAgIGNvbnN0YW50cy5saW5rUmVzb3VyY2VEZXN0aW5hdGlvbkJhbGFuY2VNYXhcbiAgICApKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBkZXN0aW5hdGlvbkFmdGVyKGNvZGUpIHtcbiAgICByZXR1cm4gbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKVxuICAgICAgPyBmYWN0b3J5V2hpdGVzcGFjZShlZmZlY3RzLCBiZXR3ZWVuKShjb2RlKVxuICAgICAgOiBlbmQoY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGJldHdlZW4oY29kZSkge1xuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IGNvZGVzLnF1b3RhdGlvbk1hcmsgfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmFwb3N0cm9waGUgfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmxlZnRQYXJlbnRoZXNpc1xuICAgICkge1xuICAgICAgcmV0dXJuIGZhY3RvcnlUaXRsZShcbiAgICAgICAgZWZmZWN0cyxcbiAgICAgICAgZmFjdG9yeVdoaXRlc3BhY2UoZWZmZWN0cywgZW5kKSxcbiAgICAgICAgbm9rLFxuICAgICAgICB0eXBlcy5yZXNvdXJjZVRpdGxlLFxuICAgICAgICB0eXBlcy5yZXNvdXJjZVRpdGxlTWFya2VyLFxuICAgICAgICB0eXBlcy5yZXNvdXJjZVRpdGxlU3RyaW5nXG4gICAgICApKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGVuZChjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gZW5kKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMucmlnaHRQYXJlbnRoZXNpcykge1xuICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy5yZXNvdXJjZU1hcmtlcilcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLnJlc291cmNlTWFya2VyKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLnJlc291cmNlKVxuICAgICAgcmV0dXJuIG9rXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG59XG5cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuZnVuY3Rpb24gdG9rZW5pemVGdWxsUmVmZXJlbmNlKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcblxuICByZXR1cm4gc3RhcnRcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgYXNzZXJ0KGNvZGUgPT09IGNvZGVzLmxlZnRTcXVhcmVCcmFja2V0LCAnZXhwZWN0ZWQgbGVmdCBicmFja2V0JylcbiAgICByZXR1cm4gZmFjdG9yeUxhYmVsLmNhbGwoXG4gICAgICBzZWxmLFxuICAgICAgZWZmZWN0cyxcbiAgICAgIGFmdGVyTGFiZWwsXG4gICAgICBub2ssXG4gICAgICB0eXBlcy5yZWZlcmVuY2UsXG4gICAgICB0eXBlcy5yZWZlcmVuY2VNYXJrZXIsXG4gICAgICB0eXBlcy5yZWZlcmVuY2VTdHJpbmdcbiAgICApKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBhZnRlckxhYmVsKGNvZGUpIHtcbiAgICByZXR1cm4gc2VsZi5wYXJzZXIuZGVmaW5lZC5pbmNsdWRlcyhcbiAgICAgIG5vcm1hbGl6ZUlkZW50aWZpZXIoXG4gICAgICAgIHNlbGYuc2xpY2VTZXJpYWxpemUoc2VsZi5ldmVudHNbc2VsZi5ldmVudHMubGVuZ3RoIC0gMV1bMV0pLnNsaWNlKDEsIC0xKVxuICAgICAgKVxuICAgIClcbiAgICAgID8gb2soY29kZSlcbiAgICAgIDogbm9rKGNvZGUpXG4gIH1cbn1cblxuLyoqIEB0eXBlIHtUb2tlbml6ZXJ9ICovXG5mdW5jdGlvbiB0b2tlbml6ZUNvbGxhcHNlZFJlZmVyZW5jZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiBzdGFydFxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBhc3NlcnQoY29kZSA9PT0gY29kZXMubGVmdFNxdWFyZUJyYWNrZXQsICdleHBlY3RlZCBsZWZ0IGJyYWNrZXQnKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMucmVmZXJlbmNlKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMucmVmZXJlbmNlTWFya2VyKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5yZWZlcmVuY2VNYXJrZXIpXG4gICAgcmV0dXJuIG9wZW5cbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIG9wZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5yaWdodFNxdWFyZUJyYWNrZXQpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIodHlwZXMucmVmZXJlbmNlTWFya2VyKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMucmVmZXJlbmNlTWFya2VyKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLnJlZmVyZW5jZSlcbiAgICAgIHJldHVybiBva1xuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvbnN0cnVjdH0gQ29uc3RydWN0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VuaXplcn0gVG9rZW5pemVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICd1dnUvYXNzZXJ0J1xuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvZGVzLmpzJ1xuaW1wb3J0IHt0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL3R5cGVzLmpzJ1xuaW1wb3J0IHtsYWJlbEVuZH0gZnJvbSAnLi9sYWJlbC1lbmQuanMnXG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGxhYmVsU3RhcnRJbWFnZSA9IHtcbiAgbmFtZTogJ2xhYmVsU3RhcnRJbWFnZScsXG4gIHRva2VuaXplOiB0b2tlbml6ZUxhYmVsU3RhcnRJbWFnZSxcbiAgcmVzb2x2ZUFsbDogbGFiZWxFbmQucmVzb2x2ZUFsbFxufVxuXG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cbmZ1bmN0aW9uIHRva2VuaXplTGFiZWxTdGFydEltYWdlKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcblxuICByZXR1cm4gc3RhcnRcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgYXNzZXJ0KGNvZGUgPT09IGNvZGVzLmV4Y2xhbWF0aW9uTWFyaywgJ2V4cGVjdGVkIGAhYCcpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5sYWJlbEltYWdlKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMubGFiZWxJbWFnZU1hcmtlcilcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQodHlwZXMubGFiZWxJbWFnZU1hcmtlcilcbiAgICByZXR1cm4gb3BlblxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gb3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmxlZnRTcXVhcmVCcmFja2V0KSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmxhYmVsTWFya2VyKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMubGFiZWxNYXJrZXIpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMubGFiZWxJbWFnZSlcbiAgICAgIHJldHVybiBhZnRlclxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGFmdGVyKGNvZGUpIHtcbiAgICAvKiBUbyBkbzogcmVtb3ZlIGluIHRoZSBmdXR1cmUgb25jZSB3ZeKAmXZlIHN3aXRjaGVkIGZyb21cbiAgICAgKiBgbWljcm9tYXJrLWV4dGVuc2lvbi1mb290bm90ZWAgdG8gYG1pY3JvbWFyay1leHRlbnNpb24tZ2ZtLWZvb3Rub3RlYCxcbiAgICAgKiB3aGljaCBkb2VzbuKAmXQgbmVlZCB0aGlzICovXG4gICAgLyogSGlkZGVuIGZvb3Rub3RlcyBob29rICovXG4gICAgLyogYzggaWdub3JlIG5leHQgMyAqL1xuICAgIHJldHVybiBjb2RlID09PSBjb2Rlcy5jYXJldCAmJlxuICAgICAgJ19oaWRkZW5Gb290bm90ZVN1cHBvcnQnIGluIHNlbGYucGFyc2VyLmNvbnN0cnVjdHNcbiAgICAgID8gbm9rKGNvZGUpXG4gICAgICA6IG9rKGNvZGUpXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAndXZ1L2Fzc2VydCdcbmltcG9ydCB7Y29kZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb2Rlcy5qcydcbmltcG9ydCB7dHlwZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC90eXBlcy5qcydcbmltcG9ydCB7bGFiZWxFbmR9IGZyb20gJy4vbGFiZWwtZW5kLmpzJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBsYWJlbFN0YXJ0TGluayA9IHtcbiAgbmFtZTogJ2xhYmVsU3RhcnRMaW5rJyxcbiAgdG9rZW5pemU6IHRva2VuaXplTGFiZWxTdGFydExpbmssXG4gIHJlc29sdmVBbGw6IGxhYmVsRW5kLnJlc29sdmVBbGxcbn1cblxuLyoqIEB0eXBlIHtUb2tlbml6ZXJ9ICovXG5mdW5jdGlvbiB0b2tlbml6ZUxhYmVsU3RhcnRMaW5rKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcblxuICByZXR1cm4gc3RhcnRcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgYXNzZXJ0KGNvZGUgPT09IGNvZGVzLmxlZnRTcXVhcmVCcmFja2V0LCAnZXhwZWN0ZWQgYFtgJylcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmxhYmVsTGluaylcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmxhYmVsTWFya2VyKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5sYWJlbE1hcmtlcilcbiAgICBlZmZlY3RzLmV4aXQodHlwZXMubGFiZWxMaW5rKVxuICAgIHJldHVybiBhZnRlclxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gYWZ0ZXIoY29kZSkge1xuICAgIC8qIFRvIGRvOiByZW1vdmUgaW4gdGhlIGZ1dHVyZSBvbmNlIHdl4oCZdmUgc3dpdGNoZWQgZnJvbVxuICAgICAqIGBtaWNyb21hcmstZXh0ZW5zaW9uLWZvb3Rub3RlYCB0byBgbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tZm9vdG5vdGVgLFxuICAgICAqIHdoaWNoIGRvZXNu4oCZdCBuZWVkIHRoaXMgKi9cbiAgICAvKiBIaWRkZW4gZm9vdG5vdGVzIGhvb2suICovXG4gICAgLyogYzggaWdub3JlIG5leHQgMyAqL1xuICAgIHJldHVybiBjb2RlID09PSBjb2Rlcy5jYXJldCAmJlxuICAgICAgJ19oaWRkZW5Gb290bm90ZVN1cHBvcnQnIGluIHNlbGYucGFyc2VyLmNvbnN0cnVjdHNcbiAgICAgID8gbm9rKGNvZGUpXG4gICAgICA6IG9rKGNvZGUpXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAndXZ1L2Fzc2VydCdcbmltcG9ydCB7ZmFjdG9yeVNwYWNlfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSdcbmltcG9ydCB7bWFya2Rvd25MaW5lRW5kaW5nfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge3R5cGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvdHlwZXMuanMnXG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGxpbmVFbmRpbmcgPSB7bmFtZTogJ2xpbmVFbmRpbmcnLCB0b2tlbml6ZTogdG9rZW5pemVMaW5lRW5kaW5nfVxuXG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cbmZ1bmN0aW9uIHRva2VuaXplTGluZUVuZGluZyhlZmZlY3RzLCBvaykge1xuICByZXR1cm4gc3RhcnRcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgYXNzZXJ0KG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSwgJ2V4cGVjdGVkIGVvbCcpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5saW5lRW5kaW5nKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5saW5lRW5kaW5nKVxuICAgIHJldHVybiBmYWN0b3J5U3BhY2UoZWZmZWN0cywgb2ssIHR5cGVzLmxpbmVQcmVmaXgpXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZUNvbnRleHR9IFRva2VuaXplQ29udGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5FeGl0ZXJ9IEV4aXRlclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZXJ9IFRva2VuaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29kZX0gQ29kZVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge1JlY29yZDxzdHJpbmcsIHVua25vd24+ICYge21hcmtlcjogQ29kZSwgdHlwZTogc3RyaW5nLCBzaXplOiBudW1iZXJ9fSBMaXN0Q29udGFpbmVyU3RhdGVcbiAqIEB0eXBlZGVmIHtUb2tlbml6ZUNvbnRleHQgJiB7Y29udGFpbmVyU3RhdGU6IExpc3RDb250YWluZXJTdGF0ZX19IFRva2VuaXplQ29udGV4dFdpdGhTdGF0ZVxuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICd1dnUvYXNzZXJ0J1xuaW1wb3J0IHtmYWN0b3J5U3BhY2V9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXNwYWNlJ1xuaW1wb3J0IHthc2NpaURpZ2l0LCBtYXJrZG93blNwYWNlfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge2NvZGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvY29kZXMuanMnXG5pbXBvcnQge2NvbnN0YW50c30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvbnN0YW50cy5qcydcbmltcG9ydCB7dHlwZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC90eXBlcy5qcydcbmltcG9ydCB7YmxhbmtMaW5lfSBmcm9tICcuL2JsYW5rLWxpbmUuanMnXG5pbXBvcnQge3RoZW1hdGljQnJlYWt9IGZyb20gJy4vdGhlbWF0aWMtYnJlYWsuanMnXG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGxpc3QgPSB7XG4gIG5hbWU6ICdsaXN0JyxcbiAgdG9rZW5pemU6IHRva2VuaXplTGlzdFN0YXJ0LFxuICBjb250aW51YXRpb246IHt0b2tlbml6ZTogdG9rZW5pemVMaXN0Q29udGludWF0aW9ufSxcbiAgZXhpdDogdG9rZW5pemVMaXN0RW5kXG59XG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuY29uc3QgbGlzdEl0ZW1QcmVmaXhXaGl0ZXNwYWNlQ29uc3RydWN0ID0ge1xuICB0b2tlbml6ZTogdG9rZW5pemVMaXN0SXRlbVByZWZpeFdoaXRlc3BhY2UsXG4gIHBhcnRpYWw6IHRydWVcbn1cblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5jb25zdCBpbmRlbnRDb25zdHJ1Y3QgPSB7dG9rZW5pemU6IHRva2VuaXplSW5kZW50LCBwYXJ0aWFsOiB0cnVlfVxuXG4vKipcbiAqIEB0eXBlIHtUb2tlbml6ZXJ9XG4gKiBAdGhpcyB7VG9rZW5pemVDb250ZXh0V2l0aFN0YXRlfVxuICovXG5mdW5jdGlvbiB0b2tlbml6ZUxpc3RTdGFydChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGNvbnN0IHRhaWwgPSBzZWxmLmV2ZW50c1tzZWxmLmV2ZW50cy5sZW5ndGggLSAxXVxuICBsZXQgaW5pdGlhbFNpemUgPVxuICAgIHRhaWwgJiYgdGFpbFsxXS50eXBlID09PSB0eXBlcy5saW5lUHJlZml4XG4gICAgICA/IHRhaWxbMl0uc2xpY2VTZXJpYWxpemUodGFpbFsxXSwgdHJ1ZSkubGVuZ3RoXG4gICAgICA6IDBcbiAgbGV0IHNpemUgPSAwXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGNvbnN0IGtpbmQgPVxuICAgICAgc2VsZi5jb250YWluZXJTdGF0ZS50eXBlIHx8XG4gICAgICAoY29kZSA9PT0gY29kZXMuYXN0ZXJpc2sgfHwgY29kZSA9PT0gY29kZXMucGx1c1NpZ24gfHwgY29kZSA9PT0gY29kZXMuZGFzaFxuICAgICAgICA/IHR5cGVzLmxpc3RVbm9yZGVyZWRcbiAgICAgICAgOiB0eXBlcy5saXN0T3JkZXJlZClcblxuICAgIGlmIChcbiAgICAgIGtpbmQgPT09IHR5cGVzLmxpc3RVbm9yZGVyZWRcbiAgICAgICAgPyAhc2VsZi5jb250YWluZXJTdGF0ZS5tYXJrZXIgfHwgY29kZSA9PT0gc2VsZi5jb250YWluZXJTdGF0ZS5tYXJrZXJcbiAgICAgICAgOiBhc2NpaURpZ2l0KGNvZGUpXG4gICAgKSB7XG4gICAgICBpZiAoIXNlbGYuY29udGFpbmVyU3RhdGUudHlwZSkge1xuICAgICAgICBzZWxmLmNvbnRhaW5lclN0YXRlLnR5cGUgPSBraW5kXG4gICAgICAgIGVmZmVjdHMuZW50ZXIoa2luZCwge19jb250YWluZXI6IHRydWV9KVxuICAgICAgfVxuXG4gICAgICBpZiAoa2luZCA9PT0gdHlwZXMubGlzdFVub3JkZXJlZCkge1xuICAgICAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmxpc3RJdGVtUHJlZml4KVxuICAgICAgICByZXR1cm4gY29kZSA9PT0gY29kZXMuYXN0ZXJpc2sgfHwgY29kZSA9PT0gY29kZXMuZGFzaFxuICAgICAgICAgID8gZWZmZWN0cy5jaGVjayh0aGVtYXRpY0JyZWFrLCBub2ssIGF0TWFya2VyKShjb2RlKVxuICAgICAgICAgIDogYXRNYXJrZXIoY29kZSlcbiAgICAgIH1cblxuICAgICAgaWYgKCFzZWxmLmludGVycnVwdCB8fCBjb2RlID09PSBjb2Rlcy5kaWdpdDEpIHtcbiAgICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy5saXN0SXRlbVByZWZpeClcbiAgICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy5saXN0SXRlbVZhbHVlKVxuICAgICAgICByZXR1cm4gaW5zaWRlKGNvZGUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gaW5zaWRlKGNvZGUpIHtcbiAgICBpZiAoYXNjaWlEaWdpdChjb2RlKSAmJiArK3NpemUgPCBjb25zdGFudHMubGlzdEl0ZW1WYWx1ZVNpemVNYXgpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGluc2lkZVxuICAgIH1cblxuICAgIGlmIChcbiAgICAgICghc2VsZi5pbnRlcnJ1cHQgfHwgc2l6ZSA8IDIpICYmXG4gICAgICAoc2VsZi5jb250YWluZXJTdGF0ZS5tYXJrZXJcbiAgICAgICAgPyBjb2RlID09PSBzZWxmLmNvbnRhaW5lclN0YXRlLm1hcmtlclxuICAgICAgICA6IGNvZGUgPT09IGNvZGVzLnJpZ2h0UGFyZW50aGVzaXMgfHwgY29kZSA9PT0gY29kZXMuZG90KVxuICAgICkge1xuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmxpc3RJdGVtVmFsdWUpXG4gICAgICByZXR1cm4gYXRNYXJrZXIoY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge1N0YXRlfVxuICAgKiovXG4gIGZ1bmN0aW9uIGF0TWFya2VyKGNvZGUpIHtcbiAgICBhc3NlcnQoY29kZSAhPT0gY29kZXMuZW9mLCAnZW9mIChgbnVsbGApIGlzIG5vdCBhIG1hcmtlcicpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5saXN0SXRlbU1hcmtlcilcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQodHlwZXMubGlzdEl0ZW1NYXJrZXIpXG4gICAgc2VsZi5jb250YWluZXJTdGF0ZS5tYXJrZXIgPSBzZWxmLmNvbnRhaW5lclN0YXRlLm1hcmtlciB8fCBjb2RlXG4gICAgcmV0dXJuIGVmZmVjdHMuY2hlY2soXG4gICAgICBibGFua0xpbmUsXG4gICAgICAvLyBDYW7igJl0IGJlIGVtcHR5IHdoZW4gaW50ZXJydXB0aW5nLlxuICAgICAgc2VsZi5pbnRlcnJ1cHQgPyBub2sgOiBvbkJsYW5rLFxuICAgICAgZWZmZWN0cy5hdHRlbXB0KFxuICAgICAgICBsaXN0SXRlbVByZWZpeFdoaXRlc3BhY2VDb25zdHJ1Y3QsXG4gICAgICAgIGVuZE9mUHJlZml4LFxuICAgICAgICBvdGhlclByZWZpeFxuICAgICAgKVxuICAgIClcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIG9uQmxhbmsoY29kZSkge1xuICAgIHNlbGYuY29udGFpbmVyU3RhdGUuaW5pdGlhbEJsYW5rTGluZSA9IHRydWVcbiAgICBpbml0aWFsU2l6ZSsrXG4gICAgcmV0dXJuIGVuZE9mUHJlZml4KGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBvdGhlclByZWZpeChjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIodHlwZXMubGlzdEl0ZW1QcmVmaXhXaGl0ZXNwYWNlKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMubGlzdEl0ZW1QcmVmaXhXaGl0ZXNwYWNlKVxuICAgICAgcmV0dXJuIGVuZE9mUHJlZml4XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gZW5kT2ZQcmVmaXgoY29kZSkge1xuICAgIHNlbGYuY29udGFpbmVyU3RhdGUuc2l6ZSA9XG4gICAgICBpbml0aWFsU2l6ZSArXG4gICAgICBzZWxmLnNsaWNlU2VyaWFsaXplKGVmZmVjdHMuZXhpdCh0eXBlcy5saXN0SXRlbVByZWZpeCksIHRydWUpLmxlbmd0aFxuICAgIHJldHVybiBvayhjb2RlKVxuICB9XG59XG5cbi8qKlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHRXaXRoU3RhdGV9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplTGlzdENvbnRpbnVhdGlvbihlZmZlY3RzLCBvaywgbm9rKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG5cbiAgc2VsZi5jb250YWluZXJTdGF0ZS5fY2xvc2VGbG93ID0gdW5kZWZpbmVkXG5cbiAgcmV0dXJuIGVmZmVjdHMuY2hlY2soYmxhbmtMaW5lLCBvbkJsYW5rLCBub3RCbGFuaylcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBvbkJsYW5rKGNvZGUpIHtcbiAgICBzZWxmLmNvbnRhaW5lclN0YXRlLmZ1cnRoZXJCbGFua0xpbmVzID1cbiAgICAgIHNlbGYuY29udGFpbmVyU3RhdGUuZnVydGhlckJsYW5rTGluZXMgfHxcbiAgICAgIHNlbGYuY29udGFpbmVyU3RhdGUuaW5pdGlhbEJsYW5rTGluZVxuXG4gICAgLy8gV2UgaGF2ZSBhIGJsYW5rIGxpbmUuXG4gICAgLy8gU3RpbGwsIHRyeSB0byBjb25zdW1lIGF0IG1vc3QgdGhlIGl0ZW1zIHNpemUuXG4gICAgcmV0dXJuIGZhY3RvcnlTcGFjZShcbiAgICAgIGVmZmVjdHMsXG4gICAgICBvayxcbiAgICAgIHR5cGVzLmxpc3RJdGVtSW5kZW50LFxuICAgICAgc2VsZi5jb250YWluZXJTdGF0ZS5zaXplICsgMVxuICAgICkoY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIG5vdEJsYW5rKGNvZGUpIHtcbiAgICBpZiAoc2VsZi5jb250YWluZXJTdGF0ZS5mdXJ0aGVyQmxhbmtMaW5lcyB8fCAhbWFya2Rvd25TcGFjZShjb2RlKSkge1xuICAgICAgc2VsZi5jb250YWluZXJTdGF0ZS5mdXJ0aGVyQmxhbmtMaW5lcyA9IHVuZGVmaW5lZFxuICAgICAgc2VsZi5jb250YWluZXJTdGF0ZS5pbml0aWFsQmxhbmtMaW5lID0gdW5kZWZpbmVkXG4gICAgICByZXR1cm4gbm90SW5DdXJyZW50SXRlbShjb2RlKVxuICAgIH1cblxuICAgIHNlbGYuY29udGFpbmVyU3RhdGUuZnVydGhlckJsYW5rTGluZXMgPSB1bmRlZmluZWRcbiAgICBzZWxmLmNvbnRhaW5lclN0YXRlLmluaXRpYWxCbGFua0xpbmUgPSB1bmRlZmluZWRcbiAgICByZXR1cm4gZWZmZWN0cy5hdHRlbXB0KGluZGVudENvbnN0cnVjdCwgb2ssIG5vdEluQ3VycmVudEl0ZW0pKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBub3RJbkN1cnJlbnRJdGVtKGNvZGUpIHtcbiAgICAvLyBXaGlsZSB3ZSBkbyBjb250aW51ZSwgd2Ugc2lnbmFsIHRoYXQgdGhlIGZsb3cgc2hvdWxkIGJlIGNsb3NlZC5cbiAgICBzZWxmLmNvbnRhaW5lclN0YXRlLl9jbG9zZUZsb3cgPSB0cnVlXG4gICAgLy8gQXMgd2XigJlyZSBjbG9zaW5nIGZsb3csIHdl4oCZcmUgbm8gbG9uZ2VyIGludGVycnVwdGluZy5cbiAgICBzZWxmLmludGVycnVwdCA9IHVuZGVmaW5lZFxuICAgIHJldHVybiBmYWN0b3J5U3BhY2UoXG4gICAgICBlZmZlY3RzLFxuICAgICAgZWZmZWN0cy5hdHRlbXB0KGxpc3QsIG9rLCBub2spLFxuICAgICAgdHlwZXMubGluZVByZWZpeCxcbiAgICAgIHNlbGYucGFyc2VyLmNvbnN0cnVjdHMuZGlzYWJsZS5udWxsLmluY2x1ZGVzKCdjb2RlSW5kZW50ZWQnKVxuICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICA6IGNvbnN0YW50cy50YWJTaXplXG4gICAgKShjb2RlKVxuICB9XG59XG5cbi8qKlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHRXaXRoU3RhdGV9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplSW5kZW50KGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcblxuICByZXR1cm4gZmFjdG9yeVNwYWNlKFxuICAgIGVmZmVjdHMsXG4gICAgYWZ0ZXJQcmVmaXgsXG4gICAgdHlwZXMubGlzdEl0ZW1JbmRlbnQsXG4gICAgc2VsZi5jb250YWluZXJTdGF0ZS5zaXplICsgMVxuICApXG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gYWZ0ZXJQcmVmaXgoY29kZSkge1xuICAgIGNvbnN0IHRhaWwgPSBzZWxmLmV2ZW50c1tzZWxmLmV2ZW50cy5sZW5ndGggLSAxXVxuICAgIHJldHVybiB0YWlsICYmXG4gICAgICB0YWlsWzFdLnR5cGUgPT09IHR5cGVzLmxpc3RJdGVtSW5kZW50ICYmXG4gICAgICB0YWlsWzJdLnNsaWNlU2VyaWFsaXplKHRhaWxbMV0sIHRydWUpLmxlbmd0aCA9PT0gc2VsZi5jb250YWluZXJTdGF0ZS5zaXplXG4gICAgICA/IG9rKGNvZGUpXG4gICAgICA6IG5vayhjb2RlKVxuICB9XG59XG5cbi8qKlxuICogQHR5cGUge0V4aXRlcn1cbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHRXaXRoU3RhdGV9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplTGlzdEVuZChlZmZlY3RzKSB7XG4gIGVmZmVjdHMuZXhpdCh0aGlzLmNvbnRhaW5lclN0YXRlLnR5cGUpXG59XG5cbi8qKlxuICogQHR5cGUge1Rva2VuaXplcn1cbiAqIEB0aGlzIHtUb2tlbml6ZUNvbnRleHRXaXRoU3RhdGV9XG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplTGlzdEl0ZW1QcmVmaXhXaGl0ZXNwYWNlKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcblxuICByZXR1cm4gZmFjdG9yeVNwYWNlKFxuICAgIGVmZmVjdHMsXG4gICAgYWZ0ZXJQcmVmaXgsXG4gICAgdHlwZXMubGlzdEl0ZW1QcmVmaXhXaGl0ZXNwYWNlLFxuICAgIHNlbGYucGFyc2VyLmNvbnN0cnVjdHMuZGlzYWJsZS5udWxsLmluY2x1ZGVzKCdjb2RlSW5kZW50ZWQnKVxuICAgICAgPyB1bmRlZmluZWRcbiAgICAgIDogY29uc3RhbnRzLnRhYlNpemUgKyAxXG4gIClcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBhZnRlclByZWZpeChjb2RlKSB7XG4gICAgY29uc3QgdGFpbCA9IHNlbGYuZXZlbnRzW3NlbGYuZXZlbnRzLmxlbmd0aCAtIDFdXG5cbiAgICByZXR1cm4gIW1hcmtkb3duU3BhY2UoY29kZSkgJiZcbiAgICAgIHRhaWwgJiZcbiAgICAgIHRhaWxbMV0udHlwZSA9PT0gdHlwZXMubGlzdEl0ZW1QcmVmaXhXaGl0ZXNwYWNlXG4gICAgICA/IG9rKGNvZGUpXG4gICAgICA6IG5vayhjb2RlKVxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29uc3RydWN0fSBDb25zdHJ1Y3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuUmVzb2x2ZXJ9IFJlc29sdmVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VuaXplcn0gVG9rZW5pemVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlN0YXRlfSBTdGF0ZVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db2RlfSBDb2RlXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ3V2dS9hc3NlcnQnXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZ30gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvZGVzLmpzJ1xuaW1wb3J0IHt0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL3R5cGVzLmpzJ1xuXG4vKiogQHR5cGUge0NvbnN0cnVjdH0gKi9cbmV4cG9ydCBjb25zdCBzZXRleHRVbmRlcmxpbmUgPSB7XG4gIG5hbWU6ICdzZXRleHRVbmRlcmxpbmUnLFxuICB0b2tlbml6ZTogdG9rZW5pemVTZXRleHRVbmRlcmxpbmUsXG4gIHJlc29sdmVUbzogcmVzb2x2ZVRvU2V0ZXh0VW5kZXJsaW5lXG59XG5cbi8qKiBAdHlwZSB7UmVzb2x2ZXJ9ICovXG5mdW5jdGlvbiByZXNvbHZlVG9TZXRleHRVbmRlcmxpbmUoZXZlbnRzLCBjb250ZXh0KSB7XG4gIGxldCBpbmRleCA9IGV2ZW50cy5sZW5ndGhcbiAgLyoqIEB0eXBlIHtudW1iZXJ8dW5kZWZpbmVkfSAqL1xuICBsZXQgY29udGVudFxuICAvKiogQHR5cGUge251bWJlcnx1bmRlZmluZWR9ICovXG4gIGxldCB0ZXh0XG4gIC8qKiBAdHlwZSB7bnVtYmVyfHVuZGVmaW5lZH0gKi9cbiAgbGV0IGRlZmluaXRpb25cblxuICAvLyBGaW5kIHRoZSBvcGVuaW5nIG9mIHRoZSBjb250ZW50LlxuICAvLyBJdOKAmWxsIGFsd2F5cyBleGlzdDogd2UgZG9u4oCZdCB0b2tlbml6ZSBpZiBpdCBpc27igJl0IHRoZXJlLlxuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIGlmIChldmVudHNbaW5kZXhdWzBdID09PSAnZW50ZXInKSB7XG4gICAgICBpZiAoZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSB0eXBlcy5jb250ZW50KSB7XG4gICAgICAgIGNvbnRlbnQgPSBpbmRleFxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSB0eXBlcy5wYXJhZ3JhcGgpIHtcbiAgICAgICAgdGV4dCA9IGluZGV4XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEV4aXRcbiAgICBlbHNlIHtcbiAgICAgIGlmIChldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09IHR5cGVzLmNvbnRlbnQpIHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBjb250ZW50IGVuZCAoaWYgbmVlZGVkIHdl4oCZbGwgYWRkIGl0IGxhdGVyKVxuICAgICAgICBldmVudHMuc3BsaWNlKGluZGV4LCAxKVxuICAgICAgfVxuXG4gICAgICBpZiAoIWRlZmluaXRpb24gJiYgZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSB0eXBlcy5kZWZpbml0aW9uKSB7XG4gICAgICAgIGRlZmluaXRpb24gPSBpbmRleFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzc2VydCh0ZXh0ICE9PSB1bmRlZmluZWQsICdleHBlY3RlZCBhIGB0ZXh0YCBpbmRleCB0byBiZSBmb3VuZCcpXG4gIGFzc2VydChjb250ZW50ICE9PSB1bmRlZmluZWQsICdleHBlY3RlZCBhIGB0ZXh0YCBpbmRleCB0byBiZSBmb3VuZCcpXG5cbiAgY29uc3QgaGVhZGluZyA9IHtcbiAgICB0eXBlOiB0eXBlcy5zZXRleHRIZWFkaW5nLFxuICAgIHN0YXJ0OiBPYmplY3QuYXNzaWduKHt9LCBldmVudHNbdGV4dF1bMV0uc3RhcnQpLFxuICAgIGVuZDogT2JqZWN0LmFzc2lnbih7fSwgZXZlbnRzW2V2ZW50cy5sZW5ndGggLSAxXVsxXS5lbmQpXG4gIH1cblxuICAvLyBDaGFuZ2UgdGhlIHBhcmFncmFwaCB0byBzZXRleHQgaGVhZGluZyB0ZXh0LlxuICBldmVudHNbdGV4dF1bMV0udHlwZSA9IHR5cGVzLnNldGV4dEhlYWRpbmdUZXh0XG5cbiAgLy8gSWYgd2UgaGF2ZSBkZWZpbml0aW9ucyBpbiB0aGUgY29udGVudCwgd2XigJlsbCBrZWVwIG9uIGhhdmluZyBjb250ZW50LFxuICAvLyBidXQgd2UgbmVlZCBtb3ZlIGl0LlxuICBpZiAoZGVmaW5pdGlvbikge1xuICAgIGV2ZW50cy5zcGxpY2UodGV4dCwgMCwgWydlbnRlcicsIGhlYWRpbmcsIGNvbnRleHRdKVxuICAgIGV2ZW50cy5zcGxpY2UoZGVmaW5pdGlvbiArIDEsIDAsIFsnZXhpdCcsIGV2ZW50c1tjb250ZW50XVsxXSwgY29udGV4dF0pXG4gICAgZXZlbnRzW2NvbnRlbnRdWzFdLmVuZCA9IE9iamVjdC5hc3NpZ24oe30sIGV2ZW50c1tkZWZpbml0aW9uXVsxXS5lbmQpXG4gIH0gZWxzZSB7XG4gICAgZXZlbnRzW2NvbnRlbnRdWzFdID0gaGVhZGluZ1xuICB9XG5cbiAgLy8gQWRkIHRoZSBoZWFkaW5nIGV4aXQgYXQgdGhlIGVuZC5cbiAgZXZlbnRzLnB1c2goWydleGl0JywgaGVhZGluZywgY29udGV4dF0pXG5cbiAgcmV0dXJuIGV2ZW50c1xufVxuXG4vKiogQHR5cGUge1Rva2VuaXplcn0gKi9cbmZ1bmN0aW9uIHRva2VuaXplU2V0ZXh0VW5kZXJsaW5lKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgbGV0IGluZGV4ID0gc2VsZi5ldmVudHMubGVuZ3RoXG4gIC8qKiBAdHlwZSB7Tm9uTnVsbGFibGU8Q29kZT59ICovXG4gIGxldCBtYXJrZXJcbiAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICBsZXQgcGFyYWdyYXBoXG5cbiAgLy8gRmluZCBhbiBvcGVuaW5nLlxuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIC8vIFNraXAgZW50ZXIvZXhpdCBvZiBsaW5lIGVuZGluZywgbGluZSBwcmVmaXgsIGFuZCBjb250ZW50LlxuICAgIC8vIFdlIGNhbiBub3cgZWl0aGVyIGhhdmUgYSBkZWZpbml0aW9uIG9yIGEgcGFyYWdyYXBoLlxuICAgIGlmIChcbiAgICAgIHNlbGYuZXZlbnRzW2luZGV4XVsxXS50eXBlICE9PSB0eXBlcy5saW5lRW5kaW5nICYmXG4gICAgICBzZWxmLmV2ZW50c1tpbmRleF1bMV0udHlwZSAhPT0gdHlwZXMubGluZVByZWZpeCAmJlxuICAgICAgc2VsZi5ldmVudHNbaW5kZXhdWzFdLnR5cGUgIT09IHR5cGVzLmNvbnRlbnRcbiAgICApIHtcbiAgICAgIHBhcmFncmFwaCA9IHNlbGYuZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSB0eXBlcy5wYXJhZ3JhcGhcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGFzc2VydChcbiAgICAgIGNvZGUgPT09IGNvZGVzLmRhc2ggfHwgY29kZSA9PT0gY29kZXMuZXF1YWxzVG8sXG4gICAgICAnZXhwZWN0ZWQgYD1gIG9yIGAtYCdcbiAgICApXG5cbiAgICBpZiAoIXNlbGYucGFyc2VyLmxhenlbc2VsZi5ub3coKS5saW5lXSAmJiAoc2VsZi5pbnRlcnJ1cHQgfHwgcGFyYWdyYXBoKSkge1xuICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy5zZXRleHRIZWFkaW5nTGluZSlcbiAgICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuc2V0ZXh0SGVhZGluZ0xpbmVTZXF1ZW5jZSlcbiAgICAgIG1hcmtlciA9IGNvZGVcbiAgICAgIHJldHVybiBjbG9zaW5nU2VxdWVuY2UoY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBjbG9zaW5nU2VxdWVuY2UoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBtYXJrZXIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNsb3NpbmdTZXF1ZW5jZVxuICAgIH1cblxuICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5zZXRleHRIZWFkaW5nTGluZVNlcXVlbmNlKVxuICAgIHJldHVybiBmYWN0b3J5U3BhY2UoZWZmZWN0cywgY2xvc2luZ1NlcXVlbmNlRW5kLCB0eXBlcy5saW5lU3VmZml4KShjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gY2xvc2luZ1NlcXVlbmNlRW5kKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLnNldGV4dEhlYWRpbmdMaW5lKVxuICAgICAgcmV0dXJuIG9rKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29uc3RydWN0fSBDb25zdHJ1Y3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVyfSBUb2tlbml6ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvZGV9IENvZGVcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAndXZ1L2Fzc2VydCdcbmltcG9ydCB7ZmFjdG9yeVNwYWNlfSBmcm9tICdtaWNyb21hcmstZmFjdG9yeS1zcGFjZSdcbmltcG9ydCB7bWFya2Rvd25MaW5lRW5kaW5nLCBtYXJrZG93blNwYWNlfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge2NvZGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvY29kZXMuanMnXG5pbXBvcnQge2NvbnN0YW50c30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvbnN0YW50cy5qcydcbmltcG9ydCB7dHlwZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC90eXBlcy5qcydcblxuLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgdGhlbWF0aWNCcmVhayA9IHtcbiAgbmFtZTogJ3RoZW1hdGljQnJlYWsnLFxuICB0b2tlbml6ZTogdG9rZW5pemVUaGVtYXRpY0JyZWFrXG59XG5cbi8qKiBAdHlwZSB7VG9rZW5pemVyfSAqL1xuZnVuY3Rpb24gdG9rZW5pemVUaGVtYXRpY0JyZWFrKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgbGV0IHNpemUgPSAwXG4gIC8qKiBAdHlwZSB7Tm9uTnVsbGFibGU8Q29kZT59ICovXG4gIGxldCBtYXJrZXJcblxuICByZXR1cm4gc3RhcnRcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgYXNzZXJ0KFxuICAgICAgY29kZSA9PT0gY29kZXMuYXN0ZXJpc2sgfHxcbiAgICAgICAgY29kZSA9PT0gY29kZXMuZGFzaCB8fFxuICAgICAgICBjb2RlID09PSBjb2Rlcy51bmRlcnNjb3JlLFxuICAgICAgJ2V4cGVjdGVkIGAqYCwgYC1gLCBvciBgX2AnXG4gICAgKVxuXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy50aGVtYXRpY0JyZWFrKVxuICAgIG1hcmtlciA9IGNvZGVcbiAgICByZXR1cm4gYXRCcmVhayhjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gYXRCcmVhayhjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG1hcmtlcikge1xuICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy50aGVtYXRpY0JyZWFrU2VxdWVuY2UpXG4gICAgICByZXR1cm4gc2VxdWVuY2UoY29kZSlcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25TcGFjZShjb2RlKSkge1xuICAgICAgcmV0dXJuIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBhdEJyZWFrLCB0eXBlcy53aGl0ZXNwYWNlKShjb2RlKVxuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHNpemUgPCBjb25zdGFudHMudGhlbWF0aWNCcmVha01hcmtlckNvdW50TWluIHx8XG4gICAgICAoY29kZSAhPT0gY29kZXMuZW9mICYmICFtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpXG4gICAgKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5leGl0KHR5cGVzLnRoZW1hdGljQnJlYWspXG4gICAgcmV0dXJuIG9rKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzZXF1ZW5jZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG1hcmtlcikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBzaXplKytcbiAgICAgIHJldHVybiBzZXF1ZW5jZVxuICAgIH1cblxuICAgIGVmZmVjdHMuZXhpdCh0eXBlcy50aGVtYXRpY0JyZWFrU2VxdWVuY2UpXG4gICAgcmV0dXJuIGF0QnJlYWsoY29kZSlcbiAgfVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkVmZmVjdHN9IEVmZmVjdHNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuaW1wb3J0IHtcbiAgYXNjaWlDb250cm9sLFxuICBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlLFxuICBtYXJrZG93bkxpbmVFbmRpbmdcbn0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvZGVzLmpzJ1xuaW1wb3J0IHtjb25zdGFudHN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb25zdGFudHMuanMnXG5pbXBvcnQge3R5cGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvdHlwZXMuanMnXG5cbi8qKlxuICogQHBhcmFtIHtFZmZlY3RzfSBlZmZlY3RzXG4gKiBAcGFyYW0ge1N0YXRlfSBva1xuICogQHBhcmFtIHtTdGF0ZX0gbm9rXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmd9IGxpdGVyYWxUeXBlXG4gKiBAcGFyYW0ge3N0cmluZ30gbGl0ZXJhbE1hcmtlclR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfSByYXdUeXBlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nVHlwZVxuICogQHBhcmFtIHtudW1iZXJ9IFttYXg9SW5maW5pdHldXG4gKiBAcmV0dXJucyB7U3RhdGV9XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtcGFyYW1zXG5leHBvcnQgZnVuY3Rpb24gZmFjdG9yeURlc3RpbmF0aW9uKFxuICBlZmZlY3RzLFxuICBvayxcbiAgbm9rLFxuICB0eXBlLFxuICBsaXRlcmFsVHlwZSxcbiAgbGl0ZXJhbE1hcmtlclR5cGUsXG4gIHJhd1R5cGUsXG4gIHN0cmluZ1R5cGUsXG4gIG1heFxuKSB7XG4gIGNvbnN0IGxpbWl0ID0gbWF4IHx8IE51bWJlci5QT1NJVElWRV9JTkZJTklUWVxuICBsZXQgYmFsYW5jZSA9IDBcblxuICByZXR1cm4gc3RhcnRcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLmxlc3NUaGFuKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGUpXG4gICAgICBlZmZlY3RzLmVudGVyKGxpdGVyYWxUeXBlKVxuICAgICAgZWZmZWN0cy5lbnRlcihsaXRlcmFsTWFya2VyVHlwZSlcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KGxpdGVyYWxNYXJrZXJUeXBlKVxuICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uRW5jbG9zZWRCZWZvcmVcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBjb2RlID09PSBjb2Rlcy5lb2YgfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLnJpZ2h0UGFyZW50aGVzaXMgfHxcbiAgICAgIGFzY2lpQ29udHJvbChjb2RlKVxuICAgICkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIodHlwZSlcbiAgICBlZmZlY3RzLmVudGVyKHJhd1R5cGUpXG4gICAgZWZmZWN0cy5lbnRlcihzdHJpbmdUeXBlKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuY2h1bmtTdHJpbmcsIHtjb250ZW50VHlwZTogY29uc3RhbnRzLmNvbnRlbnRUeXBlU3RyaW5nfSlcbiAgICByZXR1cm4gZGVzdGluYXRpb25SYXcoY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGRlc3RpbmF0aW9uRW5jbG9zZWRCZWZvcmUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5ncmVhdGVyVGhhbikge1xuICAgICAgZWZmZWN0cy5lbnRlcihsaXRlcmFsTWFya2VyVHlwZSlcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KGxpdGVyYWxNYXJrZXJUeXBlKVxuICAgICAgZWZmZWN0cy5leGl0KGxpdGVyYWxUeXBlKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGUpXG4gICAgICByZXR1cm4gb2tcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKHN0cmluZ1R5cGUpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5jaHVua1N0cmluZywge2NvbnRlbnRUeXBlOiBjb25zdGFudHMuY29udGVudFR5cGVTdHJpbmd9KVxuICAgIHJldHVybiBkZXN0aW5hdGlvbkVuY2xvc2VkKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBkZXN0aW5hdGlvbkVuY2xvc2VkKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZ3JlYXRlclRoYW4pIHtcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5jaHVua1N0cmluZylcbiAgICAgIGVmZmVjdHMuZXhpdChzdHJpbmdUeXBlKVxuICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uRW5jbG9zZWRCZWZvcmUoY29kZSlcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBjb2RlID09PSBjb2Rlcy5lb2YgfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmxlc3NUaGFuIHx8XG4gICAgICBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSlcbiAgICApIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gY29kZSA9PT0gY29kZXMuYmFja3NsYXNoXG4gICAgICA/IGRlc3RpbmF0aW9uRW5jbG9zZWRFc2NhcGVcbiAgICAgIDogZGVzdGluYXRpb25FbmNsb3NlZFxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gZGVzdGluYXRpb25FbmNsb3NlZEVzY2FwZShjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gY29kZXMubGVzc1RoYW4gfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmdyZWF0ZXJUaGFuIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5iYWNrc2xhc2hcbiAgICApIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uRW5jbG9zZWRcbiAgICB9XG5cbiAgICByZXR1cm4gZGVzdGluYXRpb25FbmNsb3NlZChjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gZGVzdGluYXRpb25SYXcoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5sZWZ0UGFyZW50aGVzaXMpIHtcbiAgICAgIGlmICgrK2JhbGFuY2UgPiBsaW1pdCkgcmV0dXJuIG5vayhjb2RlKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gZGVzdGluYXRpb25SYXdcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMucmlnaHRQYXJlbnRoZXNpcykge1xuICAgICAgaWYgKCFiYWxhbmNlLS0pIHtcbiAgICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmNodW5rU3RyaW5nKVxuICAgICAgICBlZmZlY3RzLmV4aXQoc3RyaW5nVHlwZSlcbiAgICAgICAgZWZmZWN0cy5leGl0KHJhd1R5cGUpXG4gICAgICAgIGVmZmVjdHMuZXhpdCh0eXBlKVxuICAgICAgICByZXR1cm4gb2soY29kZSlcbiAgICAgIH1cblxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gZGVzdGluYXRpb25SYXdcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mIHx8IG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSkpIHtcbiAgICAgIGlmIChiYWxhbmNlKSByZXR1cm4gbm9rKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMuY2h1bmtTdHJpbmcpXG4gICAgICBlZmZlY3RzLmV4aXQoc3RyaW5nVHlwZSlcbiAgICAgIGVmZmVjdHMuZXhpdChyYXdUeXBlKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGUpXG4gICAgICByZXR1cm4gb2soY29kZSlcbiAgICB9XG5cbiAgICBpZiAoYXNjaWlDb250cm9sKGNvZGUpKSByZXR1cm4gbm9rKGNvZGUpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGNvZGUgPT09IGNvZGVzLmJhY2tzbGFzaCA/IGRlc3RpbmF0aW9uUmF3RXNjYXBlIDogZGVzdGluYXRpb25SYXdcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGRlc3RpbmF0aW9uUmF3RXNjYXBlKGNvZGUpIHtcbiAgICBpZiAoXG4gICAgICBjb2RlID09PSBjb2Rlcy5sZWZ0UGFyZW50aGVzaXMgfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLnJpZ2h0UGFyZW50aGVzaXMgfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmJhY2tzbGFzaFxuICAgICkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gZGVzdGluYXRpb25SYXdcbiAgICB9XG5cbiAgICByZXR1cm4gZGVzdGluYXRpb25SYXcoY29kZSlcbiAgfVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkVmZmVjdHN9IEVmZmVjdHNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVDb250ZXh0fSBUb2tlbml6ZUNvbnRleHRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ3V2dS9hc3NlcnQnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZywgbWFya2Rvd25TcGFjZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvZGVzLmpzJ1xuaW1wb3J0IHtjb25zdGFudHN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb25zdGFudHMuanMnXG5pbXBvcnQge3R5cGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvdHlwZXMuanMnXG5cbi8qKlxuICogQHRoaXMge1Rva2VuaXplQ29udGV4dH1cbiAqIEBwYXJhbSB7RWZmZWN0c30gZWZmZWN0c1xuICogQHBhcmFtIHtTdGF0ZX0gb2tcbiAqIEBwYXJhbSB7U3RhdGV9IG5va1xuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrZXJUeXBlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nVHlwZVxuICogQHJldHVybnMge1N0YXRlfVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXBhcmFtc1xuZXhwb3J0IGZ1bmN0aW9uIGZhY3RvcnlMYWJlbChlZmZlY3RzLCBvaywgbm9rLCB0eXBlLCBtYXJrZXJUeXBlLCBzdHJpbmdUeXBlKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGxldCBzaXplID0gMFxuICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gIGxldCBkYXRhXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGFzc2VydChjb2RlID09PSBjb2Rlcy5sZWZ0U3F1YXJlQnJhY2tldCwgJ2V4cGVjdGVkIGBbYCcpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlKVxuICAgIGVmZmVjdHMuZW50ZXIobWFya2VyVHlwZSlcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQobWFya2VyVHlwZSlcbiAgICBlZmZlY3RzLmVudGVyKHN0cmluZ1R5cGUpXG4gICAgcmV0dXJuIGF0QnJlYWtcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGF0QnJlYWsoY29kZSkge1xuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IGNvZGVzLmVvZiB8fFxuICAgICAgY29kZSA9PT0gY29kZXMubGVmdFNxdWFyZUJyYWNrZXQgfHxcbiAgICAgIChjb2RlID09PSBjb2Rlcy5yaWdodFNxdWFyZUJyYWNrZXQgJiYgIWRhdGEpIHx8XG4gICAgICAvKiBUbyBkbzogcmVtb3ZlIGluIHRoZSBmdXR1cmUgb25jZSB3ZeKAmXZlIHN3aXRjaGVkIGZyb21cbiAgICAgICAqIGBtaWNyb21hcmstZXh0ZW5zaW9uLWZvb3Rub3RlYCB0byBgbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tZm9vdG5vdGVgLFxuICAgICAgICogd2hpY2ggZG9lc27igJl0IG5lZWQgdGhpcyAqL1xuICAgICAgLyogSGlkZGVuIGZvb3Rub3RlcyBob29rICovXG4gICAgICAvKiBjOCBpZ25vcmUgbmV4dCAzICovXG4gICAgICAoY29kZSA9PT0gY29kZXMuY2FyZXQgJiZcbiAgICAgICAgIXNpemUgJiZcbiAgICAgICAgJ19oaWRkZW5Gb290bm90ZVN1cHBvcnQnIGluIHNlbGYucGFyc2VyLmNvbnN0cnVjdHMpIHx8XG4gICAgICBzaXplID4gY29uc3RhbnRzLmxpbmtSZWZlcmVuY2VTaXplTWF4XG4gICAgKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IGNvZGVzLnJpZ2h0U3F1YXJlQnJhY2tldCkge1xuICAgICAgZWZmZWN0cy5leGl0KHN0cmluZ1R5cGUpXG4gICAgICBlZmZlY3RzLmVudGVyKG1hcmtlclR5cGUpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdChtYXJrZXJUeXBlKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGUpXG4gICAgICByZXR1cm4gb2tcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmxpbmVFbmRpbmcpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5saW5lRW5kaW5nKVxuICAgICAgcmV0dXJuIGF0QnJlYWtcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmNodW5rU3RyaW5nLCB7Y29udGVudFR5cGU6IGNvbnN0YW50cy5jb250ZW50VHlwZVN0cmluZ30pXG4gICAgcmV0dXJuIGxhYmVsKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBsYWJlbChjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gY29kZXMuZW9mIHx8XG4gICAgICBjb2RlID09PSBjb2Rlcy5sZWZ0U3F1YXJlQnJhY2tldCB8fFxuICAgICAgY29kZSA9PT0gY29kZXMucmlnaHRTcXVhcmVCcmFja2V0IHx8XG4gICAgICBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkgfHxcbiAgICAgIHNpemUrKyA+IGNvbnN0YW50cy5saW5rUmVmZXJlbmNlU2l6ZU1heFxuICAgICkge1xuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLmNodW5rU3RyaW5nKVxuICAgICAgcmV0dXJuIGF0QnJlYWsoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBkYXRhID0gZGF0YSB8fCAhbWFya2Rvd25TcGFjZShjb2RlKVxuICAgIHJldHVybiBjb2RlID09PSBjb2Rlcy5iYWNrc2xhc2ggPyBsYWJlbEVzY2FwZSA6IGxhYmVsXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBsYWJlbEVzY2FwZShjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gY29kZXMubGVmdFNxdWFyZUJyYWNrZXQgfHxcbiAgICAgIGNvZGUgPT09IGNvZGVzLmJhY2tzbGFzaCB8fFxuICAgICAgY29kZSA9PT0gY29kZXMucmlnaHRTcXVhcmVCcmFja2V0XG4gICAgKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHNpemUrK1xuICAgICAgcmV0dXJuIGxhYmVsXG4gICAgfVxuXG4gICAgcmV0dXJuIGxhYmVsKGNvZGUpXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5FZmZlY3RzfSBFZmZlY3RzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbmltcG9ydCB7bWFya2Rvd25TcGFjZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuXG4vKipcbiAqIEBwYXJhbSB7RWZmZWN0c30gZWZmZWN0c1xuICogQHBhcmFtIHtTdGF0ZX0gb2tcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge251bWJlcn0gW21heD1JbmZpbml0eV1cbiAqIEByZXR1cm5zIHtTdGF0ZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZhY3RvcnlTcGFjZShlZmZlY3RzLCBvaywgdHlwZSwgbWF4KSB7XG4gIGNvbnN0IGxpbWl0ID0gbWF4ID8gbWF4IC0gMSA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWVxuICBsZXQgc2l6ZSA9IDBcblxuICByZXR1cm4gc3RhcnRcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIodHlwZSlcbiAgICAgIHJldHVybiBwcmVmaXgoY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gb2soY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHByZWZpeChjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkgJiYgc2l6ZSsrIDwgbGltaXQpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHByZWZpeFxuICAgIH1cblxuICAgIGVmZmVjdHMuZXhpdCh0eXBlKVxuICAgIHJldHVybiBvayhjb2RlKVxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuRWZmZWN0c30gRWZmZWN0c1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29kZX0gQ29kZVxuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICd1dnUvYXNzZXJ0J1xuaW1wb3J0IHtmYWN0b3J5U3BhY2V9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXNwYWNlJ1xuaW1wb3J0IHttYXJrZG93bkxpbmVFbmRpbmd9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcbmltcG9ydCB7Y29kZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb2Rlcy5qcydcbmltcG9ydCB7Y29uc3RhbnRzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvY29uc3RhbnRzLmpzJ1xuaW1wb3J0IHt0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL3R5cGVzLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7RWZmZWN0c30gZWZmZWN0c1xuICogQHBhcmFtIHtTdGF0ZX0gb2tcbiAqIEBwYXJhbSB7U3RhdGV9IG5va1xuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrZXJUeXBlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nVHlwZVxuICogQHJldHVybnMge1N0YXRlfVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXBhcmFtc1xuZXhwb3J0IGZ1bmN0aW9uIGZhY3RvcnlUaXRsZShlZmZlY3RzLCBvaywgbm9rLCB0eXBlLCBtYXJrZXJUeXBlLCBzdHJpbmdUeXBlKSB7XG4gIC8qKiBAdHlwZSB7Tm9uTnVsbGFibGU8Q29kZT59ICovXG4gIGxldCBtYXJrZXJcblxuICByZXR1cm4gc3RhcnRcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgYXNzZXJ0KFxuICAgICAgY29kZSA9PT0gY29kZXMucXVvdGF0aW9uTWFyayB8fFxuICAgICAgICBjb2RlID09PSBjb2Rlcy5hcG9zdHJvcGhlIHx8XG4gICAgICAgIGNvZGUgPT09IGNvZGVzLmxlZnRQYXJlbnRoZXNpcyxcbiAgICAgICdleHBlY3RlZCBgXCJgLCBgXFwnYCwgb3IgYChgJ1xuICAgIClcbiAgICBlZmZlY3RzLmVudGVyKHR5cGUpXG4gICAgZWZmZWN0cy5lbnRlcihtYXJrZXJUeXBlKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdChtYXJrZXJUeXBlKVxuICAgIG1hcmtlciA9IGNvZGUgPT09IGNvZGVzLmxlZnRQYXJlbnRoZXNpcyA/IGNvZGVzLnJpZ2h0UGFyZW50aGVzaXMgOiBjb2RlXG4gICAgcmV0dXJuIGF0Rmlyc3RUaXRsZUJyZWFrXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBhdEZpcnN0VGl0bGVCcmVhayhjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG1hcmtlcikge1xuICAgICAgZWZmZWN0cy5lbnRlcihtYXJrZXJUeXBlKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQobWFya2VyVHlwZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlKVxuICAgICAgcmV0dXJuIG9rXG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcihzdHJpbmdUeXBlKVxuICAgIHJldHVybiBhdFRpdGxlQnJlYWsoY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGF0VGl0bGVCcmVhayhjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG1hcmtlcikge1xuICAgICAgZWZmZWN0cy5leGl0KHN0cmluZ1R5cGUpXG4gICAgICByZXR1cm4gYXRGaXJzdFRpdGxlQnJlYWsobWFya2VyKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSBjb2Rlcy5lb2YpIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICAvLyBOb3RlOiBibGFuayBsaW5lcyBjYW7igJl0IGV4aXN0IGluIGNvbnRlbnQuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy5saW5lRW5kaW5nKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMubGluZUVuZGluZylcbiAgICAgIHJldHVybiBmYWN0b3J5U3BhY2UoZWZmZWN0cywgYXRUaXRsZUJyZWFrLCB0eXBlcy5saW5lUHJlZml4KVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMuY2h1bmtTdHJpbmcsIHtjb250ZW50VHlwZTogY29uc3RhbnRzLmNvbnRlbnRUeXBlU3RyaW5nfSlcbiAgICByZXR1cm4gdGl0bGUoY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHRpdGxlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbWFya2VyIHx8IGNvZGUgPT09IGNvZGVzLmVvZiB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlcy5jaHVua1N0cmluZylcbiAgICAgIHJldHVybiBhdFRpdGxlQnJlYWsoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gY29kZSA9PT0gY29kZXMuYmFja3NsYXNoID8gdGl0bGVFc2NhcGUgOiB0aXRsZVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gdGl0bGVFc2NhcGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBtYXJrZXIgfHwgY29kZSA9PT0gY29kZXMuYmFja3NsYXNoKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0aXRsZVxuICAgIH1cblxuICAgIHJldHVybiB0aXRsZShjb2RlKVxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuRWZmZWN0c30gRWZmZWN0c1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZywgbWFya2Rvd25TcGFjZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHt0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL3R5cGVzLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7RWZmZWN0c30gZWZmZWN0c1xuICogQHBhcmFtIHtTdGF0ZX0gb2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZhY3RvcnlXaGl0ZXNwYWNlKGVmZmVjdHMsIG9rKSB7XG4gIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgbGV0IHNlZW5cblxuICByZXR1cm4gc3RhcnRcblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy5saW5lRW5kaW5nKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMubGluZUVuZGluZylcbiAgICAgIHNlZW4gPSB0cnVlXG4gICAgICByZXR1cm4gc3RhcnRcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25TcGFjZShjb2RlKSkge1xuICAgICAgcmV0dXJuIGZhY3RvcnlTcGFjZShcbiAgICAgICAgZWZmZWN0cyxcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIHNlZW4gPyB0eXBlcy5saW5lUHJlZml4IDogdHlwZXMubGluZVN1ZmZpeFxuICAgICAgKShjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBvayhjb2RlKVxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29kZX0gQ29kZVxuICovXG5cbmltcG9ydCB7Y29kZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb2Rlcy5qcydcbmltcG9ydCB7dW5pY29kZVB1bmN0dWF0aW9uUmVnZXh9IGZyb20gJy4vbGliL3VuaWNvZGUtcHVuY3R1YXRpb24tcmVnZXguanMnXG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgY2hhcmFjdGVyIGNvZGUgcmVwcmVzZW50cyBhbiBBU0NJSSBhbHBoYSAoYGFgIHRocm91Z2ggYHpgLFxuICogY2FzZSBpbnNlbnNpdGl2ZSkuXG4gKlxuICogQW4gKipBU0NJSSBhbHBoYSoqIGlzIGFuIEFTQ0lJIHVwcGVyIGFscGhhIG9yIEFTQ0lJIGxvd2VyIGFscGhhLlxuICpcbiAqIEFuICoqQVNDSUkgdXBwZXIgYWxwaGEqKiBpcyBhIGNoYXJhY3RlciBpbiB0aGUgaW5jbHVzaXZlIHJhbmdlIFUrMDA0MSAoYEFgKVxuICogdG8gVSswMDVBIChgWmApLlxuICpcbiAqIEFuICoqQVNDSUkgbG93ZXIgYWxwaGEqKiBpcyBhIGNoYXJhY3RlciBpbiB0aGUgaW5jbHVzaXZlIHJhbmdlIFUrMDA2MSAoYGFgKVxuICogdG8gVSswMDdBIChgemApLlxuICovXG5leHBvcnQgY29uc3QgYXNjaWlBbHBoYSA9IHJlZ2V4Q2hlY2soL1tBLVphLXpdLylcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBjaGFyYWN0ZXIgY29kZSByZXByZXNlbnRzIGFuIEFTQ0lJIGRpZ2l0IChgMGAgdGhyb3VnaCBgOWApLlxuICpcbiAqIEFuICoqQVNDSUkgZGlnaXQqKiBpcyBhIGNoYXJhY3RlciBpbiB0aGUgaW5jbHVzaXZlIHJhbmdlIFUrMDAzMCAoYDBgKSB0b1xuICogVSswMDM5IChgOWApLlxuICovXG5leHBvcnQgY29uc3QgYXNjaWlEaWdpdCA9IHJlZ2V4Q2hlY2soL1xcZC8pXG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgY2hhcmFjdGVyIGNvZGUgcmVwcmVzZW50cyBhbiBBU0NJSSBoZXggZGlnaXQgKGBhYCB0aHJvdWdoXG4gKiBgZmAsIGNhc2UgaW5zZW5zaXRpdmUsIG9yIGAwYCB0aHJvdWdoIGA5YCkuXG4gKlxuICogQW4gKipBU0NJSSBoZXggZGlnaXQqKiBpcyBhbiBBU0NJSSBkaWdpdCAoc2VlIGBhc2NpaURpZ2l0YCksIEFTQ0lJIHVwcGVyIGhleFxuICogZGlnaXQsIG9yIGFuIEFTQ0lJIGxvd2VyIGhleCBkaWdpdC5cbiAqXG4gKiBBbiAqKkFTQ0lJIHVwcGVyIGhleCBkaWdpdCoqIGlzIGEgY2hhcmFjdGVyIGluIHRoZSBpbmNsdXNpdmUgcmFuZ2UgVSswMDQxXG4gKiAoYEFgKSB0byBVKzAwNDYgKGBGYCkuXG4gKlxuICogQW4gKipBU0NJSSBsb3dlciBoZXggZGlnaXQqKiBpcyBhIGNoYXJhY3RlciBpbiB0aGUgaW5jbHVzaXZlIHJhbmdlIFUrMDA2MVxuICogKGBhYCkgdG8gVSswMDY2IChgZmApLlxuICovXG5leHBvcnQgY29uc3QgYXNjaWlIZXhEaWdpdCA9IHJlZ2V4Q2hlY2soL1tcXGRBLUZhLWZdLylcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBjaGFyYWN0ZXIgY29kZSByZXByZXNlbnRzIGFuIEFTQ0lJIGFscGhhbnVtZXJpYyAoYGFgXG4gKiB0aHJvdWdoIGB6YCwgY2FzZSBpbnNlbnNpdGl2ZSwgb3IgYDBgIHRocm91Z2ggYDlgKS5cbiAqXG4gKiBBbiAqKkFTQ0lJIGFscGhhbnVtZXJpYyoqIGlzIGFuIEFTQ0lJIGRpZ2l0IChzZWUgYGFzY2lpRGlnaXRgKSBvciBBU0NJSSBhbHBoYVxuICogKHNlZSBgYXNjaWlBbHBoYWApLlxuICovXG5leHBvcnQgY29uc3QgYXNjaWlBbHBoYW51bWVyaWMgPSByZWdleENoZWNrKC9bXFxkQS1aYS16XS8pXG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgY2hhcmFjdGVyIGNvZGUgcmVwcmVzZW50cyBBU0NJSSBwdW5jdHVhdGlvbi5cbiAqXG4gKiBBbiAqKkFTQ0lJIHB1bmN0dWF0aW9uKiogaXMgYSBjaGFyYWN0ZXIgaW4gdGhlIGluY2x1c2l2ZSByYW5nZXMgVSswMDIxXG4gKiBFWENMQU1BVElPTiBNQVJLIChgIWApIHRvIFUrMDAyRiBTTEFTSCAoYC9gKSwgVSswMDNBIENPTE9OIChgOmApIHRvIFUrMDA0MCBBVFxuICogU0lHTiAoYEBgKSwgVSswMDVCIExFRlQgU1FVQVJFIEJSQUNLRVQgKGBbYCkgdG8gVSswMDYwIEdSQVZFIEFDQ0VOVFxuICogKGBgIGAgYGApLCBvciBVKzAwN0IgTEVGVCBDVVJMWSBCUkFDRSAoYHtgKSB0byBVKzAwN0UgVElMREUgKGB+YCkuXG4gKi9cbmV4cG9ydCBjb25zdCBhc2NpaVB1bmN0dWF0aW9uID0gcmVnZXhDaGVjaygvWyEtLzotQFstYHstfl0vKVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIGNoYXJhY3RlciBjb2RlIHJlcHJlc2VudHMgYW4gQVNDSUkgYXRleHQuXG4gKlxuICogYXRleHQgaXMgYW4gQVNDSUkgYWxwaGFudW1lcmljIChzZWUgYGFzY2lpQWxwaGFudW1lcmljYCksIG9yIGEgY2hhcmFjdGVyIGluXG4gKiB0aGUgaW5jbHVzaXZlIHJhbmdlcyBVKzAwMjMgTlVNQkVSIFNJR04gKGAjYCkgdG8gVSswMDI3IEFQT1NUUk9QSEUgKGAnYCksXG4gKiBVKzAwMkEgQVNURVJJU0sgKGAqYCksIFUrMDAyQiBQTFVTIFNJR04gKGArYCksIFUrMDAyRCBEQVNIIChgLWApLCBVKzAwMkZcbiAqIFNMQVNIIChgL2ApLCBVKzAwM0QgRVFVQUxTIFRPIChgPWApLCBVKzAwM0YgUVVFU1RJT04gTUFSSyAoYD9gKSwgVSswMDVFXG4gKiBDQVJFVCAoYF5gKSB0byBVKzAwNjAgR1JBVkUgQUNDRU5UIChgYCBgIGBgKSwgb3IgVSswMDdCIExFRlQgQ1VSTFkgQlJBQ0VcbiAqIChge2ApIHRvIFUrMDA3RSBUSUxERSAoYH5gKS5cbiAqXG4gKiBTZWU6XG4gKiAqKlxcW1JGQzUzMjJdKio6XG4gKiBbSW50ZXJuZXQgTWVzc2FnZSBGb3JtYXRdKGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM1MzIyKS5cbiAqIFAuIFJlc25pY2suXG4gKiBJRVRGLlxuICovXG5leHBvcnQgY29uc3QgYXNjaWlBdGV4dCA9IHJlZ2V4Q2hlY2soL1sjLScqK1xcLS05PT9BLVpeLX5dLylcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGEgY2hhcmFjdGVyIGNvZGUgaXMgYW4gQVNDSUkgY29udHJvbCBjaGFyYWN0ZXIuXG4gKlxuICogQW4gKipBU0NJSSBjb250cm9sKiogaXMgYSBjaGFyYWN0ZXIgaW4gdGhlIGluY2x1c2l2ZSByYW5nZSBVKzAwMDAgTlVMTCAoTlVMKVxuICogdG8gVSswMDFGIChVUyksIG9yIFUrMDA3RiAoREVMKS5cbiAqXG4gKiBAcGFyYW0ge0NvZGV9IGNvZGVcbiAqIEByZXR1cm5zIHtjb2RlIGlzIG51bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzY2lpQ29udHJvbChjb2RlKSB7XG4gIHJldHVybiAoXG4gICAgLy8gU3BlY2lhbCB3aGl0ZXNwYWNlIGNvZGVzICh3aGljaCBoYXZlIG5lZ2F0aXZlIHZhbHVlcyksIEMwIGFuZCBDb250cm9sXG4gICAgLy8gY2hhcmFjdGVyIERFTFxuICAgIGNvZGUgIT09IG51bGwgJiYgKGNvZGUgPCBjb2Rlcy5zcGFjZSB8fCBjb2RlID09PSBjb2Rlcy5kZWwpXG4gIClcbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGEgY2hhcmFjdGVyIGNvZGUgaXMgYSBtYXJrZG93biBsaW5lIGVuZGluZyAoc2VlXG4gKiBgbWFya2Rvd25MaW5lRW5kaW5nYCkgb3IgbWFya2Rvd24gc3BhY2UgKHNlZSBgbWFya2Rvd25TcGFjZWApLlxuICpcbiAqIEBwYXJhbSB7Q29kZX0gY29kZVxuICogQHJldHVybnMge2NvZGUgaXMgbnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSB7XG4gIHJldHVybiBjb2RlICE9PSBudWxsICYmIChjb2RlIDwgY29kZXMubnVsIHx8IGNvZGUgPT09IGNvZGVzLnNwYWNlKVxufVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYSBjaGFyYWN0ZXIgY29kZSBpcyBhIG1hcmtkb3duIGxpbmUgZW5kaW5nLlxuICpcbiAqIEEgKiptYXJrZG93biBsaW5lIGVuZGluZyoqIGlzIHRoZSB2aXJ0dWFsIGNoYXJhY3RlcnMgTS0wMDAzIENBUlJJQUdFIFJFVFVSTlxuICogTElORSBGRUVEIChDUkxGKSwgTS0wMDA0IExJTkUgRkVFRCAoTEYpIGFuZCBNLTAwMDUgQ0FSUklBR0UgUkVUVVJOIChDUikuXG4gKlxuICogSW4gbWljcm9tYXJrLCB0aGUgYWN0dWFsIGNoYXJhY3RlciBVKzAwMEEgTElORSBGRUVEIChMRikgYW5kIFUrMDAwRCBDQVJSSUFHRVxuICogUkVUVVJOIChDUikgYXJlIHJlcGxhY2VkIGJ5IHRoZXNlIHZpcnR1YWwgY2hhcmFjdGVycyBkZXBlbmRpbmcgb24gd2hldGhlclxuICogdGhleSBvY2N1cnJlZCB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge0NvZGV9IGNvZGVcbiAqIEByZXR1cm5zIHtjb2RlIGlzIG51bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSB7XG4gIHJldHVybiBjb2RlICE9PSBudWxsICYmIGNvZGUgPCBjb2Rlcy5ob3Jpem9udGFsVGFiXG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhIGNoYXJhY3RlciBjb2RlIGlzIGEgbWFya2Rvd24gc3BhY2UuXG4gKlxuICogQSAqKm1hcmtkb3duIHNwYWNlKiogaXMgdGhlIGNvbmNyZXRlIGNoYXJhY3RlciBVKzAwMjAgU1BBQ0UgKFNQKSBhbmQgdGhlXG4gKiB2aXJ0dWFsIGNoYXJhY3RlcnMgTS0wMDAxIFZJUlRVQUwgU1BBQ0UgKFZTKSBhbmQgTS0wMDAyIEhPUklaT05UQUwgVEFCIChIVCkuXG4gKlxuICogSW4gbWljcm9tYXJrLCB0aGUgYWN0dWFsIGNoYXJhY3RlciBVKzAwMDkgQ0hBUkFDVEVSIFRBQlVMQVRJT04gKEhUKSBpc1xuICogcmVwbGFjZWQgYnkgb25lIE0tMDAwMiBIT1JJWk9OVEFMIFRBQiAoSFQpIGFuZCBiZXR3ZWVuIDAgYW5kIDMgTS0wMDAxIFZJUlRVQUxcbiAqIFNQQUNFIChWUykgY2hhcmFjdGVycywgZGVwZW5kaW5nIG9uIHRoZSBjb2x1bW4gYXQgd2hpY2ggdGhlIHRhYiBvY2N1cnJlZC5cbiAqXG4gKiBAcGFyYW0ge0NvZGV9IGNvZGVcbiAqIEByZXR1cm5zIHtjb2RlIGlzIG51bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcmtkb3duU3BhY2UoY29kZSkge1xuICByZXR1cm4gKFxuICAgIGNvZGUgPT09IGNvZGVzLmhvcml6b250YWxUYWIgfHxcbiAgICBjb2RlID09PSBjb2Rlcy52aXJ0dWFsU3BhY2UgfHxcbiAgICBjb2RlID09PSBjb2Rlcy5zcGFjZVxuICApXG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgY2hhcmFjdGVyIGNvZGUgcmVwcmVzZW50cyBVbmljb2RlIHdoaXRlc3BhY2UuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgZG9lcyBoYW5kbGUgbWljcm9tYXJrIHNwZWNpZmljIG1hcmtkb3duIHdoaXRlc3BhY2UgY2hhcmFjdGVycy5cbiAqIFNlZSBgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZWAgdG8gY2hlY2sgdGhhdC5cbiAqXG4gKiBBICoqVW5pY29kZSB3aGl0ZXNwYWNlKiogaXMgYSBjaGFyYWN0ZXIgaW4gdGhlIFVuaWNvZGUgYFpzYCAoU2VwYXJhdG9yLFxuICogU3BhY2UpIGNhdGVnb3J5LCBvciBVKzAwMDkgQ0hBUkFDVEVSIFRBQlVMQVRJT04gKEhUKSwgVSswMDBBIExJTkUgRkVFRCAoTEYpLFxuICogVSswMDBDIChGRiksIG9yIFUrMDAwRCBDQVJSSUFHRSBSRVRVUk4gKENSKSAoKipcXFtVTklDT0RFXSoqKS5cbiAqXG4gKiBTZWU6XG4gKiAqKlxcW1VOSUNPREVdKio6XG4gKiBbVGhlIFVuaWNvZGUgU3RhbmRhcmRdKGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3ZlcnNpb25zLykuXG4gKiBVbmljb2RlIENvbnNvcnRpdW0uXG4gKi9cbmV4cG9ydCBjb25zdCB1bmljb2RlV2hpdGVzcGFjZSA9IHJlZ2V4Q2hlY2soL1xccy8pXG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciB0aGUgY2hhcmFjdGVyIGNvZGUgcmVwcmVzZW50cyBVbmljb2RlIHB1bmN0dWF0aW9uLlxuICpcbiAqIEEgKipVbmljb2RlIHB1bmN0dWF0aW9uKiogaXMgYSBjaGFyYWN0ZXIgaW4gdGhlIFVuaWNvZGUgYFBjYCAoUHVuY3R1YXRpb24sXG4gKiBDb25uZWN0b3IpLCBgUGRgIChQdW5jdHVhdGlvbiwgRGFzaCksIGBQZWAgKFB1bmN0dWF0aW9uLCBDbG9zZSksIGBQZmBcbiAqIChQdW5jdHVhdGlvbiwgRmluYWwgcXVvdGUpLCBgUGlgIChQdW5jdHVhdGlvbiwgSW5pdGlhbCBxdW90ZSksIGBQb2BcbiAqIChQdW5jdHVhdGlvbiwgT3RoZXIpLCBvciBgUHNgIChQdW5jdHVhdGlvbiwgT3BlbikgY2F0ZWdvcmllcywgb3IgYW4gQVNDSUlcbiAqIHB1bmN0dWF0aW9uIChzZWUgYGFzY2lpUHVuY3R1YXRpb25gKS5cbiAqXG4gKiBTZWU6XG4gKiAqKlxcW1VOSUNPREVdKio6XG4gKiBbVGhlIFVuaWNvZGUgU3RhbmRhcmRdKGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3ZlcnNpb25zLykuXG4gKiBVbmljb2RlIENvbnNvcnRpdW0uXG4gKi9cbi8vIFNpemUgbm90ZTogcmVtb3ZpbmcgQVNDSUkgZnJvbSB0aGUgcmVnZXggYW5kIHVzaW5nIGBhc2NpaVB1bmN0dWF0aW9uYCBoZXJlXG4vLyBJbiBmYWN0IGFkZHMgdG8gdGhlIGJ1bmRsZSBzaXplLlxuZXhwb3J0IGNvbnN0IHVuaWNvZGVQdW5jdHVhdGlvbiA9IHJlZ2V4Q2hlY2sodW5pY29kZVB1bmN0dWF0aW9uUmVnZXgpXG5cbi8qKlxuICogQ3JlYXRlIGEgY29kZSBjaGVjayBmcm9tIGEgcmVnZXguXG4gKlxuICogQHBhcmFtIHtSZWdFeHB9IHJlZ2V4XG4gKiBAcmV0dXJucyB7KGNvZGU6IENvZGUpID0+IGNvZGUgaXMgbnVtYmVyfVxuICovXG5mdW5jdGlvbiByZWdleENoZWNrKHJlZ2V4KSB7XG4gIHJldHVybiBjaGVja1xuXG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIGEgY29kZSBtYXRjaGVzIHRoZSBib3VuZCByZWdleC5cbiAgICpcbiAgICogQHBhcmFtIHtDb2RlfSBjb2RlIENoYXJhY3RlciBjb2RlXG4gICAqIEByZXR1cm5zIHtjb2RlIGlzIG51bWJlcn0gV2hldGhlciB0aGUgY2hhcmFjdGVyIGNvZGUgbWF0Y2hlcyB0aGUgYm91bmQgcmVnZXhcbiAgICovXG4gIGZ1bmN0aW9uIGNoZWNrKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSAhPT0gbnVsbCAmJiByZWdleC50ZXN0KFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkpXG4gIH1cbn1cbiIsIi8vIFRoaXMgbW9kdWxlIGlzIGdlbmVyYXRlZCBieSBgc2NyaXB0L2AuXG4vL1xuLy8gQ29tbW9uTWFyayBoYW5kbGVzIGF0dGVudGlvbiAoZW1waGFzaXMsIHN0cm9uZykgbWFya2VycyBiYXNlZCBvbiB3aGF0IGNvbWVzXG4vLyBiZWZvcmUgb3IgYWZ0ZXIgdGhlbS5cbi8vIE9uZSBzdWNoIGRpZmZlcmVuY2UgaXMgaWYgdGhvc2UgY2hhcmFjdGVycyBhcmUgVW5pY29kZSBwdW5jdHVhdGlvbi5cbi8vIFRoaXMgc2NyaXB0IGlzIGdlbmVyYXRlZCBmcm9tIHRoZSBVbmljb2RlIGRhdGEuXG5leHBvcnQgY29uc3QgdW5pY29kZVB1bmN0dWF0aW9uUmVnZXggPVxuICAvWyEtLzotQFstYHstflxcdTAwQTFcXHUwMEE3XFx1MDBBQlxcdTAwQjZcXHUwMEI3XFx1MDBCQlxcdTAwQkZcXHUwMzdFXFx1MDM4N1xcdTA1NUEtXFx1MDU1RlxcdTA1ODlcXHUwNThBXFx1MDVCRVxcdTA1QzBcXHUwNUMzXFx1MDVDNlxcdTA1RjNcXHUwNUY0XFx1MDYwOVxcdTA2MEFcXHUwNjBDXFx1MDYwRFxcdTA2MUJcXHUwNjFELVxcdTA2MUZcXHUwNjZBLVxcdTA2NkRcXHUwNkQ0XFx1MDcwMC1cXHUwNzBEXFx1MDdGNy1cXHUwN0Y5XFx1MDgzMC1cXHUwODNFXFx1MDg1RVxcdTA5NjRcXHUwOTY1XFx1MDk3MFxcdTA5RkRcXHUwQTc2XFx1MEFGMFxcdTBDNzdcXHUwQzg0XFx1MERGNFxcdTBFNEZcXHUwRTVBXFx1MEU1QlxcdTBGMDQtXFx1MEYxMlxcdTBGMTRcXHUwRjNBLVxcdTBGM0RcXHUwRjg1XFx1MEZEMC1cXHUwRkQ0XFx1MEZEOVxcdTBGREFcXHUxMDRBLVxcdTEwNEZcXHUxMEZCXFx1MTM2MC1cXHUxMzY4XFx1MTQwMFxcdTE2NkVcXHUxNjlCXFx1MTY5Q1xcdTE2RUItXFx1MTZFRFxcdTE3MzVcXHUxNzM2XFx1MTdENC1cXHUxN0Q2XFx1MTdEOC1cXHUxN0RBXFx1MTgwMC1cXHUxODBBXFx1MTk0NFxcdTE5NDVcXHUxQTFFXFx1MUExRlxcdTFBQTAtXFx1MUFBNlxcdTFBQTgtXFx1MUFBRFxcdTFCNUEtXFx1MUI2MFxcdTFCN0RcXHUxQjdFXFx1MUJGQy1cXHUxQkZGXFx1MUMzQi1cXHUxQzNGXFx1MUM3RVxcdTFDN0ZcXHUxQ0MwLVxcdTFDQzdcXHUxQ0QzXFx1MjAxMC1cXHUyMDI3XFx1MjAzMC1cXHUyMDQzXFx1MjA0NS1cXHUyMDUxXFx1MjA1My1cXHUyMDVFXFx1MjA3RFxcdTIwN0VcXHUyMDhEXFx1MjA4RVxcdTIzMDgtXFx1MjMwQlxcdTIzMjlcXHUyMzJBXFx1Mjc2OC1cXHUyNzc1XFx1MjdDNVxcdTI3QzZcXHUyN0U2LVxcdTI3RUZcXHUyOTgzLVxcdTI5OThcXHUyOUQ4LVxcdTI5REJcXHUyOUZDXFx1MjlGRFxcdTJDRjktXFx1MkNGQ1xcdTJDRkVcXHUyQ0ZGXFx1MkQ3MFxcdTJFMDAtXFx1MkUyRVxcdTJFMzAtXFx1MkU0RlxcdTJFNTItXFx1MkU1RFxcdTMwMDEtXFx1MzAwM1xcdTMwMDgtXFx1MzAxMVxcdTMwMTQtXFx1MzAxRlxcdTMwMzBcXHUzMDNEXFx1MzBBMFxcdTMwRkJcXHVBNEZFXFx1QTRGRlxcdUE2MEQtXFx1QTYwRlxcdUE2NzNcXHVBNjdFXFx1QTZGMi1cXHVBNkY3XFx1QTg3NC1cXHVBODc3XFx1QThDRVxcdUE4Q0ZcXHVBOEY4LVxcdUE4RkFcXHVBOEZDXFx1QTkyRVxcdUE5MkZcXHVBOTVGXFx1QTlDMS1cXHVBOUNEXFx1QTlERVxcdUE5REZcXHVBQTVDLVxcdUFBNUZcXHVBQURFXFx1QUFERlxcdUFBRjBcXHVBQUYxXFx1QUJFQlxcdUZEM0VcXHVGRDNGXFx1RkUxMC1cXHVGRTE5XFx1RkUzMC1cXHVGRTUyXFx1RkU1NC1cXHVGRTYxXFx1RkU2M1xcdUZFNjhcXHVGRTZBXFx1RkU2QlxcdUZGMDEtXFx1RkYwM1xcdUZGMDUtXFx1RkYwQVxcdUZGMEMtXFx1RkYwRlxcdUZGMUFcXHVGRjFCXFx1RkYxRlxcdUZGMjBcXHVGRjNCLVxcdUZGM0RcXHVGRjNGXFx1RkY1QlxcdUZGNURcXHVGRjVGLVxcdUZGNjVdL1xuIiwiaW1wb3J0IHtjb25zdGFudHN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb25zdGFudHMuanMnXG5cbi8qKlxuICogTGlrZSBgQXJyYXkjc3BsaWNlYCwgYnV0IHNtYXJ0ZXIgZm9yIGdpYW50IGFycmF5cy5cbiAqXG4gKiBgQXJyYXkjc3BsaWNlYCB0YWtlcyBhbGwgaXRlbXMgdG8gYmUgaW5zZXJ0ZWQgYXMgaW5kaXZpZHVhbCBhcmd1bWVudCB3aGljaFxuICogY2F1c2VzIGEgc3RhY2sgb3ZlcmZsb3cgaW4gVjggd2hlbiB0cnlpbmcgdG8gaW5zZXJ0IDEwMGsgaXRlbXMgZm9yIGluc3RhbmNlLlxuICpcbiAqIE90aGVyd2lzZSwgdGhpcyBkb2VzIG5vdCByZXR1cm4gdGhlIHJlbW92ZWQgaXRlbXMsIGFuZCB0YWtlcyBgaXRlbXNgIGFzIGFuXG4gKiBhcnJheSBpbnN0ZWFkIG9mIHJlc3QgcGFyYW1ldGVycy5cbiAqXG4gKiBAdGVtcGxhdGUge3Vua25vd259IFRcbiAqIEBwYXJhbSB7VFtdfSBsaXN0XG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnRcbiAqIEBwYXJhbSB7bnVtYmVyfSByZW1vdmVcbiAqIEBwYXJhbSB7VFtdfSBpdGVtc1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcGxpY2UobGlzdCwgc3RhcnQsIHJlbW92ZSwgaXRlbXMpIHtcbiAgY29uc3QgZW5kID0gbGlzdC5sZW5ndGhcbiAgbGV0IGNodW5rU3RhcnQgPSAwXG4gIC8qKiBAdHlwZSB7dW5rbm93bltdfSAqL1xuICBsZXQgcGFyYW1ldGVyc1xuXG4gIC8vIE1ha2Ugc3RhcnQgYmV0d2VlbiB6ZXJvIGFuZCBgZW5kYCAoaW5jbHVkZWQpLlxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAtc3RhcnQgPiBlbmQgPyAwIDogZW5kICsgc3RhcnRcbiAgfSBlbHNlIHtcbiAgICBzdGFydCA9IHN0YXJ0ID4gZW5kID8gZW5kIDogc3RhcnRcbiAgfVxuXG4gIHJlbW92ZSA9IHJlbW92ZSA+IDAgPyByZW1vdmUgOiAwXG5cbiAgLy8gTm8gbmVlZCB0byBjaHVuayB0aGUgaXRlbXMgaWYgdGhlcmXigJlzIG9ubHkgYSBjb3VwbGUgKDEwaykgaXRlbXMuXG4gIGlmIChpdGVtcy5sZW5ndGggPCBjb25zdGFudHMudjhNYXhTYWZlQ2h1bmtTaXplKSB7XG4gICAgcGFyYW1ldGVycyA9IEFycmF5LmZyb20oaXRlbXMpXG4gICAgcGFyYW1ldGVycy51bnNoaWZ0KHN0YXJ0LCByZW1vdmUpXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBIdXNoLCBpdOKAmXMgZmluZS5cbiAgICA7W10uc3BsaWNlLmFwcGx5KGxpc3QsIHBhcmFtZXRlcnMpXG4gIH0gZWxzZSB7XG4gICAgLy8gRGVsZXRlIGByZW1vdmVgIGl0ZW1zIHN0YXJ0aW5nIGZyb20gYHN0YXJ0YFxuICAgIGlmIChyZW1vdmUpIFtdLnNwbGljZS5hcHBseShsaXN0LCBbc3RhcnQsIHJlbW92ZV0pXG5cbiAgICAvLyBJbnNlcnQgdGhlIGl0ZW1zIGluIGNodW5rcyB0byBub3QgY2F1c2Ugc3RhY2sgb3ZlcmZsb3dzLlxuICAgIHdoaWxlIChjaHVua1N0YXJ0IDwgaXRlbXMubGVuZ3RoKSB7XG4gICAgICBwYXJhbWV0ZXJzID0gaXRlbXMuc2xpY2UoXG4gICAgICAgIGNodW5rU3RhcnQsXG4gICAgICAgIGNodW5rU3RhcnQgKyBjb25zdGFudHMudjhNYXhTYWZlQ2h1bmtTaXplXG4gICAgICApXG4gICAgICBwYXJhbWV0ZXJzLnVuc2hpZnQoc3RhcnQsIDApXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIEh1c2gsIGl04oCZcyBmaW5lLlxuICAgICAgO1tdLnNwbGljZS5hcHBseShsaXN0LCBwYXJhbWV0ZXJzKVxuXG4gICAgICBjaHVua1N0YXJ0ICs9IGNvbnN0YW50cy52OE1heFNhZmVDaHVua1NpemVcbiAgICAgIHN0YXJ0ICs9IGNvbnN0YW50cy52OE1heFNhZmVDaHVua1NpemVcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBcHBlbmQgYGl0ZW1zYCAoYW4gYXJyYXkpIGF0IHRoZSBlbmQgb2YgYGxpc3RgIChhbm90aGVyIGFycmF5KS5cbiAqIFdoZW4gYGxpc3RgIHdhcyBlbXB0eSwgcmV0dXJucyBgaXRlbXNgIGluc3RlYWQuXG4gKlxuICogVGhpcyBwcmV2ZW50cyBhIHBvdGVudGlhbGx5IGV4cGVuc2l2ZSBvcGVyYXRpb24gd2hlbiBgbGlzdGAgaXMgZW1wdHksXG4gKiBhbmQgYWRkcyBpdGVtcyBpbiBiYXRjaGVzIHRvIHByZXZlbnQgVjggZnJvbSBoYW5naW5nLlxuICpcbiAqIEB0ZW1wbGF0ZSB7dW5rbm93bn0gVFxuICogQHBhcmFtIHtUW119IGxpc3RcbiAqIEBwYXJhbSB7VFtdfSBpdGVtc1xuICogQHJldHVybnMge1RbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHB1c2gobGlzdCwgaXRlbXMpIHtcbiAgaWYgKGxpc3QubGVuZ3RoID4gMCkge1xuICAgIHNwbGljZShsaXN0LCBsaXN0Lmxlbmd0aCwgMCwgaXRlbXMpXG4gICAgcmV0dXJuIGxpc3RcbiAgfVxuXG4gIHJldHVybiBpdGVtc1xufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvZGV9IENvZGVcbiAqL1xuXG5pbXBvcnQge1xuICBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlLFxuICB1bmljb2RlUHVuY3R1YXRpb24sXG4gIHVuaWNvZGVXaGl0ZXNwYWNlXG59IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcbmltcG9ydCB7Y29kZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb2Rlcy5qcydcbmltcG9ydCB7Y29uc3RhbnRzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvY29uc3RhbnRzLmpzJ1xuXG4vKipcbiAqIENsYXNzaWZ5IHdoZXRoZXIgYSBjaGFyYWN0ZXIgY29kZSByZXByZXNlbnRzIHdoaXRlc3BhY2UsIHB1bmN0dWF0aW9uLCBvclxuICogc29tZXRoaW5nIGVsc2UuXG4gKlxuICogVXNlZCBmb3IgYXR0ZW50aW9uIChlbXBoYXNpcywgc3Ryb25nKSwgd2hvc2Ugc2VxdWVuY2VzIGNhbiBvcGVuIG9yIGNsb3NlXG4gKiBiYXNlZCBvbiB0aGUgY2xhc3Mgb2Ygc3Vycm91bmRpbmcgY2hhcmFjdGVycy5cbiAqXG4gKiBOb3RlIHRoYXQgZW9mIChgbnVsbGApIGlzIHNlZW4gYXMgd2hpdGVzcGFjZS5cbiAqXG4gKiBAcGFyYW0ge0NvZGV9IGNvZGVcbiAqIEByZXR1cm5zIHtudW1iZXJ8dW5kZWZpbmVkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xhc3NpZnlDaGFyYWN0ZXIoY29kZSkge1xuICBpZiAoXG4gICAgY29kZSA9PT0gY29kZXMuZW9mIHx8XG4gICAgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSB8fFxuICAgIHVuaWNvZGVXaGl0ZXNwYWNlKGNvZGUpXG4gICkge1xuICAgIHJldHVybiBjb25zdGFudHMuY2hhcmFjdGVyR3JvdXBXaGl0ZXNwYWNlXG4gIH1cblxuICBpZiAodW5pY29kZVB1bmN0dWF0aW9uKGNvZGUpKSB7XG4gICAgcmV0dXJuIGNvbnN0YW50cy5jaGFyYWN0ZXJHcm91cFB1bmN0dWF0aW9uXG4gIH1cbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ob3JtYWxpemVkRXh0ZW5zaW9ufSBOb3JtYWxpemVkRXh0ZW5zaW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkV4dGVuc2lvbn0gRXh0ZW5zaW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvbnN0cnVjdH0gQ29uc3RydWN0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkh0bWxFeHRlbnNpb259IEh0bWxFeHRlbnNpb25cbiAqL1xuXG5pbXBvcnQge3NwbGljZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2h1bmtlZCdcblxuY29uc3QgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eVxuXG4vKipcbiAqIENvbWJpbmUgc2V2ZXJhbCBzeW50YXggZXh0ZW5zaW9ucyBpbnRvIG9uZS5cbiAqXG4gKiBAcGFyYW0ge0V4dGVuc2lvbltdfSBleHRlbnNpb25zIExpc3Qgb2Ygc3ludGF4IGV4dGVuc2lvbnMuXG4gKiBAcmV0dXJucyB7Tm9ybWFsaXplZEV4dGVuc2lvbn0gQSBzaW5nbGUgY29tYmluZWQgZXh0ZW5zaW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZUV4dGVuc2lvbnMoZXh0ZW5zaW9ucykge1xuICAvKiogQHR5cGUge05vcm1hbGl6ZWRFeHRlbnNpb259ICovXG4gIGNvbnN0IGFsbCA9IHt9XG4gIGxldCBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBleHRlbnNpb25zLmxlbmd0aCkge1xuICAgIHN5bnRheEV4dGVuc2lvbihhbGwsIGV4dGVuc2lvbnNbaW5kZXhdKVxuICB9XG5cbiAgcmV0dXJuIGFsbFxufVxuXG4vKipcbiAqIE1lcmdlIGBleHRlbnNpb25gIGludG8gYGFsbGAuXG4gKlxuICogQHBhcmFtIHtOb3JtYWxpemVkRXh0ZW5zaW9ufSBhbGwgRXh0ZW5zaW9uIHRvIG1lcmdlIGludG8uXG4gKiBAcGFyYW0ge0V4dGVuc2lvbn0gZXh0ZW5zaW9uIEV4dGVuc2lvbiB0byBtZXJnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBzeW50YXhFeHRlbnNpb24oYWxsLCBleHRlbnNpb24pIHtcbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIGxldCBob29rXG5cbiAgZm9yIChob29rIGluIGV4dGVuc2lvbikge1xuICAgIGNvbnN0IG1heWJlID0gaGFzT3duUHJvcGVydHkuY2FsbChhbGwsIGhvb2spID8gYWxsW2hvb2tdIDogdW5kZWZpbmVkXG4gICAgY29uc3QgbGVmdCA9IG1heWJlIHx8IChhbGxbaG9va10gPSB7fSlcbiAgICBjb25zdCByaWdodCA9IGV4dGVuc2lvbltob29rXVxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIGxldCBjb2RlXG5cbiAgICBmb3IgKGNvZGUgaW4gcmlnaHQpIHtcbiAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChsZWZ0LCBjb2RlKSkgbGVmdFtjb2RlXSA9IFtdXG4gICAgICBjb25zdCB2YWx1ZSA9IHJpZ2h0W2NvZGVdXG4gICAgICBjb25zdHJ1Y3RzKFxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIExvb2tzIGxpa2UgYSBsaXN0LlxuICAgICAgICBsZWZ0W2NvZGVdLFxuICAgICAgICBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogdmFsdWUgPyBbdmFsdWVdIDogW11cbiAgICAgIClcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSBgbGlzdGAgaW50byBgZXhpc3RpbmdgIChib3RoIGxpc3RzIG9mIGNvbnN0cnVjdHMpLlxuICogTXV0YXRlcyBgZXhpc3RpbmdgLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bltdfSBleGlzdGluZ1xuICogQHBhcmFtIHt1bmtub3duW119IGxpc3RcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBjb25zdHJ1Y3RzKGV4aXN0aW5nLCBsaXN0KSB7XG4gIGxldCBpbmRleCA9IC0xXG4gIC8qKiBAdHlwZSB7dW5rbm93bltdfSAqL1xuICBjb25zdCBiZWZvcmUgPSBbXVxuXG4gIHdoaWxlICgrK2luZGV4IDwgbGlzdC5sZW5ndGgpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIExvb2tzIGxpa2UgYW4gb2JqZWN0LlxuICAgIDsobGlzdFtpbmRleF0uYWRkID09PSAnYWZ0ZXInID8gZXhpc3RpbmcgOiBiZWZvcmUpLnB1c2gobGlzdFtpbmRleF0pXG4gIH1cblxuICBzcGxpY2UoZXhpc3RpbmcsIDAsIDAsIGJlZm9yZSlcbn1cblxuLyoqXG4gKiBDb21iaW5lIHNldmVyYWwgSFRNTCBleHRlbnNpb25zIGludG8gb25lLlxuICpcbiAqIEBwYXJhbSB7SHRtbEV4dGVuc2lvbltdfSBodG1sRXh0ZW5zaW9ucyBMaXN0IG9mIEhUTUwgZXh0ZW5zaW9ucy5cbiAqIEByZXR1cm5zIHtIdG1sRXh0ZW5zaW9ufSBBIHNpbmdsZSBjb21iaW5lZCBleHRlbnNpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lSHRtbEV4dGVuc2lvbnMoaHRtbEV4dGVuc2lvbnMpIHtcbiAgLyoqIEB0eXBlIHtIdG1sRXh0ZW5zaW9ufSAqL1xuICBjb25zdCBoYW5kbGVycyA9IHt9XG4gIGxldCBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBodG1sRXh0ZW5zaW9ucy5sZW5ndGgpIHtcbiAgICBodG1sRXh0ZW5zaW9uKGhhbmRsZXJzLCBodG1sRXh0ZW5zaW9uc1tpbmRleF0pXG4gIH1cblxuICByZXR1cm4gaGFuZGxlcnNcbn1cblxuLyoqXG4gKiBNZXJnZSBgZXh0ZW5zaW9uYCBpbnRvIGBhbGxgLlxuICpcbiAqIEBwYXJhbSB7SHRtbEV4dGVuc2lvbn0gYWxsIEV4dGVuc2lvbiB0byBtZXJnZSBpbnRvLlxuICogQHBhcmFtIHtIdG1sRXh0ZW5zaW9ufSBleHRlbnNpb24gRXh0ZW5zaW9uIHRvIG1lcmdlLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIGh0bWxFeHRlbnNpb24oYWxsLCBleHRlbnNpb24pIHtcbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIGxldCBob29rXG5cbiAgZm9yIChob29rIGluIGV4dGVuc2lvbikge1xuICAgIGNvbnN0IG1heWJlID0gaGFzT3duUHJvcGVydHkuY2FsbChhbGwsIGhvb2spID8gYWxsW2hvb2tdIDogdW5kZWZpbmVkXG4gICAgY29uc3QgbGVmdCA9IG1heWJlIHx8IChhbGxbaG9va10gPSB7fSlcbiAgICBjb25zdCByaWdodCA9IGV4dGVuc2lvbltob29rXVxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIGxldCB0eXBlXG5cbiAgICBpZiAocmlnaHQpIHtcbiAgICAgIGZvciAodHlwZSBpbiByaWdodCkge1xuICAgICAgICBsZWZ0W3R5cGVdID0gcmlnaHRbdHlwZV1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7Y29kZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb2Rlcy5qcydcbmltcG9ydCB7dmFsdWVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvdmFsdWVzLmpzJ1xuXG4vKipcbiAqIFR1cm4gdGhlIG51bWJlciAoaW4gc3RyaW5nIGZvcm0gYXMgZWl0aGVyIGhleGEtIG9yIHBsYWluIGRlY2ltYWwpIGNvbWluZyBmcm9tXG4gKiBhIG51bWVyaWMgY2hhcmFjdGVyIHJlZmVyZW5jZSBpbnRvIGEgY2hhcmFjdGVyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogICBWYWx1ZSB0byBkZWNvZGUuXG4gKiBAcGFyYW0ge251bWJlcn0gYmFzZVxuICogICBOdW1lcmljIGJhc2UuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlTnVtZXJpY0NoYXJhY3RlclJlZmVyZW5jZSh2YWx1ZSwgYmFzZSkge1xuICBjb25zdCBjb2RlID0gTnVtYmVyLnBhcnNlSW50KHZhbHVlLCBiYXNlKVxuXG4gIGlmIChcbiAgICAvLyBDMCBleGNlcHQgZm9yIEhULCBMRiwgRkYsIENSLCBzcGFjZVxuICAgIGNvZGUgPCBjb2Rlcy5odCB8fFxuICAgIGNvZGUgPT09IGNvZGVzLnZ0IHx8XG4gICAgKGNvZGUgPiBjb2Rlcy5jciAmJiBjb2RlIDwgY29kZXMuc3BhY2UpIHx8XG4gICAgLy8gQ29udHJvbCBjaGFyYWN0ZXIgKERFTCkgb2YgdGhlIGJhc2ljIGJsb2NrIGFuZCBDMSBjb250cm9scy5cbiAgICAoY29kZSA+IGNvZGVzLnRpbGRlICYmIGNvZGUgPCAxNjApIHx8XG4gICAgLy8gTG9uZSBoaWdoIHN1cnJvZ2F0ZXMgYW5kIGxvdyBzdXJyb2dhdGVzLlxuICAgIChjb2RlID4gNTUyOTUgJiYgY29kZSA8IDU3MzQ0KSB8fFxuICAgIC8vIE5vbmNoYXJhY3RlcnMuXG4gICAgKGNvZGUgPiA2NDk3NSAmJiBjb2RlIDwgNjUwMDgpIHx8XG4gICAgKGNvZGUgJiA2NTUzNSkgPT09IDY1NTM1IHx8XG4gICAgKGNvZGUgJiA2NTUzNSkgPT09IDY1NTM0IHx8XG4gICAgLy8gT3V0IG9mIHJhbmdlXG4gICAgY29kZSA+IDExMTQxMTFcbiAgKSB7XG4gICAgcmV0dXJuIHZhbHVlcy5yZXBsYWNlbWVudENoYXJhY3RlclxuICB9XG5cbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSlcbn1cbiIsImltcG9ydCB7ZGVjb2RlTmFtZWRDaGFyYWN0ZXJSZWZlcmVuY2V9IGZyb20gJ2RlY29kZS1uYW1lZC1jaGFyYWN0ZXItcmVmZXJlbmNlJ1xuaW1wb3J0IHtkZWNvZGVOdW1lcmljQ2hhcmFjdGVyUmVmZXJlbmNlfSBmcm9tICdtaWNyb21hcmstdXRpbC1kZWNvZGUtbnVtZXJpYy1jaGFyYWN0ZXItcmVmZXJlbmNlJ1xuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvZGVzLmpzJ1xuaW1wb3J0IHtjb25zdGFudHN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb25zdGFudHMuanMnXG5cbmNvbnN0IGNoYXJhY3RlckVzY2FwZU9yUmVmZXJlbmNlID1cbiAgL1xcXFwoWyEtLzotQFstYHstfl0pfCYoIyg/OlxcZHsxLDd9fHhbXFxkYS1mXXsxLDZ9KXxbXFxkYS16XXsxLDMxfSk7L2dpXG5cbi8qKlxuICogVXRpbGl0eSB0byBkZWNvZGUgbWFya2Rvd24gc3RyaW5ncyAod2hpY2ggb2NjdXIgaW4gcGxhY2VzIHN1Y2ggYXMgZmVuY2VkXG4gKiBjb2RlIGluZm8gc3RyaW5ncywgZGVzdGluYXRpb25zLCBsYWJlbHMsIGFuZCB0aXRsZXMpLlxuICogVGhlIOKAnHN0cmluZ+KAnSBjb250ZW50IHR5cGUgYWxsb3dzIGNoYXJhY3RlciBlc2NhcGVzIGFuZCAtcmVmZXJlbmNlcy5cbiAqIFRoaXMgZGVjb2RlcyB0aG9zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoY2hhcmFjdGVyRXNjYXBlT3JSZWZlcmVuY2UsIGRlY29kZSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gJDBcbiAqIEBwYXJhbSB7c3RyaW5nfSAkMVxuICogQHBhcmFtIHtzdHJpbmd9ICQyXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBkZWNvZGUoJDAsICQxLCAkMikge1xuICBpZiAoJDEpIHtcbiAgICAvLyBFc2NhcGUuXG4gICAgcmV0dXJuICQxXG4gIH1cblxuICAvLyBSZWZlcmVuY2UuXG4gIGNvbnN0IGhlYWQgPSAkMi5jaGFyQ29kZUF0KDApXG5cbiAgaWYgKGhlYWQgPT09IGNvZGVzLm51bWJlclNpZ24pIHtcbiAgICBjb25zdCBoZWFkID0gJDIuY2hhckNvZGVBdCgxKVxuICAgIGNvbnN0IGhleCA9IGhlYWQgPT09IGNvZGVzLmxvd2VyY2FzZVggfHwgaGVhZCA9PT0gY29kZXMudXBwZXJjYXNlWFxuICAgIHJldHVybiBkZWNvZGVOdW1lcmljQ2hhcmFjdGVyUmVmZXJlbmNlKFxuICAgICAgJDIuc2xpY2UoaGV4ID8gMiA6IDEpLFxuICAgICAgaGV4ID8gY29uc3RhbnRzLm51bWVyaWNCYXNlSGV4YWRlY2ltYWwgOiBjb25zdGFudHMubnVtZXJpY0Jhc2VEZWNpbWFsXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZU5hbWVkQ2hhcmFjdGVyUmVmZXJlbmNlKCQyKSB8fCAkMFxufVxuIiwiY29uc3QgY2hhcmFjdGVyUmVmZXJlbmNlcyA9IHsnXCInOiAncXVvdCcsICcmJzogJ2FtcCcsICc8JzogJ2x0JywgJz4nOiAnZ3QnfVxuXG4vKipcbiAqIEVuY29kZSBvbmx5IHRoZSBkYW5nZXJvdXMgSFRNTCBjaGFyYWN0ZXJzLlxuICpcbiAqIFRoaXMgZW5zdXJlcyB0aGF0IGNlcnRhaW4gY2hhcmFjdGVycyB3aGljaCBoYXZlIHNwZWNpYWwgbWVhbmluZyBpbiBIVE1MIGFyZVxuICogZGVhbHQgd2l0aC5cbiAqIFRlY2huaWNhbGx5LCB3ZSBjYW4gc2tpcCBgPmAgYW5kIGBcImAgaW4gbWFueSBjYXNlcywgYnV0IENNIGluY2x1ZGVzIHRoZW0uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bXCImPD5dL2csIHJlcGxhY2UpXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZSh2YWx1ZSkge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgSHVzaCwgaXTigJlzIGZpbmUuXG4gICAgcmV0dXJuICcmJyArIGNoYXJhY3RlclJlZmVyZW5jZXNbdmFsdWVdICsgJzsnXG4gIH1cbn1cbiIsIi8qKlxuICogTGlzdCBvZiBsb3dlcmNhc2UgSFRNTCB0YWcgbmFtZXMgd2hpY2ggd2hlbiBwYXJzaW5nIEhUTUwgKGZsb3cpLCByZXN1bHRcbiAqIGluIG1vcmUgcmVsYXhlZCBydWxlcyAoY29uZGl0aW9uIDYpOiBiZWNhdXNlIHRoZXkgYXJlIGtub3duIGJsb2NrcywgdGhlXG4gKiBIVE1MLWxpa2Ugc3ludGF4IGRvZXNu4oCZdCBoYXZlIHRvIGJlIHN0cmljdGx5IHBhcnNlZC5cbiAqIEZvciB0YWcgbmFtZXMgbm90IGluIHRoaXMgbGlzdCwgYSBtb3JlIHN0cmljdCBhbGdvcml0aG0gKGNvbmRpdGlvbiA3KSBpcyB1c2VkXG4gKiB0byBkZXRlY3Qgd2hldGhlciB0aGUgSFRNTC1saWtlIHN5bnRheCBpcyBzZWVuIGFzIEhUTUwgKGZsb3cpIG9yIG5vdC5cbiAqXG4gKiBUaGlzIGlzIGNvcGllZCBmcm9tOlxuICogPGh0dHBzOi8vc3BlYy5jb21tb25tYXJrLm9yZy8wLjMwLyNodG1sLWJsb2Nrcz4uXG4gKi9cbmV4cG9ydCBjb25zdCBodG1sQmxvY2tOYW1lcyA9IFtcbiAgJ2FkZHJlc3MnLFxuICAnYXJ0aWNsZScsXG4gICdhc2lkZScsXG4gICdiYXNlJyxcbiAgJ2Jhc2Vmb250JyxcbiAgJ2Jsb2NrcXVvdGUnLFxuICAnYm9keScsXG4gICdjYXB0aW9uJyxcbiAgJ2NlbnRlcicsXG4gICdjb2wnLFxuICAnY29sZ3JvdXAnLFxuICAnZGQnLFxuICAnZGV0YWlscycsXG4gICdkaWFsb2cnLFxuICAnZGlyJyxcbiAgJ2RpdicsXG4gICdkbCcsXG4gICdkdCcsXG4gICdmaWVsZHNldCcsXG4gICdmaWdjYXB0aW9uJyxcbiAgJ2ZpZ3VyZScsXG4gICdmb290ZXInLFxuICAnZm9ybScsXG4gICdmcmFtZScsXG4gICdmcmFtZXNldCcsXG4gICdoMScsXG4gICdoMicsXG4gICdoMycsXG4gICdoNCcsXG4gICdoNScsXG4gICdoNicsXG4gICdoZWFkJyxcbiAgJ2hlYWRlcicsXG4gICdocicsXG4gICdodG1sJyxcbiAgJ2lmcmFtZScsXG4gICdsZWdlbmQnLFxuICAnbGknLFxuICAnbGluaycsXG4gICdtYWluJyxcbiAgJ21lbnUnLFxuICAnbWVudWl0ZW0nLFxuICAnbmF2JyxcbiAgJ25vZnJhbWVzJyxcbiAgJ29sJyxcbiAgJ29wdGdyb3VwJyxcbiAgJ29wdGlvbicsXG4gICdwJyxcbiAgJ3BhcmFtJyxcbiAgJ3NlY3Rpb24nLFxuICAnc3VtbWFyeScsXG4gICd0YWJsZScsXG4gICd0Ym9keScsXG4gICd0ZCcsXG4gICd0Zm9vdCcsXG4gICd0aCcsXG4gICd0aGVhZCcsXG4gICd0aXRsZScsXG4gICd0cicsXG4gICd0cmFjaycsXG4gICd1bCdcbl1cblxuLyoqXG4gKiBMaXN0IG9mIGxvd2VyY2FzZSBIVE1MIHRhZyBuYW1lcyB3aGljaCB3aGVuIHBhcnNpbmcgSFRNTCAoZmxvdyksIHJlc3VsdCBpblxuICogSFRNTCB0aGF0IGNhbiBpbmNsdWRlIGxpbmVzIHcvbyBleGl0aW5nLCB1bnRpbCBhIGNsb3NpbmcgdGFnIGFsc28gaW4gdGhpc1xuICogbGlzdCBpcyBmb3VuZCAoY29uZGl0aW9uIDEpLlxuICpcbiAqIFRoaXMgbW9kdWxlIGlzIGNvcGllZCBmcm9tOlxuICogPGh0dHBzOi8vc3BlYy5jb21tb25tYXJrLm9yZy8wLjMwLyNodG1sLWJsb2Nrcz4uXG4gKlxuICogTm90ZSB0aGF0IGB0ZXh0YXJlYWAgd2FzIGFkZGVkIGluIGBDb21tb25NYXJrQDAuMzBgLlxuICovXG5leHBvcnQgY29uc3QgaHRtbFJhd05hbWVzID0gWydwcmUnLCAnc2NyaXB0JywgJ3N0eWxlJywgJ3RleHRhcmVhJ11cbiIsImltcG9ydCB7dmFsdWVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvdmFsdWVzLmpzJ1xuXG4vKipcbiAqIE5vcm1hbGl6ZSBhbiBpZGVudGlmaWVyIChzdWNoIGFzIHVzZWQgaW4gZGVmaW5pdGlvbnMpLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUlkZW50aWZpZXIodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICB2YWx1ZVxuICAgICAgLy8gQ29sbGFwc2UgTWFya2Rvd24gd2hpdGVzcGFjZS5cbiAgICAgIC5yZXBsYWNlKC9bXFx0XFxuXFxyIF0rL2csIHZhbHVlcy5zcGFjZSlcbiAgICAgIC8vIFRyaW0uXG4gICAgICAucmVwbGFjZSgvXiB8ICQvZywgJycpXG4gICAgICAvLyBTb21lIGNoYXJhY3RlcnMgYXJlIGNvbnNpZGVyZWQg4oCcdXBwZXJjYXNl4oCdLCBidXQgaWYgdGhlaXIgbG93ZXJjYXNlXG4gICAgICAvLyBjb3VudGVycGFydCBpcyB1cHBlcmNhc2VkIHdpbGwgcmVzdWx0IGluIGEgZGlmZmVyZW50IHVwcGVyY2FzZVxuICAgICAgLy8gY2hhcmFjdGVyLlxuICAgICAgLy8gSGVuY2UsIHRvIGdldCB0aGF0IGZvcm0sIHdlIHBlcmZvcm0gYm90aCBsb3dlci0gYW5kIHVwcGVyY2FzZS5cbiAgICAgIC8vIFVwcGVyIGNhc2UgbWFrZXMgc3VyZSBrZXlzIHdpbGwgbm90IGludGVyYWN0IHdpdGggZGVmYXVsdCBwcm90b3R5cGFsXG4gICAgICAvLyBtZXRob2RzOiBubyBtZXRob2QgaXMgdXBwZXJjYXNlLlxuICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgIC50b1VwcGVyQ2FzZSgpXG4gIClcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Ub2tlbml6ZUNvbnRleHR9IFRva2VuaXplQ29udGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5FdmVudH0gRXZlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuUmVzb2x2ZXJ9IFJlc29sdmVyXG4gKi9cblxuLyoqXG4gKiBDYWxsIGFsbCBgcmVzb2x2ZUFsbGBzLlxuICpcbiAqIEBwYXJhbSB7e3Jlc29sdmVBbGw/OiBSZXNvbHZlcn1bXX0gY29uc3RydWN0c1xuICogQHBhcmFtIHtFdmVudFtdfSBldmVudHNcbiAqIEBwYXJhbSB7VG9rZW5pemVDb250ZXh0fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RXZlbnRbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVBbGwoY29uc3RydWN0cywgZXZlbnRzLCBjb250ZXh0KSB7XG4gIC8qKiBAdHlwZSB7UmVzb2x2ZXJbXX0gKi9cbiAgY29uc3QgY2FsbGVkID0gW11cbiAgbGV0IGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IGNvbnN0cnVjdHMubGVuZ3RoKSB7XG4gICAgY29uc3QgcmVzb2x2ZSA9IGNvbnN0cnVjdHNbaW5kZXhdLnJlc29sdmVBbGxcblxuICAgIGlmIChyZXNvbHZlICYmICFjYWxsZWQuaW5jbHVkZXMocmVzb2x2ZSkpIHtcbiAgICAgIGV2ZW50cyA9IHJlc29sdmUoZXZlbnRzLCBjb250ZXh0KVxuICAgICAgY2FsbGVkLnB1c2gocmVzb2x2ZSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXZlbnRzXG59XG4iLCJpbXBvcnQge2FzY2lpQWxwaGFudW1lcmljfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge2VuY29kZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtZW5jb2RlJ1xuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvZGVzLmpzJ1xuaW1wb3J0IHt2YWx1ZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC92YWx1ZXMuanMnXG5cbi8qKlxuICogTWFrZSBhIHZhbHVlIHNhZmUgZm9yIGluamVjdGlvbiBhcyBhIFVSTC5cbiAqXG4gKiBUaGlzIGVuY29kZXMgdW5zYWZlIGNoYXJhY3RlcnMgd2l0aCBwZXJjZW50LWVuY29kaW5nIGFuZCBza2lwcyBhbHJlYWR5XG4gKiBlbmNvZGVkIHNlcXVlbmNlcyAoc2VlIGBub3JtYWxpemVVcmlgIGJlbG93KS5cbiAqIEZ1cnRoZXIgdW5zYWZlIGNoYXJhY3RlcnMgYXJlIGVuY29kZWQgYXMgY2hhcmFjdGVyIHJlZmVyZW5jZXMgKHNlZVxuICogYG1pY3JvbWFyay11dGlsLWVuY29kZWApLlxuICpcbiAqIFRoZW4sIGEgcmVnZXggb2YgYWxsb3dlZCBwcm90b2NvbHMgY2FuIGJlIGdpdmVuLCBpbiB3aGljaCBjYXNlIHRoZSBVUkwgaXNcbiAqIHNhbml0aXplZC5cbiAqIEZvciBleGFtcGxlLCBgL14oaHR0cHM/fGlyY3M/fG1haWx0b3x4bXBwKSQvaWAgY2FuIGJlIHVzZWQgZm9yIGBhW2hyZWZdYCxcbiAqIG9yIGAvXmh0dHBzPyQvaWAgZm9yIGBpbWdbc3JjXWAuXG4gKiBJZiB0aGUgVVJMIGluY2x1ZGVzIGFuIHVua25vd24gcHJvdG9jb2wgKG9uZSBub3QgbWF0Y2hlZCBieSBgcHJvdG9jb2xgLCBzdWNoXG4gKiBhcyBhIGRhbmdlcm91cyBleGFtcGxlLCBgamF2YXNjcmlwdDpgKSwgdGhlIHZhbHVlIGlzIGlnbm9yZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8dW5kZWZpbmVkfSB1cmxcbiAqIEBwYXJhbSB7UmVnRXhwfSBbcHJvdG9jb2xdXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2FuaXRpemVVcmkodXJsLCBwcm90b2NvbCkge1xuICBjb25zdCB2YWx1ZSA9IGVuY29kZShub3JtYWxpemVVcmkodXJsIHx8ICcnKSlcblxuICBpZiAoIXByb3RvY29sKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICBjb25zdCBjb2xvbiA9IHZhbHVlLmluZGV4T2YoJzonKVxuICBjb25zdCBxdWVzdGlvbk1hcmsgPSB2YWx1ZS5pbmRleE9mKCc/JylcbiAgY29uc3QgbnVtYmVyU2lnbiA9IHZhbHVlLmluZGV4T2YoJyMnKVxuICBjb25zdCBzbGFzaCA9IHZhbHVlLmluZGV4T2YoJy8nKVxuXG4gIGlmIChcbiAgICAvLyBJZiB0aGVyZSBpcyBubyBwcm90b2NvbCwgaXTigJlzIHJlbGF0aXZlLlxuICAgIGNvbG9uIDwgMCB8fFxuICAgIC8vIElmIHRoZSBmaXJzdCBjb2xvbiBpcyBhZnRlciBhIGA/YCwgYCNgLCBvciBgL2AsIGl04oCZcyBub3QgYSBwcm90b2NvbC5cbiAgICAoc2xhc2ggPiAtMSAmJiBjb2xvbiA+IHNsYXNoKSB8fFxuICAgIChxdWVzdGlvbk1hcmsgPiAtMSAmJiBjb2xvbiA+IHF1ZXN0aW9uTWFyaykgfHxcbiAgICAobnVtYmVyU2lnbiA+IC0xICYmIGNvbG9uID4gbnVtYmVyU2lnbikgfHxcbiAgICAvLyBJdCBpcyBhIHByb3RvY29sLCBpdCBzaG91bGQgYmUgYWxsb3dlZC5cbiAgICBwcm90b2NvbC50ZXN0KHZhbHVlLnNsaWNlKDAsIGNvbG9uKSlcbiAgKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICByZXR1cm4gJydcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSBVUkwgKHN1Y2ggYXMgdXNlZCBpbiBkZWZpbml0aW9ucykuXG4gKlxuICogRW5jb2RlIHVuc2FmZSBjaGFyYWN0ZXJzIHdpdGggcGVyY2VudC1lbmNvZGluZywgc2tpcHBpbmcgYWxyZWFkeSBlbmNvZGVkXG4gKiBzZXF1ZW5jZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplVXJpKHZhbHVlKSB7XG4gIC8qKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn0gKi9cbiAgY29uc3QgcmVzdWx0ID0gW11cbiAgbGV0IGluZGV4ID0gLTFcbiAgbGV0IHN0YXJ0ID0gMFxuICBsZXQgc2tpcCA9IDBcblxuICB3aGlsZSAoKytpbmRleCA8IHZhbHVlLmxlbmd0aCkge1xuICAgIGNvbnN0IGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KGluZGV4KVxuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIGxldCByZXBsYWNlID0gJydcblxuICAgIC8vIEEgY29ycmVjdCBwZXJjZW50IGVuY29kZWQgdmFsdWUuXG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gY29kZXMucGVyY2VudFNpZ24gJiZcbiAgICAgIGFzY2lpQWxwaGFudW1lcmljKHZhbHVlLmNoYXJDb2RlQXQoaW5kZXggKyAxKSkgJiZcbiAgICAgIGFzY2lpQWxwaGFudW1lcmljKHZhbHVlLmNoYXJDb2RlQXQoaW5kZXggKyAyKSlcbiAgICApIHtcbiAgICAgIHNraXAgPSAyXG4gICAgfVxuICAgIC8vIEFTQ0lJLlxuICAgIGVsc2UgaWYgKGNvZGUgPCAxMjgpIHtcbiAgICAgIGlmICghL1shIyQmLTs9Py1aX2Eten5dLy50ZXN0KFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkpKSB7XG4gICAgICAgIHJlcGxhY2UgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIEFzdHJhbC5cbiAgICBlbHNlIGlmIChjb2RlID4gNTUyOTUgJiYgY29kZSA8IDU3MzQ0KSB7XG4gICAgICBjb25zdCBuZXh0ID0gdmFsdWUuY2hhckNvZGVBdChpbmRleCArIDEpXG5cbiAgICAgIC8vIEEgY29ycmVjdCBzdXJyb2dhdGUgcGFpci5cbiAgICAgIGlmIChjb2RlIDwgNTYzMjAgJiYgbmV4dCA+IDU2MzE5ICYmIG5leHQgPCA1NzM0NCkge1xuICAgICAgICByZXBsYWNlID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlLCBuZXh0KVxuICAgICAgICBza2lwID0gMVxuICAgICAgfVxuICAgICAgLy8gTG9uZSBzdXJyb2dhdGUuXG4gICAgICBlbHNlIHtcbiAgICAgICAgcmVwbGFjZSA9IHZhbHVlcy5yZXBsYWNlbWVudENoYXJhY3RlclxuICAgICAgfVxuICAgIH1cbiAgICAvLyBVbmljb2RlLlxuICAgIGVsc2Uge1xuICAgICAgcmVwbGFjZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSlcbiAgICB9XG5cbiAgICBpZiAocmVwbGFjZSkge1xuICAgICAgcmVzdWx0LnB1c2godmFsdWUuc2xpY2Uoc3RhcnQsIGluZGV4KSwgZW5jb2RlVVJJQ29tcG9uZW50KHJlcGxhY2UpKVxuICAgICAgc3RhcnQgPSBpbmRleCArIHNraXAgKyAxXG4gICAgICByZXBsYWNlID0gJydcbiAgICB9XG5cbiAgICBpZiAoc2tpcCkge1xuICAgICAgaW5kZXggKz0gc2tpcFxuICAgICAgc2tpcCA9IDBcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0LmpvaW4oJycpICsgdmFsdWUuc2xpY2Uoc3RhcnQpXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW59IFRva2VuXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNodW5rfSBDaHVua1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5FdmVudH0gRXZlbnRcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAndXZ1L2Fzc2VydCdcbmltcG9ydCB7c3BsaWNlfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaHVua2VkJ1xuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvZGVzLmpzJ1xuaW1wb3J0IHt0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL3R5cGVzLmpzJ1xuXG4vKipcbiAqIFRva2VuaXplIHN1YmNvbnRlbnQuXG4gKlxuICogQHBhcmFtIHtFdmVudFtdfSBldmVudHNcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VidG9rZW5pemUoZXZlbnRzKSB7XG4gIC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgbnVtYmVyPn0gKi9cbiAgY29uc3QganVtcHMgPSB7fVxuICBsZXQgaW5kZXggPSAtMVxuICAvKiogQHR5cGUge0V2ZW50fSAqL1xuICBsZXQgZXZlbnRcbiAgLyoqIEB0eXBlIHtudW1iZXJ8dW5kZWZpbmVkfSAqL1xuICBsZXQgbGluZUluZGV4XG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICBsZXQgb3RoZXJJbmRleFxuICAvKiogQHR5cGUge0V2ZW50fSAqL1xuICBsZXQgb3RoZXJFdmVudFxuICAvKiogQHR5cGUge0V2ZW50W119ICovXG4gIGxldCBwYXJhbWV0ZXJzXG4gIC8qKiBAdHlwZSB7RXZlbnRbXX0gKi9cbiAgbGV0IHN1YmV2ZW50c1xuICAvKiogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfSAqL1xuICBsZXQgbW9yZVxuXG4gIHdoaWxlICgrK2luZGV4IDwgZXZlbnRzLmxlbmd0aCkge1xuICAgIHdoaWxlIChpbmRleCBpbiBqdW1wcykge1xuICAgICAgaW5kZXggPSBqdW1wc1tpbmRleF1cbiAgICB9XG5cbiAgICBldmVudCA9IGV2ZW50c1tpbmRleF1cblxuICAgIC8vIEFkZCBhIGhvb2sgZm9yIHRoZSBHRk0gdGFza2xpc3QgZXh0ZW5zaW9uLCB3aGljaCBuZWVkcyB0byBrbm93IGlmIHRleHRcbiAgICAvLyBpcyBpbiB0aGUgZmlyc3QgY29udGVudCBvZiBhIGxpc3QgaXRlbS5cbiAgICBpZiAoXG4gICAgICBpbmRleCAmJlxuICAgICAgZXZlbnRbMV0udHlwZSA9PT0gdHlwZXMuY2h1bmtGbG93ICYmXG4gICAgICBldmVudHNbaW5kZXggLSAxXVsxXS50eXBlID09PSB0eXBlcy5saXN0SXRlbVByZWZpeFxuICAgICkge1xuICAgICAgYXNzZXJ0KGV2ZW50WzFdLl90b2tlbml6ZXIsICdleHBlY3RlZCBgX3Rva2VuaXplcmAgb24gc3VidG9rZW5zJylcbiAgICAgIHN1YmV2ZW50cyA9IGV2ZW50WzFdLl90b2tlbml6ZXIuZXZlbnRzXG4gICAgICBvdGhlckluZGV4ID0gMFxuXG4gICAgICBpZiAoXG4gICAgICAgIG90aGVySW5kZXggPCBzdWJldmVudHMubGVuZ3RoICYmXG4gICAgICAgIHN1YmV2ZW50c1tvdGhlckluZGV4XVsxXS50eXBlID09PSB0eXBlcy5saW5lRW5kaW5nQmxhbmtcbiAgICAgICkge1xuICAgICAgICBvdGhlckluZGV4ICs9IDJcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBvdGhlckluZGV4IDwgc3ViZXZlbnRzLmxlbmd0aCAmJlxuICAgICAgICBzdWJldmVudHNbb3RoZXJJbmRleF1bMV0udHlwZSA9PT0gdHlwZXMuY29udGVudFxuICAgICAgKSB7XG4gICAgICAgIHdoaWxlICgrK290aGVySW5kZXggPCBzdWJldmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKHN1YmV2ZW50c1tvdGhlckluZGV4XVsxXS50eXBlID09PSB0eXBlcy5jb250ZW50KSB7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzdWJldmVudHNbb3RoZXJJbmRleF1bMV0udHlwZSA9PT0gdHlwZXMuY2h1bmtUZXh0KSB7XG4gICAgICAgICAgICBzdWJldmVudHNbb3RoZXJJbmRleF1bMV0uX2lzSW5GaXJzdENvbnRlbnRPZkxpc3RJdGVtID0gdHJ1ZVxuICAgICAgICAgICAgb3RoZXJJbmRleCsrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRW50ZXIuXG4gICAgaWYgKGV2ZW50WzBdID09PSAnZW50ZXInKSB7XG4gICAgICBpZiAoZXZlbnRbMV0uY29udGVudFR5cGUpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihqdW1wcywgc3ViY29udGVudChldmVudHMsIGluZGV4KSlcbiAgICAgICAgaW5kZXggPSBqdW1wc1tpbmRleF1cbiAgICAgICAgbW9yZSA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRXhpdC5cbiAgICBlbHNlIGlmIChldmVudFsxXS5fY29udGFpbmVyKSB7XG4gICAgICBvdGhlckluZGV4ID0gaW5kZXhcbiAgICAgIGxpbmVJbmRleCA9IHVuZGVmaW5lZFxuXG4gICAgICB3aGlsZSAob3RoZXJJbmRleC0tKSB7XG4gICAgICAgIG90aGVyRXZlbnQgPSBldmVudHNbb3RoZXJJbmRleF1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgb3RoZXJFdmVudFsxXS50eXBlID09PSB0eXBlcy5saW5lRW5kaW5nIHx8XG4gICAgICAgICAgb3RoZXJFdmVudFsxXS50eXBlID09PSB0eXBlcy5saW5lRW5kaW5nQmxhbmtcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKG90aGVyRXZlbnRbMF0gPT09ICdlbnRlcicpIHtcbiAgICAgICAgICAgIGlmIChsaW5lSW5kZXgpIHtcbiAgICAgICAgICAgICAgZXZlbnRzW2xpbmVJbmRleF1bMV0udHlwZSA9IHR5cGVzLmxpbmVFbmRpbmdCbGFua1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvdGhlckV2ZW50WzFdLnR5cGUgPSB0eXBlcy5saW5lRW5kaW5nXG4gICAgICAgICAgICBsaW5lSW5kZXggPSBvdGhlckluZGV4XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGxpbmVJbmRleCkge1xuICAgICAgICAvLyBGaXggcG9zaXRpb24uXG4gICAgICAgIGV2ZW50WzFdLmVuZCA9IE9iamVjdC5hc3NpZ24oe30sIGV2ZW50c1tsaW5lSW5kZXhdWzFdLnN0YXJ0KVxuXG4gICAgICAgIC8vIFN3aXRjaCBjb250YWluZXIgZXhpdCB3LyBsaW5lIGVuZGluZ3MuXG4gICAgICAgIHBhcmFtZXRlcnMgPSBldmVudHMuc2xpY2UobGluZUluZGV4LCBpbmRleClcbiAgICAgICAgcGFyYW1ldGVycy51bnNoaWZ0KGV2ZW50KVxuICAgICAgICBzcGxpY2UoZXZlbnRzLCBsaW5lSW5kZXgsIGluZGV4IC0gbGluZUluZGV4ICsgMSwgcGFyYW1ldGVycylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gIW1vcmVcbn1cblxuLyoqXG4gKiBUb2tlbml6ZSBlbWJlZGRlZCB0b2tlbnMuXG4gKlxuICogQHBhcmFtIHtFdmVudFtdfSBldmVudHNcbiAqIEBwYXJhbSB7bnVtYmVyfSBldmVudEluZGV4XG4gKiBAcmV0dXJucyB7UmVjb3JkPHN0cmluZywgbnVtYmVyPn1cbiAqL1xuZnVuY3Rpb24gc3ViY29udGVudChldmVudHMsIGV2ZW50SW5kZXgpIHtcbiAgY29uc3QgdG9rZW4gPSBldmVudHNbZXZlbnRJbmRleF1bMV1cbiAgY29uc3QgY29udGV4dCA9IGV2ZW50c1tldmVudEluZGV4XVsyXVxuICBsZXQgc3RhcnRQb3NpdGlvbiA9IGV2ZW50SW5kZXggLSAxXG4gIC8qKiBAdHlwZSB7bnVtYmVyW119ICovXG4gIGNvbnN0IHN0YXJ0UG9zaXRpb25zID0gW11cbiAgYXNzZXJ0KHRva2VuLmNvbnRlbnRUeXBlLCAnZXhwZWN0ZWQgYGNvbnRlbnRUeXBlYCBvbiBzdWJ0b2tlbnMnKVxuICBjb25zdCB0b2tlbml6ZXIgPVxuICAgIHRva2VuLl90b2tlbml6ZXIgfHwgY29udGV4dC5wYXJzZXJbdG9rZW4uY29udGVudFR5cGVdKHRva2VuLnN0YXJ0KVxuICBjb25zdCBjaGlsZEV2ZW50cyA9IHRva2VuaXplci5ldmVudHNcbiAgLyoqIEB0eXBlIHtbbnVtYmVyLCBudW1iZXJdW119ICovXG4gIGNvbnN0IGp1bXBzID0gW11cbiAgLyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBudW1iZXI+fSAqL1xuICBjb25zdCBnYXBzID0ge31cbiAgLyoqIEB0eXBlIHtDaHVua1tdfSAqL1xuICBsZXQgc3RyZWFtXG4gIC8qKiBAdHlwZSB7VG9rZW58dW5kZWZpbmVkfSAqL1xuICBsZXQgcHJldmlvdXNcbiAgbGV0IGluZGV4ID0gLTFcbiAgLyoqIEB0eXBlIHtUb2tlbnx1bmRlZmluZWR9ICovXG4gIGxldCBjdXJyZW50ID0gdG9rZW5cbiAgbGV0IGFkanVzdCA9IDBcbiAgbGV0IHN0YXJ0ID0gMFxuICBjb25zdCBicmVha3MgPSBbc3RhcnRdXG5cbiAgLy8gTG9vcCBmb3J3YXJkIHRocm91Z2ggdGhlIGxpbmtlZCB0b2tlbnMgdG8gcGFzcyB0aGVtIGluIG9yZGVyIHRvIHRoZVxuICAvLyBzdWJ0b2tlbml6ZXIuXG4gIHdoaWxlIChjdXJyZW50KSB7XG4gICAgLy8gRmluZCB0aGUgcG9zaXRpb24gb2YgdGhlIGV2ZW50IGZvciB0aGlzIHRva2VuLlxuICAgIHdoaWxlIChldmVudHNbKytzdGFydFBvc2l0aW9uXVsxXSAhPT0gY3VycmVudCkge1xuICAgICAgLy8gRW1wdHkuXG4gICAgfVxuXG4gICAgYXNzZXJ0KFxuICAgICAgIXByZXZpb3VzIHx8IGN1cnJlbnQucHJldmlvdXMgPT09IHByZXZpb3VzLFxuICAgICAgJ2V4cGVjdGVkIHByZXZpb3VzIHRvIG1hdGNoJ1xuICAgIClcbiAgICBhc3NlcnQoIXByZXZpb3VzIHx8IHByZXZpb3VzLm5leHQgPT09IGN1cnJlbnQsICdleHBlY3RlZCBuZXh0IHRvIG1hdGNoJylcblxuICAgIHN0YXJ0UG9zaXRpb25zLnB1c2goc3RhcnRQb3NpdGlvbilcblxuICAgIGlmICghY3VycmVudC5fdG9rZW5pemVyKSB7XG4gICAgICBzdHJlYW0gPSBjb250ZXh0LnNsaWNlU3RyZWFtKGN1cnJlbnQpXG5cbiAgICAgIGlmICghY3VycmVudC5uZXh0KSB7XG4gICAgICAgIHN0cmVhbS5wdXNoKGNvZGVzLmVvZilcbiAgICAgIH1cblxuICAgICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICAgIHRva2VuaXplci5kZWZpbmVTa2lwKGN1cnJlbnQuc3RhcnQpXG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50Ll9pc0luRmlyc3RDb250ZW50T2ZMaXN0SXRlbSkge1xuICAgICAgICB0b2tlbml6ZXIuX2dmbVRhc2tsaXN0Rmlyc3RDb250ZW50T2ZMaXN0SXRlbSA9IHRydWVcbiAgICAgIH1cblxuICAgICAgdG9rZW5pemVyLndyaXRlKHN0cmVhbSlcblxuICAgICAgaWYgKGN1cnJlbnQuX2lzSW5GaXJzdENvbnRlbnRPZkxpc3RJdGVtKSB7XG4gICAgICAgIHRva2VuaXplci5fZ2ZtVGFza2xpc3RGaXJzdENvbnRlbnRPZkxpc3RJdGVtID0gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVW5yYXZlbCB0aGUgbmV4dCB0b2tlbi5cbiAgICBwcmV2aW91cyA9IGN1cnJlbnRcbiAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0XG4gIH1cblxuICAvLyBOb3csIGxvb3AgYmFjayB0aHJvdWdoIGFsbCBldmVudHMgKGFuZCBsaW5rZWQgdG9rZW5zKSwgdG8gZmlndXJlIG91dCB3aGljaFxuICAvLyBwYXJ0cyBiZWxvbmcgd2hlcmUuXG4gIGN1cnJlbnQgPSB0b2tlblxuXG4gIHdoaWxlICgrK2luZGV4IDwgY2hpbGRFdmVudHMubGVuZ3RoKSB7XG4gICAgaWYgKFxuICAgICAgLy8gRmluZCBhIHZvaWQgdG9rZW4gdGhhdCBpbmNsdWRlcyBhIGJyZWFrLlxuICAgICAgY2hpbGRFdmVudHNbaW5kZXhdWzBdID09PSAnZXhpdCcgJiZcbiAgICAgIGNoaWxkRXZlbnRzW2luZGV4IC0gMV1bMF0gPT09ICdlbnRlcicgJiZcbiAgICAgIGNoaWxkRXZlbnRzW2luZGV4XVsxXS50eXBlID09PSBjaGlsZEV2ZW50c1tpbmRleCAtIDFdWzFdLnR5cGUgJiZcbiAgICAgIGNoaWxkRXZlbnRzW2luZGV4XVsxXS5zdGFydC5saW5lICE9PSBjaGlsZEV2ZW50c1tpbmRleF1bMV0uZW5kLmxpbmVcbiAgICApIHtcbiAgICAgIGFzc2VydChjdXJyZW50LCAnZXhwZWN0ZWQgYSBjdXJyZW50IHRva2VuJylcbiAgICAgIHN0YXJ0ID0gaW5kZXggKyAxXG4gICAgICBicmVha3MucHVzaChzdGFydClcbiAgICAgIC8vIEhlbHAgR0MuXG4gICAgICBjdXJyZW50Ll90b2tlbml6ZXIgPSB1bmRlZmluZWRcbiAgICAgIGN1cnJlbnQucHJldmlvdXMgPSB1bmRlZmluZWRcbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHRcbiAgICB9XG4gIH1cblxuICAvLyBIZWxwIEdDLlxuICB0b2tlbml6ZXIuZXZlbnRzID0gW11cblxuICAvLyBJZiB0aGVyZeKAmXMgb25lIG1vcmUgdG9rZW4gKHdoaWNoIGlzIHRoZSBjYXNlcyBmb3IgbGluZXMgdGhhdCBlbmQgaW4gYW5cbiAgLy8gRU9GKSwgdGhhdOKAmXMgcGVyZmVjdDogdGhlIGxhc3QgcG9pbnQgd2UgZm91bmQgc3RhcnRzIGl0LlxuICAvLyBJZiB0aGVyZSBpc27igJl0IHRoZW4gbWFrZSBzdXJlIGFueSByZW1haW5pbmcgY29udGVudCBpcyBhZGRlZCB0byBpdC5cbiAgaWYgKGN1cnJlbnQpIHtcbiAgICAvLyBIZWxwIEdDLlxuICAgIGN1cnJlbnQuX3Rva2VuaXplciA9IHVuZGVmaW5lZFxuICAgIGN1cnJlbnQucHJldmlvdXMgPSB1bmRlZmluZWRcbiAgICBhc3NlcnQoIWN1cnJlbnQubmV4dCwgJ2V4cGVjdGVkIG5vIG5leHQgdG9rZW4nKVxuICB9IGVsc2Uge1xuICAgIGJyZWFrcy5wb3AoKVxuICB9XG5cbiAgLy8gTm93IHNwbGljZSB0aGUgZXZlbnRzIGZyb20gdGhlIHN1YnRva2VuaXplciBpbnRvIHRoZSBjdXJyZW50IGV2ZW50cyxcbiAgLy8gbW92aW5nIGJhY2sgdG8gZnJvbnQgc28gdGhhdCBzcGxpY2UgaW5kaWNlcyBhcmVu4oCZdCBhZmZlY3RlZC5cbiAgaW5kZXggPSBicmVha3MubGVuZ3RoXG5cbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICBjb25zdCBzbGljZSA9IGNoaWxkRXZlbnRzLnNsaWNlKGJyZWFrc1tpbmRleF0sIGJyZWFrc1tpbmRleCArIDFdKVxuICAgIGNvbnN0IHN0YXJ0ID0gc3RhcnRQb3NpdGlvbnMucG9wKClcbiAgICBhc3NlcnQoc3RhcnQgIT09IHVuZGVmaW5lZCwgJ2V4cGVjdGVkIGEgc3RhcnQgcG9zaXRpb24gd2hlbiBzcGxpY2luZycpXG4gICAganVtcHMudW5zaGlmdChbc3RhcnQsIHN0YXJ0ICsgc2xpY2UubGVuZ3RoIC0gMV0pXG4gICAgc3BsaWNlKGV2ZW50cywgc3RhcnQsIDIsIHNsaWNlKVxuICB9XG5cbiAgaW5kZXggPSAtMVxuXG4gIHdoaWxlICgrK2luZGV4IDwganVtcHMubGVuZ3RoKSB7XG4gICAgZ2Fwc1thZGp1c3QgKyBqdW1wc1tpbmRleF1bMF1dID0gYWRqdXN0ICsganVtcHNbaW5kZXhdWzFdXG4gICAgYWRqdXN0ICs9IGp1bXBzW2luZGV4XVsxXSAtIGp1bXBzW2luZGV4XVswXSAtIDFcbiAgfVxuXG4gIHJldHVybiBnYXBzXG59XG4iLCIvKipcbiAqIENoYXJhY3RlciBjb2Rlcy5cbiAqXG4gKiBUaGlzIG1vZHVsZSBpcyBjb21waWxlZCBhd2F5IVxuICpcbiAqIG1pY3JvbWFyayB3b3JrcyBiYXNlZCBvbiBjaGFyYWN0ZXIgY29kZXMuXG4gKiBUaGlzIG1vZHVsZSBjb250YWlucyBjb25zdGFudHMgZm9yIHRoZSBBU0NJSSBibG9jayBhbmQgdGhlIHJlcGxhY2VtZW50XG4gKiBjaGFyYWN0ZXIuXG4gKiBBIGNvdXBsZSBvZiB0aGVtIGFyZSBoYW5kbGVkIGluIGEgc3BlY2lhbCB3YXksIHN1Y2ggYXMgdGhlIGxpbmUgZW5kaW5nc1xuICogKENSLCBMRiwgYW5kIENSK0xGLCBjb21tb25seSBrbm93biBhcyBlbmQtb2YtbGluZTogRU9McyksIHRoZSB0YWIgKGhvcml6b250YWxcbiAqIHRhYikgYW5kIGl0cyBleHBhbnNpb24gYmFzZWQgb24gd2hhdCBjb2x1bW4gaXTigJlzIGF0ICh2aXJ0dWFsIHNwYWNlKSxcbiAqIGFuZCB0aGUgZW5kLW9mLWZpbGUgKGVvZikgY2hhcmFjdGVyLlxuICogQXMgdmFsdWVzIGFyZSBwcmVwcm9jZXNzZWQgYmVmb3JlIGhhbmRsaW5nIHRoZW0sIHRoZSBhY3R1YWwgY2hhcmFjdGVycyBMRixcbiAqIENSLCBIVCwgYW5kIE5VTCAod2hpY2ggaXMgcHJlc2VudCBhcyB0aGUgcmVwbGFjZW1lbnQgY2hhcmFjdGVyKSwgYXJlXG4gKiBndWFyYW50ZWVkIHRvIG5vdCBleGlzdC5cbiAqXG4gKiBVbmljb2RlIGJhc2ljIGxhdGluIGJsb2NrLlxuICovXG5leHBvcnQgY29uc3QgY29kZXMgPSB7XG4gIGNhcnJpYWdlUmV0dXJuOiAtNSxcbiAgbGluZUZlZWQ6IC00LFxuICBjYXJyaWFnZVJldHVybkxpbmVGZWVkOiAtMyxcbiAgaG9yaXpvbnRhbFRhYjogLTIsXG4gIHZpcnR1YWxTcGFjZTogLTEsXG4gIGVvZjogbnVsbCxcbiAgbnVsOiAwLFxuICBzb2g6IDEsXG4gIHN0eDogMixcbiAgZXR4OiAzLFxuICBlb3Q6IDQsXG4gIGVucTogNSxcbiAgYWNrOiA2LFxuICBiZWw6IDcsXG4gIGJzOiA4LFxuICBodDogOSwgLy8gYFxcdGBcbiAgbGY6IDEwLCAvLyBgXFxuYFxuICB2dDogMTEsIC8vIGBcXHZgXG4gIGZmOiAxMiwgLy8gYFxcZmBcbiAgY3I6IDEzLCAvLyBgXFxyYFxuICBzbzogMTQsXG4gIHNpOiAxNSxcbiAgZGxlOiAxNixcbiAgZGMxOiAxNyxcbiAgZGMyOiAxOCxcbiAgZGMzOiAxOSxcbiAgZGM0OiAyMCxcbiAgbmFrOiAyMSxcbiAgc3luOiAyMixcbiAgZXRiOiAyMyxcbiAgY2FuOiAyNCxcbiAgZW06IDI1LFxuICBzdWI6IDI2LFxuICBlc2M6IDI3LFxuICBmczogMjgsXG4gIGdzOiAyOSxcbiAgcnM6IDMwLFxuICB1czogMzEsXG4gIHNwYWNlOiAzMixcbiAgZXhjbGFtYXRpb25NYXJrOiAzMywgLy8gYCFgXG4gIHF1b3RhdGlvbk1hcms6IDM0LCAvLyBgXCJgXG4gIG51bWJlclNpZ246IDM1LCAvLyBgI2BcbiAgZG9sbGFyU2lnbjogMzYsIC8vIGAkYFxuICBwZXJjZW50U2lnbjogMzcsIC8vIGAlYFxuICBhbXBlcnNhbmQ6IDM4LCAvLyBgJmBcbiAgYXBvc3Ryb3BoZTogMzksIC8vIGAnYFxuICBsZWZ0UGFyZW50aGVzaXM6IDQwLCAvLyBgKGBcbiAgcmlnaHRQYXJlbnRoZXNpczogNDEsIC8vIGApYFxuICBhc3RlcmlzazogNDIsIC8vIGAqYFxuICBwbHVzU2lnbjogNDMsIC8vIGArYFxuICBjb21tYTogNDQsIC8vIGAsYFxuICBkYXNoOiA0NSwgLy8gYC1gXG4gIGRvdDogNDYsIC8vIGAuYFxuICBzbGFzaDogNDcsIC8vIGAvYFxuICBkaWdpdDA6IDQ4LCAvLyBgMGBcbiAgZGlnaXQxOiA0OSwgLy8gYDFgXG4gIGRpZ2l0MjogNTAsIC8vIGAyYFxuICBkaWdpdDM6IDUxLCAvLyBgM2BcbiAgZGlnaXQ0OiA1MiwgLy8gYDRgXG4gIGRpZ2l0NTogNTMsIC8vIGA1YFxuICBkaWdpdDY6IDU0LCAvLyBgNmBcbiAgZGlnaXQ3OiA1NSwgLy8gYDdgXG4gIGRpZ2l0ODogNTYsIC8vIGA4YFxuICBkaWdpdDk6IDU3LCAvLyBgOWBcbiAgY29sb246IDU4LCAvLyBgOmBcbiAgc2VtaWNvbG9uOiA1OSwgLy8gYDtgXG4gIGxlc3NUaGFuOiA2MCwgLy8gYDxgXG4gIGVxdWFsc1RvOiA2MSwgLy8gYD1gXG4gIGdyZWF0ZXJUaGFuOiA2MiwgLy8gYD5gXG4gIHF1ZXN0aW9uTWFyazogNjMsIC8vIGA/YFxuICBhdFNpZ246IDY0LCAvLyBgQGBcbiAgdXBwZXJjYXNlQTogNjUsIC8vIGBBYFxuICB1cHBlcmNhc2VCOiA2NiwgLy8gYEJgXG4gIHVwcGVyY2FzZUM6IDY3LCAvLyBgQ2BcbiAgdXBwZXJjYXNlRDogNjgsIC8vIGBEYFxuICB1cHBlcmNhc2VFOiA2OSwgLy8gYEVgXG4gIHVwcGVyY2FzZUY6IDcwLCAvLyBgRmBcbiAgdXBwZXJjYXNlRzogNzEsIC8vIGBHYFxuICB1cHBlcmNhc2VIOiA3MiwgLy8gYEhgXG4gIHVwcGVyY2FzZUk6IDczLCAvLyBgSWBcbiAgdXBwZXJjYXNlSjogNzQsIC8vIGBKYFxuICB1cHBlcmNhc2VLOiA3NSwgLy8gYEtgXG4gIHVwcGVyY2FzZUw6IDc2LCAvLyBgTGBcbiAgdXBwZXJjYXNlTTogNzcsIC8vIGBNYFxuICB1cHBlcmNhc2VOOiA3OCwgLy8gYE5gXG4gIHVwcGVyY2FzZU86IDc5LCAvLyBgT2BcbiAgdXBwZXJjYXNlUDogODAsIC8vIGBQYFxuICB1cHBlcmNhc2VROiA4MSwgLy8gYFFgXG4gIHVwcGVyY2FzZVI6IDgyLCAvLyBgUmBcbiAgdXBwZXJjYXNlUzogODMsIC8vIGBTYFxuICB1cHBlcmNhc2VUOiA4NCwgLy8gYFRgXG4gIHVwcGVyY2FzZVU6IDg1LCAvLyBgVWBcbiAgdXBwZXJjYXNlVjogODYsIC8vIGBWYFxuICB1cHBlcmNhc2VXOiA4NywgLy8gYFdgXG4gIHVwcGVyY2FzZVg6IDg4LCAvLyBgWGBcbiAgdXBwZXJjYXNlWTogODksIC8vIGBZYFxuICB1cHBlcmNhc2VaOiA5MCwgLy8gYFpgXG4gIGxlZnRTcXVhcmVCcmFja2V0OiA5MSwgLy8gYFtgXG4gIGJhY2tzbGFzaDogOTIsIC8vIGBcXGBcbiAgcmlnaHRTcXVhcmVCcmFja2V0OiA5MywgLy8gYF1gXG4gIGNhcmV0OiA5NCwgLy8gYF5gXG4gIHVuZGVyc2NvcmU6IDk1LCAvLyBgX2BcbiAgZ3JhdmVBY2NlbnQ6IDk2LCAvLyBgYCBgIGBgXG4gIGxvd2VyY2FzZUE6IDk3LCAvLyBgYWBcbiAgbG93ZXJjYXNlQjogOTgsIC8vIGBiYFxuICBsb3dlcmNhc2VDOiA5OSwgLy8gYGNgXG4gIGxvd2VyY2FzZUQ6IDEwMCwgLy8gYGRgXG4gIGxvd2VyY2FzZUU6IDEwMSwgLy8gYGVgXG4gIGxvd2VyY2FzZUY6IDEwMiwgLy8gYGZgXG4gIGxvd2VyY2FzZUc6IDEwMywgLy8gYGdgXG4gIGxvd2VyY2FzZUg6IDEwNCwgLy8gYGhgXG4gIGxvd2VyY2FzZUk6IDEwNSwgLy8gYGlgXG4gIGxvd2VyY2FzZUo6IDEwNiwgLy8gYGpgXG4gIGxvd2VyY2FzZUs6IDEwNywgLy8gYGtgXG4gIGxvd2VyY2FzZUw6IDEwOCwgLy8gYGxgXG4gIGxvd2VyY2FzZU06IDEwOSwgLy8gYG1gXG4gIGxvd2VyY2FzZU46IDExMCwgLy8gYG5gXG4gIGxvd2VyY2FzZU86IDExMSwgLy8gYG9gXG4gIGxvd2VyY2FzZVA6IDExMiwgLy8gYHBgXG4gIGxvd2VyY2FzZVE6IDExMywgLy8gYHFgXG4gIGxvd2VyY2FzZVI6IDExNCwgLy8gYHJgXG4gIGxvd2VyY2FzZVM6IDExNSwgLy8gYHNgXG4gIGxvd2VyY2FzZVQ6IDExNiwgLy8gYHRgXG4gIGxvd2VyY2FzZVU6IDExNywgLy8gYHVgXG4gIGxvd2VyY2FzZVY6IDExOCwgLy8gYHZgXG4gIGxvd2VyY2FzZVc6IDExOSwgLy8gYHdgXG4gIGxvd2VyY2FzZVg6IDEyMCwgLy8gYHhgXG4gIGxvd2VyY2FzZVk6IDEyMSwgLy8gYHlgXG4gIGxvd2VyY2FzZVo6IDEyMiwgLy8gYHpgXG4gIGxlZnRDdXJseUJyYWNlOiAxMjMsIC8vIGB7YFxuICB2ZXJ0aWNhbEJhcjogMTI0LCAvLyBgfGBcbiAgcmlnaHRDdXJseUJyYWNlOiAxMjUsIC8vIGB9YFxuICB0aWxkZTogMTI2LCAvLyBgfmBcbiAgZGVsOiAxMjcsXG4gIC8vIFVuaWNvZGUgU3BlY2lhbHMgYmxvY2suXG4gIGJ5dGVPcmRlck1hcmtlcjogNjUyNzksXG4gIC8vIFVuaWNvZGUgU3BlY2lhbHMgYmxvY2suXG4gIHJlcGxhY2VtZW50Q2hhcmFjdGVyOiA2NTUzMyAvLyBg77+9YFxufVxuIiwiLyoqXG4gKiBUaGlzIG1vZHVsZSBpcyBjb21waWxlZCBhd2F5IVxuICpcbiAqIFBhcnNpbmcgbWFya2Rvd24gY29tZXMgd2l0aCBhIGNvdXBsZSBvZiBjb25zdGFudHMsIHN1Y2ggYXMgbWluaW11bSBvciBtYXhpbXVtXG4gKiBzaXplcyBvZiBjZXJ0YWluIHNlcXVlbmNlcy5cbiAqIEFkZGl0aW9uYWxseSwgdGhlcmUgYXJlIGEgY291cGxlIHN5bWJvbHMgdXNlZCBpbnNpZGUgbWljcm9tYXJrLlxuICogVGhlc2UgYXJlIGFsbCBkZWZpbmVkIGhlcmUsIGJ1dCBjb21waWxlZCBhd2F5IGJ5IHNjcmlwdHMuXG4gKi9cbmV4cG9ydCBjb25zdCBjb25zdGFudHMgPSB7XG4gIGF0dGVudGlvblNpZGVCZWZvcmU6IDEsIC8vIFN5bWJvbCB0byBtYXJrIGFuIGF0dGVudGlvbiBzZXF1ZW5jZSBhcyBiZWZvcmUgY29udGVudDogYCphYFxuICBhdHRlbnRpb25TaWRlQWZ0ZXI6IDIsIC8vIFN5bWJvbCB0byBtYXJrIGFuIGF0dGVudGlvbiBzZXF1ZW5jZSBhcyBhZnRlciBjb250ZW50OiBgYSpgXG4gIGF0eEhlYWRpbmdPcGVuaW5nRmVuY2VTaXplTWF4OiA2LCAvLyA2IG51bWJlciBzaWducyBpcyBmaW5lLCA3IGlzbuKAmXQuXG4gIGF1dG9saW5rRG9tYWluU2l6ZU1heDogNjMsIC8vIDYzIGNoYXJhY3RlcnMgaXMgZmluZSwgNjQgaXMgdG9vIG1hbnkuXG4gIGF1dG9saW5rU2NoZW1lU2l6ZU1heDogMzIsIC8vIDMyIGNoYXJhY3RlcnMgaXMgZmluZSwgMzMgaXMgdG9vIG1hbnkuXG4gIGNkYXRhT3BlbmluZ1N0cmluZzogJ0NEQVRBWycsIC8vIEFuZCBwcmVjZWRlZCBieSBgPCFbYC5cbiAgY2hhcmFjdGVyR3JvdXBXaGl0ZXNwYWNlOiAxLCAvLyBTeW1ib2wgdXNlZCB0byBpbmRpY2F0ZSBhIGNoYXJhY3RlciBpcyB3aGl0ZXNwYWNlXG4gIGNoYXJhY3Rlckdyb3VwUHVuY3R1YXRpb246IDIsIC8vIFN5bWJvbCB1c2VkIHRvIGluZGljYXRlIGEgY2hhcmFjdGVyIGlzIHB1bmN0dWF0aW9uXG4gIGNoYXJhY3RlclJlZmVyZW5jZURlY2ltYWxTaXplTWF4OiA3LCAvLyBgJiM5OTk5OTk5O2AuXG4gIGNoYXJhY3RlclJlZmVyZW5jZUhleGFkZWNpbWFsU2l6ZU1heDogNiwgLy8gYCYjeGZmOTk5OTtgLlxuICBjaGFyYWN0ZXJSZWZlcmVuY2VOYW1lZFNpemVNYXg6IDMxLCAvLyBgJkNvdW50ZXJDbG9ja3dpc2VDb250b3VySW50ZWdyYWw7YC5cbiAgY29kZUZlbmNlZFNlcXVlbmNlU2l6ZU1pbjogMywgLy8gQXQgbGVhc3QgMyB0aWNrcyBvciB0aWxkZXMgYXJlIG5lZWRlZC5cbiAgY29udGVudFR5cGVEb2N1bWVudDogJ2RvY3VtZW50JyxcbiAgY29udGVudFR5cGVGbG93OiAnZmxvdycsXG4gIGNvbnRlbnRUeXBlQ29udGVudDogJ2NvbnRlbnQnLFxuICBjb250ZW50VHlwZVN0cmluZzogJ3N0cmluZycsXG4gIGNvbnRlbnRUeXBlVGV4dDogJ3RleHQnLFxuICBoYXJkQnJlYWtQcmVmaXhTaXplTWluOiAyLCAvLyBBdCBsZWFzdCAyIHRyYWlsaW5nIHNwYWNlcyBhcmUgbmVlZGVkLlxuICBodG1sUmF3OiAxLCAvLyBTeW1ib2wgZm9yIGA8c2NyaXB0PmBcbiAgaHRtbENvbW1lbnQ6IDIsIC8vIFN5bWJvbCBmb3IgYDwhLS0tLT5gXG4gIGh0bWxJbnN0cnVjdGlvbjogMywgLy8gU3ltYm9sIGZvciBgPD9waHA/PmBcbiAgaHRtbERlY2xhcmF0aW9uOiA0LCAvLyBTeW1ib2wgZm9yIGA8IWRvY3R5cGU+YFxuICBodG1sQ2RhdGE6IDUsIC8vIFN5bWJvbCBmb3IgYDwhW0NEQVRBW11dPmBcbiAgaHRtbEJhc2ljOiA2LCAvLyBTeW1ib2wgZm9yIGA8ZGl2YFxuICBodG1sQ29tcGxldGU6IDcsIC8vIFN5bWJvbCBmb3IgYDx4PmBcbiAgaHRtbFJhd1NpemVNYXg6IDgsIC8vIExlbmd0aCBvZiBgdGV4dGFyZWFgLlxuICBsaW5rUmVzb3VyY2VEZXN0aW5hdGlvbkJhbGFuY2VNYXg6IDMyLCAvLyBTZWU6IDxodHRwczovL3NwZWMuY29tbW9ubWFyay5vcmcvMC4zMC8jbGluay1kZXN0aW5hdGlvbj4sIDxodHRwczovL2dpdGh1Yi5jb20vcmVtYXJranMvcmVhY3QtbWFya2Rvd24vaXNzdWVzLzY1OCNpc3N1ZWNvbW1lbnQtOTg0MzQ1NTc3PlxuICBsaW5rUmVmZXJlbmNlU2l6ZU1heDogOTk5LCAvLyBTZWU6IDxodHRwczovL3NwZWMuY29tbW9ubWFyay5vcmcvMC4zMC8jbGluay1sYWJlbD5cbiAgbGlzdEl0ZW1WYWx1ZVNpemVNYXg6IDEwLCAvLyBTZWU6IDxodHRwczovL3NwZWMuY29tbW9ubWFyay5vcmcvMC4zMC8jb3JkZXJlZC1saXN0LW1hcmtlcj5cbiAgbnVtZXJpY0Jhc2VEZWNpbWFsOiAxMCxcbiAgbnVtZXJpY0Jhc2VIZXhhZGVjaW1hbDogMHgxMCxcbiAgdGFiU2l6ZTogNCwgLy8gVGFicyBoYXZlIGEgaGFyZC1jb2RlZCBzaXplIG9mIDQsIHBlciBDb21tb25NYXJrLlxuICB0aGVtYXRpY0JyZWFrTWFya2VyQ291bnRNaW46IDMsIC8vIEF0IGxlYXN0IDMgYXN0ZXJpc2tzLCBkYXNoZXMsIG9yIHVuZGVyc2NvcmVzIGFyZSBuZWVkZWQuXG4gIHY4TWF4U2FmZUNodW5rU2l6ZTogMTAwMDAgLy8gVjggKGFuZCBwb3RlbnRpYWxseSBvdGhlcnMpIGhhdmUgcHJvYmxlbXMgaW5qZWN0aW5nIGdpYW50IGFycmF5cyBpbnRvIG90aGVyIGFycmF5cywgaGVuY2Ugd2Ugb3BlcmF0ZSBpbiBjaHVua3MuXG59XG4iLCIvKipcbiAqIFRoaXMgbW9kdWxlIGlzIGNvbXBpbGVkIGF3YXkhXG4gKlxuICogSGVyZSBpcyB0aGUgbGlzdCBvZiBhbGwgdHlwZXMgb2YgdG9rZW5zIGV4cG9zZWQgYnkgbWljcm9tYXJrLCB3aXRoIGEgc2hvcnRcbiAqIGV4cGxhbmF0aW9uIG9mIHdoYXQgdGhleSBpbmNsdWRlIGFuZCB3aGVyZSB0aGV5IGFyZSBmb3VuZC5cbiAqIEluIHBpY2tpbmcgbmFtZXMsIGdlbmVyYWxseSwgdGhlIHJ1bGUgaXMgdG8gYmUgYXMgZXhwbGljaXQgYXMgcG9zc2libGVcbiAqIGluc3RlYWQgb2YgcmV1c2luZyBuYW1lcy5cbiAqIEZvciBleGFtcGxlLCB0aGVyZSBpcyBhIGBkZWZpbml0aW9uRGVzdGluYXRpb25gIGFuZCBhIGByZXNvdXJjZURlc3RpbmF0aW9uYCxcbiAqIGluc3RlYWQgb2Ygb25lIHNoYXJlZCBuYW1lLlxuICovXG5cbmV4cG9ydCBjb25zdCB0eXBlcyA9IHtcbiAgLy8gR2VuZXJpYyB0eXBlIGZvciBkYXRhLCBzdWNoIGFzIGluIGEgdGl0bGUsIGEgZGVzdGluYXRpb24sIGV0Yy5cbiAgZGF0YTogJ2RhdGEnLFxuXG4gIC8vIEdlbmVyaWMgdHlwZSBmb3Igc3ludGFjdGljIHdoaXRlc3BhY2UgKHRhYnMsIHZpcnR1YWwgc3BhY2VzLCBzcGFjZXMpLlxuICAvLyBTdWNoIGFzLCBiZXR3ZWVuIGEgZmVuY2VkIGNvZGUgZmVuY2UgYW5kIGFuIGluZm8gc3RyaW5nLlxuICB3aGl0ZXNwYWNlOiAnd2hpdGVzcGFjZScsXG5cbiAgLy8gR2VuZXJpYyB0eXBlIGZvciBsaW5lIGVuZGluZ3MgKGxpbmUgZmVlZCwgY2FycmlhZ2UgcmV0dXJuLCBjYXJyaWFnZSByZXR1cm4gK1xuICAvLyBsaW5lIGZlZWQpLlxuICBsaW5lRW5kaW5nOiAnbGluZUVuZGluZycsXG5cbiAgLy8gQSBsaW5lIGVuZGluZywgYnV0IGVuZGluZyBhIGJsYW5rIGxpbmUuXG4gIGxpbmVFbmRpbmdCbGFuazogJ2xpbmVFbmRpbmdCbGFuaycsXG5cbiAgLy8gR2VuZXJpYyB0eXBlIGZvciB3aGl0ZXNwYWNlICh0YWJzLCB2aXJ0dWFsIHNwYWNlcywgc3BhY2VzKSBhdCB0aGUgc3RhcnQgb2YgYVxuICAvLyBsaW5lLlxuICBsaW5lUHJlZml4OiAnbGluZVByZWZpeCcsXG5cbiAgLy8gR2VuZXJpYyB0eXBlIGZvciB3aGl0ZXNwYWNlICh0YWJzLCB2aXJ0dWFsIHNwYWNlcywgc3BhY2VzKSBhdCB0aGUgZW5kIG9mIGFcbiAgLy8gbGluZS5cbiAgbGluZVN1ZmZpeDogJ2xpbmVTdWZmaXgnLFxuXG4gIC8vIFdob2xlIEFUWCBoZWFkaW5nOlxuICAvL1xuICAvLyBgYGBtYXJrZG93blxuICAvLyAjXG4gIC8vICMjIEFscGhhXG4gIC8vICMjIyBCcmF2byAjIyNcbiAgLy8gYGBgXG4gIC8vXG4gIC8vIEluY2x1ZGVzIGBhdHhIZWFkaW5nU2VxdWVuY2VgLCBgd2hpdGVzcGFjZWAsIGBhdHhIZWFkaW5nVGV4dGAuXG4gIGF0eEhlYWRpbmc6ICdhdHhIZWFkaW5nJyxcblxuICAvLyBTZXF1ZW5jZSBvZiBudW1iZXIgc2lnbnMgaW4gYW4gQVRYIGhlYWRpbmcgKGAjIyNgKS5cbiAgYXR4SGVhZGluZ1NlcXVlbmNlOiAnYXR4SGVhZGluZ1NlcXVlbmNlJyxcblxuICAvLyBDb250ZW50IGluIGFuIEFUWCBoZWFkaW5nIChgYWxwaGFgKS5cbiAgLy8gSW5jbHVkZXMgdGV4dC5cbiAgYXR4SGVhZGluZ1RleHQ6ICdhdHhIZWFkaW5nVGV4dCcsXG5cbiAgLy8gV2hvbGUgYXV0b2xpbmsgKGA8aHR0cHM6Ly9leGFtcGxlLmNvbT5gIG9yIGA8YWRtaW5AZXhhbXBsZS5jb20+YClcbiAgLy8gSW5jbHVkZXMgYGF1dG9saW5rTWFya2VyYCBhbmQgYGF1dG9saW5rUHJvdG9jb2xgIG9yIGBhdXRvbGlua0VtYWlsYC5cbiAgYXV0b2xpbms6ICdhdXRvbGluaycsXG5cbiAgLy8gRW1haWwgYXV0b2xpbmsgdy9vIG1hcmtlcnMgKGBhZG1pbkBleGFtcGxlLmNvbWApXG4gIGF1dG9saW5rRW1haWw6ICdhdXRvbGlua0VtYWlsJyxcblxuICAvLyBNYXJrZXIgYXJvdW5kIGFuIGBhdXRvbGlua1Byb3RvY29sYCBvciBgYXV0b2xpbmtFbWFpbGAgKGA8YCBvciBgPmApLlxuICBhdXRvbGlua01hcmtlcjogJ2F1dG9saW5rTWFya2VyJyxcblxuICAvLyBQcm90b2NvbCBhdXRvbGluayB3L28gbWFya2VycyAoYGh0dHBzOi8vZXhhbXBsZS5jb21gKVxuICBhdXRvbGlua1Byb3RvY29sOiAnYXV0b2xpbmtQcm90b2NvbCcsXG5cbiAgLy8gQSB3aG9sZSBjaGFyYWN0ZXIgZXNjYXBlIChgXFwtYCkuXG4gIC8vIEluY2x1ZGVzIGBlc2NhcGVNYXJrZXJgIGFuZCBgY2hhcmFjdGVyRXNjYXBlVmFsdWVgLlxuICBjaGFyYWN0ZXJFc2NhcGU6ICdjaGFyYWN0ZXJFc2NhcGUnLFxuXG4gIC8vIFRoZSBlc2NhcGVkIGNoYXJhY3RlciAoYC1gKS5cbiAgY2hhcmFjdGVyRXNjYXBlVmFsdWU6ICdjaGFyYWN0ZXJFc2NhcGVWYWx1ZScsXG5cbiAgLy8gQSB3aG9sZSBjaGFyYWN0ZXIgcmVmZXJlbmNlIChgJmFtcDtgLCBgJiM4ODAwO2AsIG9yIGAmI3gxRDMwNjtgKS5cbiAgLy8gSW5jbHVkZXMgYGNoYXJhY3RlclJlZmVyZW5jZU1hcmtlcmAsIGFuIG9wdGlvbmFsXG4gIC8vIGBjaGFyYWN0ZXJSZWZlcmVuY2VNYXJrZXJOdW1lcmljYCwgaW4gd2hpY2ggY2FzZSBhbiBvcHRpb25hbFxuICAvLyBgY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VySGV4YWRlY2ltYWxgLCBhbmQgYSBgY2hhcmFjdGVyUmVmZXJlbmNlVmFsdWVgLlxuICBjaGFyYWN0ZXJSZWZlcmVuY2U6ICdjaGFyYWN0ZXJSZWZlcmVuY2UnLFxuXG4gIC8vIFRoZSBzdGFydCBvciBlbmQgbWFya2VyIChgJmAgb3IgYDtgKS5cbiAgY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VyOiAnY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VyJyxcblxuICAvLyBNYXJrIHJlZmVyZW5jZSBhcyBudW1lcmljIChgI2ApLlxuICBjaGFyYWN0ZXJSZWZlcmVuY2VNYXJrZXJOdW1lcmljOiAnY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VyTnVtZXJpYycsXG5cbiAgLy8gTWFyayByZWZlcmVuY2UgYXMgbnVtZXJpYyAoYHhgIG9yIGBYYCkuXG4gIGNoYXJhY3RlclJlZmVyZW5jZU1hcmtlckhleGFkZWNpbWFsOiAnY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VySGV4YWRlY2ltYWwnLFxuXG4gIC8vIFZhbHVlIG9mIGNoYXJhY3RlciByZWZlcmVuY2Ugdy9vIG1hcmtlcnMgKGBhbXBgLCBgODgwMGAsIG9yIGAxRDMwNmApLlxuICBjaGFyYWN0ZXJSZWZlcmVuY2VWYWx1ZTogJ2NoYXJhY3RlclJlZmVyZW5jZVZhbHVlJyxcblxuICAvLyBXaG9sZSBmZW5jZWQgY29kZTpcbiAgLy9cbiAgLy8gYGBgYG1hcmtkb3duXG4gIC8vIGBgYGpzXG4gIC8vIGFsZXJ0KDEpXG4gIC8vIGBgYFxuICAvLyBgYGBgXG4gIGNvZGVGZW5jZWQ6ICdjb2RlRmVuY2VkJyxcblxuICAvLyBBIGZlbmNlZCBjb2RlIGZlbmNlLCBpbmNsdWRpbmcgd2hpdGVzcGFjZSwgc2VxdWVuY2UsIGluZm8sIGFuZCBtZXRhXG4gIC8vIChgIGBgYGpzIGApLlxuICBjb2RlRmVuY2VkRmVuY2U6ICdjb2RlRmVuY2VkRmVuY2UnLFxuXG4gIC8vIFNlcXVlbmNlIG9mIGdyYXZlIGFjY2VudCBvciB0aWxkZSBjaGFyYWN0ZXJzIChgIGBgYCBgKSBpbiBhIGZlbmNlLlxuICBjb2RlRmVuY2VkRmVuY2VTZXF1ZW5jZTogJ2NvZGVGZW5jZWRGZW5jZVNlcXVlbmNlJyxcblxuICAvLyBJbmZvIHdvcmQgKGBqc2ApIGluIGEgZmVuY2UuXG4gIC8vIEluY2x1ZGVzIHN0cmluZy5cbiAgY29kZUZlbmNlZEZlbmNlSW5mbzogJ2NvZGVGZW5jZWRGZW5jZUluZm8nLFxuXG4gIC8vIE1ldGEgd29yZHMgKGBoaWdobGlnaHQ9XCIxXCJgKSBpbiBhIGZlbmNlLlxuICAvLyBJbmNsdWRlcyBzdHJpbmcuXG4gIGNvZGVGZW5jZWRGZW5jZU1ldGE6ICdjb2RlRmVuY2VkRmVuY2VNZXRhJyxcblxuICAvLyBBIGxpbmUgb2YgY29kZS5cbiAgY29kZUZsb3dWYWx1ZTogJ2NvZGVGbG93VmFsdWUnLFxuXG4gIC8vIFdob2xlIGluZGVudGVkIGNvZGU6XG4gIC8vXG4gIC8vIGBgYG1hcmtkb3duXG4gIC8vICAgICBhbGVydCgxKVxuICAvLyBgYGBcbiAgLy9cbiAgLy8gSW5jbHVkZXMgYGxpbmVFbmRpbmdgLCBgbGluZVByZWZpeGAsIGFuZCBgY29kZUZsb3dWYWx1ZWAuXG4gIGNvZGVJbmRlbnRlZDogJ2NvZGVJbmRlbnRlZCcsXG5cbiAgLy8gQSB0ZXh0IGNvZGUgKGBgYCBgYWxwaGFgIGBgYCkuXG4gIC8vIEluY2x1ZGVzIGBjb2RlVGV4dFNlcXVlbmNlYCwgYGNvZGVUZXh0RGF0YWAsIGBsaW5lRW5kaW5nYCwgYW5kIGNhbiBpbmNsdWRlXG4gIC8vIGBjb2RlVGV4dFBhZGRpbmdgLlxuICBjb2RlVGV4dDogJ2NvZGVUZXh0JyxcblxuICBjb2RlVGV4dERhdGE6ICdjb2RlVGV4dERhdGEnLFxuXG4gIC8vIEEgc3BhY2Ugb3IgbGluZSBlbmRpbmcgcmlnaHQgYWZ0ZXIgb3IgYmVmb3JlIGEgdGljay5cbiAgY29kZVRleHRQYWRkaW5nOiAnY29kZVRleHRQYWRkaW5nJyxcblxuICAvLyBBIHRleHQgY29kZSBmZW5jZSAoYCBgYCBgKS5cbiAgY29kZVRleHRTZXF1ZW5jZTogJ2NvZGVUZXh0U2VxdWVuY2UnLFxuXG4gIC8vIFdob2xlIGNvbnRlbnQ6XG4gIC8vXG4gIC8vIGBgYG1hcmtkb3duXG4gIC8vIFthXTogYlxuICAvLyBjXG4gIC8vID1cbiAgLy8gZFxuICAvLyBgYGBcbiAgLy9cbiAgLy8gSW5jbHVkZXMgYHBhcmFncmFwaGAgYW5kIGBkZWZpbml0aW9uYC5cbiAgY29udGVudDogJ2NvbnRlbnQnLFxuICAvLyBXaG9sZSBkZWZpbml0aW9uOlxuICAvL1xuICAvLyBgYGBtYXJrZG93blxuICAvLyBbbWljcm9tYXJrXTogaHR0cHM6Ly9naXRodWIuY29tL21pY3JvbWFyay9taWNyb21hcmtcbiAgLy8gYGBgXG4gIC8vXG4gIC8vIEluY2x1ZGVzIGBkZWZpbml0aW9uTGFiZWxgLCBgZGVmaW5pdGlvbk1hcmtlcmAsIGB3aGl0ZXNwYWNlYCxcbiAgLy8gYGRlZmluaXRpb25EZXN0aW5hdGlvbmAsIGFuZCBvcHRpb25hbGx5IGBsaW5lRW5kaW5nYCBhbmQgYGRlZmluaXRpb25UaXRsZWAuXG4gIGRlZmluaXRpb246ICdkZWZpbml0aW9uJyxcblxuICAvLyBEZXN0aW5hdGlvbiBvZiBhIGRlZmluaXRpb24gKGBodHRwczovL2dpdGh1Yi5jb20vbWljcm9tYXJrL21pY3JvbWFya2Agb3JcbiAgLy8gYDxodHRwczovL2dpdGh1Yi5jb20vbWljcm9tYXJrL21pY3JvbWFyaz5gKS5cbiAgLy8gSW5jbHVkZXMgYGRlZmluaXRpb25EZXN0aW5hdGlvbkxpdGVyYWxgIG9yIGBkZWZpbml0aW9uRGVzdGluYXRpb25SYXdgLlxuICBkZWZpbml0aW9uRGVzdGluYXRpb246ICdkZWZpbml0aW9uRGVzdGluYXRpb24nLFxuXG4gIC8vIEVuY2xvc2VkIGRlc3RpbmF0aW9uIG9mIGEgZGVmaW5pdGlvblxuICAvLyAoYDxodHRwczovL2dpdGh1Yi5jb20vbWljcm9tYXJrL21pY3JvbWFyaz5gKS5cbiAgLy8gSW5jbHVkZXMgYGRlZmluaXRpb25EZXN0aW5hdGlvbkxpdGVyYWxNYXJrZXJgIGFuZCBvcHRpb25hbGx5XG4gIC8vIGBkZWZpbml0aW9uRGVzdGluYXRpb25TdHJpbmdgLlxuICBkZWZpbml0aW9uRGVzdGluYXRpb25MaXRlcmFsOiAnZGVmaW5pdGlvbkRlc3RpbmF0aW9uTGl0ZXJhbCcsXG5cbiAgLy8gTWFya2VycyBvZiBhbiBlbmNsb3NlZCBkZWZpbml0aW9uIGRlc3RpbmF0aW9uIChgPGAgb3IgYD5gKS5cbiAgZGVmaW5pdGlvbkRlc3RpbmF0aW9uTGl0ZXJhbE1hcmtlcjogJ2RlZmluaXRpb25EZXN0aW5hdGlvbkxpdGVyYWxNYXJrZXInLFxuXG4gIC8vIFVuZW5jbG9zZWQgZGVzdGluYXRpb24gb2YgYSBkZWZpbml0aW9uXG4gIC8vIChgaHR0cHM6Ly9naXRodWIuY29tL21pY3JvbWFyay9taWNyb21hcmtgKS5cbiAgLy8gSW5jbHVkZXMgYGRlZmluaXRpb25EZXN0aW5hdGlvblN0cmluZ2AuXG4gIGRlZmluaXRpb25EZXN0aW5hdGlvblJhdzogJ2RlZmluaXRpb25EZXN0aW5hdGlvblJhdycsXG5cbiAgLy8gVGV4dCBpbiBhbiBkZXN0aW5hdGlvbiAoYGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb21hcmsvbWljcm9tYXJrYCkuXG4gIC8vIEluY2x1ZGVzIHN0cmluZy5cbiAgZGVmaW5pdGlvbkRlc3RpbmF0aW9uU3RyaW5nOiAnZGVmaW5pdGlvbkRlc3RpbmF0aW9uU3RyaW5nJyxcblxuICAvLyBMYWJlbCBvZiBhIGRlZmluaXRpb24gKGBbbWljcm9tYXJrXWApLlxuICAvLyBJbmNsdWRlcyBgZGVmaW5pdGlvbkxhYmVsTWFya2VyYCBhbmQgYGRlZmluaXRpb25MYWJlbFN0cmluZ2AuXG4gIGRlZmluaXRpb25MYWJlbDogJ2RlZmluaXRpb25MYWJlbCcsXG5cbiAgLy8gTWFya2VycyBvZiBhIGRlZmluaXRpb24gbGFiZWwgKGBbYCBvciBgXWApLlxuICBkZWZpbml0aW9uTGFiZWxNYXJrZXI6ICdkZWZpbml0aW9uTGFiZWxNYXJrZXInLFxuXG4gIC8vIFZhbHVlIG9mIGEgZGVmaW5pdGlvbiBsYWJlbCAoYG1pY3JvbWFya2ApLlxuICAvLyBJbmNsdWRlcyBzdHJpbmcuXG4gIGRlZmluaXRpb25MYWJlbFN0cmluZzogJ2RlZmluaXRpb25MYWJlbFN0cmluZycsXG5cbiAgLy8gTWFya2VyIGJldHdlZW4gYSBsYWJlbCBhbmQgYSBkZXN0aW5hdGlvbiAoYDpgKS5cbiAgZGVmaW5pdGlvbk1hcmtlcjogJ2RlZmluaXRpb25NYXJrZXInLFxuXG4gIC8vIFRpdGxlIG9mIGEgZGVmaW5pdGlvbiAoYFwieFwiYCwgYCd5J2AsIG9yIGAoeilgKS5cbiAgLy8gSW5jbHVkZXMgYGRlZmluaXRpb25UaXRsZU1hcmtlcmAgYW5kIG9wdGlvbmFsbHkgYGRlZmluaXRpb25UaXRsZVN0cmluZ2AuXG4gIGRlZmluaXRpb25UaXRsZTogJ2RlZmluaXRpb25UaXRsZScsXG5cbiAgLy8gTWFya2VyIGFyb3VuZCBhIHRpdGxlIG9mIGEgZGVmaW5pdGlvbiAoYFwiYCwgYCdgLCBgKGAsIG9yIGApYCkuXG4gIGRlZmluaXRpb25UaXRsZU1hcmtlcjogJ2RlZmluaXRpb25UaXRsZU1hcmtlcicsXG5cbiAgLy8gRGF0YSB3aXRob3V0IG1hcmtlcnMgaW4gYSB0aXRsZSAoYHpgKS5cbiAgLy8gSW5jbHVkZXMgc3RyaW5nLlxuICBkZWZpbml0aW9uVGl0bGVTdHJpbmc6ICdkZWZpbml0aW9uVGl0bGVTdHJpbmcnLFxuXG4gIC8vIEVtcGhhc2lzIChgKmFscGhhKmApLlxuICAvLyBJbmNsdWRlcyBgZW1waGFzaXNTZXF1ZW5jZWAgYW5kIGBlbXBoYXNpc1RleHRgLlxuICBlbXBoYXNpczogJ2VtcGhhc2lzJyxcblxuICAvLyBTZXF1ZW5jZSBvZiBlbXBoYXNpcyBtYXJrZXJzIChgKmAgb3IgYF9gKS5cbiAgZW1waGFzaXNTZXF1ZW5jZTogJ2VtcGhhc2lzU2VxdWVuY2UnLFxuXG4gIC8vIEVtcGhhc2lzIHRleHQgKGBhbHBoYWApLlxuICAvLyBJbmNsdWRlcyB0ZXh0LlxuICBlbXBoYXNpc1RleHQ6ICdlbXBoYXNpc1RleHQnLFxuXG4gIC8vIFRoZSBjaGFyYWN0ZXIgZXNjYXBlIG1hcmtlciAoYFxcYCkuXG4gIGVzY2FwZU1hcmtlcjogJ2VzY2FwZU1hcmtlcicsXG5cbiAgLy8gQSBoYXJkIGJyZWFrIGNyZWF0ZWQgd2l0aCBhIGJhY2tzbGFzaCAoYFxcXFxuYCkuXG4gIC8vIEluY2x1ZGVzIGBlc2NhcGVNYXJrZXJgIChkb2VzIG5vdCBpbmNsdWRlIHRoZSBsaW5lIGVuZGluZylcbiAgaGFyZEJyZWFrRXNjYXBlOiAnaGFyZEJyZWFrRXNjYXBlJyxcblxuICAvLyBBIGhhcmQgYnJlYWsgY3JlYXRlZCB3aXRoIHRyYWlsaW5nIHNwYWNlcyAoYCAgXFxuYCkuXG4gIC8vIERvZXMgbm90IGluY2x1ZGUgdGhlIGxpbmUgZW5kaW5nLlxuICBoYXJkQnJlYWtUcmFpbGluZzogJ2hhcmRCcmVha1RyYWlsaW5nJyxcblxuICAvLyBGbG93IEhUTUw6XG4gIC8vXG4gIC8vIGBgYG1hcmtkb3duXG4gIC8vIDxkaXZcbiAgLy8gYGBgXG4gIC8vXG4gIC8vIElubGN1ZGVzIGBsaW5lRW5kaW5nYCwgYGh0bWxGbG93RGF0YWAuXG4gIGh0bWxGbG93OiAnaHRtbEZsb3cnLFxuXG4gIGh0bWxGbG93RGF0YTogJ2h0bWxGbG93RGF0YScsXG5cbiAgLy8gSFRNTCBpbiB0ZXh0ICh0aGUgdGFnIGluIGBhIDxpPiBiYCkuXG4gIC8vIEluY2x1ZGVzIGBsaW5lRW5kaW5nYCwgYGh0bWxUZXh0RGF0YWAuXG4gIGh0bWxUZXh0OiAnaHRtbFRleHQnLFxuXG4gIGh0bWxUZXh0RGF0YTogJ2h0bWxUZXh0RGF0YScsXG5cbiAgLy8gV2hvbGUgaW1hZ2UgKGAhW2FscGhhXShicmF2bylgLCBgIVthbHBoYV1bYnJhdm9dYCwgYCFbYWxwaGFdW11gLCBvclxuICAvLyBgIVthbHBoYV1gKS5cbiAgLy8gSW5jbHVkZXMgYGxhYmVsYCBhbmQgYW4gb3B0aW9uYWwgYHJlc291cmNlYCBvciBgcmVmZXJlbmNlYC5cbiAgaW1hZ2U6ICdpbWFnZScsXG5cbiAgLy8gV2hvbGUgbGluayBsYWJlbCAoYFsqYWxwaGEqXWApLlxuICAvLyBJbmNsdWRlcyBgbGFiZWxMaW5rYCBvciBgbGFiZWxJbWFnZWAsIGBsYWJlbFRleHRgLCBhbmQgYGxhYmVsRW5kYC5cbiAgbGFiZWw6ICdsYWJlbCcsXG5cbiAgLy8gVGV4dCBpbiBhbiBsYWJlbCAoYCphbHBoYSpgKS5cbiAgLy8gSW5jbHVkZXMgdGV4dC5cbiAgbGFiZWxUZXh0OiAnbGFiZWxUZXh0JyxcblxuICAvLyBTdGFydCBhIGxpbmsgbGFiZWwgKGBbYCkuXG4gIC8vIEluY2x1ZGVzIGEgYGxhYmVsTWFya2VyYC5cbiAgbGFiZWxMaW5rOiAnbGFiZWxMaW5rJyxcblxuICAvLyBTdGFydCBhbiBpbWFnZSBsYWJlbCAoYCFbYCkuXG4gIC8vIEluY2x1ZGVzIGBsYWJlbEltYWdlTWFya2VyYCBhbmQgYGxhYmVsTWFya2VyYC5cbiAgbGFiZWxJbWFnZTogJ2xhYmVsSW1hZ2UnLFxuXG4gIC8vIE1hcmtlciBvZiBhIGxhYmVsIChgW2Agb3IgYF1gKS5cbiAgbGFiZWxNYXJrZXI6ICdsYWJlbE1hcmtlcicsXG5cbiAgLy8gTWFya2VyIHRvIHN0YXJ0IGFuIGltYWdlIChgIWApLlxuICBsYWJlbEltYWdlTWFya2VyOiAnbGFiZWxJbWFnZU1hcmtlcicsXG5cbiAgLy8gRW5kIGEgbGFiZWwgKGBdYCkuXG4gIC8vIEluY2x1ZGVzIGBsYWJlbE1hcmtlcmAuXG4gIGxhYmVsRW5kOiAnbGFiZWxFbmQnLFxuXG4gIC8vIFdob2xlIGxpbmsgKGBbYWxwaGFdKGJyYXZvKWAsIGBbYWxwaGFdW2JyYXZvXWAsIGBbYWxwaGFdW11gLCBvciBgW2FscGhhXWApLlxuICAvLyBJbmNsdWRlcyBgbGFiZWxgIGFuZCBhbiBvcHRpb25hbCBgcmVzb3VyY2VgIG9yIGByZWZlcmVuY2VgLlxuICBsaW5rOiAnbGluaycsXG5cbiAgLy8gV2hvbGUgcGFyYWdyYXBoOlxuICAvL1xuICAvLyBgYGBtYXJrZG93blxuICAvLyBhbHBoYVxuICAvLyBicmF2by5cbiAgLy8gYGBgXG4gIC8vXG4gIC8vIEluY2x1ZGVzIHRleHQuXG4gIHBhcmFncmFwaDogJ3BhcmFncmFwaCcsXG5cbiAgLy8gQSByZWZlcmVuY2UgKGBbYWxwaGFdYCBvciBgW11gKS5cbiAgLy8gSW5jbHVkZXMgYHJlZmVyZW5jZU1hcmtlcmAgYW5kIGFuIG9wdGlvbmFsIGByZWZlcmVuY2VTdHJpbmdgLlxuICByZWZlcmVuY2U6ICdyZWZlcmVuY2UnLFxuXG4gIC8vIEEgcmVmZXJlbmNlIG1hcmtlciAoYFtgIG9yIGBdYCkuXG4gIHJlZmVyZW5jZU1hcmtlcjogJ3JlZmVyZW5jZU1hcmtlcicsXG5cbiAgLy8gUmVmZXJlbmNlIHRleHQgKGBhbHBoYWApLlxuICAvLyBJbmNsdWRlcyBzdHJpbmcuXG4gIHJlZmVyZW5jZVN0cmluZzogJ3JlZmVyZW5jZVN0cmluZycsXG5cbiAgLy8gQSByZXNvdXJjZSAoYChodHRwczovL2V4YW1wbGUuY29tIFwiYWxwaGFcIilgKS5cbiAgLy8gSW5jbHVkZXMgYHJlc291cmNlTWFya2VyYCwgYW4gb3B0aW9uYWwgYHJlc291cmNlRGVzdGluYXRpb25gIHdpdGggYW4gb3B0aW9uYWxcbiAgLy8gYHdoaXRlc3BhY2VgIGFuZCBgcmVzb3VyY2VUaXRsZWAuXG4gIHJlc291cmNlOiAncmVzb3VyY2UnLFxuXG4gIC8vIEEgcmVzb3VyY2UgZGVzdGluYXRpb24gKGBodHRwczovL2V4YW1wbGUuY29tYCkuXG4gIC8vIEluY2x1ZGVzIGByZXNvdXJjZURlc3RpbmF0aW9uTGl0ZXJhbGAgb3IgYHJlc291cmNlRGVzdGluYXRpb25SYXdgLlxuICByZXNvdXJjZURlc3RpbmF0aW9uOiAncmVzb3VyY2VEZXN0aW5hdGlvbicsXG5cbiAgLy8gQSBsaXRlcmFsIHJlc291cmNlIGRlc3RpbmF0aW9uIChgPGh0dHBzOi8vZXhhbXBsZS5jb20+YCkuXG4gIC8vIEluY2x1ZGVzIGByZXNvdXJjZURlc3RpbmF0aW9uTGl0ZXJhbE1hcmtlcmAgYW5kIG9wdGlvbmFsbHlcbiAgLy8gYHJlc291cmNlRGVzdGluYXRpb25TdHJpbmdgLlxuICByZXNvdXJjZURlc3RpbmF0aW9uTGl0ZXJhbDogJ3Jlc291cmNlRGVzdGluYXRpb25MaXRlcmFsJyxcblxuICAvLyBBIHJlc291cmNlIGRlc3RpbmF0aW9uIG1hcmtlciAoYDxgIG9yIGA+YCkuXG4gIHJlc291cmNlRGVzdGluYXRpb25MaXRlcmFsTWFya2VyOiAncmVzb3VyY2VEZXN0aW5hdGlvbkxpdGVyYWxNYXJrZXInLFxuXG4gIC8vIEEgcmF3IHJlc291cmNlIGRlc3RpbmF0aW9uIChgaHR0cHM6Ly9leGFtcGxlLmNvbWApLlxuICAvLyBJbmNsdWRlcyBgcmVzb3VyY2VEZXN0aW5hdGlvblN0cmluZ2AuXG4gIHJlc291cmNlRGVzdGluYXRpb25SYXc6ICdyZXNvdXJjZURlc3RpbmF0aW9uUmF3JyxcblxuICAvLyBSZXNvdXJjZSBkZXN0aW5hdGlvbiB0ZXh0IChgaHR0cHM6Ly9leGFtcGxlLmNvbWApLlxuICAvLyBJbmNsdWRlcyBzdHJpbmcuXG4gIHJlc291cmNlRGVzdGluYXRpb25TdHJpbmc6ICdyZXNvdXJjZURlc3RpbmF0aW9uU3RyaW5nJyxcblxuICAvLyBBIHJlc291cmNlIG1hcmtlciAoYChgIG9yIGApYCkuXG4gIHJlc291cmNlTWFya2VyOiAncmVzb3VyY2VNYXJrZXInLFxuXG4gIC8vIEEgcmVzb3VyY2UgdGl0bGUgKGBcImFscGhhXCJgLCBgJ2FscGhhJ2AsIG9yIGAoYWxwaGEpYCkuXG4gIC8vIEluY2x1ZGVzIGByZXNvdXJjZVRpdGxlTWFya2VyYCBhbmQgb3B0aW9uYWxseSBgcmVzb3VyY2VUaXRsZVN0cmluZ2AuXG4gIHJlc291cmNlVGl0bGU6ICdyZXNvdXJjZVRpdGxlJyxcblxuICAvLyBBIHJlc291cmNlIHRpdGxlIG1hcmtlciAoYFwiYCwgYCdgLCBgKGAsIG9yIGApYCkuXG4gIHJlc291cmNlVGl0bGVNYXJrZXI6ICdyZXNvdXJjZVRpdGxlTWFya2VyJyxcblxuICAvLyBSZXNvdXJjZSBkZXN0aW5hdGlvbiB0aXRsZSAoYGFscGhhYCkuXG4gIC8vIEluY2x1ZGVzIHN0cmluZy5cbiAgcmVzb3VyY2VUaXRsZVN0cmluZzogJ3Jlc291cmNlVGl0bGVTdHJpbmcnLFxuXG4gIC8vIFdob2xlIHNldGV4dCBoZWFkaW5nOlxuICAvL1xuICAvLyBgYGBtYXJrZG93blxuICAvLyBhbHBoYVxuICAvLyBicmF2b1xuICAvLyA9PT09PVxuICAvLyBgYGBcbiAgLy9cbiAgLy8gSW5jbHVkZXMgYHNldGV4dEhlYWRpbmdUZXh0YCwgYGxpbmVFbmRpbmdgLCBgbGluZVByZWZpeGAsIGFuZFxuICAvLyBgc2V0ZXh0SGVhZGluZ0xpbmVgLlxuICBzZXRleHRIZWFkaW5nOiAnc2V0ZXh0SGVhZGluZycsXG5cbiAgLy8gQ29udGVudCBpbiBhIHNldGV4dCBoZWFkaW5nIChgYWxwaGFcXG5icmF2b2ApLlxuICAvLyBJbmNsdWRlcyB0ZXh0LlxuICBzZXRleHRIZWFkaW5nVGV4dDogJ3NldGV4dEhlYWRpbmdUZXh0JyxcblxuICAvLyBVbmRlcmxpbmUgaW4gYSBzZXRleHQgaGVhZGluZywgaW5jbHVkaW5nIHdoaXRlc3BhY2Ugc3VmZml4IChgPT1gKS5cbiAgLy8gSW5jbHVkZXMgYHNldGV4dEhlYWRpbmdMaW5lU2VxdWVuY2VgLlxuICBzZXRleHRIZWFkaW5nTGluZTogJ3NldGV4dEhlYWRpbmdMaW5lJyxcblxuICAvLyBTZXF1ZW5jZSBvZiBlcXVhbHMgb3IgZGFzaCBjaGFyYWN0ZXJzIGluIHVuZGVybGluZSBpbiBhIHNldGV4dCBoZWFkaW5nIChgLWApLlxuICBzZXRleHRIZWFkaW5nTGluZVNlcXVlbmNlOiAnc2V0ZXh0SGVhZGluZ0xpbmVTZXF1ZW5jZScsXG5cbiAgLy8gU3Ryb25nIChgKiphbHBoYSoqYCkuXG4gIC8vIEluY2x1ZGVzIGBzdHJvbmdTZXF1ZW5jZWAgYW5kIGBzdHJvbmdUZXh0YC5cbiAgc3Ryb25nOiAnc3Ryb25nJyxcblxuICAvLyBTZXF1ZW5jZSBvZiBzdHJvbmcgbWFya2VycyAoYCoqYCBvciBgX19gKS5cbiAgc3Ryb25nU2VxdWVuY2U6ICdzdHJvbmdTZXF1ZW5jZScsXG5cbiAgLy8gU3Ryb25nIHRleHQgKGBhbHBoYWApLlxuICAvLyBJbmNsdWRlcyB0ZXh0LlxuICBzdHJvbmdUZXh0OiAnc3Ryb25nVGV4dCcsXG5cbiAgLy8gV2hvbGUgdGhlbWF0aWMgYnJlYWs6XG4gIC8vXG4gIC8vIGBgYG1hcmtkb3duXG4gIC8vICogKiAqXG4gIC8vIGBgYFxuICAvL1xuICAvLyBJbmNsdWRlcyBgdGhlbWF0aWNCcmVha1NlcXVlbmNlYCBhbmQgYHdoaXRlc3BhY2VgLlxuICB0aGVtYXRpY0JyZWFrOiAndGhlbWF0aWNCcmVhaycsXG5cbiAgLy8gQSBzZXF1ZW5jZSBvZiBvbmUgb3IgbW9yZSB0aGVtYXRpYyBicmVhayBtYXJrZXJzIChgKioqYCkuXG4gIHRoZW1hdGljQnJlYWtTZXF1ZW5jZTogJ3RoZW1hdGljQnJlYWtTZXF1ZW5jZScsXG5cbiAgLy8gV2hvbGUgYmxvY2sgcXVvdGU6XG4gIC8vXG4gIC8vIGBgYG1hcmtkb3duXG4gIC8vID4gYVxuICAvLyA+XG4gIC8vID4gYlxuICAvLyBgYGBcbiAgLy9cbiAgLy8gSW5jbHVkZXMgYGJsb2NrUXVvdGVQcmVmaXhgIGFuZCBmbG93LlxuICBibG9ja1F1b3RlOiAnYmxvY2tRdW90ZScsXG4gIC8vIFRoZSBgPmAgb3IgYD4gYCBvZiBhIGJsb2NrIHF1b3RlLlxuICBibG9ja1F1b3RlUHJlZml4OiAnYmxvY2tRdW90ZVByZWZpeCcsXG4gIC8vIFRoZSBgPmAgb2YgYSBibG9jayBxdW90ZSBwcmVmaXguXG4gIGJsb2NrUXVvdGVNYXJrZXI6ICdibG9ja1F1b3RlTWFya2VyJyxcbiAgLy8gVGhlIG9wdGlvbmFsIGAgYCBvZiBhIGJsb2NrIHF1b3RlIHByZWZpeC5cbiAgYmxvY2tRdW90ZVByZWZpeFdoaXRlc3BhY2U6ICdibG9ja1F1b3RlUHJlZml4V2hpdGVzcGFjZScsXG5cbiAgLy8gV2hvbGUgdW5vcmRlcmVkIGxpc3Q6XG4gIC8vXG4gIC8vIGBgYG1hcmtkb3duXG4gIC8vIC0gYVxuICAvLyAgIGJcbiAgLy8gYGBgXG4gIC8vXG4gIC8vIEluY2x1ZGVzIGBsaXN0SXRlbVByZWZpeGAsIGZsb3csIGFuZCBvcHRpb25hbGx5ICBgbGlzdEl0ZW1JbmRlbnRgIG9uIGZ1cnRoZXJcbiAgLy8gbGluZXMuXG4gIGxpc3RPcmRlcmVkOiAnbGlzdE9yZGVyZWQnLFxuXG4gIC8vIFdob2xlIG9yZGVyZWQgbGlzdDpcbiAgLy9cbiAgLy8gYGBgbWFya2Rvd25cbiAgLy8gMS4gYVxuICAvLyAgICBiXG4gIC8vIGBgYFxuICAvL1xuICAvLyBJbmNsdWRlcyBgbGlzdEl0ZW1QcmVmaXhgLCBmbG93LCBhbmQgb3B0aW9uYWxseSAgYGxpc3RJdGVtSW5kZW50YCBvbiBmdXJ0aGVyXG4gIC8vIGxpbmVzLlxuICBsaXN0VW5vcmRlcmVkOiAnbGlzdFVub3JkZXJlZCcsXG5cbiAgLy8gVGhlIGluZGVudCBvZiBmdXJ0aGVyIGxpc3QgaXRlbSBsaW5lcy5cbiAgbGlzdEl0ZW1JbmRlbnQ6ICdsaXN0SXRlbUluZGVudCcsXG5cbiAgLy8gQSBtYXJrZXIsIGFzIGluLCBgKmAsIGArYCwgYC1gLCBgLmAsIG9yIGApYC5cbiAgbGlzdEl0ZW1NYXJrZXI6ICdsaXN0SXRlbU1hcmtlcicsXG5cbiAgLy8gVGhlIHRoaW5nIHRoYXQgc3RhcnRzIGEgbGlzdCBpdGVtLCBzdWNoIGFzIGAxLiBgLlxuICAvLyBJbmNsdWRlcyBgbGlzdEl0ZW1WYWx1ZWAgaWYgb3JkZXJlZCwgYGxpc3RJdGVtTWFya2VyYCwgYW5kXG4gIC8vIGBsaXN0SXRlbVByZWZpeFdoaXRlc3BhY2VgICh1bmxlc3MgZm9sbG93ZWQgYnkgYSBsaW5lIGVuZGluZykuXG4gIGxpc3RJdGVtUHJlZml4OiAnbGlzdEl0ZW1QcmVmaXgnLFxuXG4gIC8vIFRoZSB3aGl0ZXNwYWNlIGFmdGVyIGEgbWFya2VyLlxuICBsaXN0SXRlbVByZWZpeFdoaXRlc3BhY2U6ICdsaXN0SXRlbVByZWZpeFdoaXRlc3BhY2UnLFxuXG4gIC8vIFRoZSBudW1lcmljYWwgdmFsdWUgb2YgYW4gb3JkZXJlZCBpdGVtLlxuICBsaXN0SXRlbVZhbHVlOiAnbGlzdEl0ZW1WYWx1ZScsXG5cbiAgLy8gSW50ZXJuYWwgdHlwZXMgdXNlZCBmb3Igc3VidG9rZW5pemVycywgY29tcGlsZWQgYXdheVxuICBjaHVua0RvY3VtZW50OiAnY2h1bmtEb2N1bWVudCcsXG4gIGNodW5rQ29udGVudDogJ2NodW5rQ29udGVudCcsXG4gIGNodW5rRmxvdzogJ2NodW5rRmxvdycsXG4gIGNodW5rVGV4dDogJ2NodW5rVGV4dCcsXG4gIGNodW5rU3RyaW5nOiAnY2h1bmtTdHJpbmcnXG59XG4iLCIvLyBUaGlzIG1vZHVsZSBpcyBjb21waWxlZCBhd2F5IVxuLy9cbi8vIFdoaWxlIG1pY3JvbWFyayB3b3JrcyBiYXNlZCBvbiBjaGFyYWN0ZXIgY29kZXMsIHRoaXMgbW9kdWxlIGluY2x1ZGVzIHRoZVxuLy8gc3RyaW5nIHZlcnNpb25zIG9mIOKAmWVtLlxuLy8gVGhlIEMwIGJsb2NrLCBleGNlcHQgZm9yIExGLCBDUiwgSFQsIGFuZCB3LyB0aGUgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIGFkZGVkLFxuLy8gYXJlIGF2YWlsYWJsZSBoZXJlLlxuZXhwb3J0IGNvbnN0IHZhbHVlcyA9IHtcbiAgaHQ6ICdcXHQnLFxuICBsZjogJ1xcbicsXG4gIGNyOiAnXFxyJyxcbiAgc3BhY2U6ICcgJyxcbiAgZXhjbGFtYXRpb25NYXJrOiAnIScsXG4gIHF1b3RhdGlvbk1hcms6ICdcIicsXG4gIG51bWJlclNpZ246ICcjJyxcbiAgZG9sbGFyU2lnbjogJyQnLFxuICBwZXJjZW50U2lnbjogJyUnLFxuICBhbXBlcnNhbmQ6ICcmJyxcbiAgYXBvc3Ryb3BoZTogXCInXCIsXG4gIGxlZnRQYXJlbnRoZXNpczogJygnLFxuICByaWdodFBhcmVudGhlc2lzOiAnKScsXG4gIGFzdGVyaXNrOiAnKicsXG4gIHBsdXNTaWduOiAnKycsXG4gIGNvbW1hOiAnLCcsXG4gIGRhc2g6ICctJyxcbiAgZG90OiAnLicsXG4gIHNsYXNoOiAnLycsXG4gIGRpZ2l0MDogJzAnLFxuICBkaWdpdDE6ICcxJyxcbiAgZGlnaXQyOiAnMicsXG4gIGRpZ2l0MzogJzMnLFxuICBkaWdpdDQ6ICc0JyxcbiAgZGlnaXQ1OiAnNScsXG4gIGRpZ2l0NjogJzYnLFxuICBkaWdpdDc6ICc3JyxcbiAgZGlnaXQ4OiAnOCcsXG4gIGRpZ2l0OTogJzknLFxuICBjb2xvbjogJzonLFxuICBzZW1pY29sb246ICc7JyxcbiAgbGVzc1RoYW46ICc8JyxcbiAgZXF1YWxzVG86ICc9JyxcbiAgZ3JlYXRlclRoYW46ICc+JyxcbiAgcXVlc3Rpb25NYXJrOiAnPycsXG4gIGF0U2lnbjogJ0AnLFxuICB1cHBlcmNhc2VBOiAnQScsXG4gIHVwcGVyY2FzZUI6ICdCJyxcbiAgdXBwZXJjYXNlQzogJ0MnLFxuICB1cHBlcmNhc2VEOiAnRCcsXG4gIHVwcGVyY2FzZUU6ICdFJyxcbiAgdXBwZXJjYXNlRjogJ0YnLFxuICB1cHBlcmNhc2VHOiAnRycsXG4gIHVwcGVyY2FzZUg6ICdIJyxcbiAgdXBwZXJjYXNlSTogJ0knLFxuICB1cHBlcmNhc2VKOiAnSicsXG4gIHVwcGVyY2FzZUs6ICdLJyxcbiAgdXBwZXJjYXNlTDogJ0wnLFxuICB1cHBlcmNhc2VNOiAnTScsXG4gIHVwcGVyY2FzZU46ICdOJyxcbiAgdXBwZXJjYXNlTzogJ08nLFxuICB1cHBlcmNhc2VQOiAnUCcsXG4gIHVwcGVyY2FzZVE6ICdRJyxcbiAgdXBwZXJjYXNlUjogJ1InLFxuICB1cHBlcmNhc2VTOiAnUycsXG4gIHVwcGVyY2FzZVQ6ICdUJyxcbiAgdXBwZXJjYXNlVTogJ1UnLFxuICB1cHBlcmNhc2VWOiAnVicsXG4gIHVwcGVyY2FzZVc6ICdXJyxcbiAgdXBwZXJjYXNlWDogJ1gnLFxuICB1cHBlcmNhc2VZOiAnWScsXG4gIHVwcGVyY2FzZVo6ICdaJyxcbiAgbGVmdFNxdWFyZUJyYWNrZXQ6ICdbJyxcbiAgYmFja3NsYXNoOiAnXFxcXCcsXG4gIHJpZ2h0U3F1YXJlQnJhY2tldDogJ10nLFxuICBjYXJldDogJ14nLFxuICB1bmRlcnNjb3JlOiAnXycsXG4gIGdyYXZlQWNjZW50OiAnYCcsXG4gIGxvd2VyY2FzZUE6ICdhJyxcbiAgbG93ZXJjYXNlQjogJ2InLFxuICBsb3dlcmNhc2VDOiAnYycsXG4gIGxvd2VyY2FzZUQ6ICdkJyxcbiAgbG93ZXJjYXNlRTogJ2UnLFxuICBsb3dlcmNhc2VGOiAnZicsXG4gIGxvd2VyY2FzZUc6ICdnJyxcbiAgbG93ZXJjYXNlSDogJ2gnLFxuICBsb3dlcmNhc2VJOiAnaScsXG4gIGxvd2VyY2FzZUo6ICdqJyxcbiAgbG93ZXJjYXNlSzogJ2snLFxuICBsb3dlcmNhc2VMOiAnbCcsXG4gIGxvd2VyY2FzZU06ICdtJyxcbiAgbG93ZXJjYXNlTjogJ24nLFxuICBsb3dlcmNhc2VPOiAnbycsXG4gIGxvd2VyY2FzZVA6ICdwJyxcbiAgbG93ZXJjYXNlUTogJ3EnLFxuICBsb3dlcmNhc2VSOiAncicsXG4gIGxvd2VyY2FzZVM6ICdzJyxcbiAgbG93ZXJjYXNlVDogJ3QnLFxuICBsb3dlcmNhc2VVOiAndScsXG4gIGxvd2VyY2FzZVY6ICd2JyxcbiAgbG93ZXJjYXNlVzogJ3cnLFxuICBsb3dlcmNhc2VYOiAneCcsXG4gIGxvd2VyY2FzZVk6ICd5JyxcbiAgbG93ZXJjYXNlWjogJ3onLFxuICBsZWZ0Q3VybHlCcmFjZTogJ3snLFxuICB2ZXJ0aWNhbEJhcjogJ3wnLFxuICByaWdodEN1cmx5QnJhY2U6ICd9JyxcbiAgdGlsZGU6ICd+JyxcbiAgcmVwbGFjZW1lbnRDaGFyYWN0ZXI6ICfvv70nXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuRXh0ZW5zaW9ufSBFeHRlbnNpb25cbiAqL1xuXG5pbXBvcnQge1xuICBhdHRlbnRpb24sXG4gIGF1dG9saW5rLFxuICBibG9ja1F1b3RlLFxuICBjaGFyYWN0ZXJFc2NhcGUsXG4gIGNoYXJhY3RlclJlZmVyZW5jZSxcbiAgY29kZUZlbmNlZCxcbiAgY29kZUluZGVudGVkLFxuICBjb2RlVGV4dCxcbiAgZGVmaW5pdGlvbixcbiAgaGFyZEJyZWFrRXNjYXBlLFxuICBoZWFkaW5nQXR4LFxuICBodG1sRmxvdyxcbiAgaHRtbFRleHQsXG4gIGxhYmVsRW5kLFxuICBsYWJlbFN0YXJ0SW1hZ2UsXG4gIGxhYmVsU3RhcnRMaW5rLFxuICBsaW5lRW5kaW5nLFxuICBsaXN0LFxuICBzZXRleHRVbmRlcmxpbmUsXG4gIHRoZW1hdGljQnJlYWtcbn0gZnJvbSAnbWljcm9tYXJrLWNvcmUtY29tbW9ubWFyaydcbmltcG9ydCB7Y29kZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb2Rlcy5qcydcbmltcG9ydCB7cmVzb2x2ZXIgYXMgcmVzb2x2ZVRleHR9IGZyb20gJy4vaW5pdGlhbGl6ZS90ZXh0LmpzJ1xuXG4vKiogQHR5cGUge0V4dGVuc2lvblsnZG9jdW1lbnQnXX0gKi9cbmV4cG9ydCBjb25zdCBkb2N1bWVudCA9IHtcbiAgW2NvZGVzLmFzdGVyaXNrXTogbGlzdCxcbiAgW2NvZGVzLnBsdXNTaWduXTogbGlzdCxcbiAgW2NvZGVzLmRhc2hdOiBsaXN0LFxuICBbY29kZXMuZGlnaXQwXTogbGlzdCxcbiAgW2NvZGVzLmRpZ2l0MV06IGxpc3QsXG4gIFtjb2Rlcy5kaWdpdDJdOiBsaXN0LFxuICBbY29kZXMuZGlnaXQzXTogbGlzdCxcbiAgW2NvZGVzLmRpZ2l0NF06IGxpc3QsXG4gIFtjb2Rlcy5kaWdpdDVdOiBsaXN0LFxuICBbY29kZXMuZGlnaXQ2XTogbGlzdCxcbiAgW2NvZGVzLmRpZ2l0N106IGxpc3QsXG4gIFtjb2Rlcy5kaWdpdDhdOiBsaXN0LFxuICBbY29kZXMuZGlnaXQ5XTogbGlzdCxcbiAgW2NvZGVzLmdyZWF0ZXJUaGFuXTogYmxvY2tRdW90ZVxufVxuXG4vKiogQHR5cGUge0V4dGVuc2lvblsnY29udGVudEluaXRpYWwnXX0gKi9cbmV4cG9ydCBjb25zdCBjb250ZW50SW5pdGlhbCA9IHtcbiAgW2NvZGVzLmxlZnRTcXVhcmVCcmFja2V0XTogZGVmaW5pdGlvblxufVxuXG4vKiogQHR5cGUge0V4dGVuc2lvblsnZmxvd0luaXRpYWwnXX0gKi9cbmV4cG9ydCBjb25zdCBmbG93SW5pdGlhbCA9IHtcbiAgW2NvZGVzLmhvcml6b250YWxUYWJdOiBjb2RlSW5kZW50ZWQsXG4gIFtjb2Rlcy52aXJ0dWFsU3BhY2VdOiBjb2RlSW5kZW50ZWQsXG4gIFtjb2Rlcy5zcGFjZV06IGNvZGVJbmRlbnRlZFxufVxuXG4vKiogQHR5cGUge0V4dGVuc2lvblsnZmxvdyddfSAqL1xuZXhwb3J0IGNvbnN0IGZsb3cgPSB7XG4gIFtjb2Rlcy5udW1iZXJTaWduXTogaGVhZGluZ0F0eCxcbiAgW2NvZGVzLmFzdGVyaXNrXTogdGhlbWF0aWNCcmVhayxcbiAgW2NvZGVzLmRhc2hdOiBbc2V0ZXh0VW5kZXJsaW5lLCB0aGVtYXRpY0JyZWFrXSxcbiAgW2NvZGVzLmxlc3NUaGFuXTogaHRtbEZsb3csXG4gIFtjb2Rlcy5lcXVhbHNUb106IHNldGV4dFVuZGVybGluZSxcbiAgW2NvZGVzLnVuZGVyc2NvcmVdOiB0aGVtYXRpY0JyZWFrLFxuICBbY29kZXMuZ3JhdmVBY2NlbnRdOiBjb2RlRmVuY2VkLFxuICBbY29kZXMudGlsZGVdOiBjb2RlRmVuY2VkXG59XG5cbi8qKiBAdHlwZSB7RXh0ZW5zaW9uWydzdHJpbmcnXX0gKi9cbmV4cG9ydCBjb25zdCBzdHJpbmcgPSB7XG4gIFtjb2Rlcy5hbXBlcnNhbmRdOiBjaGFyYWN0ZXJSZWZlcmVuY2UsXG4gIFtjb2Rlcy5iYWNrc2xhc2hdOiBjaGFyYWN0ZXJFc2NhcGVcbn1cblxuLyoqIEB0eXBlIHtFeHRlbnNpb25bJ3RleHQnXX0gKi9cbmV4cG9ydCBjb25zdCB0ZXh0ID0ge1xuICBbY29kZXMuY2FycmlhZ2VSZXR1cm5dOiBsaW5lRW5kaW5nLFxuICBbY29kZXMubGluZUZlZWRdOiBsaW5lRW5kaW5nLFxuICBbY29kZXMuY2FycmlhZ2VSZXR1cm5MaW5lRmVlZF06IGxpbmVFbmRpbmcsXG4gIFtjb2Rlcy5leGNsYW1hdGlvbk1hcmtdOiBsYWJlbFN0YXJ0SW1hZ2UsXG4gIFtjb2Rlcy5hbXBlcnNhbmRdOiBjaGFyYWN0ZXJSZWZlcmVuY2UsXG4gIFtjb2Rlcy5hc3Rlcmlza106IGF0dGVudGlvbixcbiAgW2NvZGVzLmxlc3NUaGFuXTogW2F1dG9saW5rLCBodG1sVGV4dF0sXG4gIFtjb2Rlcy5sZWZ0U3F1YXJlQnJhY2tldF06IGxhYmVsU3RhcnRMaW5rLFxuICBbY29kZXMuYmFja3NsYXNoXTogW2hhcmRCcmVha0VzY2FwZSwgY2hhcmFjdGVyRXNjYXBlXSxcbiAgW2NvZGVzLnJpZ2h0U3F1YXJlQnJhY2tldF06IGxhYmVsRW5kLFxuICBbY29kZXMudW5kZXJzY29yZV06IGF0dGVudGlvbixcbiAgW2NvZGVzLmdyYXZlQWNjZW50XTogY29kZVRleHRcbn1cblxuLyoqIEB0eXBlIHtFeHRlbnNpb25bJ2luc2lkZVNwYW4nXX0gKi9cbmV4cG9ydCBjb25zdCBpbnNpZGVTcGFuID0ge251bGw6IFthdHRlbnRpb24sIHJlc29sdmVUZXh0XX1cblxuLyoqIEB0eXBlIHtFeHRlbnNpb25bJ2F0dGVudGlvbk1hcmtlcnMnXX0gKi9cbmV4cG9ydCBjb25zdCBhdHRlbnRpb25NYXJrZXJzID0ge251bGw6IFtjb2Rlcy5hc3RlcmlzaywgY29kZXMudW5kZXJzY29yZV19XG5cbi8qKiBAdHlwZSB7RXh0ZW5zaW9uWydkaXNhYmxlJ119ICovXG5leHBvcnQgY29uc3QgZGlzYWJsZSA9IHtudWxsOiBbXX1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db2RlfSBDb2RlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNodW5rfSBDaHVua1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Qb2ludH0gUG9pbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW59IFRva2VuXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkVmZmVjdHN9IEVmZmVjdHNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuU3RhdGV9IFN0YXRlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvbnN0cnVjdH0gQ29uc3RydWN0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkluaXRpYWxDb25zdHJ1Y3R9IEluaXRpYWxDb25zdHJ1Y3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuQ29uc3RydWN0UmVjb3JkfSBDb25zdHJ1Y3RSZWNvcmRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW5pemVDb250ZXh0fSBUb2tlbml6ZUNvbnRleHRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuUGFyc2VDb250ZXh0fSBQYXJzZUNvbnRleHRcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIEluZm9cbiAqIEBwcm9wZXJ0eSB7KCkgPT4gdm9pZH0gcmVzdG9yZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGZyb21cbiAqXG4gKiBAY2FsbGJhY2sgUmV0dXJuSGFuZGxlXG4gKiAgIEhhbmRsZSBhIHN1Y2Nlc3NmdWwgcnVuLlxuICogQHBhcmFtIHtDb25zdHJ1Y3R9IGNvbnN0cnVjdFxuICogQHBhcmFtIHtJbmZvfSBpbmZvXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAndXZ1L2Fzc2VydCdcbmltcG9ydCBjcmVhdGVEZWJ1ZyBmcm9tICdkZWJ1ZydcbmltcG9ydCB7bWFya2Rvd25MaW5lRW5kaW5nfSBmcm9tICdtaWNyb21hcmstdXRpbC1jaGFyYWN0ZXInXG5pbXBvcnQge3B1c2gsIHNwbGljZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2h1bmtlZCdcbmltcG9ydCB7cmVzb2x2ZUFsbH0gZnJvbSAnbWljcm9tYXJrLXV0aWwtcmVzb2x2ZS1hbGwnXG5pbXBvcnQge2NvZGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvY29kZXMuanMnXG5pbXBvcnQge3ZhbHVlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL3ZhbHVlcy5qcydcblxuY29uc3QgZGVidWcgPSBjcmVhdGVEZWJ1ZygnbWljcm9tYXJrJylcblxuLyoqXG4gKiBDcmVhdGUgYSB0b2tlbml6ZXIuXG4gKiBUb2tlbml6ZXJzIGRlYWwgd2l0aCBvbmUgdHlwZSBvZiBkYXRhIChlLmcuLCBjb250YWluZXJzLCBmbG93LCB0ZXh0KS5cbiAqIFRoZSBwYXJzZXIgaXMgdGhlIG9iamVjdCBkZWFsaW5nIHdpdGggaXQgYWxsLlxuICogYGluaXRpYWxpemVgIHdvcmtzIGxpa2Ugb3RoZXIgY29uc3RydWN0cywgZXhjZXB0IHRoYXQgb25seSBpdHMgYHRva2VuaXplYFxuICogZnVuY3Rpb24gaXMgdXNlZCwgaW4gd2hpY2ggY2FzZSBpdCBkb2VzbuKAmXQgcmVjZWl2ZSBhbiBgb2tgIG9yIGBub2tgLlxuICogYGZyb21gIGNhbiBiZSBnaXZlbiB0byBzZXQgdGhlIHBvaW50IGJlZm9yZSB0aGUgZmlyc3QgY2hhcmFjdGVyLCBhbHRob3VnaFxuICogd2hlbiBmdXJ0aGVyIGxpbmVzIGFyZSBpbmRlbnRlZCwgdGhleSBtdXN0IGJlIHNldCB3aXRoIGBkZWZpbmVTa2lwYC5cbiAqXG4gKiBAcGFyYW0ge1BhcnNlQ29udGV4dH0gcGFyc2VyXG4gKiBAcGFyYW0ge0luaXRpYWxDb25zdHJ1Y3R9IGluaXRpYWxpemVcbiAqIEBwYXJhbSB7T21pdDxQb2ludCwgJ19pbmRleCd8J19idWZmZXJJbmRleCc+fSBbZnJvbV1cbiAqIEByZXR1cm5zIHtUb2tlbml6ZUNvbnRleHR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUb2tlbml6ZXIocGFyc2VyLCBpbml0aWFsaXplLCBmcm9tKSB7XG4gIC8qKiBAdHlwZSB7UG9pbnR9ICovXG4gIGxldCBwb2ludCA9IE9iamVjdC5hc3NpZ24oXG4gICAgZnJvbSA/IE9iamVjdC5hc3NpZ24oe30sIGZyb20pIDoge2xpbmU6IDEsIGNvbHVtbjogMSwgb2Zmc2V0OiAwfSxcbiAgICB7X2luZGV4OiAwLCBfYnVmZmVySW5kZXg6IC0xfVxuICApXG4gIC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgbnVtYmVyPn0gKi9cbiAgY29uc3QgY29sdW1uU3RhcnQgPSB7fVxuICAvKiogQHR5cGUge0FycmF5PENvbnN0cnVjdD59ICovXG4gIGNvbnN0IHJlc29sdmVBbGxDb25zdHJ1Y3RzID0gW11cbiAgLyoqIEB0eXBlIHtBcnJheTxDaHVuaz59ICovXG4gIGxldCBjaHVua3MgPSBbXVxuICAvKiogQHR5cGUge0FycmF5PFRva2VuPn0gKi9cbiAgbGV0IHN0YWNrID0gW11cbiAgLyoqIEB0eXBlIHtib29sZWFufHVuZGVmaW5lZH0gKi9cbiAgbGV0IGNvbnN1bWVkID0gdHJ1ZVxuXG4gIC8qKlxuICAgKiBUb29scyB1c2VkIGZvciB0b2tlbml6aW5nLlxuICAgKlxuICAgKiBAdHlwZSB7RWZmZWN0c31cbiAgICovXG4gIGNvbnN0IGVmZmVjdHMgPSB7XG4gICAgY29uc3VtZSxcbiAgICBlbnRlcixcbiAgICBleGl0LFxuICAgIGF0dGVtcHQ6IGNvbnN0cnVjdEZhY3Rvcnkob25zdWNjZXNzZnVsY29uc3RydWN0KSxcbiAgICBjaGVjazogY29uc3RydWN0RmFjdG9yeShvbnN1Y2Nlc3NmdWxjaGVjayksXG4gICAgaW50ZXJydXB0OiBjb25zdHJ1Y3RGYWN0b3J5KG9uc3VjY2Vzc2Z1bGNoZWNrLCB7aW50ZXJydXB0OiB0cnVlfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGF0ZSBhbmQgdG9vbHMgZm9yIHJlc29sdmluZyBhbmQgc2VyaWFsaXppbmcuXG4gICAqXG4gICAqIEB0eXBlIHtUb2tlbml6ZUNvbnRleHR9XG4gICAqL1xuICBjb25zdCBjb250ZXh0ID0ge1xuICAgIHByZXZpb3VzOiBjb2Rlcy5lb2YsXG4gICAgY29kZTogY29kZXMuZW9mLFxuICAgIGNvbnRhaW5lclN0YXRlOiB7fSxcbiAgICBldmVudHM6IFtdLFxuICAgIHBhcnNlcixcbiAgICBzbGljZVN0cmVhbSxcbiAgICBzbGljZVNlcmlhbGl6ZSxcbiAgICBub3csXG4gICAgZGVmaW5lU2tpcCxcbiAgICB3cml0ZVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBzdGF0ZSBmdW5jdGlvbi5cbiAgICpcbiAgICogQHR5cGUge1N0YXRlfHZvaWR9XG4gICAqL1xuICBsZXQgc3RhdGUgPSBpbml0aWFsaXplLnRva2VuaXplLmNhbGwoY29udGV4dCwgZWZmZWN0cylcblxuICAvKipcbiAgICogVHJhY2sgd2hpY2ggY2hhcmFjdGVyIHdlIGV4cGVjdCB0byBiZSBjb25zdW1lZCwgdG8gY2F0Y2ggYnVncy5cbiAgICpcbiAgICogQHR5cGUge0NvZGV9XG4gICAqL1xuICBsZXQgZXhwZWN0ZWRDb2RlXG5cbiAgaWYgKGluaXRpYWxpemUucmVzb2x2ZUFsbCkge1xuICAgIHJlc29sdmVBbGxDb25zdHJ1Y3RzLnB1c2goaW5pdGlhbGl6ZSlcbiAgfVxuXG4gIHJldHVybiBjb250ZXh0XG5cbiAgLyoqIEB0eXBlIHtUb2tlbml6ZUNvbnRleHRbJ3dyaXRlJ119ICovXG4gIGZ1bmN0aW9uIHdyaXRlKHNsaWNlKSB7XG4gICAgY2h1bmtzID0gcHVzaChjaHVua3MsIHNsaWNlKVxuXG4gICAgbWFpbigpXG5cbiAgICAvLyBFeGl0IGlmIHdl4oCZcmUgbm90IGRvbmUsIHJlc29sdmUgbWlnaHQgY2hhbmdlIHN0dWZmLlxuICAgIGlmIChjaHVua3NbY2h1bmtzLmxlbmd0aCAtIDFdICE9PSBjb2Rlcy5lb2YpIHtcbiAgICAgIHJldHVybiBbXVxuICAgIH1cblxuICAgIGFkZFJlc3VsdChpbml0aWFsaXplLCAwKVxuXG4gICAgLy8gT3RoZXJ3aXNlLCByZXNvbHZlLCBhbmQgZXhpdC5cbiAgICBjb250ZXh0LmV2ZW50cyA9IHJlc29sdmVBbGwocmVzb2x2ZUFsbENvbnN0cnVjdHMsIGNvbnRleHQuZXZlbnRzLCBjb250ZXh0KVxuXG4gICAgcmV0dXJuIGNvbnRleHQuZXZlbnRzXG4gIH1cblxuICAvL1xuICAvLyBUb29scy5cbiAgLy9cblxuICAvKiogQHR5cGUge1Rva2VuaXplQ29udGV4dFsnc2xpY2VTZXJpYWxpemUnXX0gKi9cbiAgZnVuY3Rpb24gc2xpY2VTZXJpYWxpemUodG9rZW4sIGV4cGFuZFRhYnMpIHtcbiAgICByZXR1cm4gc2VyaWFsaXplQ2h1bmtzKHNsaWNlU3RyZWFtKHRva2VuKSwgZXhwYW5kVGFicylcbiAgfVxuXG4gIC8qKiBAdHlwZSB7VG9rZW5pemVDb250ZXh0WydzbGljZVN0cmVhbSddfSAqL1xuICBmdW5jdGlvbiBzbGljZVN0cmVhbSh0b2tlbikge1xuICAgIHJldHVybiBzbGljZUNodW5rcyhjaHVua3MsIHRva2VuKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtUb2tlbml6ZUNvbnRleHRbJ25vdyddfSAqL1xuICBmdW5jdGlvbiBub3coKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHBvaW50KVxuICB9XG5cbiAgLyoqIEB0eXBlIHtUb2tlbml6ZUNvbnRleHRbJ2RlZmluZVNraXAnXX0gKi9cbiAgZnVuY3Rpb24gZGVmaW5lU2tpcCh2YWx1ZSkge1xuICAgIGNvbHVtblN0YXJ0W3ZhbHVlLmxpbmVdID0gdmFsdWUuY29sdW1uXG4gICAgYWNjb3VudEZvclBvdGVudGlhbFNraXAoKVxuICAgIGRlYnVnKCdwb3NpdGlvbjogZGVmaW5lIHNraXA6IGAlamAnLCBwb2ludClcbiAgfVxuXG4gIC8vXG4gIC8vIFN0YXRlIG1hbmFnZW1lbnQuXG4gIC8vXG5cbiAgLyoqXG4gICAqIE1haW4gbG9vcCAobm90ZSB0aGF0IGBfaW5kZXhgIGFuZCBgX2J1ZmZlckluZGV4YCBpbiBgcG9pbnRgIGFyZSBtb2RpZmllZCBieVxuICAgKiBgY29uc3VtZWApLlxuICAgKiBIZXJlIGlzIHdoZXJlIHdlIHdhbGsgdGhyb3VnaCB0aGUgY2h1bmtzLCB3aGljaCBlaXRoZXIgaW5jbHVkZSBzdHJpbmdzIG9mXG4gICAqIHNldmVyYWwgY2hhcmFjdGVycywgb3IgbnVtZXJpY2FsIGNoYXJhY3RlciBjb2Rlcy5cbiAgICogVGhlIHJlYXNvbiB0byBkbyB0aGlzIGluIGEgbG9vcCBpbnN0ZWFkIG9mIGEgY2FsbCBpcyBzbyB0aGUgc3RhY2sgY2FuXG4gICAqIGRyYWluLlxuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGZ1bmN0aW9uIG1haW4oKSB7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgbGV0IGNodW5rSW5kZXhcblxuICAgIHdoaWxlIChwb2ludC5faW5kZXggPCBjaHVua3MubGVuZ3RoKSB7XG4gICAgICBjb25zdCBjaHVuayA9IGNodW5rc1twb2ludC5faW5kZXhdXG5cbiAgICAgIC8vIElmIHdl4oCZcmUgaW4gYSBidWZmZXIgY2h1bmssIGxvb3AgdGhyb3VnaCBpdC5cbiAgICAgIGlmICh0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNodW5rSW5kZXggPSBwb2ludC5faW5kZXhcblxuICAgICAgICBpZiAocG9pbnQuX2J1ZmZlckluZGV4IDwgMCkge1xuICAgICAgICAgIHBvaW50Ll9idWZmZXJJbmRleCA9IDBcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChcbiAgICAgICAgICBwb2ludC5faW5kZXggPT09IGNodW5rSW5kZXggJiZcbiAgICAgICAgICBwb2ludC5fYnVmZmVySW5kZXggPCBjaHVuay5sZW5ndGhcbiAgICAgICAgKSB7XG4gICAgICAgICAgZ28oY2h1bmsuY2hhckNvZGVBdChwb2ludC5fYnVmZmVySW5kZXgpKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnbyhjaHVuaylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVhbCB3aXRoIG9uZSBjb2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvZGV9IGNvZGVcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmdW5jdGlvbiBnbyhjb2RlKSB7XG4gICAgYXNzZXJ0KGNvbnN1bWVkID09PSB0cnVlLCAnZXhwZWN0ZWQgY2hhcmFjdGVyIHRvIGJlIGNvbnN1bWVkJylcbiAgICBjb25zdW1lZCA9IHVuZGVmaW5lZFxuICAgIGRlYnVnKCdtYWluOiBwYXNzaW5nIGAlc2AgdG8gJXMnLCBjb2RlLCBzdGF0ZSAmJiBzdGF0ZS5uYW1lKVxuICAgIGV4cGVjdGVkQ29kZSA9IGNvZGVcbiAgICBhc3NlcnQodHlwZW9mIHN0YXRlID09PSAnZnVuY3Rpb24nLCAnZXhwZWN0ZWQgc3RhdGUnKVxuICAgIHN0YXRlID0gc3RhdGUoY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7RWZmZWN0c1snY29uc3VtZSddfSAqL1xuICBmdW5jdGlvbiBjb25zdW1lKGNvZGUpIHtcbiAgICBhc3NlcnQoY29kZSA9PT0gZXhwZWN0ZWRDb2RlLCAnZXhwZWN0ZWQgZ2l2ZW4gY29kZSB0byBlcXVhbCBleHBlY3RlZCBjb2RlJylcblxuICAgIGRlYnVnKCdjb25zdW1lOiBgJXNgJywgY29kZSlcblxuICAgIGFzc2VydChcbiAgICAgIGNvbnN1bWVkID09PSB1bmRlZmluZWQsXG4gICAgICAnZXhwZWN0ZWQgY29kZSB0byBub3QgaGF2ZSBiZWVuIGNvbnN1bWVkOiB0aGlzIG1pZ2h0IGJlIGJlY2F1c2UgYHJldHVybiB4KGNvZGUpYCBpbnN0ZWFkIG9mIGByZXR1cm4geGAgd2FzIHVzZWQnXG4gICAgKVxuICAgIGFzc2VydChcbiAgICAgIGNvZGUgPT09IG51bGxcbiAgICAgICAgPyBjb250ZXh0LmV2ZW50cy5sZW5ndGggPT09IDAgfHxcbiAgICAgICAgICAgIGNvbnRleHQuZXZlbnRzW2NvbnRleHQuZXZlbnRzLmxlbmd0aCAtIDFdWzBdID09PSAnZXhpdCdcbiAgICAgICAgOiBjb250ZXh0LmV2ZW50c1tjb250ZXh0LmV2ZW50cy5sZW5ndGggLSAxXVswXSA9PT0gJ2VudGVyJyxcbiAgICAgICdleHBlY3RlZCBsYXN0IHRva2VuIHRvIGJlIG9wZW4nXG4gICAgKVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcG9pbnQubGluZSsrXG4gICAgICBwb2ludC5jb2x1bW4gPSAxXG4gICAgICBwb2ludC5vZmZzZXQgKz0gY29kZSA9PT0gY29kZXMuY2FycmlhZ2VSZXR1cm5MaW5lRmVlZCA/IDIgOiAxXG4gICAgICBhY2NvdW50Rm9yUG90ZW50aWFsU2tpcCgpXG4gICAgICBkZWJ1ZygncG9zaXRpb246IGFmdGVyIGVvbDogYCVqYCcsIHBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZSAhPT0gY29kZXMudmlydHVhbFNwYWNlKSB7XG4gICAgICBwb2ludC5jb2x1bW4rK1xuICAgICAgcG9pbnQub2Zmc2V0KytcbiAgICB9XG5cbiAgICAvLyBOb3QgaW4gYSBzdHJpbmcgY2h1bmsuXG4gICAgaWYgKHBvaW50Ll9idWZmZXJJbmRleCA8IDApIHtcbiAgICAgIHBvaW50Ll9pbmRleCsrXG4gICAgfSBlbHNlIHtcbiAgICAgIHBvaW50Ll9idWZmZXJJbmRleCsrXG5cbiAgICAgIC8vIEF0IGVuZCBvZiBzdHJpbmcgY2h1bmsuXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFBvaW50cyB3LyBub24tbmVnYXRpdmUgYF9idWZmZXJJbmRleGAgcmVmZXJlbmNlXG4gICAgICAvLyBzdHJpbmdzLlxuICAgICAgaWYgKHBvaW50Ll9idWZmZXJJbmRleCA9PT0gY2h1bmtzW3BvaW50Ll9pbmRleF0ubGVuZ3RoKSB7XG4gICAgICAgIHBvaW50Ll9idWZmZXJJbmRleCA9IC0xXG4gICAgICAgIHBvaW50Ll9pbmRleCsrXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRXhwb3NlIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIuXG4gICAgY29udGV4dC5wcmV2aW91cyA9IGNvZGVcblxuICAgIC8vIE1hcmsgYXMgY29uc3VtZWQuXG4gICAgY29uc3VtZWQgPSB0cnVlXG4gIH1cblxuICAvKiogQHR5cGUge0VmZmVjdHNbJ2VudGVyJ119ICovXG4gIGZ1bmN0aW9uIGVudGVyKHR5cGUsIGZpZWxkcykge1xuICAgIC8qKiBAdHlwZSB7VG9rZW59ICovXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBQYXRjaCBpbnN0ZWFkIG9mIGFzc2lnbiByZXF1aXJlZCBmaWVsZHMgdG8gaGVscCBHQy5cbiAgICBjb25zdCB0b2tlbiA9IGZpZWxkcyB8fCB7fVxuICAgIHRva2VuLnR5cGUgPSB0eXBlXG4gICAgdG9rZW4uc3RhcnQgPSBub3coKVxuXG4gICAgYXNzZXJ0KHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJywgJ2V4cGVjdGVkIHN0cmluZyB0eXBlJylcbiAgICBhc3NlcnQodHlwZS5sZW5ndGggPiAwLCAnZXhwZWN0ZWQgbm9uLWVtcHR5IHN0cmluZycpXG4gICAgZGVidWcoJ2VudGVyOiBgJXNgJywgdHlwZSlcblxuICAgIGNvbnRleHQuZXZlbnRzLnB1c2goWydlbnRlcicsIHRva2VuLCBjb250ZXh0XSlcblxuICAgIHN0YWNrLnB1c2godG9rZW4pXG5cbiAgICByZXR1cm4gdG9rZW5cbiAgfVxuXG4gIC8qKiBAdHlwZSB7RWZmZWN0c1snZXhpdCddfSAqL1xuICBmdW5jdGlvbiBleGl0KHR5cGUpIHtcbiAgICBhc3NlcnQodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnLCAnZXhwZWN0ZWQgc3RyaW5nIHR5cGUnKVxuICAgIGFzc2VydCh0eXBlLmxlbmd0aCA+IDAsICdleHBlY3RlZCBub24tZW1wdHkgc3RyaW5nJylcblxuICAgIGNvbnN0IHRva2VuID0gc3RhY2sucG9wKClcbiAgICBhc3NlcnQodG9rZW4sICdjYW5ub3QgY2xvc2Ugdy9vIG9wZW4gdG9rZW5zJylcbiAgICB0b2tlbi5lbmQgPSBub3coKVxuXG4gICAgYXNzZXJ0KHR5cGUgPT09IHRva2VuLnR5cGUsICdleHBlY3RlZCBleGl0IHRva2VuIHRvIG1hdGNoIGN1cnJlbnQgdG9rZW4nKVxuXG4gICAgYXNzZXJ0KFxuICAgICAgIShcbiAgICAgICAgdG9rZW4uc3RhcnQuX2luZGV4ID09PSB0b2tlbi5lbmQuX2luZGV4ICYmXG4gICAgICAgIHRva2VuLnN0YXJ0Ll9idWZmZXJJbmRleCA9PT0gdG9rZW4uZW5kLl9idWZmZXJJbmRleFxuICAgICAgKSxcbiAgICAgICdleHBlY3RlZCBub24tZW1wdHkgdG9rZW4gKGAnICsgdHlwZSArICdgKSdcbiAgICApXG5cbiAgICBkZWJ1ZygnZXhpdDogYCVzYCcsIHRva2VuLnR5cGUpXG4gICAgY29udGV4dC5ldmVudHMucHVzaChbJ2V4aXQnLCB0b2tlbiwgY29udGV4dF0pXG5cbiAgICByZXR1cm4gdG9rZW5cbiAgfVxuXG4gIC8qKlxuICAgKiBVc2UgcmVzdWx0cy5cbiAgICpcbiAgICogQHR5cGUge1JldHVybkhhbmRsZX1cbiAgICovXG4gIGZ1bmN0aW9uIG9uc3VjY2Vzc2Z1bGNvbnN0cnVjdChjb25zdHJ1Y3QsIGluZm8pIHtcbiAgICBhZGRSZXN1bHQoY29uc3RydWN0LCBpbmZvLmZyb20pXG4gIH1cblxuICAvKipcbiAgICogRGlzY2FyZCByZXN1bHRzLlxuICAgKlxuICAgKiBAdHlwZSB7UmV0dXJuSGFuZGxlfVxuICAgKi9cbiAgZnVuY3Rpb24gb25zdWNjZXNzZnVsY2hlY2soXywgaW5mbykge1xuICAgIGluZm8ucmVzdG9yZSgpXG4gIH1cblxuICAvKipcbiAgICogRmFjdG9yeSB0byBhdHRlbXB0L2NoZWNrL2ludGVycnVwdC5cbiAgICpcbiAgICogQHBhcmFtIHtSZXR1cm5IYW5kbGV9IG9ucmV0dXJuXG4gICAqIEBwYXJhbSB7UmVjb3JkPHN0cmluZywgdW5rbm93bj59IFtmaWVsZHNdXG4gICAqL1xuICBmdW5jdGlvbiBjb25zdHJ1Y3RGYWN0b3J5KG9ucmV0dXJuLCBmaWVsZHMpIHtcbiAgICByZXR1cm4gaG9va1xuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIGVpdGhlciBhbiBvYmplY3QgbWFwcGluZyBjb2RlcyB0byBjb25zdHJ1Y3RzLCBhIGxpc3Qgb2ZcbiAgICAgKiBjb25zdHJ1Y3RzLCBvciBhIHNpbmdsZSBjb25zdHJ1Y3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0NvbnN0cnVjdHxBcnJheTxDb25zdHJ1Y3Q+fENvbnN0cnVjdFJlY29yZH0gY29uc3RydWN0c1xuICAgICAqIEBwYXJhbSB7U3RhdGV9IHJldHVyblN0YXRlXG4gICAgICogQHBhcmFtIHtTdGF0ZX0gW2JvZ3VzU3RhdGVdXG4gICAgICogQHJldHVybnMge1N0YXRlfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhvb2soY29uc3RydWN0cywgcmV0dXJuU3RhdGUsIGJvZ3VzU3RhdGUpIHtcbiAgICAgIC8qKiBAdHlwZSB7QXJyYXk8Q29uc3RydWN0Pn0gKi9cbiAgICAgIGxldCBsaXN0T2ZDb25zdHJ1Y3RzXG4gICAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICAgIGxldCBjb25zdHJ1Y3RJbmRleFxuICAgICAgLyoqIEB0eXBlIHtDb25zdHJ1Y3R9ICovXG4gICAgICBsZXQgY3VycmVudENvbnN0cnVjdFxuICAgICAgLyoqIEB0eXBlIHtJbmZvfSAqL1xuICAgICAgbGV0IGluZm9cblxuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoY29uc3RydWN0cylcbiAgICAgICAgPyAvKiBjOCBpZ25vcmUgbmV4dCAxICovXG4gICAgICAgICAgaGFuZGxlTGlzdE9mQ29uc3RydWN0cyhjb25zdHJ1Y3RzKVxuICAgICAgICA6ICd0b2tlbml6ZScgaW4gY29uc3RydWN0c1xuICAgICAgICA/IC8vIEB0cy1leHBlY3QtZXJyb3IgTG9va3MgbGlrZSBhIGNvbnN0cnVjdC5cbiAgICAgICAgICBoYW5kbGVMaXN0T2ZDb25zdHJ1Y3RzKFtjb25zdHJ1Y3RzXSlcbiAgICAgICAgOiBoYW5kbGVNYXBPZkNvbnN0cnVjdHMoY29uc3RydWN0cylcblxuICAgICAgLyoqXG4gICAgICAgKiBIYW5kbGUgYSBsaXN0IG9mIGNvbnN0cnVjdC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0NvbnN0cnVjdFJlY29yZH0gbWFwXG4gICAgICAgKiBAcmV0dXJucyB7U3RhdGV9XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZU1hcE9mQ29uc3RydWN0cyhtYXApIHtcbiAgICAgICAgcmV0dXJuIHN0YXJ0XG5cbiAgICAgICAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgICAgICAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgICAgICAgIGNvbnN0IGRlZiA9IGNvZGUgIT09IG51bGwgJiYgbWFwW2NvZGVdXG4gICAgICAgICAgY29uc3QgYWxsID0gY29kZSAhPT0gbnVsbCAmJiBtYXAubnVsbFxuICAgICAgICAgIGNvbnN0IGxpc3QgPSBbXG4gICAgICAgICAgICAvLyBUbyBkbzogYWRkIG1vcmUgZXh0ZW5zaW9uIHRlc3RzLlxuICAgICAgICAgICAgLyogYzggaWdub3JlIG5leHQgMiAqL1xuICAgICAgICAgICAgLi4uKEFycmF5LmlzQXJyYXkoZGVmKSA/IGRlZiA6IGRlZiA/IFtkZWZdIDogW10pLFxuICAgICAgICAgICAgLi4uKEFycmF5LmlzQXJyYXkoYWxsKSA/IGFsbCA6IGFsbCA/IFthbGxdIDogW10pXG4gICAgICAgICAgXVxuXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZUxpc3RPZkNvbnN0cnVjdHMobGlzdCkoY29kZSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEhhbmRsZSBhIGxpc3Qgb2YgY29uc3RydWN0LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7QXJyYXk8Q29uc3RydWN0Pn0gbGlzdFxuICAgICAgICogQHJldHVybnMge1N0YXRlfVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBoYW5kbGVMaXN0T2ZDb25zdHJ1Y3RzKGxpc3QpIHtcbiAgICAgICAgbGlzdE9mQ29uc3RydWN0cyA9IGxpc3RcbiAgICAgICAgY29uc3RydWN0SW5kZXggPSAwXG5cbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgYXNzZXJ0KGJvZ3VzU3RhdGUsICdleHBlY3RlZCBgYm9ndXNTdGF0ZWAgdG8gYmUgZ2l2ZW4nKVxuICAgICAgICAgIHJldHVybiBib2d1c1N0YXRlXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaGFuZGxlQ29uc3RydWN0KGxpc3RbY29uc3RydWN0SW5kZXhdKVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEhhbmRsZSBhIHNpbmdsZSBjb25zdHJ1Y3QuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtDb25zdHJ1Y3R9IGNvbnN0cnVjdFxuICAgICAgICogQHJldHVybnMge1N0YXRlfVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBoYW5kbGVDb25zdHJ1Y3QoY29uc3RydWN0KSB7XG4gICAgICAgIHJldHVybiBzdGFydFxuXG4gICAgICAgIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gICAgICAgIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICAgICAgICAvLyBUbyBkbzogbm90IG5lZWRlZCB0byBzdG9yZSBpZiB0aGVyZSBpcyBubyBib2d1cyBzdGF0ZSwgcHJvYmFibHk/XG4gICAgICAgICAgLy8gQ3VycmVudGx5IGRvZXNu4oCZdCB3b3JrIGJlY2F1c2UgYGluc3BlY3RgIGluIGRvY3VtZW50IGRvZXMgYSBjaGVja1xuICAgICAgICAgIC8vIHcvbyBhIGJvZ3VzLCB3aGljaCBkb2VzbuKAmXQgbWFrZSBzZW5zZS4gQnV0IGl0IGRvZXMgc2VlbSB0byBoZWxwIHBlcmZcbiAgICAgICAgICAvLyBieSBub3Qgc3RvcmluZy5cbiAgICAgICAgICBpbmZvID0gc3RvcmUoKVxuICAgICAgICAgIGN1cnJlbnRDb25zdHJ1Y3QgPSBjb25zdHJ1Y3RcblxuICAgICAgICAgIGlmICghY29uc3RydWN0LnBhcnRpYWwpIHtcbiAgICAgICAgICAgIGNvbnRleHQuY3VycmVudENvbnN0cnVjdCA9IGNvbnN0cnVjdFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbnN0cnVjdC5uYW1lICYmXG4gICAgICAgICAgICBjb250ZXh0LnBhcnNlci5jb25zdHJ1Y3RzLmRpc2FibGUubnVsbC5pbmNsdWRlcyhjb25zdHJ1Y3QubmFtZSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBub2soY29kZSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gY29uc3RydWN0LnRva2VuaXplLmNhbGwoXG4gICAgICAgICAgICAvLyBJZiB3ZSBkbyBoYXZlIGZpZWxkcywgY3JlYXRlIGFuIG9iamVjdCB3LyBgY29udGV4dGAgYXMgaXRzXG4gICAgICAgICAgICAvLyBwcm90b3R5cGUuXG4gICAgICAgICAgICAvLyBUaGlzIGFsbG93cyBhIOKAnGxpdmUgYmluZGluZ+KAnSwgd2hpY2ggaXMgbmVlZGVkIGZvciBgaW50ZXJydXB0YC5cbiAgICAgICAgICAgIGZpZWxkcyA/IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShjb250ZXh0KSwgZmllbGRzKSA6IGNvbnRleHQsXG4gICAgICAgICAgICBlZmZlY3RzLFxuICAgICAgICAgICAgb2ssXG4gICAgICAgICAgICBub2tcbiAgICAgICAgICApKGNvZGUpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgICAgIGZ1bmN0aW9uIG9rKGNvZGUpIHtcbiAgICAgICAgYXNzZXJ0KGNvZGUgPT09IGV4cGVjdGVkQ29kZSwgJ2V4cGVjdGVkIGNvZGUnKVxuICAgICAgICBjb25zdW1lZCA9IHRydWVcbiAgICAgICAgb25yZXR1cm4oY3VycmVudENvbnN0cnVjdCwgaW5mbylcbiAgICAgICAgcmV0dXJuIHJldHVyblN0YXRlXG4gICAgICB9XG5cbiAgICAgIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gICAgICBmdW5jdGlvbiBub2soY29kZSkge1xuICAgICAgICBhc3NlcnQoY29kZSA9PT0gZXhwZWN0ZWRDb2RlLCAnZXhwZWN0ZWQgY29kZScpXG4gICAgICAgIGNvbnN1bWVkID0gdHJ1ZVxuICAgICAgICBpbmZvLnJlc3RvcmUoKVxuXG4gICAgICAgIGlmICgrK2NvbnN0cnVjdEluZGV4IDwgbGlzdE9mQ29uc3RydWN0cy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlQ29uc3RydWN0KGxpc3RPZkNvbnN0cnVjdHNbY29uc3RydWN0SW5kZXhdKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJvZ3VzU3RhdGVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtDb25zdHJ1Y3R9IGNvbnN0cnVjdFxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbVxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGZ1bmN0aW9uIGFkZFJlc3VsdChjb25zdHJ1Y3QsIGZyb20pIHtcbiAgICBpZiAoY29uc3RydWN0LnJlc29sdmVBbGwgJiYgIXJlc29sdmVBbGxDb25zdHJ1Y3RzLmluY2x1ZGVzKGNvbnN0cnVjdCkpIHtcbiAgICAgIHJlc29sdmVBbGxDb25zdHJ1Y3RzLnB1c2goY29uc3RydWN0KVxuICAgIH1cblxuICAgIGlmIChjb25zdHJ1Y3QucmVzb2x2ZSkge1xuICAgICAgc3BsaWNlKFxuICAgICAgICBjb250ZXh0LmV2ZW50cyxcbiAgICAgICAgZnJvbSxcbiAgICAgICAgY29udGV4dC5ldmVudHMubGVuZ3RoIC0gZnJvbSxcbiAgICAgICAgY29uc3RydWN0LnJlc29sdmUoY29udGV4dC5ldmVudHMuc2xpY2UoZnJvbSksIGNvbnRleHQpXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKGNvbnN0cnVjdC5yZXNvbHZlVG8pIHtcbiAgICAgIGNvbnRleHQuZXZlbnRzID0gY29uc3RydWN0LnJlc29sdmVUbyhjb250ZXh0LmV2ZW50cywgY29udGV4dClcbiAgICB9XG5cbiAgICBhc3NlcnQoXG4gICAgICBjb25zdHJ1Y3QucGFydGlhbCB8fFxuICAgICAgICBjb250ZXh0LmV2ZW50cy5sZW5ndGggPT09IDAgfHxcbiAgICAgICAgY29udGV4dC5ldmVudHNbY29udGV4dC5ldmVudHMubGVuZ3RoIC0gMV1bMF0gPT09ICdleGl0JyxcbiAgICAgICdleHBlY3RlZCBsYXN0IHRva2VuIHRvIGVuZCdcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogU3RvcmUgc3RhdGUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtJbmZvfVxuICAgKi9cbiAgZnVuY3Rpb24gc3RvcmUoKSB7XG4gICAgY29uc3Qgc3RhcnRQb2ludCA9IG5vdygpXG4gICAgY29uc3Qgc3RhcnRQcmV2aW91cyA9IGNvbnRleHQucHJldmlvdXNcbiAgICBjb25zdCBzdGFydEN1cnJlbnRDb25zdHJ1Y3QgPSBjb250ZXh0LmN1cnJlbnRDb25zdHJ1Y3RcbiAgICBjb25zdCBzdGFydEV2ZW50c0luZGV4ID0gY29udGV4dC5ldmVudHMubGVuZ3RoXG4gICAgY29uc3Qgc3RhcnRTdGFjayA9IEFycmF5LmZyb20oc3RhY2spXG5cbiAgICByZXR1cm4ge3Jlc3RvcmUsIGZyb206IHN0YXJ0RXZlbnRzSW5kZXh9XG5cbiAgICAvKipcbiAgICAgKiBSZXN0b3JlIHN0YXRlLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdG9yZSgpIHtcbiAgICAgIHBvaW50ID0gc3RhcnRQb2ludFxuICAgICAgY29udGV4dC5wcmV2aW91cyA9IHN0YXJ0UHJldmlvdXNcbiAgICAgIGNvbnRleHQuY3VycmVudENvbnN0cnVjdCA9IHN0YXJ0Q3VycmVudENvbnN0cnVjdFxuICAgICAgY29udGV4dC5ldmVudHMubGVuZ3RoID0gc3RhcnRFdmVudHNJbmRleFxuICAgICAgc3RhY2sgPSBzdGFydFN0YWNrXG4gICAgICBhY2NvdW50Rm9yUG90ZW50aWFsU2tpcCgpXG4gICAgICBkZWJ1ZygncG9zaXRpb246IHJlc3RvcmU6IGAlamAnLCBwb2ludClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTW92ZSB0aGUgY3VycmVudCBwb2ludCBhIGJpdCBmb3J3YXJkIGluIHRoZSBsaW5lIHdoZW4gaXTigJlzIG9uIGEgY29sdW1uXG4gICAqIHNraXAuXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZnVuY3Rpb24gYWNjb3VudEZvclBvdGVudGlhbFNraXAoKSB7XG4gICAgaWYgKHBvaW50LmxpbmUgaW4gY29sdW1uU3RhcnQgJiYgcG9pbnQuY29sdW1uIDwgMikge1xuICAgICAgcG9pbnQuY29sdW1uID0gY29sdW1uU3RhcnRbcG9pbnQubGluZV1cbiAgICAgIHBvaW50Lm9mZnNldCArPSBjb2x1bW5TdGFydFtwb2ludC5saW5lXSAtIDFcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIGNodW5rcyBmcm9tIGEgc2xpY2Ugb2YgY2h1bmtzIGluIHRoZSByYW5nZSBvZiBhIHRva2VuLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8Q2h1bms+fSBjaHVua3NcbiAqIEBwYXJhbSB7UGljazxUb2tlbiwgJ3N0YXJ0J3wnZW5kJz59IHRva2VuXG4gKiBAcmV0dXJucyB7QXJyYXk8Q2h1bms+fVxuICovXG5mdW5jdGlvbiBzbGljZUNodW5rcyhjaHVua3MsIHRva2VuKSB7XG4gIGNvbnN0IHN0YXJ0SW5kZXggPSB0b2tlbi5zdGFydC5faW5kZXhcbiAgY29uc3Qgc3RhcnRCdWZmZXJJbmRleCA9IHRva2VuLnN0YXJ0Ll9idWZmZXJJbmRleFxuICBjb25zdCBlbmRJbmRleCA9IHRva2VuLmVuZC5faW5kZXhcbiAgY29uc3QgZW5kQnVmZmVySW5kZXggPSB0b2tlbi5lbmQuX2J1ZmZlckluZGV4XG4gIC8qKiBAdHlwZSB7QXJyYXk8Q2h1bms+fSAqL1xuICBsZXQgdmlld1xuXG4gIGlmIChzdGFydEluZGV4ID09PSBlbmRJbmRleCkge1xuICAgIGFzc2VydChlbmRCdWZmZXJJbmRleCA+IC0xLCAnZXhwZWN0ZWQgbm9uLW5lZ2F0aXZlIGVuZCBidWZmZXIgaW5kZXgnKVxuICAgIGFzc2VydChzdGFydEJ1ZmZlckluZGV4ID4gLTEsICdleHBlY3RlZCBub24tbmVnYXRpdmUgc3RhcnQgYnVmZmVyIGluZGV4JylcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGBfYnVmZmVySW5kZXhgIGlzIHVzZWQgb24gc3RyaW5nIGNodW5rcy5cbiAgICB2aWV3ID0gW2NodW5rc1tzdGFydEluZGV4XS5zbGljZShzdGFydEJ1ZmZlckluZGV4LCBlbmRCdWZmZXJJbmRleCldXG4gIH0gZWxzZSB7XG4gICAgdmlldyA9IGNodW5rcy5zbGljZShzdGFydEluZGV4LCBlbmRJbmRleClcblxuICAgIGlmIChzdGFydEJ1ZmZlckluZGV4ID4gLTEpIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYF9idWZmZXJJbmRleGAgaXMgdXNlZCBvbiBzdHJpbmcgY2h1bmtzLlxuICAgICAgdmlld1swXSA9IHZpZXdbMF0uc2xpY2Uoc3RhcnRCdWZmZXJJbmRleClcbiAgICB9XG5cbiAgICBpZiAoZW5kQnVmZmVySW5kZXggPiAwKSB7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGBfYnVmZmVySW5kZXhgIGlzIHVzZWQgb24gc3RyaW5nIGNodW5rcy5cbiAgICAgIHZpZXcucHVzaChjaHVua3NbZW5kSW5kZXhdLnNsaWNlKDAsIGVuZEJ1ZmZlckluZGV4KSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmlld1xufVxuXG4vKipcbiAqIEdldCB0aGUgc3RyaW5nIHZhbHVlIG9mIGEgc2xpY2Ugb2YgY2h1bmtzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8Q2h1bms+fSBjaHVua3NcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2V4cGFuZFRhYnM9ZmFsc2VdXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBzZXJpYWxpemVDaHVua3MoY2h1bmtzLCBleHBhbmRUYWJzKSB7XG4gIGxldCBpbmRleCA9IC0xXG4gIC8qKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn0gKi9cbiAgY29uc3QgcmVzdWx0ID0gW11cbiAgLyoqIEB0eXBlIHtib29sZWFufHVuZGVmaW5lZH0gKi9cbiAgbGV0IGF0VGFiXG5cbiAgd2hpbGUgKCsraW5kZXggPCBjaHVua3MubGVuZ3RoKSB7XG4gICAgY29uc3QgY2h1bmsgPSBjaHVua3NbaW5kZXhdXG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgbGV0IHZhbHVlXG5cbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBjaHVua1xuICAgIH0gZWxzZVxuICAgICAgc3dpdGNoIChjaHVuaykge1xuICAgICAgICBjYXNlIGNvZGVzLmNhcnJpYWdlUmV0dXJuOiB7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZXMuY3JcblxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cblxuICAgICAgICBjYXNlIGNvZGVzLmxpbmVGZWVkOiB7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZXMubGZcblxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cblxuICAgICAgICBjYXNlIGNvZGVzLmNhcnJpYWdlUmV0dXJuTGluZUZlZWQ6IHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlcy5jciArIHZhbHVlcy5sZlxuXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgY29kZXMuaG9yaXpvbnRhbFRhYjoge1xuICAgICAgICAgIHZhbHVlID0gZXhwYW5kVGFicyA/IHZhbHVlcy5zcGFjZSA6IHZhbHVlcy5odFxuXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgY29kZXMudmlydHVhbFNwYWNlOiB7XG4gICAgICAgICAgaWYgKCFleHBhbmRUYWJzICYmIGF0VGFiKSBjb250aW51ZVxuICAgICAgICAgIHZhbHVlID0gdmFsdWVzLnNwYWNlXG5cbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIGFzc2VydCh0eXBlb2YgY2h1bmsgPT09ICdudW1iZXInLCAnZXhwZWN0ZWQgbnVtYmVyJylcbiAgICAgICAgICAvLyBDdXJyZW50bHkgb25seSByZXBsYWNlbWVudCBjaGFyYWN0ZXIuXG4gICAgICAgICAgdmFsdWUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNodW5rKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICBhdFRhYiA9IGNodW5rID09PSBjb2Rlcy5ob3Jpem9udGFsVGFiXG4gICAgcmVzdWx0LnB1c2godmFsdWUpXG4gIH1cblxuICByZXR1cm4gcmVzdWx0LmpvaW4oJycpXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuSW5pdGlhbENvbnN0cnVjdH0gSW5pdGlhbENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Jbml0aWFsaXplcn0gSW5pdGlhbGl6ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVG9rZW59IFRva2VuXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlN0YXRlfSBTdGF0ZVxuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICd1dnUvYXNzZXJ0J1xuaW1wb3J0IHtmYWN0b3J5U3BhY2V9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXNwYWNlJ1xuaW1wb3J0IHttYXJrZG93bkxpbmVFbmRpbmd9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcbmltcG9ydCB7Y29kZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb2Rlcy5qcydcbmltcG9ydCB7Y29uc3RhbnRzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvY29uc3RhbnRzLmpzJ1xuaW1wb3J0IHt0eXBlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL3R5cGVzLmpzJ1xuXG4vKiogQHR5cGUge0luaXRpYWxDb25zdHJ1Y3R9ICovXG5leHBvcnQgY29uc3QgY29udGVudCA9IHt0b2tlbml6ZTogaW5pdGlhbGl6ZUNvbnRlbnR9XG5cbi8qKiBAdHlwZSB7SW5pdGlhbGl6ZXJ9ICovXG5mdW5jdGlvbiBpbml0aWFsaXplQ29udGVudChlZmZlY3RzKSB7XG4gIGNvbnN0IGNvbnRlbnRTdGFydCA9IGVmZmVjdHMuYXR0ZW1wdChcbiAgICB0aGlzLnBhcnNlci5jb25zdHJ1Y3RzLmNvbnRlbnRJbml0aWFsLFxuICAgIGFmdGVyQ29udGVudFN0YXJ0Q29uc3RydWN0LFxuICAgIHBhcmFncmFwaEluaXRpYWxcbiAgKVxuICAvKiogQHR5cGUge1Rva2VufSAqL1xuICBsZXQgcHJldmlvdXNcblxuICByZXR1cm4gY29udGVudFN0YXJ0XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gYWZ0ZXJDb250ZW50U3RhcnRDb25zdHJ1Y3QoY29kZSkge1xuICAgIGFzc2VydChcbiAgICAgIGNvZGUgPT09IGNvZGVzLmVvZiB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSksXG4gICAgICAnZXhwZWN0ZWQgZW9sIG9yIGVvZidcbiAgICApXG5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMubGluZUVuZGluZylcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQodHlwZXMubGluZUVuZGluZylcbiAgICByZXR1cm4gZmFjdG9yeVNwYWNlKGVmZmVjdHMsIGNvbnRlbnRTdGFydCwgdHlwZXMubGluZVByZWZpeClcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHBhcmFncmFwaEluaXRpYWwoY29kZSkge1xuICAgIGFzc2VydChcbiAgICAgIGNvZGUgIT09IGNvZGVzLmVvZiAmJiAhbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpLFxuICAgICAgJ2V4cGVjdGVkIGFueXRoaW5nIG90aGVyIHRoYW4gYSBsaW5lIGVuZGluZyBvciBFT0YnXG4gICAgKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMucGFyYWdyYXBoKVxuICAgIHJldHVybiBsaW5lU3RhcnQoY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGxpbmVTdGFydChjb2RlKSB7XG4gICAgY29uc3QgdG9rZW4gPSBlZmZlY3RzLmVudGVyKHR5cGVzLmNodW5rVGV4dCwge1xuICAgICAgY29udGVudFR5cGU6IGNvbnN0YW50cy5jb250ZW50VHlwZVRleHQsXG4gICAgICBwcmV2aW91c1xuICAgIH0pXG5cbiAgICBpZiAocHJldmlvdXMpIHtcbiAgICAgIHByZXZpb3VzLm5leHQgPSB0b2tlblxuICAgIH1cblxuICAgIHByZXZpb3VzID0gdG9rZW5cblxuICAgIHJldHVybiBkYXRhKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBkYXRhKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mKSB7XG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMuY2h1bmtUZXh0KVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGVzLnBhcmFncmFwaClcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZXMuY2h1bmtUZXh0KVxuICAgICAgcmV0dXJuIGxpbmVTdGFydFxuICAgIH1cblxuICAgIC8vIERhdGEuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGRhdGFcbiAgfVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkluaXRpYWxDb25zdHJ1Y3R9IEluaXRpYWxDb25zdHJ1Y3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuSW5pdGlhbGl6ZXJ9IEluaXRpYWxpemVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvbnN0cnVjdH0gQ29uc3RydWN0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VuaXplQ29udGV4dH0gVG9rZW5pemVDb250ZXh0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VuaXplcn0gVG9rZW5pemVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VufSBUb2tlblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuUG9pbnR9IFBvaW50XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7UmVjb3JkPHN0cmluZywgdW5rbm93bj59IFN0YWNrU3RhdGVcbiAqIEB0eXBlZGVmIHtbQ29uc3RydWN0LCBTdGFja1N0YXRlXX0gU3RhY2tJdGVtXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ3V2dS9hc3NlcnQnXG5pbXBvcnQge2ZhY3RvcnlTcGFjZX0gZnJvbSAnbWljcm9tYXJrLWZhY3Rvcnktc3BhY2UnXG5pbXBvcnQge21hcmtkb3duTGluZUVuZGluZ30gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2hhcmFjdGVyJ1xuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvZGVzLmpzJ1xuaW1wb3J0IHtjb25zdGFudHN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb25zdGFudHMuanMnXG5pbXBvcnQge3R5cGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvdHlwZXMuanMnXG5pbXBvcnQge3NwbGljZX0gZnJvbSAnbWljcm9tYXJrLXV0aWwtY2h1bmtlZCdcblxuLyoqIEB0eXBlIHtJbml0aWFsQ29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGRvY3VtZW50ID0ge3Rva2VuaXplOiBpbml0aWFsaXplRG9jdW1lbnR9XG5cbi8qKiBAdHlwZSB7Q29uc3RydWN0fSAqL1xuY29uc3QgY29udGFpbmVyQ29uc3RydWN0ID0ge3Rva2VuaXplOiB0b2tlbml6ZUNvbnRhaW5lcn1cblxuLyoqIEB0eXBlIHtJbml0aWFsaXplcn0gKi9cbmZ1bmN0aW9uIGluaXRpYWxpemVEb2N1bWVudChlZmZlY3RzKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIC8qKiBAdHlwZSB7QXJyYXk8U3RhY2tJdGVtPn0gKi9cbiAgY29uc3Qgc3RhY2sgPSBbXVxuICBsZXQgY29udGludWVkID0gMFxuICAvKiogQHR5cGUge1Rva2VuaXplQ29udGV4dHx1bmRlZmluZWR9ICovXG4gIGxldCBjaGlsZEZsb3dcbiAgLyoqIEB0eXBlIHtUb2tlbnx1bmRlZmluZWR9ICovXG4gIGxldCBjaGlsZFRva2VuXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICBsZXQgbGluZVN0YXJ0T2Zmc2V0XG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIC8vIEZpcnN0IHdlIGl0ZXJhdGUgdGhyb3VnaCB0aGUgb3BlbiBibG9ja3MsIHN0YXJ0aW5nIHdpdGggdGhlIHJvb3RcbiAgICAvLyBkb2N1bWVudCwgYW5kIGRlc2NlbmRpbmcgdGhyb3VnaCBsYXN0IGNoaWxkcmVuIGRvd24gdG8gdGhlIGxhc3Qgb3BlblxuICAgIC8vIGJsb2NrLlxuICAgIC8vIEVhY2ggYmxvY2sgaW1wb3NlcyBhIGNvbmRpdGlvbiB0aGF0IHRoZSBsaW5lIG11c3Qgc2F0aXNmeSBpZiB0aGUgYmxvY2sgaXNcbiAgICAvLyB0byByZW1haW4gb3Blbi5cbiAgICAvLyBGb3IgZXhhbXBsZSwgYSBibG9jayBxdW90ZSByZXF1aXJlcyBhIGA+YCBjaGFyYWN0ZXIuXG4gICAgLy8gQSBwYXJhZ3JhcGggcmVxdWlyZXMgYSBub24tYmxhbmsgbGluZS5cbiAgICAvLyBJbiB0aGlzIHBoYXNlIHdlIG1heSBtYXRjaCBhbGwgb3IganVzdCBzb21lIG9mIHRoZSBvcGVuIGJsb2Nrcy5cbiAgICAvLyBCdXQgd2UgY2Fubm90IGNsb3NlIHVubWF0Y2hlZCBibG9ja3MgeWV0LCBiZWNhdXNlIHdlIG1heSBoYXZlIGEgbGF6eVxuICAgIC8vIGNvbnRpbnVhdGlvbiBsaW5lLlxuICAgIGlmIChjb250aW51ZWQgPCBzdGFjay5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBzdGFja1tjb250aW51ZWRdXG4gICAgICBzZWxmLmNvbnRhaW5lclN0YXRlID0gaXRlbVsxXVxuICAgICAgYXNzZXJ0KFxuICAgICAgICBpdGVtWzBdLmNvbnRpbnVhdGlvbixcbiAgICAgICAgJ2V4cGVjdGVkIGBjb250aW51YXRpb25gIHRvIGJlIGRlZmluZWQgb24gY29udGFpbmVyIGNvbnN0cnVjdCdcbiAgICAgIClcbiAgICAgIHJldHVybiBlZmZlY3RzLmF0dGVtcHQoXG4gICAgICAgIGl0ZW1bMF0uY29udGludWF0aW9uLFxuICAgICAgICBkb2N1bWVudENvbnRpbnVlLFxuICAgICAgICBjaGVja05ld0NvbnRhaW5lcnNcbiAgICAgICkoY29kZSlcbiAgICB9XG5cbiAgICAvLyBEb25lLlxuICAgIHJldHVybiBjaGVja05ld0NvbnRhaW5lcnMoY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGRvY3VtZW50Q29udGludWUoY29kZSkge1xuICAgIGFzc2VydChcbiAgICAgIHNlbGYuY29udGFpbmVyU3RhdGUsXG4gICAgICAnZXhwZWN0ZWQgYGNvbnRhaW5lclN0YXRlYCB0byBiZSBkZWZpbmVkIGFmdGVyIGNvbnRpbnVhdGlvbidcbiAgICApXG5cbiAgICBjb250aW51ZWQrK1xuXG4gICAgLy8gTm90ZTogdGhpcyBmaWVsZCBpcyBjYWxsZWQgYF9jbG9zZUZsb3dgIGJ1dCBpdCBhbHNvIGNsb3NlcyBjb250YWluZXJzLlxuICAgIC8vIFBlcmhhcHMgYSBnb29kIGlkZWEgdG8gcmVuYW1lIGl0IGJ1dCBpdOKAmXMgYWxyZWFkeSB1c2VkIGluIHRoZSB3aWxkIGJ5XG4gICAgLy8gZXh0ZW5zaW9ucy5cbiAgICBpZiAoc2VsZi5jb250YWluZXJTdGF0ZS5fY2xvc2VGbG93KSB7XG4gICAgICBzZWxmLmNvbnRhaW5lclN0YXRlLl9jbG9zZUZsb3cgPSB1bmRlZmluZWRcblxuICAgICAgaWYgKGNoaWxkRmxvdykge1xuICAgICAgICBjbG9zZUZsb3coKVxuICAgICAgfVxuXG4gICAgICAvLyBOb3RlOiB0aGlzIGFsZ29yaXRobSBmb3IgbW92aW5nIGV2ZW50cyBhcm91bmQgaXMgc2ltaWxhciB0byB0aGVcbiAgICAgIC8vIGFsZ29yaXRobSB3aGVuIGRlYWxpbmcgd2l0aCBsYXp5IGxpbmVzIGluIGB3cml0ZVRvQ2hpbGRgLlxuICAgICAgY29uc3QgaW5kZXhCZWZvcmVFeGl0cyA9IHNlbGYuZXZlbnRzLmxlbmd0aFxuICAgICAgbGV0IGluZGV4QmVmb3JlRmxvdyA9IGluZGV4QmVmb3JlRXhpdHNcbiAgICAgIC8qKiBAdHlwZSB7UG9pbnR8dW5kZWZpbmVkfSAqL1xuICAgICAgbGV0IHBvaW50XG5cbiAgICAgIC8vIEZpbmQgdGhlIGZsb3cgY2h1bmsuXG4gICAgICB3aGlsZSAoaW5kZXhCZWZvcmVGbG93LS0pIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHNlbGYuZXZlbnRzW2luZGV4QmVmb3JlRmxvd11bMF0gPT09ICdleGl0JyAmJlxuICAgICAgICAgIHNlbGYuZXZlbnRzW2luZGV4QmVmb3JlRmxvd11bMV0udHlwZSA9PT0gdHlwZXMuY2h1bmtGbG93XG4gICAgICAgICkge1xuICAgICAgICAgIHBvaW50ID0gc2VsZi5ldmVudHNbaW5kZXhCZWZvcmVGbG93XVsxXS5lbmRcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGFzc2VydChwb2ludCwgJ2NvdWxkIG5vdCBmaW5kIHByZXZpb3VzIGZsb3cgY2h1bmsnKVxuXG4gICAgICBleGl0Q29udGFpbmVycyhjb250aW51ZWQpXG5cbiAgICAgIC8vIEZpeCBwb3NpdGlvbnMuXG4gICAgICBsZXQgaW5kZXggPSBpbmRleEJlZm9yZUV4aXRzXG5cbiAgICAgIHdoaWxlIChpbmRleCA8IHNlbGYuZXZlbnRzLmxlbmd0aCkge1xuICAgICAgICBzZWxmLmV2ZW50c1tpbmRleF1bMV0uZW5kID0gT2JqZWN0LmFzc2lnbih7fSwgcG9pbnQpXG4gICAgICAgIGluZGV4KytcbiAgICAgIH1cblxuICAgICAgLy8gSW5qZWN0IHRoZSBleGl0cyBlYXJsaWVyICh0aGV54oCZcmUgc3RpbGwgYWxzbyBhdCB0aGUgZW5kKS5cbiAgICAgIHNwbGljZShcbiAgICAgICAgc2VsZi5ldmVudHMsXG4gICAgICAgIGluZGV4QmVmb3JlRmxvdyArIDEsXG4gICAgICAgIDAsXG4gICAgICAgIHNlbGYuZXZlbnRzLnNsaWNlKGluZGV4QmVmb3JlRXhpdHMpXG4gICAgICApXG5cbiAgICAgIC8vIERpc2NhcmQgdGhlIGR1cGxpY2F0ZSBleGl0cy5cbiAgICAgIHNlbGYuZXZlbnRzLmxlbmd0aCA9IGluZGV4XG5cbiAgICAgIHJldHVybiBjaGVja05ld0NvbnRhaW5lcnMoY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhcnQoY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGNoZWNrTmV3Q29udGFpbmVycyhjb2RlKSB7XG4gICAgLy8gTmV4dCwgYWZ0ZXIgY29uc3VtaW5nIHRoZSBjb250aW51YXRpb24gbWFya2VycyBmb3IgZXhpc3RpbmcgYmxvY2tzLCB3ZVxuICAgIC8vIGxvb2sgZm9yIG5ldyBibG9jayBzdGFydHMgKGUuZy4gYD5gIGZvciBhIGJsb2NrIHF1b3RlKS5cbiAgICAvLyBJZiB3ZSBlbmNvdW50ZXIgYSBuZXcgYmxvY2sgc3RhcnQsIHdlIGNsb3NlIGFueSBibG9ja3MgdW5tYXRjaGVkIGluXG4gICAgLy8gc3RlcCAxIGJlZm9yZSBjcmVhdGluZyB0aGUgbmV3IGJsb2NrIGFzIGEgY2hpbGQgb2YgdGhlIGxhc3QgbWF0Y2hlZFxuICAgIC8vIGJsb2NrLlxuICAgIGlmIChjb250aW51ZWQgPT09IHN0YWNrLmxlbmd0aCkge1xuICAgICAgLy8gTm8gbmVlZCB0byBgY2hlY2tgIHdoZXRoZXIgdGhlcmXigJlzIGEgY29udGFpbmVyLCBvZiBgZXhpdENvbnRhaW5lcnNgXG4gICAgICAvLyB3b3VsZCBiZSBtb290LlxuICAgICAgLy8gV2UgY2FuIGluc3RlYWQgaW1tZWRpYXRlbHkgYGF0dGVtcHRgIHRvIHBhcnNlIG9uZS5cbiAgICAgIGlmICghY2hpbGRGbG93KSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudENvbnRpbnVlZChjb2RlKVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB3ZSBoYXZlIGNvbmNyZXRlIGNvbnRlbnQsIHN1Y2ggYXMgYmxvY2sgSFRNTCBvciBmZW5jZWQgY29kZSxcbiAgICAgIC8vIHdlIGNhbuKAmXQgaGF2ZSBjb250YWluZXJzIOKAnHBpZXJjZeKAnSBpbnRvIHRoZW0sIHNvIHdlIGNhbiBpbW1lZGlhdGVseVxuICAgICAgLy8gc3RhcnQuXG4gICAgICBpZiAoY2hpbGRGbG93LmN1cnJlbnRDb25zdHJ1Y3QgJiYgY2hpbGRGbG93LmN1cnJlbnRDb25zdHJ1Y3QuY29uY3JldGUpIHtcbiAgICAgICAgcmV0dXJuIGZsb3dTdGFydChjb2RlKVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB3ZSBkbyBoYXZlIGZsb3csIGl0IGNvdWxkIHN0aWxsIGJlIGEgYmxhbmsgbGluZSxcbiAgICAgIC8vIGJ1dCB3ZeKAmWQgYmUgaW50ZXJydXB0aW5nIGl0IHcvIGEgbmV3IGNvbnRhaW5lciBpZiB0aGVyZeKAmXMgYSBjdXJyZW50XG4gICAgICAvLyBjb25zdHJ1Y3QuXG4gICAgICBzZWxmLmludGVycnVwdCA9IEJvb2xlYW4oXG4gICAgICAgIGNoaWxkRmxvdy5jdXJyZW50Q29uc3RydWN0ICYmICFjaGlsZEZsb3cuX2dmbVRhYmxlRHluYW1pY0ludGVycnVwdEhhY2tcbiAgICAgIClcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiB0aGVyZSBpcyBhIG5ldyBjb250YWluZXIuXG4gICAgc2VsZi5jb250YWluZXJTdGF0ZSA9IHt9XG4gICAgcmV0dXJuIGVmZmVjdHMuY2hlY2soXG4gICAgICBjb250YWluZXJDb25zdHJ1Y3QsXG4gICAgICB0aGVyZUlzQU5ld0NvbnRhaW5lcixcbiAgICAgIHRoZXJlSXNOb05ld0NvbnRhaW5lclxuICAgICkoY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHRoZXJlSXNBTmV3Q29udGFpbmVyKGNvZGUpIHtcbiAgICBpZiAoY2hpbGRGbG93KSBjbG9zZUZsb3coKVxuICAgIGV4aXRDb250YWluZXJzKGNvbnRpbnVlZClcbiAgICByZXR1cm4gZG9jdW1lbnRDb250aW51ZWQoY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIHRoZXJlSXNOb05ld0NvbnRhaW5lcihjb2RlKSB7XG4gICAgc2VsZi5wYXJzZXIubGF6eVtzZWxmLm5vdygpLmxpbmVdID0gY29udGludWVkICE9PSBzdGFjay5sZW5ndGhcbiAgICBsaW5lU3RhcnRPZmZzZXQgPSBzZWxmLm5vdygpLm9mZnNldFxuICAgIHJldHVybiBmbG93U3RhcnQoY29kZSlcbiAgfVxuXG4gIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gIGZ1bmN0aW9uIGRvY3VtZW50Q29udGludWVkKGNvZGUpIHtcbiAgICAvLyBUcnkgbmV3IGNvbnRhaW5lcnMuXG4gICAgc2VsZi5jb250YWluZXJTdGF0ZSA9IHt9XG4gICAgcmV0dXJuIGVmZmVjdHMuYXR0ZW1wdChcbiAgICAgIGNvbnRhaW5lckNvbnN0cnVjdCxcbiAgICAgIGNvbnRhaW5lckNvbnRpbnVlLFxuICAgICAgZmxvd1N0YXJ0XG4gICAgKShjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gY29udGFpbmVyQ29udGludWUoY29kZSkge1xuICAgIGFzc2VydChcbiAgICAgIHNlbGYuY3VycmVudENvbnN0cnVjdCxcbiAgICAgICdleHBlY3RlZCBgY3VycmVudENvbnN0cnVjdGAgdG8gYmUgZGVmaW5lZCBvbiB0b2tlbml6ZXInXG4gICAgKVxuICAgIGFzc2VydChcbiAgICAgIHNlbGYuY29udGFpbmVyU3RhdGUsXG4gICAgICAnZXhwZWN0ZWQgYGNvbnRhaW5lclN0YXRlYCB0byBiZSBkZWZpbmVkIG9uIHRva2VuaXplcidcbiAgICApXG4gICAgY29udGludWVkKytcbiAgICBzdGFjay5wdXNoKFtzZWxmLmN1cnJlbnRDb25zdHJ1Y3QsIHNlbGYuY29udGFpbmVyU3RhdGVdKVxuICAgIC8vIFRyeSBhbm90aGVyLlxuICAgIHJldHVybiBkb2N1bWVudENvbnRpbnVlZChjb2RlKVxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gZmxvd1N0YXJ0KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mKSB7XG4gICAgICBpZiAoY2hpbGRGbG93KSBjbG9zZUZsb3coKVxuICAgICAgZXhpdENvbnRhaW5lcnMoMClcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY2hpbGRGbG93ID0gY2hpbGRGbG93IHx8IHNlbGYucGFyc2VyLmZsb3coc2VsZi5ub3coKSlcbiAgICBlZmZlY3RzLmVudGVyKHR5cGVzLmNodW5rRmxvdywge1xuICAgICAgY29udGVudFR5cGU6IGNvbnN0YW50cy5jb250ZW50VHlwZUZsb3csXG4gICAgICBwcmV2aW91czogY2hpbGRUb2tlbixcbiAgICAgIF90b2tlbml6ZXI6IGNoaWxkRmxvd1xuICAgIH0pXG5cbiAgICByZXR1cm4gZmxvd0NvbnRpbnVlKGNvZGUpXG4gIH1cblxuICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICBmdW5jdGlvbiBmbG93Q29udGludWUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBjb2Rlcy5lb2YpIHtcbiAgICAgIHdyaXRlVG9DaGlsZChlZmZlY3RzLmV4aXQodHlwZXMuY2h1bmtGbG93KSwgdHJ1ZSlcbiAgICAgIGV4aXRDb250YWluZXJzKDApXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgd3JpdGVUb0NoaWxkKGVmZmVjdHMuZXhpdCh0eXBlcy5jaHVua0Zsb3cpKVxuICAgICAgLy8gR2V0IHJlYWR5IGZvciB0aGUgbmV4dCBsaW5lLlxuICAgICAgY29udGludWVkID0gMFxuICAgICAgc2VsZi5pbnRlcnJ1cHQgPSB1bmRlZmluZWRcbiAgICAgIHJldHVybiBzdGFydFxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBmbG93Q29udGludWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1Rva2VufSB0b2tlblxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtlb2ZdXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZnVuY3Rpb24gd3JpdGVUb0NoaWxkKHRva2VuLCBlb2YpIHtcbiAgICBhc3NlcnQoY2hpbGRGbG93LCAnZXhwZWN0ZWQgYGNoaWxkRmxvd2AgdG8gYmUgZGVmaW5lZCB3aGVuIGNvbnRpbnVpbmcnKVxuICAgIGNvbnN0IHN0cmVhbSA9IHNlbGYuc2xpY2VTdHJlYW0odG9rZW4pXG4gICAgaWYgKGVvZikgc3RyZWFtLnB1c2gobnVsbClcbiAgICB0b2tlbi5wcmV2aW91cyA9IGNoaWxkVG9rZW5cbiAgICBpZiAoY2hpbGRUb2tlbikgY2hpbGRUb2tlbi5uZXh0ID0gdG9rZW5cbiAgICBjaGlsZFRva2VuID0gdG9rZW5cbiAgICBjaGlsZEZsb3cuZGVmaW5lU2tpcCh0b2tlbi5zdGFydClcbiAgICBjaGlsZEZsb3cud3JpdGUoc3RyZWFtKVxuXG4gICAgLy8gQWxyaWdodCwgc28gd2UganVzdCBhZGRlZCBhIGxhenkgbGluZTpcbiAgICAvL1xuICAgIC8vIGBgYG1hcmtkb3duXG4gICAgLy8gPiBhXG4gICAgLy8gYi5cbiAgICAvL1xuICAgIC8vIE9yOlxuICAgIC8vXG4gICAgLy8gPiB+fn5jXG4gICAgLy8gZFxuICAgIC8vXG4gICAgLy8gT3I6XG4gICAgLy9cbiAgICAvLyA+IHwgZSB8XG4gICAgLy8gZlxuICAgIC8vIGBgYFxuICAgIC8vXG4gICAgLy8gVGhlIGNvbnN0cnVjdCBpbiB0aGUgc2Vjb25kIGV4YW1wbGUgKGZlbmNlZCBjb2RlKSBkb2VzIG5vdCBhY2NlcHQgbGF6eVxuICAgIC8vIGxpbmVzLCBzbyBpdCBtYXJrZWQgaXRzZWxmIGFzIGRvbmUgYXQgdGhlIGVuZCBvZiBpdHMgZmlyc3QgbGluZSwgYW5kXG4gICAgLy8gdGhlbiB0aGUgY29udGVudCBjb25zdHJ1Y3QgcGFyc2VzIGBkYC5cbiAgICAvLyBNb3N0IGNvbnN0cnVjdHMgaW4gbWFya2Rvd24gbWF0Y2ggb24gdGhlIGZpcnN0IGxpbmU6IGlmIHRoZSBmaXJzdCBsaW5lXG4gICAgLy8gZm9ybXMgYSBjb25zdHJ1Y3QsIGEgbm9uLWxhenkgbGluZSBjYW7igJl0IOKAnHVubWFrZeKAnSBpdC5cbiAgICAvL1xuICAgIC8vIFRoZSBjb25zdHJ1Y3QgaW4gdGhlIHRoaXJkIGV4YW1wbGUgaXMgcG90ZW50aWFsbHkgYSBHRk0gdGFibGUsIGFuZFxuICAgIC8vIHRob3NlIGFyZSAqd2VpcmQqLlxuICAgIC8vIEl0ICpjb3VsZCogYmUgYSB0YWJsZSwgZnJvbSB0aGUgZmlyc3QgbGluZSwgaWYgdGhlIGZvbGxvd2luZyBsaW5lXG4gICAgLy8gbWF0Y2hlcyBhIGNvbmRpdGlvbi5cbiAgICAvLyBJbiB0aGlzIGNhc2UsIHRoYXQgc2Vjb25kIGxpbmUgaXMgbGF6eSwgd2hpY2gg4oCcdW5tYWtlc+KAnSB0aGUgZmlyc3QgbGluZVxuICAgIC8vIGFuZCB0dXJucyB0aGUgd2hvbGUgaW50byBvbmUgY29udGVudCBibG9jay5cbiAgICAvL1xuICAgIC8vIFdl4oCZdmUgbm93IHBhcnNlZCB0aGUgbm9uLWxhenkgYW5kIHRoZSBsYXp5IGxpbmUsIGFuZCBjYW4gZmlndXJlIG91dFxuICAgIC8vIHdoZXRoZXIgdGhlIGxhenkgbGluZSBzdGFydGVkIGEgbmV3IGZsb3cgYmxvY2suXG4gICAgLy8gSWYgaXQgZGlkLCB3ZSBleGl0IHRoZSBjdXJyZW50IGNvbnRhaW5lcnMgYmV0d2VlbiB0aGUgdHdvIGZsb3cgYmxvY2tzLlxuICAgIGlmIChzZWxmLnBhcnNlci5sYXp5W3Rva2VuLnN0YXJ0LmxpbmVdKSB7XG4gICAgICBsZXQgaW5kZXggPSBjaGlsZEZsb3cuZXZlbnRzLmxlbmd0aFxuXG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgLy8gVGhlIHRva2VuIHN0YXJ0cyBiZWZvcmUgdGhlIGxpbmUgZW5kaW5n4oCmXG4gICAgICAgICAgY2hpbGRGbG93LmV2ZW50c1tpbmRleF1bMV0uc3RhcnQub2Zmc2V0IDwgbGluZVN0YXJ0T2Zmc2V0ICYmXG4gICAgICAgICAgLy8g4oCmYW5kIGVpdGhlciBpcyBub3QgZW5kZWQgeWV04oCmXG4gICAgICAgICAgKCFjaGlsZEZsb3cuZXZlbnRzW2luZGV4XVsxXS5lbmQgfHxcbiAgICAgICAgICAgIC8vIOKApm9yIGVuZHMgYWZ0ZXIgaXQuXG4gICAgICAgICAgICBjaGlsZEZsb3cuZXZlbnRzW2luZGV4XVsxXS5lbmQub2Zmc2V0ID4gbGluZVN0YXJ0T2Zmc2V0KVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBFeGl0OiB0aGVyZeKAmXMgc3RpbGwgc29tZXRoaW5nIG9wZW4sIHdoaWNoIG1lYW5zIGl04oCZcyBhIGxhenkgbGluZVxuICAgICAgICAgIC8vIHBhcnQgb2Ygc29tZXRoaW5nLlxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE5vdGU6IHRoaXMgYWxnb3JpdGhtIGZvciBtb3ZpbmcgZXZlbnRzIGFyb3VuZCBpcyBzaW1pbGFyIHRvIHRoZVxuICAgICAgLy8gYWxnb3JpdGhtIHdoZW4gY2xvc2luZyBmbG93IGluIGBkb2N1bWVudENvbnRpbnVlYC5cbiAgICAgIGNvbnN0IGluZGV4QmVmb3JlRXhpdHMgPSBzZWxmLmV2ZW50cy5sZW5ndGhcbiAgICAgIGxldCBpbmRleEJlZm9yZUZsb3cgPSBpbmRleEJlZm9yZUV4aXRzXG4gICAgICAvKiogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfSAqL1xuICAgICAgbGV0IHNlZW5cbiAgICAgIC8qKiBAdHlwZSB7UG9pbnR8dW5kZWZpbmVkfSAqL1xuICAgICAgbGV0IHBvaW50XG5cbiAgICAgIC8vIEZpbmQgdGhlIHByZXZpb3VzIGNodW5rICh0aGUgb25lIGJlZm9yZSB0aGUgbGF6eSBsaW5lKS5cbiAgICAgIHdoaWxlIChpbmRleEJlZm9yZUZsb3ctLSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgc2VsZi5ldmVudHNbaW5kZXhCZWZvcmVGbG93XVswXSA9PT0gJ2V4aXQnICYmXG4gICAgICAgICAgc2VsZi5ldmVudHNbaW5kZXhCZWZvcmVGbG93XVsxXS50eXBlID09PSB0eXBlcy5jaHVua0Zsb3dcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICAgIHBvaW50ID0gc2VsZi5ldmVudHNbaW5kZXhCZWZvcmVGbG93XVsxXS5lbmRcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VlbiA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBhc3NlcnQocG9pbnQsICdjb3VsZCBub3QgZmluZCBwcmV2aW91cyBmbG93IGNodW5rJylcblxuICAgICAgZXhpdENvbnRhaW5lcnMoY29udGludWVkKVxuXG4gICAgICAvLyBGaXggcG9zaXRpb25zLlxuICAgICAgaW5kZXggPSBpbmRleEJlZm9yZUV4aXRzXG5cbiAgICAgIHdoaWxlIChpbmRleCA8IHNlbGYuZXZlbnRzLmxlbmd0aCkge1xuICAgICAgICBzZWxmLmV2ZW50c1tpbmRleF1bMV0uZW5kID0gT2JqZWN0LmFzc2lnbih7fSwgcG9pbnQpXG4gICAgICAgIGluZGV4KytcbiAgICAgIH1cblxuICAgICAgLy8gSW5qZWN0IHRoZSBleGl0cyBlYXJsaWVyICh0aGV54oCZcmUgc3RpbGwgYWxzbyBhdCB0aGUgZW5kKS5cbiAgICAgIHNwbGljZShcbiAgICAgICAgc2VsZi5ldmVudHMsXG4gICAgICAgIGluZGV4QmVmb3JlRmxvdyArIDEsXG4gICAgICAgIDAsXG4gICAgICAgIHNlbGYuZXZlbnRzLnNsaWNlKGluZGV4QmVmb3JlRXhpdHMpXG4gICAgICApXG5cbiAgICAgIC8vIERpc2NhcmQgdGhlIGR1cGxpY2F0ZSBleGl0cy5cbiAgICAgIHNlbGYuZXZlbnRzLmxlbmd0aCA9IGluZGV4XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZnVuY3Rpb24gZXhpdENvbnRhaW5lcnMoc2l6ZSkge1xuICAgIGxldCBpbmRleCA9IHN0YWNrLmxlbmd0aFxuXG4gICAgLy8gRXhpdCBvcGVuIGNvbnRhaW5lcnMuXG4gICAgd2hpbGUgKGluZGV4LS0gPiBzaXplKSB7XG4gICAgICBjb25zdCBlbnRyeSA9IHN0YWNrW2luZGV4XVxuICAgICAgc2VsZi5jb250YWluZXJTdGF0ZSA9IGVudHJ5WzFdXG4gICAgICBhc3NlcnQoXG4gICAgICAgIGVudHJ5WzBdLmV4aXQsXG4gICAgICAgICdleHBlY3RlZCBgZXhpdGAgdG8gYmUgZGVmaW5lZCBvbiBjb250YWluZXIgY29uc3RydWN0J1xuICAgICAgKVxuICAgICAgZW50cnlbMF0uZXhpdC5jYWxsKHNlbGYsIGVmZmVjdHMpXG4gICAgfVxuXG4gICAgc3RhY2subGVuZ3RoID0gc2l6ZVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2VGbG93KCkge1xuICAgIGFzc2VydChcbiAgICAgIHNlbGYuY29udGFpbmVyU3RhdGUsXG4gICAgICAnZXhwZWN0ZWQgYGNvbnRhaW5lclN0YXRlYCB0byBiZSBkZWZpbmVkIHdoZW4gY2xvc2luZyBmbG93J1xuICAgIClcbiAgICBhc3NlcnQoY2hpbGRGbG93LCAnZXhwZWN0ZWQgYGNoaWxkRmxvd2AgdG8gYmUgZGVmaW5lZCB3aGVuIGNsb3NpbmcgaXQnKVxuICAgIGNoaWxkRmxvdy53cml0ZShbY29kZXMuZW9mXSlcbiAgICBjaGlsZFRva2VuID0gdW5kZWZpbmVkXG4gICAgY2hpbGRGbG93ID0gdW5kZWZpbmVkXG4gICAgc2VsZi5jb250YWluZXJTdGF0ZS5fY2xvc2VGbG93ID0gdW5kZWZpbmVkXG4gIH1cbn1cblxuLyoqIEB0eXBlIHtUb2tlbml6ZXJ9ICovXG5mdW5jdGlvbiB0b2tlbml6ZUNvbnRhaW5lcihlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiBmYWN0b3J5U3BhY2UoXG4gICAgZWZmZWN0cyxcbiAgICBlZmZlY3RzLmF0dGVtcHQodGhpcy5wYXJzZXIuY29uc3RydWN0cy5kb2N1bWVudCwgb2ssIG5vayksXG4gICAgdHlwZXMubGluZVByZWZpeCxcbiAgICB0aGlzLnBhcnNlci5jb25zdHJ1Y3RzLmRpc2FibGUubnVsbC5pbmNsdWRlcygnY29kZUluZGVudGVkJylcbiAgICAgID8gdW5kZWZpbmVkXG4gICAgICA6IGNvbnN0YW50cy50YWJTaXplXG4gIClcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Jbml0aWFsQ29uc3RydWN0fSBJbml0aWFsQ29uc3RydWN0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkluaXRpYWxpemVyfSBJbml0aWFsaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5TdGF0ZX0gU3RhdGVcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAndXZ1L2Fzc2VydCdcbmltcG9ydCB7YmxhbmtMaW5lLCBjb250ZW50fSBmcm9tICdtaWNyb21hcmstY29yZS1jb21tb25tYXJrJ1xuaW1wb3J0IHtmYWN0b3J5U3BhY2V9IGZyb20gJ21pY3JvbWFyay1mYWN0b3J5LXNwYWNlJ1xuaW1wb3J0IHttYXJrZG93bkxpbmVFbmRpbmd9IGZyb20gJ21pY3JvbWFyay11dGlsLWNoYXJhY3RlcidcbmltcG9ydCB7Y29kZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb2Rlcy5qcydcbmltcG9ydCB7dHlwZXN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC90eXBlcy5qcydcblxuLyoqIEB0eXBlIHtJbml0aWFsQ29uc3RydWN0fSAqL1xuZXhwb3J0IGNvbnN0IGZsb3cgPSB7dG9rZW5pemU6IGluaXRpYWxpemVGbG93fVxuXG4vKiogQHR5cGUge0luaXRpYWxpemVyfSAqL1xuZnVuY3Rpb24gaW5pdGlhbGl6ZUZsb3coZWZmZWN0cykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBjb25zdCBpbml0aWFsID0gZWZmZWN0cy5hdHRlbXB0KFxuICAgIC8vIFRyeSB0byBwYXJzZSBhIGJsYW5rIGxpbmUuXG4gICAgYmxhbmtMaW5lLFxuICAgIGF0QmxhbmtFbmRpbmcsXG4gICAgLy8gVHJ5IHRvIHBhcnNlIGluaXRpYWwgZmxvdyAoZXNzZW50aWFsbHksIG9ubHkgY29kZSkuXG4gICAgZWZmZWN0cy5hdHRlbXB0KFxuICAgICAgdGhpcy5wYXJzZXIuY29uc3RydWN0cy5mbG93SW5pdGlhbCxcbiAgICAgIGFmdGVyQ29uc3RydWN0LFxuICAgICAgZmFjdG9yeVNwYWNlKFxuICAgICAgICBlZmZlY3RzLFxuICAgICAgICBlZmZlY3RzLmF0dGVtcHQoXG4gICAgICAgICAgdGhpcy5wYXJzZXIuY29uc3RydWN0cy5mbG93LFxuICAgICAgICAgIGFmdGVyQ29uc3RydWN0LFxuICAgICAgICAgIGVmZmVjdHMuYXR0ZW1wdChjb250ZW50LCBhZnRlckNvbnN0cnVjdClcbiAgICAgICAgKSxcbiAgICAgICAgdHlwZXMubGluZVByZWZpeFxuICAgICAgKVxuICAgIClcbiAgKVxuXG4gIHJldHVybiBpbml0aWFsXG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gYXRCbGFua0VuZGluZyhjb2RlKSB7XG4gICAgYXNzZXJ0KFxuICAgICAgY29kZSA9PT0gY29kZXMuZW9mIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSxcbiAgICAgICdleHBlY3RlZCBlb2wgb3IgZW9mJ1xuICAgIClcblxuICAgIGlmIChjb2RlID09PSBjb2Rlcy5lb2YpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlcy5saW5lRW5kaW5nQmxhbmspXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KHR5cGVzLmxpbmVFbmRpbmdCbGFuaylcbiAgICBzZWxmLmN1cnJlbnRDb25zdHJ1Y3QgPSB1bmRlZmluZWRcbiAgICByZXR1cm4gaW5pdGlhbFxuICB9XG5cbiAgLyoqIEB0eXBlIHtTdGF0ZX0gKi9cbiAgZnVuY3Rpb24gYWZ0ZXJDb25zdHJ1Y3QoY29kZSkge1xuICAgIGFzc2VydChcbiAgICAgIGNvZGUgPT09IGNvZGVzLmVvZiB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSksXG4gICAgICAnZXhwZWN0ZWQgZW9sIG9yIGVvZidcbiAgICApXG5cbiAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIodHlwZXMubGluZUVuZGluZylcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQodHlwZXMubGluZUVuZGluZylcbiAgICBzZWxmLmN1cnJlbnRDb25zdHJ1Y3QgPSB1bmRlZmluZWRcbiAgICByZXR1cm4gaW5pdGlhbFxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuUmVzb2x2ZXJ9IFJlc29sdmVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkluaXRpYWxpemVyfSBJbml0aWFsaXplclxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db25zdHJ1Y3R9IENvbnN0cnVjdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Jbml0aWFsQ29uc3RydWN0fSBJbml0aWFsQ29uc3RydWN0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlN0YXRlfSBTdGF0ZVxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db2RlfSBDb2RlXG4gKi9cblxuaW1wb3J0IHtjb2Rlc30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvZGVzLmpzJ1xuaW1wb3J0IHtjb25zdGFudHN9IGZyb20gJ21pY3JvbWFyay11dGlsLXN5bWJvbC9jb25zdGFudHMuanMnXG5pbXBvcnQge3R5cGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvdHlwZXMuanMnXG5cbmV4cG9ydCBjb25zdCByZXNvbHZlciA9IHtyZXNvbHZlQWxsOiBjcmVhdGVSZXNvbHZlcigpfVxuZXhwb3J0IGNvbnN0IHN0cmluZyA9IGluaXRpYWxpemVGYWN0b3J5KCdzdHJpbmcnKVxuZXhwb3J0IGNvbnN0IHRleHQgPSBpbml0aWFsaXplRmFjdG9yeSgndGV4dCcpXG5cbi8qKlxuICogQHBhcmFtIHsnc3RyaW5nJ3wndGV4dCd9IGZpZWxkXG4gKiBAcmV0dXJucyB7SW5pdGlhbENvbnN0cnVjdH1cbiAqL1xuZnVuY3Rpb24gaW5pdGlhbGl6ZUZhY3RvcnkoZmllbGQpIHtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbml6ZTogaW5pdGlhbGl6ZVRleHQsXG4gICAgcmVzb2x2ZUFsbDogY3JlYXRlUmVzb2x2ZXIoXG4gICAgICBmaWVsZCA9PT0gJ3RleHQnID8gcmVzb2x2ZUFsbExpbmVTdWZmaXhlcyA6IHVuZGVmaW5lZFxuICAgIClcbiAgfVxuXG4gIC8qKiBAdHlwZSB7SW5pdGlhbGl6ZXJ9ICovXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVUZXh0KGVmZmVjdHMpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpc1xuICAgIGNvbnN0IGNvbnN0cnVjdHMgPSB0aGlzLnBhcnNlci5jb25zdHJ1Y3RzW2ZpZWxkXVxuICAgIGNvbnN0IHRleHQgPSBlZmZlY3RzLmF0dGVtcHQoY29uc3RydWN0cywgc3RhcnQsIG5vdFRleHQpXG5cbiAgICByZXR1cm4gc3RhcnRcblxuICAgIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gICAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgICAgcmV0dXJuIGF0QnJlYWsoY29kZSkgPyB0ZXh0KGNvZGUpIDogbm90VGV4dChjb2RlKVxuICAgIH1cblxuICAgIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gICAgZnVuY3Rpb24gbm90VGV4dChjb2RlKSB7XG4gICAgICBpZiAoY29kZSA9PT0gY29kZXMuZW9mKSB7XG4gICAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgZWZmZWN0cy5lbnRlcih0eXBlcy5kYXRhKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gZGF0YVxuICAgIH1cblxuICAgIC8qKiBAdHlwZSB7U3RhdGV9ICovXG4gICAgZnVuY3Rpb24gZGF0YShjb2RlKSB7XG4gICAgICBpZiAoYXRCcmVhayhjb2RlKSkge1xuICAgICAgICBlZmZlY3RzLmV4aXQodHlwZXMuZGF0YSlcbiAgICAgICAgcmV0dXJuIHRleHQoY29kZSlcbiAgICAgIH1cblxuICAgICAgLy8gRGF0YS5cbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGRhdGFcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0NvZGV9IGNvZGVcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhdEJyZWFrKGNvZGUpIHtcbiAgICAgIGlmIChjb2RlID09PSBjb2Rlcy5lb2YpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cblxuICAgICAgY29uc3QgbGlzdCA9IGNvbnN0cnVjdHNbY29kZV1cbiAgICAgIGxldCBpbmRleCA9IC0xXG5cbiAgICAgIGlmIChsaXN0KSB7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zdCBpdGVtID0gbGlzdFtpbmRleF1cbiAgICAgICAgICBpZiAoIWl0ZW0ucHJldmlvdXMgfHwgaXRlbS5wcmV2aW91cy5jYWxsKHNlbGYsIHNlbGYucHJldmlvdXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1Jlc29sdmVyfSBbZXh0cmFSZXNvbHZlcl1cbiAqIEByZXR1cm5zIHtSZXNvbHZlcn1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUmVzb2x2ZXIoZXh0cmFSZXNvbHZlcikge1xuICByZXR1cm4gcmVzb2x2ZUFsbFRleHRcblxuICAvKiogQHR5cGUge1Jlc29sdmVyfSAqL1xuICBmdW5jdGlvbiByZXNvbHZlQWxsVGV4dChldmVudHMsIGNvbnRleHQpIHtcbiAgICBsZXQgaW5kZXggPSAtMVxuICAgIC8qKiBAdHlwZSB7bnVtYmVyfHVuZGVmaW5lZH0gKi9cbiAgICBsZXQgZW50ZXJcblxuICAgIC8vIEEgcmF0aGVyIGJvcmluZyBjb21wdXRhdGlvbiAodG8gbWVyZ2UgYWRqYWNlbnQgYGRhdGFgIGV2ZW50cykgd2hpY2hcbiAgICAvLyBpbXByb3ZlcyBtbSBwZXJmb3JtYW5jZSBieSAyOSUuXG4gICAgd2hpbGUgKCsraW5kZXggPD0gZXZlbnRzLmxlbmd0aCkge1xuICAgICAgaWYgKGVudGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGV2ZW50c1tpbmRleF0gJiYgZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSB0eXBlcy5kYXRhKSB7XG4gICAgICAgICAgZW50ZXIgPSBpbmRleFxuICAgICAgICAgIGluZGV4KytcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghZXZlbnRzW2luZGV4XSB8fCBldmVudHNbaW5kZXhdWzFdLnR5cGUgIT09IHR5cGVzLmRhdGEpIHtcbiAgICAgICAgLy8gRG9u4oCZdCBkbyBhbnl0aGluZyBpZiB0aGVyZSBpcyBvbmUgZGF0YSB0b2tlbi5cbiAgICAgICAgaWYgKGluZGV4ICE9PSBlbnRlciArIDIpIHtcbiAgICAgICAgICBldmVudHNbZW50ZXJdWzFdLmVuZCA9IGV2ZW50c1tpbmRleCAtIDFdWzFdLmVuZFxuICAgICAgICAgIGV2ZW50cy5zcGxpY2UoZW50ZXIgKyAyLCBpbmRleCAtIGVudGVyIC0gMilcbiAgICAgICAgICBpbmRleCA9IGVudGVyICsgMlxuICAgICAgICB9XG5cbiAgICAgICAgZW50ZXIgPSB1bmRlZmluZWRcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZXh0cmFSZXNvbHZlciA/IGV4dHJhUmVzb2x2ZXIoZXZlbnRzLCBjb250ZXh0KSA6IGV2ZW50c1xuICB9XG59XG5cbi8qKlxuICogQSByYXRoZXIgdWdseSBzZXQgb2YgaW5zdHJ1Y3Rpb25zIHdoaWNoIGFnYWluIGxvb2tzIGF0IGNodW5rcyBpbiB0aGUgaW5wdXRcbiAqIHN0cmVhbS5cbiAqIFRoZSByZWFzb24gdG8gZG8gdGhpcyBoZXJlIGlzIHRoYXQgaXQgaXMgKm11Y2gqIGZhc3RlciB0byBwYXJzZSBpbiByZXZlcnNlLlxuICogQW5kIHRoYXQgd2UgY2Fu4oCZdCBob29rIGludG8gYG51bGxgIHRvIHNwbGl0IHRoZSBsaW5lIHN1ZmZpeCBiZWZvcmUgYW4gRU9GLlxuICogVG8gZG86IGZpZ3VyZSBvdXQgaWYgd2UgY2FuIG1ha2UgdGhpcyBpbnRvIGEgY2xlYW4gdXRpbGl0eSwgb3IgZXZlbiBpbiBjb3JlLlxuICogQXMgaXQgd2lsbCBiZSB1c2VmdWwgZm9yIEdGTXMgbGl0ZXJhbCBhdXRvbGluayBleHRlbnNpb24gKGFuZCBtYXliZSBldmVuXG4gKiB0YWJsZXM/KVxuICpcbiAqIEB0eXBlIHtSZXNvbHZlcn1cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFsbExpbmVTdWZmaXhlcyhldmVudHMsIGNvbnRleHQpIHtcbiAgbGV0IGV2ZW50SW5kZXggPSAwIC8vIFNraXAgZmlyc3QuXG5cbiAgd2hpbGUgKCsrZXZlbnRJbmRleCA8PSBldmVudHMubGVuZ3RoKSB7XG4gICAgaWYgKFxuICAgICAgKGV2ZW50SW5kZXggPT09IGV2ZW50cy5sZW5ndGggfHxcbiAgICAgICAgZXZlbnRzW2V2ZW50SW5kZXhdWzFdLnR5cGUgPT09IHR5cGVzLmxpbmVFbmRpbmcpICYmXG4gICAgICBldmVudHNbZXZlbnRJbmRleCAtIDFdWzFdLnR5cGUgPT09IHR5cGVzLmRhdGFcbiAgICApIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBldmVudHNbZXZlbnRJbmRleCAtIDFdWzFdXG4gICAgICBjb25zdCBjaHVua3MgPSBjb250ZXh0LnNsaWNlU3RyZWFtKGRhdGEpXG4gICAgICBsZXQgaW5kZXggPSBjaHVua3MubGVuZ3RoXG4gICAgICBsZXQgYnVmZmVySW5kZXggPSAtMVxuICAgICAgbGV0IHNpemUgPSAwXG4gICAgICAvKiogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfSAqL1xuICAgICAgbGV0IHRhYnNcblxuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgY29uc3QgY2h1bmsgPSBjaHVua3NbaW5kZXhdXG5cbiAgICAgICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBidWZmZXJJbmRleCA9IGNodW5rLmxlbmd0aFxuXG4gICAgICAgICAgd2hpbGUgKGNodW5rLmNoYXJDb2RlQXQoYnVmZmVySW5kZXggLSAxKSA9PT0gY29kZXMuc3BhY2UpIHtcbiAgICAgICAgICAgIHNpemUrK1xuICAgICAgICAgICAgYnVmZmVySW5kZXgtLVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChidWZmZXJJbmRleCkgYnJlYWtcbiAgICAgICAgICBidWZmZXJJbmRleCA9IC0xXG4gICAgICAgIH1cbiAgICAgICAgLy8gTnVtYmVyXG4gICAgICAgIGVsc2UgaWYgKGNodW5rID09PSBjb2Rlcy5ob3Jpem9udGFsVGFiKSB7XG4gICAgICAgICAgdGFicyA9IHRydWVcbiAgICAgICAgICBzaXplKytcbiAgICAgICAgfSBlbHNlIGlmIChjaHVuayA9PT0gY29kZXMudmlydHVhbFNwYWNlKSB7XG4gICAgICAgICAgLy8gRW1wdHlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBSZXBsYWNlbWVudCBjaGFyYWN0ZXIsIGV4aXQuXG4gICAgICAgICAgaW5kZXgrK1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHNpemUpIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSB7XG4gICAgICAgICAgdHlwZTpcbiAgICAgICAgICAgIGV2ZW50SW5kZXggPT09IGV2ZW50cy5sZW5ndGggfHxcbiAgICAgICAgICAgIHRhYnMgfHxcbiAgICAgICAgICAgIHNpemUgPCBjb25zdGFudHMuaGFyZEJyZWFrUHJlZml4U2l6ZU1pblxuICAgICAgICAgICAgICA/IHR5cGVzLmxpbmVTdWZmaXhcbiAgICAgICAgICAgICAgOiB0eXBlcy5oYXJkQnJlYWtUcmFpbGluZyxcbiAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgbGluZTogZGF0YS5lbmQubGluZSxcbiAgICAgICAgICAgIGNvbHVtbjogZGF0YS5lbmQuY29sdW1uIC0gc2l6ZSxcbiAgICAgICAgICAgIG9mZnNldDogZGF0YS5lbmQub2Zmc2V0IC0gc2l6ZSxcbiAgICAgICAgICAgIF9pbmRleDogZGF0YS5zdGFydC5faW5kZXggKyBpbmRleCxcbiAgICAgICAgICAgIF9idWZmZXJJbmRleDogaW5kZXhcbiAgICAgICAgICAgICAgPyBidWZmZXJJbmRleFxuICAgICAgICAgICAgICA6IGRhdGEuc3RhcnQuX2J1ZmZlckluZGV4ICsgYnVmZmVySW5kZXhcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVuZDogT2JqZWN0LmFzc2lnbih7fSwgZGF0YS5lbmQpXG4gICAgICAgIH1cblxuICAgICAgICBkYXRhLmVuZCA9IE9iamVjdC5hc3NpZ24oe30sIHRva2VuLnN0YXJ0KVxuXG4gICAgICAgIGlmIChkYXRhLnN0YXJ0Lm9mZnNldCA9PT0gZGF0YS5lbmQub2Zmc2V0KSB7XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihkYXRhLCB0b2tlbilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBldmVudHMuc3BsaWNlKFxuICAgICAgICAgICAgZXZlbnRJbmRleCxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICBbJ2VudGVyJywgdG9rZW4sIGNvbnRleHRdLFxuICAgICAgICAgICAgWydleGl0JywgdG9rZW4sIGNvbnRleHRdXG4gICAgICAgICAgKVxuICAgICAgICAgIGV2ZW50SW5kZXggKz0gMlxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGV2ZW50SW5kZXgrK1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBldmVudHNcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Jbml0aWFsQ29uc3RydWN0fSBJbml0aWFsQ29uc3RydWN0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkZ1bGxOb3JtYWxpemVkRXh0ZW5zaW9ufSBGdWxsTm9ybWFsaXplZEV4dGVuc2lvblxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5QYXJzZU9wdGlvbnN9IFBhcnNlT3B0aW9uc1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5QYXJzZUNvbnRleHR9IFBhcnNlQ29udGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5DcmVhdGV9IENyZWF0ZVxuICovXG5cbmltcG9ydCB7Y29tYmluZUV4dGVuc2lvbnN9IGZyb20gJ21pY3JvbWFyay11dGlsLWNvbWJpbmUtZXh0ZW5zaW9ucydcbmltcG9ydCB7Y29udGVudH0gZnJvbSAnLi9pbml0aWFsaXplL2NvbnRlbnQuanMnXG5pbXBvcnQge2RvY3VtZW50fSBmcm9tICcuL2luaXRpYWxpemUvZG9jdW1lbnQuanMnXG5pbXBvcnQge2Zsb3d9IGZyb20gJy4vaW5pdGlhbGl6ZS9mbG93LmpzJ1xuaW1wb3J0IHt0ZXh0LCBzdHJpbmd9IGZyb20gJy4vaW5pdGlhbGl6ZS90ZXh0LmpzJ1xuaW1wb3J0IHtjcmVhdGVUb2tlbml6ZXJ9IGZyb20gJy4vY3JlYXRlLXRva2VuaXplci5qcydcbmltcG9ydCAqIGFzIGRlZmF1bHRDb25zdHJ1Y3RzIGZyb20gJy4vY29uc3RydWN0cy5qcydcblxuLyoqXG4gKiBAcGFyYW0ge1BhcnNlT3B0aW9uc30gW29wdGlvbnNdXG4gKiBAcmV0dXJucyB7UGFyc2VDb250ZXh0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2Uob3B0aW9ucyA9IHt9KSB7XG4gIC8qKiBAdHlwZSB7RnVsbE5vcm1hbGl6ZWRFeHRlbnNpb259ICovXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgYGRlZmF1bHRDb25zdHJ1Y3RzYCBpcyBmdWxsLCBzbyB0aGUgcmVzdWx0IHdpbGwgYmUgdG9vLlxuICBjb25zdCBjb25zdHJ1Y3RzID0gY29tYmluZUV4dGVuc2lvbnMoXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBTYW1lIGFzIGFib3ZlLlxuICAgIFtkZWZhdWx0Q29uc3RydWN0c10uY29uY2F0KG9wdGlvbnMuZXh0ZW5zaW9ucyB8fCBbXSlcbiAgKVxuICAvKiogQHR5cGUge1BhcnNlQ29udGV4dH0gKi9cbiAgY29uc3QgcGFyc2VyID0ge1xuICAgIGRlZmluZWQ6IFtdLFxuICAgIGxhenk6IHt9LFxuICAgIGNvbnN0cnVjdHMsXG4gICAgY29udGVudDogY3JlYXRlKGNvbnRlbnQpLFxuICAgIGRvY3VtZW50OiBjcmVhdGUoZG9jdW1lbnQpLFxuICAgIGZsb3c6IGNyZWF0ZShmbG93KSxcbiAgICBzdHJpbmc6IGNyZWF0ZShzdHJpbmcpLFxuICAgIHRleHQ6IGNyZWF0ZSh0ZXh0KVxuICB9XG5cbiAgcmV0dXJuIHBhcnNlclxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0luaXRpYWxDb25zdHJ1Y3R9IGluaXRpYWxcbiAgICovXG4gIGZ1bmN0aW9uIGNyZWF0ZShpbml0aWFsKSB7XG4gICAgcmV0dXJuIGNyZWF0b3JcbiAgICAvKiogQHR5cGUge0NyZWF0ZX0gKi9cbiAgICBmdW5jdGlvbiBjcmVhdG9yKGZyb20pIHtcbiAgICAgIHJldHVybiBjcmVhdGVUb2tlbml6ZXIocGFyc2VyLCBpbml0aWFsLCBmcm9tKVxuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkV2ZW50fSBFdmVudFxuICovXG5cbmltcG9ydCB7c3VidG9rZW5pemV9IGZyb20gJ21pY3JvbWFyay11dGlsLXN1YnRva2VuaXplJ1xuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8RXZlbnQ+fSBldmVudHNcbiAqIEByZXR1cm5zIHtBcnJheTxFdmVudD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwb3N0cHJvY2VzcyhldmVudHMpIHtcbiAgd2hpbGUgKCFzdWJ0b2tlbml6ZShldmVudHMpKSB7XG4gICAgLy8gRW1wdHlcbiAgfVxuXG4gIHJldHVybiBldmVudHNcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5FbmNvZGluZ30gRW5jb2RpbmdcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21pY3JvbWFyay11dGlsLXR5cGVzJykuVmFsdWV9IFZhbHVlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNodW5rfSBDaHVua1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5Db2RlfSBDb2RlXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgUHJlcHJvY2Vzc29yXG4gKiBAcGFyYW0ge1ZhbHVlfSB2YWx1ZVxuICogQHBhcmFtIHtFbmNvZGluZ30gW2VuY29kaW5nXVxuICogQHBhcmFtIHtib29sZWFufSBbZW5kPWZhbHNlXVxuICogQHJldHVybnMge0FycmF5PENodW5rPn1cbiAqL1xuXG5pbXBvcnQge2NvZGVzfSBmcm9tICdtaWNyb21hcmstdXRpbC1zeW1ib2wvY29kZXMuanMnXG5pbXBvcnQge2NvbnN0YW50c30gZnJvbSAnbWljcm9tYXJrLXV0aWwtc3ltYm9sL2NvbnN0YW50cy5qcydcblxuY29uc3Qgc2VhcmNoID0gL1tcXDBcXHRcXG5cXHJdL2dcblxuLyoqXG4gKiBAcmV0dXJucyB7UHJlcHJvY2Vzc29yfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlcHJvY2VzcygpIHtcbiAgbGV0IGNvbHVtbiA9IDFcbiAgbGV0IGJ1ZmZlciA9ICcnXG4gIC8qKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9ICovXG4gIGxldCBzdGFydCA9IHRydWVcbiAgLyoqIEB0eXBlIHtib29sZWFufHVuZGVmaW5lZH0gKi9cbiAgbGV0IGF0Q2FycmlhZ2VSZXR1cm5cblxuICByZXR1cm4gcHJlcHJvY2Vzc29yXG5cbiAgLyoqIEB0eXBlIHtQcmVwcm9jZXNzb3J9ICovXG4gIGZ1bmN0aW9uIHByZXByb2Nlc3Nvcih2YWx1ZSwgZW5jb2RpbmcsIGVuZCkge1xuICAgIC8qKiBAdHlwZSB7QXJyYXk8Q2h1bms+fSAqL1xuICAgIGNvbnN0IGNodW5rcyA9IFtdXG4gICAgLyoqIEB0eXBlIHtSZWdFeHBNYXRjaEFycmF5fG51bGx9ICovXG4gICAgbGV0IG1hdGNoXG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgbGV0IG5leHRcbiAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICBsZXQgc3RhcnRQb3NpdGlvblxuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgIGxldCBlbmRQb3NpdGlvblxuICAgIC8qKiBAdHlwZSB7Q29kZX0gKi9cbiAgICBsZXQgY29kZVxuXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBgQnVmZmVyYCBkb2VzIGFsbG93IGFuIGVuY29kaW5nLlxuICAgIHZhbHVlID0gYnVmZmVyICsgdmFsdWUudG9TdHJpbmcoZW5jb2RpbmcpXG4gICAgc3RhcnRQb3NpdGlvbiA9IDBcbiAgICBidWZmZXIgPSAnJ1xuXG4gICAgaWYgKHN0YXJ0KSB7XG4gICAgICBpZiAodmFsdWUuY2hhckNvZGVBdCgwKSA9PT0gY29kZXMuYnl0ZU9yZGVyTWFya2VyKSB7XG4gICAgICAgIHN0YXJ0UG9zaXRpb24rK1xuICAgICAgfVxuXG4gICAgICBzdGFydCA9IHVuZGVmaW5lZFxuICAgIH1cblxuICAgIHdoaWxlIChzdGFydFBvc2l0aW9uIDwgdmFsdWUubGVuZ3RoKSB7XG4gICAgICBzZWFyY2gubGFzdEluZGV4ID0gc3RhcnRQb3NpdGlvblxuICAgICAgbWF0Y2ggPSBzZWFyY2guZXhlYyh2YWx1ZSlcbiAgICAgIGVuZFBvc2l0aW9uID1cbiAgICAgICAgbWF0Y2ggJiYgbWF0Y2guaW5kZXggIT09IHVuZGVmaW5lZCA/IG1hdGNoLmluZGV4IDogdmFsdWUubGVuZ3RoXG4gICAgICBjb2RlID0gdmFsdWUuY2hhckNvZGVBdChlbmRQb3NpdGlvbilcblxuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICBidWZmZXIgPSB2YWx1ZS5zbGljZShzdGFydFBvc2l0aW9uKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIGNvZGUgPT09IGNvZGVzLmxmICYmXG4gICAgICAgIHN0YXJ0UG9zaXRpb24gPT09IGVuZFBvc2l0aW9uICYmXG4gICAgICAgIGF0Q2FycmlhZ2VSZXR1cm5cbiAgICAgICkge1xuICAgICAgICBjaHVua3MucHVzaChjb2Rlcy5jYXJyaWFnZVJldHVybkxpbmVGZWVkKVxuICAgICAgICBhdENhcnJpYWdlUmV0dXJuID0gdW5kZWZpbmVkXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYXRDYXJyaWFnZVJldHVybikge1xuICAgICAgICAgIGNodW5rcy5wdXNoKGNvZGVzLmNhcnJpYWdlUmV0dXJuKVxuICAgICAgICAgIGF0Q2FycmlhZ2VSZXR1cm4gPSB1bmRlZmluZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGFydFBvc2l0aW9uIDwgZW5kUG9zaXRpb24pIHtcbiAgICAgICAgICBjaHVua3MucHVzaCh2YWx1ZS5zbGljZShzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbikpXG4gICAgICAgICAgY29sdW1uICs9IGVuZFBvc2l0aW9uIC0gc3RhcnRQb3NpdGlvblxuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICAgICAgY2FzZSBjb2Rlcy5udWw6IHtcbiAgICAgICAgICAgIGNodW5rcy5wdXNoKGNvZGVzLnJlcGxhY2VtZW50Q2hhcmFjdGVyKVxuICAgICAgICAgICAgY29sdW1uKytcblxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlIGNvZGVzLmh0OiB7XG4gICAgICAgICAgICBuZXh0ID0gTWF0aC5jZWlsKGNvbHVtbiAvIGNvbnN0YW50cy50YWJTaXplKSAqIGNvbnN0YW50cy50YWJTaXplXG4gICAgICAgICAgICBjaHVua3MucHVzaChjb2Rlcy5ob3Jpem9udGFsVGFiKVxuICAgICAgICAgICAgd2hpbGUgKGNvbHVtbisrIDwgbmV4dCkgY2h1bmtzLnB1c2goY29kZXMudmlydHVhbFNwYWNlKVxuXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgY29kZXMubGY6IHtcbiAgICAgICAgICAgIGNodW5rcy5wdXNoKGNvZGVzLmxpbmVGZWVkKVxuICAgICAgICAgICAgY29sdW1uID0gMVxuXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGF0Q2FycmlhZ2VSZXR1cm4gPSB0cnVlXG4gICAgICAgICAgICBjb2x1bW4gPSAxXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0YXJ0UG9zaXRpb24gPSBlbmRQb3NpdGlvbiArIDFcbiAgICB9XG5cbiAgICBpZiAoZW5kKSB7XG4gICAgICBpZiAoYXRDYXJyaWFnZVJldHVybikgY2h1bmtzLnB1c2goY29kZXMuY2FycmlhZ2VSZXR1cm4pXG4gICAgICBpZiAoYnVmZmVyKSBjaHVua3MucHVzaChidWZmZXIpXG4gICAgICBjaHVua3MucHVzaChjb2Rlcy5lb2YpXG4gICAgfVxuXG4gICAgcmV0dXJuIGNodW5rc1xuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vbGliL3V0aWwvaW5mby5qcycpLkluZm99IEluZm9cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vbGliL3V0aWwvc2NoZW1hLmpzJykuU2NoZW1hfSBTY2hlbWFcbiAqL1xuXG5pbXBvcnQge21lcmdlfSBmcm9tICcuL2xpYi91dGlsL21lcmdlLmpzJ1xuaW1wb3J0IHt4bGlua30gZnJvbSAnLi9saWIveGxpbmsuanMnXG5pbXBvcnQge3htbH0gZnJvbSAnLi9saWIveG1sLmpzJ1xuaW1wb3J0IHt4bWxuc30gZnJvbSAnLi9saWIveG1sbnMuanMnXG5pbXBvcnQge2FyaWF9IGZyb20gJy4vbGliL2FyaWEuanMnXG5pbXBvcnQge2h0bWwgYXMgaHRtbEJhc2V9IGZyb20gJy4vbGliL2h0bWwuanMnXG5pbXBvcnQge3N2ZyBhcyBzdmdCYXNlfSBmcm9tICcuL2xpYi9zdmcuanMnXG5cbmV4cG9ydCB7ZmluZH0gZnJvbSAnLi9saWIvZmluZC5qcydcbmV4cG9ydCB7aGFzdFRvUmVhY3R9IGZyb20gJy4vbGliL2hhc3QtdG8tcmVhY3QuanMnXG5leHBvcnQge25vcm1hbGl6ZX0gZnJvbSAnLi9saWIvbm9ybWFsaXplLmpzJ1xuZXhwb3J0IGNvbnN0IGh0bWwgPSBtZXJnZShbeG1sLCB4bGluaywgeG1sbnMsIGFyaWEsIGh0bWxCYXNlXSwgJ2h0bWwnKVxuZXhwb3J0IGNvbnN0IHN2ZyA9IG1lcmdlKFt4bWwsIHhsaW5rLCB4bWxucywgYXJpYSwgc3ZnQmFzZV0sICdzdmcnKVxuIiwiaW1wb3J0IHtib29sZWFuaXNoLCBudW1iZXIsIHNwYWNlU2VwYXJhdGVkfSBmcm9tICcuL3V0aWwvdHlwZXMuanMnXG5pbXBvcnQge2NyZWF0ZX0gZnJvbSAnLi91dGlsL2NyZWF0ZS5qcydcblxuZXhwb3J0IGNvbnN0IGFyaWEgPSBjcmVhdGUoe1xuICB0cmFuc2Zvcm0oXywgcHJvcCkge1xuICAgIHJldHVybiBwcm9wID09PSAncm9sZScgPyBwcm9wIDogJ2FyaWEtJyArIHByb3Auc2xpY2UoNCkudG9Mb3dlckNhc2UoKVxuICB9LFxuICBwcm9wZXJ0aWVzOiB7XG4gICAgYXJpYUFjdGl2ZURlc2NlbmRhbnQ6IG51bGwsXG4gICAgYXJpYUF0b21pYzogYm9vbGVhbmlzaCxcbiAgICBhcmlhQXV0b0NvbXBsZXRlOiBudWxsLFxuICAgIGFyaWFCdXN5OiBib29sZWFuaXNoLFxuICAgIGFyaWFDaGVja2VkOiBib29sZWFuaXNoLFxuICAgIGFyaWFDb2xDb3VudDogbnVtYmVyLFxuICAgIGFyaWFDb2xJbmRleDogbnVtYmVyLFxuICAgIGFyaWFDb2xTcGFuOiBudW1iZXIsXG4gICAgYXJpYUNvbnRyb2xzOiBzcGFjZVNlcGFyYXRlZCxcbiAgICBhcmlhQ3VycmVudDogbnVsbCxcbiAgICBhcmlhRGVzY3JpYmVkQnk6IHNwYWNlU2VwYXJhdGVkLFxuICAgIGFyaWFEZXRhaWxzOiBudWxsLFxuICAgIGFyaWFEaXNhYmxlZDogYm9vbGVhbmlzaCxcbiAgICBhcmlhRHJvcEVmZmVjdDogc3BhY2VTZXBhcmF0ZWQsXG4gICAgYXJpYUVycm9yTWVzc2FnZTogbnVsbCxcbiAgICBhcmlhRXhwYW5kZWQ6IGJvb2xlYW5pc2gsXG4gICAgYXJpYUZsb3dUbzogc3BhY2VTZXBhcmF0ZWQsXG4gICAgYXJpYUdyYWJiZWQ6IGJvb2xlYW5pc2gsXG4gICAgYXJpYUhhc1BvcHVwOiBudWxsLFxuICAgIGFyaWFIaWRkZW46IGJvb2xlYW5pc2gsXG4gICAgYXJpYUludmFsaWQ6IG51bGwsXG4gICAgYXJpYUtleVNob3J0Y3V0czogbnVsbCxcbiAgICBhcmlhTGFiZWw6IG51bGwsXG4gICAgYXJpYUxhYmVsbGVkQnk6IHNwYWNlU2VwYXJhdGVkLFxuICAgIGFyaWFMZXZlbDogbnVtYmVyLFxuICAgIGFyaWFMaXZlOiBudWxsLFxuICAgIGFyaWFNb2RhbDogYm9vbGVhbmlzaCxcbiAgICBhcmlhTXVsdGlMaW5lOiBib29sZWFuaXNoLFxuICAgIGFyaWFNdWx0aVNlbGVjdGFibGU6IGJvb2xlYW5pc2gsXG4gICAgYXJpYU9yaWVudGF0aW9uOiBudWxsLFxuICAgIGFyaWFPd25zOiBzcGFjZVNlcGFyYXRlZCxcbiAgICBhcmlhUGxhY2Vob2xkZXI6IG51bGwsXG4gICAgYXJpYVBvc0luU2V0OiBudW1iZXIsXG4gICAgYXJpYVByZXNzZWQ6IGJvb2xlYW5pc2gsXG4gICAgYXJpYVJlYWRPbmx5OiBib29sZWFuaXNoLFxuICAgIGFyaWFSZWxldmFudDogbnVsbCxcbiAgICBhcmlhUmVxdWlyZWQ6IGJvb2xlYW5pc2gsXG4gICAgYXJpYVJvbGVEZXNjcmlwdGlvbjogc3BhY2VTZXBhcmF0ZWQsXG4gICAgYXJpYVJvd0NvdW50OiBudW1iZXIsXG4gICAgYXJpYVJvd0luZGV4OiBudW1iZXIsXG4gICAgYXJpYVJvd1NwYW46IG51bWJlcixcbiAgICBhcmlhU2VsZWN0ZWQ6IGJvb2xlYW5pc2gsXG4gICAgYXJpYVNldFNpemU6IG51bWJlcixcbiAgICBhcmlhU29ydDogbnVsbCxcbiAgICBhcmlhVmFsdWVNYXg6IG51bWJlcixcbiAgICBhcmlhVmFsdWVNaW46IG51bWJlcixcbiAgICBhcmlhVmFsdWVOb3c6IG51bWJlcixcbiAgICBhcmlhVmFsdWVUZXh0OiBudWxsLFxuICAgIHJvbGU6IG51bGxcbiAgfVxufSlcbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi91dGlsL3NjaGVtYS5qcycpLlNjaGVtYX0gU2NoZW1hXG4gKi9cblxuaW1wb3J0IHtub3JtYWxpemV9IGZyb20gJy4vbm9ybWFsaXplLmpzJ1xuaW1wb3J0IHtEZWZpbmVkSW5mb30gZnJvbSAnLi91dGlsL2RlZmluZWQtaW5mby5qcydcbmltcG9ydCB7SW5mb30gZnJvbSAnLi91dGlsL2luZm8uanMnXG5cbmNvbnN0IHZhbGlkID0gL15kYXRhWy1cXHcuOl0rJC9pXG5jb25zdCBkYXNoID0gLy1bYS16XS9nXG5jb25zdCBjYXAgPSAvW0EtWl0vZ1xuXG4vKipcbiAqIEBwYXJhbSB7U2NoZW1hfSBzY2hlbWFcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybnMge0luZm99XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kKHNjaGVtYSwgdmFsdWUpIHtcbiAgY29uc3Qgbm9ybWFsID0gbm9ybWFsaXplKHZhbHVlKVxuICBsZXQgcHJvcCA9IHZhbHVlXG4gIGxldCBUeXBlID0gSW5mb1xuXG4gIGlmIChub3JtYWwgaW4gc2NoZW1hLm5vcm1hbCkge1xuICAgIHJldHVybiBzY2hlbWEucHJvcGVydHlbc2NoZW1hLm5vcm1hbFtub3JtYWxdXVxuICB9XG5cbiAgaWYgKG5vcm1hbC5sZW5ndGggPiA0ICYmIG5vcm1hbC5zbGljZSgwLCA0KSA9PT0gJ2RhdGEnICYmIHZhbGlkLnRlc3QodmFsdWUpKSB7XG4gICAgLy8gQXR0cmlidXRlIG9yIHByb3BlcnR5LlxuICAgIGlmICh2YWx1ZS5jaGFyQXQoNCkgPT09ICctJykge1xuICAgICAgLy8gVHVybiBpdCBpbnRvIGEgcHJvcGVydHkuXG4gICAgICBjb25zdCByZXN0ID0gdmFsdWUuc2xpY2UoNSkucmVwbGFjZShkYXNoLCBjYW1lbGNhc2UpXG4gICAgICBwcm9wID0gJ2RhdGEnICsgcmVzdC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHJlc3Quc2xpY2UoMSlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVHVybiBpdCBpbnRvIGFuIGF0dHJpYnV0ZS5cbiAgICAgIGNvbnN0IHJlc3QgPSB2YWx1ZS5zbGljZSg0KVxuXG4gICAgICBpZiAoIWRhc2gudGVzdChyZXN0KSkge1xuICAgICAgICBsZXQgZGFzaGVzID0gcmVzdC5yZXBsYWNlKGNhcCwga2ViYWIpXG5cbiAgICAgICAgaWYgKGRhc2hlcy5jaGFyQXQoMCkgIT09ICctJykge1xuICAgICAgICAgIGRhc2hlcyA9ICctJyArIGRhc2hlc1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWUgPSAnZGF0YScgKyBkYXNoZXNcbiAgICAgIH1cbiAgICB9XG5cbiAgICBUeXBlID0gRGVmaW5lZEluZm9cbiAgfVxuXG4gIHJldHVybiBuZXcgVHlwZShwcm9wLCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gJDBcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGtlYmFiKCQwKSB7XG4gIHJldHVybiAnLScgKyAkMC50b0xvd2VyQ2FzZSgpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9ICQwXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBjYW1lbGNhc2UoJDApIHtcbiAgcmV0dXJuICQwLmNoYXJBdCgxKS50b1VwcGVyQ2FzZSgpXG59XG4iLCIvKipcbiAqIGBoYXN0YCBpcyBjbG9zZSB0byBgUmVhY3RgLCBidXQgZGlmZmVycyBpbiBhIGNvdXBsZSBvZiBjYXNlcy5cbiAqXG4gKiBUbyBnZXQgYSBSZWFjdCBwcm9wZXJ0eSBmcm9tIGEgaGFzdCBwcm9wZXJ0eSwgY2hlY2sgaWYgaXQgaXMgaW5cbiAqIGBoYXN0VG9SZWFjdGAsIGlmIGl0IGlzLCB0aGVuIHVzZSB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZSxcbiAqIG90aGVyd2lzZSwgdXNlIHRoZSBoYXN0IHByb3BlcnR5LlxuICpcbiAqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+fVxuICovXG5leHBvcnQgY29uc3QgaGFzdFRvUmVhY3QgPSB7XG4gIGNsYXNzSWQ6ICdjbGFzc0lEJyxcbiAgZGF0YVR5cGU6ICdkYXRhdHlwZScsXG4gIGl0ZW1JZDogJ2l0ZW1JRCcsXG4gIHN0cm9rZURhc2hBcnJheTogJ3N0cm9rZURhc2hhcnJheScsXG4gIHN0cm9rZURhc2hPZmZzZXQ6ICdzdHJva2VEYXNob2Zmc2V0JyxcbiAgc3Ryb2tlTGluZUNhcDogJ3N0cm9rZUxpbmVjYXAnLFxuICBzdHJva2VMaW5lSm9pbjogJ3N0cm9rZUxpbmVqb2luJyxcbiAgc3Ryb2tlTWl0ZXJMaW1pdDogJ3N0cm9rZU1pdGVybGltaXQnLFxuICB0eXBlT2Y6ICd0eXBlb2YnLFxuICB4TGlua0FjdHVhdGU6ICd4bGlua0FjdHVhdGUnLFxuICB4TGlua0FyY1JvbGU6ICd4bGlua0FyY3JvbGUnLFxuICB4TGlua0hyZWY6ICd4bGlua0hyZWYnLFxuICB4TGlua1JvbGU6ICd4bGlua1JvbGUnLFxuICB4TGlua1Nob3c6ICd4bGlua1Nob3cnLFxuICB4TGlua1RpdGxlOiAneGxpbmtUaXRsZScsXG4gIHhMaW5rVHlwZTogJ3hsaW5rVHlwZScsXG4gIHhtbG5zWExpbms6ICd4bWxuc1hsaW5rJ1xufVxuIiwiaW1wb3J0IHtcbiAgYm9vbGVhbixcbiAgb3ZlcmxvYWRlZEJvb2xlYW4sXG4gIGJvb2xlYW5pc2gsXG4gIG51bWJlcixcbiAgc3BhY2VTZXBhcmF0ZWQsXG4gIGNvbW1hU2VwYXJhdGVkXG59IGZyb20gJy4vdXRpbC90eXBlcy5qcydcbmltcG9ydCB7Y3JlYXRlfSBmcm9tICcuL3V0aWwvY3JlYXRlLmpzJ1xuaW1wb3J0IHtjYXNlSW5zZW5zaXRpdmVUcmFuc2Zvcm19IGZyb20gJy4vdXRpbC9jYXNlLWluc2Vuc2l0aXZlLXRyYW5zZm9ybS5qcydcblxuZXhwb3J0IGNvbnN0IGh0bWwgPSBjcmVhdGUoe1xuICBzcGFjZTogJ2h0bWwnLFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgYWNjZXB0Y2hhcnNldDogJ2FjY2VwdC1jaGFyc2V0JyxcbiAgICBjbGFzc25hbWU6ICdjbGFzcycsXG4gICAgaHRtbGZvcjogJ2ZvcicsXG4gICAgaHR0cGVxdWl2OiAnaHR0cC1lcXVpdidcbiAgfSxcbiAgdHJhbnNmb3JtOiBjYXNlSW5zZW5zaXRpdmVUcmFuc2Zvcm0sXG4gIG11c3RVc2VQcm9wZXJ0eTogWydjaGVja2VkJywgJ211bHRpcGxlJywgJ211dGVkJywgJ3NlbGVjdGVkJ10sXG4gIHByb3BlcnRpZXM6IHtcbiAgICAvLyBTdGFuZGFyZCBQcm9wZXJ0aWVzLlxuICAgIGFiYnI6IG51bGwsXG4gICAgYWNjZXB0OiBjb21tYVNlcGFyYXRlZCxcbiAgICBhY2NlcHRDaGFyc2V0OiBzcGFjZVNlcGFyYXRlZCxcbiAgICBhY2Nlc3NLZXk6IHNwYWNlU2VwYXJhdGVkLFxuICAgIGFjdGlvbjogbnVsbCxcbiAgICBhbGxvdzogbnVsbCxcbiAgICBhbGxvd0Z1bGxTY3JlZW46IGJvb2xlYW4sXG4gICAgYWxsb3dQYXltZW50UmVxdWVzdDogYm9vbGVhbixcbiAgICBhbGxvd1VzZXJNZWRpYTogYm9vbGVhbixcbiAgICBhbHQ6IG51bGwsXG4gICAgYXM6IG51bGwsXG4gICAgYXN5bmM6IGJvb2xlYW4sXG4gICAgYXV0b0NhcGl0YWxpemU6IG51bGwsXG4gICAgYXV0b0NvbXBsZXRlOiBzcGFjZVNlcGFyYXRlZCxcbiAgICBhdXRvRm9jdXM6IGJvb2xlYW4sXG4gICAgYXV0b1BsYXk6IGJvb2xlYW4sXG4gICAgY2FwdHVyZTogYm9vbGVhbixcbiAgICBjaGFyU2V0OiBudWxsLFxuICAgIGNoZWNrZWQ6IGJvb2xlYW4sXG4gICAgY2l0ZTogbnVsbCxcbiAgICBjbGFzc05hbWU6IHNwYWNlU2VwYXJhdGVkLFxuICAgIGNvbHM6IG51bWJlcixcbiAgICBjb2xTcGFuOiBudWxsLFxuICAgIGNvbnRlbnQ6IG51bGwsXG4gICAgY29udGVudEVkaXRhYmxlOiBib29sZWFuaXNoLFxuICAgIGNvbnRyb2xzOiBib29sZWFuLFxuICAgIGNvbnRyb2xzTGlzdDogc3BhY2VTZXBhcmF0ZWQsXG4gICAgY29vcmRzOiBudW1iZXIgfCBjb21tYVNlcGFyYXRlZCxcbiAgICBjcm9zc09yaWdpbjogbnVsbCxcbiAgICBkYXRhOiBudWxsLFxuICAgIGRhdGVUaW1lOiBudWxsLFxuICAgIGRlY29kaW5nOiBudWxsLFxuICAgIGRlZmF1bHQ6IGJvb2xlYW4sXG4gICAgZGVmZXI6IGJvb2xlYW4sXG4gICAgZGlyOiBudWxsLFxuICAgIGRpck5hbWU6IG51bGwsXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW4sXG4gICAgZG93bmxvYWQ6IG92ZXJsb2FkZWRCb29sZWFuLFxuICAgIGRyYWdnYWJsZTogYm9vbGVhbmlzaCxcbiAgICBlbmNUeXBlOiBudWxsLFxuICAgIGVudGVyS2V5SGludDogbnVsbCxcbiAgICBmb3JtOiBudWxsLFxuICAgIGZvcm1BY3Rpb246IG51bGwsXG4gICAgZm9ybUVuY1R5cGU6IG51bGwsXG4gICAgZm9ybU1ldGhvZDogbnVsbCxcbiAgICBmb3JtTm9WYWxpZGF0ZTogYm9vbGVhbixcbiAgICBmb3JtVGFyZ2V0OiBudWxsLFxuICAgIGhlYWRlcnM6IHNwYWNlU2VwYXJhdGVkLFxuICAgIGhlaWdodDogbnVtYmVyLFxuICAgIGhpZGRlbjogYm9vbGVhbixcbiAgICBoaWdoOiBudW1iZXIsXG4gICAgaHJlZjogbnVsbCxcbiAgICBocmVmTGFuZzogbnVsbCxcbiAgICBodG1sRm9yOiBzcGFjZVNlcGFyYXRlZCxcbiAgICBodHRwRXF1aXY6IHNwYWNlU2VwYXJhdGVkLFxuICAgIGlkOiBudWxsLFxuICAgIGltYWdlU2l6ZXM6IG51bGwsXG4gICAgaW1hZ2VTcmNTZXQ6IG51bGwsXG4gICAgaW5wdXRNb2RlOiBudWxsLFxuICAgIGludGVncml0eTogbnVsbCxcbiAgICBpczogbnVsbCxcbiAgICBpc01hcDogYm9vbGVhbixcbiAgICBpdGVtSWQ6IG51bGwsXG4gICAgaXRlbVByb3A6IHNwYWNlU2VwYXJhdGVkLFxuICAgIGl0ZW1SZWY6IHNwYWNlU2VwYXJhdGVkLFxuICAgIGl0ZW1TY29wZTogYm9vbGVhbixcbiAgICBpdGVtVHlwZTogc3BhY2VTZXBhcmF0ZWQsXG4gICAga2luZDogbnVsbCxcbiAgICBsYWJlbDogbnVsbCxcbiAgICBsYW5nOiBudWxsLFxuICAgIGxhbmd1YWdlOiBudWxsLFxuICAgIGxpc3Q6IG51bGwsXG4gICAgbG9hZGluZzogbnVsbCxcbiAgICBsb29wOiBib29sZWFuLFxuICAgIGxvdzogbnVtYmVyLFxuICAgIG1hbmlmZXN0OiBudWxsLFxuICAgIG1heDogbnVsbCxcbiAgICBtYXhMZW5ndGg6IG51bWJlcixcbiAgICBtZWRpYTogbnVsbCxcbiAgICBtZXRob2Q6IG51bGwsXG4gICAgbWluOiBudWxsLFxuICAgIG1pbkxlbmd0aDogbnVtYmVyLFxuICAgIG11bHRpcGxlOiBib29sZWFuLFxuICAgIG11dGVkOiBib29sZWFuLFxuICAgIG5hbWU6IG51bGwsXG4gICAgbm9uY2U6IG51bGwsXG4gICAgbm9Nb2R1bGU6IGJvb2xlYW4sXG4gICAgbm9WYWxpZGF0ZTogYm9vbGVhbixcbiAgICBvbkFib3J0OiBudWxsLFxuICAgIG9uQWZ0ZXJQcmludDogbnVsbCxcbiAgICBvbkF1eENsaWNrOiBudWxsLFxuICAgIG9uQmVmb3JlTWF0Y2g6IG51bGwsXG4gICAgb25CZWZvcmVQcmludDogbnVsbCxcbiAgICBvbkJlZm9yZVVubG9hZDogbnVsbCxcbiAgICBvbkJsdXI6IG51bGwsXG4gICAgb25DYW5jZWw6IG51bGwsXG4gICAgb25DYW5QbGF5OiBudWxsLFxuICAgIG9uQ2FuUGxheVRocm91Z2g6IG51bGwsXG4gICAgb25DaGFuZ2U6IG51bGwsXG4gICAgb25DbGljazogbnVsbCxcbiAgICBvbkNsb3NlOiBudWxsLFxuICAgIG9uQ29udGV4dExvc3Q6IG51bGwsXG4gICAgb25Db250ZXh0TWVudTogbnVsbCxcbiAgICBvbkNvbnRleHRSZXN0b3JlZDogbnVsbCxcbiAgICBvbkNvcHk6IG51bGwsXG4gICAgb25DdWVDaGFuZ2U6IG51bGwsXG4gICAgb25DdXQ6IG51bGwsXG4gICAgb25EYmxDbGljazogbnVsbCxcbiAgICBvbkRyYWc6IG51bGwsXG4gICAgb25EcmFnRW5kOiBudWxsLFxuICAgIG9uRHJhZ0VudGVyOiBudWxsLFxuICAgIG9uRHJhZ0V4aXQ6IG51bGwsXG4gICAgb25EcmFnTGVhdmU6IG51bGwsXG4gICAgb25EcmFnT3ZlcjogbnVsbCxcbiAgICBvbkRyYWdTdGFydDogbnVsbCxcbiAgICBvbkRyb3A6IG51bGwsXG4gICAgb25EdXJhdGlvbkNoYW5nZTogbnVsbCxcbiAgICBvbkVtcHRpZWQ6IG51bGwsXG4gICAgb25FbmRlZDogbnVsbCxcbiAgICBvbkVycm9yOiBudWxsLFxuICAgIG9uRm9jdXM6IG51bGwsXG4gICAgb25Gb3JtRGF0YTogbnVsbCxcbiAgICBvbkhhc2hDaGFuZ2U6IG51bGwsXG4gICAgb25JbnB1dDogbnVsbCxcbiAgICBvbkludmFsaWQ6IG51bGwsXG4gICAgb25LZXlEb3duOiBudWxsLFxuICAgIG9uS2V5UHJlc3M6IG51bGwsXG4gICAgb25LZXlVcDogbnVsbCxcbiAgICBvbkxhbmd1YWdlQ2hhbmdlOiBudWxsLFxuICAgIG9uTG9hZDogbnVsbCxcbiAgICBvbkxvYWRlZERhdGE6IG51bGwsXG4gICAgb25Mb2FkZWRNZXRhZGF0YTogbnVsbCxcbiAgICBvbkxvYWRFbmQ6IG51bGwsXG4gICAgb25Mb2FkU3RhcnQ6IG51bGwsXG4gICAgb25NZXNzYWdlOiBudWxsLFxuICAgIG9uTWVzc2FnZUVycm9yOiBudWxsLFxuICAgIG9uTW91c2VEb3duOiBudWxsLFxuICAgIG9uTW91c2VFbnRlcjogbnVsbCxcbiAgICBvbk1vdXNlTGVhdmU6IG51bGwsXG4gICAgb25Nb3VzZU1vdmU6IG51bGwsXG4gICAgb25Nb3VzZU91dDogbnVsbCxcbiAgICBvbk1vdXNlT3ZlcjogbnVsbCxcbiAgICBvbk1vdXNlVXA6IG51bGwsXG4gICAgb25PZmZsaW5lOiBudWxsLFxuICAgIG9uT25saW5lOiBudWxsLFxuICAgIG9uUGFnZUhpZGU6IG51bGwsXG4gICAgb25QYWdlU2hvdzogbnVsbCxcbiAgICBvblBhc3RlOiBudWxsLFxuICAgIG9uUGF1c2U6IG51bGwsXG4gICAgb25QbGF5OiBudWxsLFxuICAgIG9uUGxheWluZzogbnVsbCxcbiAgICBvblBvcFN0YXRlOiBudWxsLFxuICAgIG9uUHJvZ3Jlc3M6IG51bGwsXG4gICAgb25SYXRlQ2hhbmdlOiBudWxsLFxuICAgIG9uUmVqZWN0aW9uSGFuZGxlZDogbnVsbCxcbiAgICBvblJlc2V0OiBudWxsLFxuICAgIG9uUmVzaXplOiBudWxsLFxuICAgIG9uU2Nyb2xsOiBudWxsLFxuICAgIG9uU2Nyb2xsRW5kOiBudWxsLFxuICAgIG9uU2VjdXJpdHlQb2xpY3lWaW9sYXRpb246IG51bGwsXG4gICAgb25TZWVrZWQ6IG51bGwsXG4gICAgb25TZWVraW5nOiBudWxsLFxuICAgIG9uU2VsZWN0OiBudWxsLFxuICAgIG9uU2xvdENoYW5nZTogbnVsbCxcbiAgICBvblN0YWxsZWQ6IG51bGwsXG4gICAgb25TdG9yYWdlOiBudWxsLFxuICAgIG9uU3VibWl0OiBudWxsLFxuICAgIG9uU3VzcGVuZDogbnVsbCxcbiAgICBvblRpbWVVcGRhdGU6IG51bGwsXG4gICAgb25Ub2dnbGU6IG51bGwsXG4gICAgb25VbmhhbmRsZWRSZWplY3Rpb246IG51bGwsXG4gICAgb25VbmxvYWQ6IG51bGwsXG4gICAgb25Wb2x1bWVDaGFuZ2U6IG51bGwsXG4gICAgb25XYWl0aW5nOiBudWxsLFxuICAgIG9uV2hlZWw6IG51bGwsXG4gICAgb3BlbjogYm9vbGVhbixcbiAgICBvcHRpbXVtOiBudW1iZXIsXG4gICAgcGF0dGVybjogbnVsbCxcbiAgICBwaW5nOiBzcGFjZVNlcGFyYXRlZCxcbiAgICBwbGFjZWhvbGRlcjogbnVsbCxcbiAgICBwbGF5c0lubGluZTogYm9vbGVhbixcbiAgICBwb3N0ZXI6IG51bGwsXG4gICAgcHJlbG9hZDogbnVsbCxcbiAgICByZWFkT25seTogYm9vbGVhbixcbiAgICByZWZlcnJlclBvbGljeTogbnVsbCxcbiAgICByZWw6IHNwYWNlU2VwYXJhdGVkLFxuICAgIHJlcXVpcmVkOiBib29sZWFuLFxuICAgIHJldmVyc2VkOiBib29sZWFuLFxuICAgIHJvd3M6IG51bWJlcixcbiAgICByb3dTcGFuOiBudW1iZXIsXG4gICAgc2FuZGJveDogc3BhY2VTZXBhcmF0ZWQsXG4gICAgc2NvcGU6IG51bGwsXG4gICAgc2NvcGVkOiBib29sZWFuLFxuICAgIHNlYW1sZXNzOiBib29sZWFuLFxuICAgIHNlbGVjdGVkOiBib29sZWFuLFxuICAgIHNoYXBlOiBudWxsLFxuICAgIHNpemU6IG51bWJlcixcbiAgICBzaXplczogbnVsbCxcbiAgICBzbG90OiBudWxsLFxuICAgIHNwYW46IG51bWJlcixcbiAgICBzcGVsbENoZWNrOiBib29sZWFuaXNoLFxuICAgIHNyYzogbnVsbCxcbiAgICBzcmNEb2M6IG51bGwsXG4gICAgc3JjTGFuZzogbnVsbCxcbiAgICBzcmNTZXQ6IG51bGwsXG4gICAgc3RhcnQ6IG51bWJlcixcbiAgICBzdGVwOiBudWxsLFxuICAgIHN0eWxlOiBudWxsLFxuICAgIHRhYkluZGV4OiBudW1iZXIsXG4gICAgdGFyZ2V0OiBudWxsLFxuICAgIHRpdGxlOiBudWxsLFxuICAgIHRyYW5zbGF0ZTogbnVsbCxcbiAgICB0eXBlOiBudWxsLFxuICAgIHR5cGVNdXN0TWF0Y2g6IGJvb2xlYW4sXG4gICAgdXNlTWFwOiBudWxsLFxuICAgIHZhbHVlOiBib29sZWFuaXNoLFxuICAgIHdpZHRoOiBudW1iZXIsXG4gICAgd3JhcDogbnVsbCxcblxuICAgIC8vIExlZ2FjeS5cbiAgICAvLyBTZWU6IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI290aGVyLWVsZW1lbnRzLC1hdHRyaWJ1dGVzLWFuZC1hcGlzXG4gICAgYWxpZ246IG51bGwsIC8vIFNldmVyYWwuIFVzZSBDU1MgYHRleHQtYWxpZ25gIGluc3RlYWQsXG4gICAgYUxpbms6IG51bGwsIC8vIGA8Ym9keT5gLiBVc2UgQ1NTIGBhOmFjdGl2ZSB7Y29sb3J9YCBpbnN0ZWFkXG4gICAgYXJjaGl2ZTogc3BhY2VTZXBhcmF0ZWQsIC8vIGA8b2JqZWN0PmAuIExpc3Qgb2YgVVJJcyB0byBhcmNoaXZlc1xuICAgIGF4aXM6IG51bGwsIC8vIGA8dGQ+YCBhbmQgYDx0aD5gLiBVc2UgYHNjb3BlYCBvbiBgPHRoPmBcbiAgICBiYWNrZ3JvdW5kOiBudWxsLCAvLyBgPGJvZHk+YC4gVXNlIENTUyBgYmFja2dyb3VuZC1pbWFnZWAgaW5zdGVhZFxuICAgIGJnQ29sb3I6IG51bGwsIC8vIGA8Ym9keT5gIGFuZCB0YWJsZSBlbGVtZW50cy4gVXNlIENTUyBgYmFja2dyb3VuZC1jb2xvcmAgaW5zdGVhZFxuICAgIGJvcmRlcjogbnVtYmVyLCAvLyBgPHRhYmxlPmAuIFVzZSBDU1MgYGJvcmRlci13aWR0aGAgaW5zdGVhZCxcbiAgICBib3JkZXJDb2xvcjogbnVsbCwgLy8gYDx0YWJsZT5gLiBVc2UgQ1NTIGBib3JkZXItY29sb3JgIGluc3RlYWQsXG4gICAgYm90dG9tTWFyZ2luOiBudW1iZXIsIC8vIGA8Ym9keT5gXG4gICAgY2VsbFBhZGRpbmc6IG51bGwsIC8vIGA8dGFibGU+YFxuICAgIGNlbGxTcGFjaW5nOiBudWxsLCAvLyBgPHRhYmxlPmBcbiAgICBjaGFyOiBudWxsLCAvLyBTZXZlcmFsIHRhYmxlIGVsZW1lbnRzLiBXaGVuIGBhbGlnbj1jaGFyYCwgc2V0cyB0aGUgY2hhcmFjdGVyIHRvIGFsaWduIG9uXG4gICAgY2hhck9mZjogbnVsbCwgLy8gU2V2ZXJhbCB0YWJsZSBlbGVtZW50cy4gV2hlbiBgY2hhcmAsIG9mZnNldHMgdGhlIGFsaWdubWVudFxuICAgIGNsYXNzSWQ6IG51bGwsIC8vIGA8b2JqZWN0PmBcbiAgICBjbGVhcjogbnVsbCwgLy8gYDxicj5gLiBVc2UgQ1NTIGBjbGVhcmAgaW5zdGVhZFxuICAgIGNvZGU6IG51bGwsIC8vIGA8b2JqZWN0PmBcbiAgICBjb2RlQmFzZTogbnVsbCwgLy8gYDxvYmplY3Q+YFxuICAgIGNvZGVUeXBlOiBudWxsLCAvLyBgPG9iamVjdD5gXG4gICAgY29sb3I6IG51bGwsIC8vIGA8Zm9udD5gIGFuZCBgPGhyPmAuIFVzZSBDU1MgaW5zdGVhZFxuICAgIGNvbXBhY3Q6IGJvb2xlYW4sIC8vIExpc3RzLiBVc2UgQ1NTIHRvIHJlZHVjZSBzcGFjZSBiZXR3ZWVuIGl0ZW1zIGluc3RlYWRcbiAgICBkZWNsYXJlOiBib29sZWFuLCAvLyBgPG9iamVjdD5gXG4gICAgZXZlbnQ6IG51bGwsIC8vIGA8c2NyaXB0PmBcbiAgICBmYWNlOiBudWxsLCAvLyBgPGZvbnQ+YC4gVXNlIENTUyBpbnN0ZWFkXG4gICAgZnJhbWU6IG51bGwsIC8vIGA8dGFibGU+YFxuICAgIGZyYW1lQm9yZGVyOiBudWxsLCAvLyBgPGlmcmFtZT5gLiBVc2UgQ1NTIGBib3JkZXJgIGluc3RlYWRcbiAgICBoU3BhY2U6IG51bWJlciwgLy8gYDxpbWc+YCBhbmQgYDxvYmplY3Q+YFxuICAgIGxlZnRNYXJnaW46IG51bWJlciwgLy8gYDxib2R5PmBcbiAgICBsaW5rOiBudWxsLCAvLyBgPGJvZHk+YC4gVXNlIENTUyBgYTpsaW5rIHtjb2xvcjogKn1gIGluc3RlYWRcbiAgICBsb25nRGVzYzogbnVsbCwgLy8gYDxmcmFtZT5gLCBgPGlmcmFtZT5gLCBhbmQgYDxpbWc+YC4gVXNlIGFuIGA8YT5gXG4gICAgbG93U3JjOiBudWxsLCAvLyBgPGltZz5gLiBVc2UgYSBgPHBpY3R1cmU+YFxuICAgIG1hcmdpbkhlaWdodDogbnVtYmVyLCAvLyBgPGJvZHk+YFxuICAgIG1hcmdpbldpZHRoOiBudW1iZXIsIC8vIGA8Ym9keT5gXG4gICAgbm9SZXNpemU6IGJvb2xlYW4sIC8vIGA8ZnJhbWU+YFxuICAgIG5vSHJlZjogYm9vbGVhbiwgLy8gYDxhcmVhPmAuIFVzZSBubyBocmVmIGluc3RlYWQgb2YgYW4gZXhwbGljaXQgYG5vaHJlZmBcbiAgICBub1NoYWRlOiBib29sZWFuLCAvLyBgPGhyPmAuIFVzZSBiYWNrZ3JvdW5kLWNvbG9yIGFuZCBoZWlnaHQgaW5zdGVhZCBvZiBib3JkZXJzXG4gICAgbm9XcmFwOiBib29sZWFuLCAvLyBgPHRkPmAgYW5kIGA8dGg+YFxuICAgIG9iamVjdDogbnVsbCwgLy8gYDxhcHBsZXQ+YFxuICAgIHByb2ZpbGU6IG51bGwsIC8vIGA8aGVhZD5gXG4gICAgcHJvbXB0OiBudWxsLCAvLyBgPGlzaW5kZXg+YFxuICAgIHJldjogbnVsbCwgLy8gYDxsaW5rPmBcbiAgICByaWdodE1hcmdpbjogbnVtYmVyLCAvLyBgPGJvZHk+YFxuICAgIHJ1bGVzOiBudWxsLCAvLyBgPHRhYmxlPmBcbiAgICBzY2hlbWU6IG51bGwsIC8vIGA8bWV0YT5gXG4gICAgc2Nyb2xsaW5nOiBib29sZWFuaXNoLCAvLyBgPGZyYW1lPmAuIFVzZSBvdmVyZmxvdyBpbiB0aGUgY2hpbGQgY29udGV4dFxuICAgIHN0YW5kYnk6IG51bGwsIC8vIGA8b2JqZWN0PmBcbiAgICBzdW1tYXJ5OiBudWxsLCAvLyBgPHRhYmxlPmBcbiAgICB0ZXh0OiBudWxsLCAvLyBgPGJvZHk+YC4gVXNlIENTUyBgY29sb3JgIGluc3RlYWRcbiAgICB0b3BNYXJnaW46IG51bWJlciwgLy8gYDxib2R5PmBcbiAgICB2YWx1ZVR5cGU6IG51bGwsIC8vIGA8cGFyYW0+YFxuICAgIHZlcnNpb246IG51bGwsIC8vIGA8aHRtbD5gLiBVc2UgYSBkb2N0eXBlLlxuICAgIHZBbGlnbjogbnVsbCwgLy8gU2V2ZXJhbC4gVXNlIENTUyBgdmVydGljYWwtYWxpZ25gIGluc3RlYWRcbiAgICB2TGluazogbnVsbCwgLy8gYDxib2R5PmAuIFVzZSBDU1MgYGE6dmlzaXRlZCB7Y29sb3J9YCBpbnN0ZWFkXG4gICAgdlNwYWNlOiBudW1iZXIsIC8vIGA8aW1nPmAgYW5kIGA8b2JqZWN0PmBcblxuICAgIC8vIE5vbi1zdGFuZGFyZCBQcm9wZXJ0aWVzLlxuICAgIGFsbG93VHJhbnNwYXJlbmN5OiBudWxsLFxuICAgIGF1dG9Db3JyZWN0OiBudWxsLFxuICAgIGF1dG9TYXZlOiBudWxsLFxuICAgIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlOiBib29sZWFuLFxuICAgIGRpc2FibGVSZW1vdGVQbGF5YmFjazogYm9vbGVhbixcbiAgICBwcmVmaXg6IG51bGwsXG4gICAgcHJvcGVydHk6IG51bGwsXG4gICAgcmVzdWx0czogbnVtYmVyLFxuICAgIHNlY3VyaXR5OiBudWxsLFxuICAgIHVuc2VsZWN0YWJsZTogbnVsbFxuICB9XG59KVxuIiwiLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKClcbn1cbiIsImltcG9ydCB7XG4gIGJvb2xlYW4sXG4gIG51bWJlcixcbiAgc3BhY2VTZXBhcmF0ZWQsXG4gIGNvbW1hU2VwYXJhdGVkLFxuICBjb21tYU9yU3BhY2VTZXBhcmF0ZWRcbn0gZnJvbSAnLi91dGlsL3R5cGVzLmpzJ1xuaW1wb3J0IHtjcmVhdGV9IGZyb20gJy4vdXRpbC9jcmVhdGUuanMnXG5pbXBvcnQge2Nhc2VTZW5zaXRpdmVUcmFuc2Zvcm19IGZyb20gJy4vdXRpbC9jYXNlLXNlbnNpdGl2ZS10cmFuc2Zvcm0uanMnXG5cbmV4cG9ydCBjb25zdCBzdmcgPSBjcmVhdGUoe1xuICBzcGFjZTogJ3N2ZycsXG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBhY2NlbnRIZWlnaHQ6ICdhY2NlbnQtaGVpZ2h0JyxcbiAgICBhbGlnbm1lbnRCYXNlbGluZTogJ2FsaWdubWVudC1iYXNlbGluZScsXG4gICAgYXJhYmljRm9ybTogJ2FyYWJpYy1mb3JtJyxcbiAgICBiYXNlbGluZVNoaWZ0OiAnYmFzZWxpbmUtc2hpZnQnLFxuICAgIGNhcEhlaWdodDogJ2NhcC1oZWlnaHQnLFxuICAgIGNsYXNzTmFtZTogJ2NsYXNzJyxcbiAgICBjbGlwUGF0aDogJ2NsaXAtcGF0aCcsXG4gICAgY2xpcFJ1bGU6ICdjbGlwLXJ1bGUnLFxuICAgIGNvbG9ySW50ZXJwb2xhdGlvbjogJ2NvbG9yLWludGVycG9sYXRpb24nLFxuICAgIGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnM6ICdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLFxuICAgIGNvbG9yUHJvZmlsZTogJ2NvbG9yLXByb2ZpbGUnLFxuICAgIGNvbG9yUmVuZGVyaW5nOiAnY29sb3ItcmVuZGVyaW5nJyxcbiAgICBjcm9zc09yaWdpbjogJ2Nyb3Nzb3JpZ2luJyxcbiAgICBkYXRhVHlwZTogJ2RhdGF0eXBlJyxcbiAgICBkb21pbmFudEJhc2VsaW5lOiAnZG9taW5hbnQtYmFzZWxpbmUnLFxuICAgIGVuYWJsZUJhY2tncm91bmQ6ICdlbmFibGUtYmFja2dyb3VuZCcsXG4gICAgZmlsbE9wYWNpdHk6ICdmaWxsLW9wYWNpdHknLFxuICAgIGZpbGxSdWxlOiAnZmlsbC1ydWxlJyxcbiAgICBmbG9vZENvbG9yOiAnZmxvb2QtY29sb3InLFxuICAgIGZsb29kT3BhY2l0eTogJ2Zsb29kLW9wYWNpdHknLFxuICAgIGZvbnRGYW1pbHk6ICdmb250LWZhbWlseScsXG4gICAgZm9udFNpemU6ICdmb250LXNpemUnLFxuICAgIGZvbnRTaXplQWRqdXN0OiAnZm9udC1zaXplLWFkanVzdCcsXG4gICAgZm9udFN0cmV0Y2g6ICdmb250LXN0cmV0Y2gnLFxuICAgIGZvbnRTdHlsZTogJ2ZvbnQtc3R5bGUnLFxuICAgIGZvbnRWYXJpYW50OiAnZm9udC12YXJpYW50JyxcbiAgICBmb250V2VpZ2h0OiAnZm9udC13ZWlnaHQnLFxuICAgIGdseXBoTmFtZTogJ2dseXBoLW5hbWUnLFxuICAgIGdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsOiAnZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCcsXG4gICAgZ2x5cGhPcmllbnRhdGlvblZlcnRpY2FsOiAnZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwnLFxuICAgIGhyZWZMYW5nOiAnaHJlZmxhbmcnLFxuICAgIGhvcml6QWR2WDogJ2hvcml6LWFkdi14JyxcbiAgICBob3Jpek9yaWdpblg6ICdob3Jpei1vcmlnaW4teCcsXG4gICAgaG9yaXpPcmlnaW5ZOiAnaG9yaXotb3JpZ2luLXknLFxuICAgIGltYWdlUmVuZGVyaW5nOiAnaW1hZ2UtcmVuZGVyaW5nJyxcbiAgICBsZXR0ZXJTcGFjaW5nOiAnbGV0dGVyLXNwYWNpbmcnLFxuICAgIGxpZ2h0aW5nQ29sb3I6ICdsaWdodGluZy1jb2xvcicsXG4gICAgbWFya2VyRW5kOiAnbWFya2VyLWVuZCcsXG4gICAgbWFya2VyTWlkOiAnbWFya2VyLW1pZCcsXG4gICAgbWFya2VyU3RhcnQ6ICdtYXJrZXItc3RhcnQnLFxuICAgIG5hdkRvd246ICduYXYtZG93bicsXG4gICAgbmF2RG93bkxlZnQ6ICduYXYtZG93bi1sZWZ0JyxcbiAgICBuYXZEb3duUmlnaHQ6ICduYXYtZG93bi1yaWdodCcsXG4gICAgbmF2TGVmdDogJ25hdi1sZWZ0JyxcbiAgICBuYXZOZXh0OiAnbmF2LW5leHQnLFxuICAgIG5hdlByZXY6ICduYXYtcHJldicsXG4gICAgbmF2UmlnaHQ6ICduYXYtcmlnaHQnLFxuICAgIG5hdlVwOiAnbmF2LXVwJyxcbiAgICBuYXZVcExlZnQ6ICduYXYtdXAtbGVmdCcsXG4gICAgbmF2VXBSaWdodDogJ25hdi11cC1yaWdodCcsXG4gICAgb25BYm9ydDogJ29uYWJvcnQnLFxuICAgIG9uQWN0aXZhdGU6ICdvbmFjdGl2YXRlJyxcbiAgICBvbkFmdGVyUHJpbnQ6ICdvbmFmdGVycHJpbnQnLFxuICAgIG9uQmVmb3JlUHJpbnQ6ICdvbmJlZm9yZXByaW50JyxcbiAgICBvbkJlZ2luOiAnb25iZWdpbicsXG4gICAgb25DYW5jZWw6ICdvbmNhbmNlbCcsXG4gICAgb25DYW5QbGF5OiAnb25jYW5wbGF5JyxcbiAgICBvbkNhblBsYXlUaHJvdWdoOiAnb25jYW5wbGF5dGhyb3VnaCcsXG4gICAgb25DaGFuZ2U6ICdvbmNoYW5nZScsXG4gICAgb25DbGljazogJ29uY2xpY2snLFxuICAgIG9uQ2xvc2U6ICdvbmNsb3NlJyxcbiAgICBvbkNvcHk6ICdvbmNvcHknLFxuICAgIG9uQ3VlQ2hhbmdlOiAnb25jdWVjaGFuZ2UnLFxuICAgIG9uQ3V0OiAnb25jdXQnLFxuICAgIG9uRGJsQ2xpY2s6ICdvbmRibGNsaWNrJyxcbiAgICBvbkRyYWc6ICdvbmRyYWcnLFxuICAgIG9uRHJhZ0VuZDogJ29uZHJhZ2VuZCcsXG4gICAgb25EcmFnRW50ZXI6ICdvbmRyYWdlbnRlcicsXG4gICAgb25EcmFnRXhpdDogJ29uZHJhZ2V4aXQnLFxuICAgIG9uRHJhZ0xlYXZlOiAnb25kcmFnbGVhdmUnLFxuICAgIG9uRHJhZ092ZXI6ICdvbmRyYWdvdmVyJyxcbiAgICBvbkRyYWdTdGFydDogJ29uZHJhZ3N0YXJ0JyxcbiAgICBvbkRyb3A6ICdvbmRyb3AnLFxuICAgIG9uRHVyYXRpb25DaGFuZ2U6ICdvbmR1cmF0aW9uY2hhbmdlJyxcbiAgICBvbkVtcHRpZWQ6ICdvbmVtcHRpZWQnLFxuICAgIG9uRW5kOiAnb25lbmQnLFxuICAgIG9uRW5kZWQ6ICdvbmVuZGVkJyxcbiAgICBvbkVycm9yOiAnb25lcnJvcicsXG4gICAgb25Gb2N1czogJ29uZm9jdXMnLFxuICAgIG9uRm9jdXNJbjogJ29uZm9jdXNpbicsXG4gICAgb25Gb2N1c091dDogJ29uZm9jdXNvdXQnLFxuICAgIG9uSGFzaENoYW5nZTogJ29uaGFzaGNoYW5nZScsXG4gICAgb25JbnB1dDogJ29uaW5wdXQnLFxuICAgIG9uSW52YWxpZDogJ29uaW52YWxpZCcsXG4gICAgb25LZXlEb3duOiAnb25rZXlkb3duJyxcbiAgICBvbktleVByZXNzOiAnb25rZXlwcmVzcycsXG4gICAgb25LZXlVcDogJ29ua2V5dXAnLFxuICAgIG9uTG9hZDogJ29ubG9hZCcsXG4gICAgb25Mb2FkZWREYXRhOiAnb25sb2FkZWRkYXRhJyxcbiAgICBvbkxvYWRlZE1ldGFkYXRhOiAnb25sb2FkZWRtZXRhZGF0YScsXG4gICAgb25Mb2FkU3RhcnQ6ICdvbmxvYWRzdGFydCcsXG4gICAgb25NZXNzYWdlOiAnb25tZXNzYWdlJyxcbiAgICBvbk1vdXNlRG93bjogJ29ubW91c2Vkb3duJyxcbiAgICBvbk1vdXNlRW50ZXI6ICdvbm1vdXNlZW50ZXInLFxuICAgIG9uTW91c2VMZWF2ZTogJ29ubW91c2VsZWF2ZScsXG4gICAgb25Nb3VzZU1vdmU6ICdvbm1vdXNlbW92ZScsXG4gICAgb25Nb3VzZU91dDogJ29ubW91c2VvdXQnLFxuICAgIG9uTW91c2VPdmVyOiAnb25tb3VzZW92ZXInLFxuICAgIG9uTW91c2VVcDogJ29ubW91c2V1cCcsXG4gICAgb25Nb3VzZVdoZWVsOiAnb25tb3VzZXdoZWVsJyxcbiAgICBvbk9mZmxpbmU6ICdvbm9mZmxpbmUnLFxuICAgIG9uT25saW5lOiAnb25vbmxpbmUnLFxuICAgIG9uUGFnZUhpZGU6ICdvbnBhZ2VoaWRlJyxcbiAgICBvblBhZ2VTaG93OiAnb25wYWdlc2hvdycsXG4gICAgb25QYXN0ZTogJ29ucGFzdGUnLFxuICAgIG9uUGF1c2U6ICdvbnBhdXNlJyxcbiAgICBvblBsYXk6ICdvbnBsYXknLFxuICAgIG9uUGxheWluZzogJ29ucGxheWluZycsXG4gICAgb25Qb3BTdGF0ZTogJ29ucG9wc3RhdGUnLFxuICAgIG9uUHJvZ3Jlc3M6ICdvbnByb2dyZXNzJyxcbiAgICBvblJhdGVDaGFuZ2U6ICdvbnJhdGVjaGFuZ2UnLFxuICAgIG9uUmVwZWF0OiAnb25yZXBlYXQnLFxuICAgIG9uUmVzZXQ6ICdvbnJlc2V0JyxcbiAgICBvblJlc2l6ZTogJ29ucmVzaXplJyxcbiAgICBvblNjcm9sbDogJ29uc2Nyb2xsJyxcbiAgICBvblNlZWtlZDogJ29uc2Vla2VkJyxcbiAgICBvblNlZWtpbmc6ICdvbnNlZWtpbmcnLFxuICAgIG9uU2VsZWN0OiAnb25zZWxlY3QnLFxuICAgIG9uU2hvdzogJ29uc2hvdycsXG4gICAgb25TdGFsbGVkOiAnb25zdGFsbGVkJyxcbiAgICBvblN0b3JhZ2U6ICdvbnN0b3JhZ2UnLFxuICAgIG9uU3VibWl0OiAnb25zdWJtaXQnLFxuICAgIG9uU3VzcGVuZDogJ29uc3VzcGVuZCcsXG4gICAgb25UaW1lVXBkYXRlOiAnb250aW1ldXBkYXRlJyxcbiAgICBvblRvZ2dsZTogJ29udG9nZ2xlJyxcbiAgICBvblVubG9hZDogJ29udW5sb2FkJyxcbiAgICBvblZvbHVtZUNoYW5nZTogJ29udm9sdW1lY2hhbmdlJyxcbiAgICBvbldhaXRpbmc6ICdvbndhaXRpbmcnLFxuICAgIG9uWm9vbTogJ29uem9vbScsXG4gICAgb3ZlcmxpbmVQb3NpdGlvbjogJ292ZXJsaW5lLXBvc2l0aW9uJyxcbiAgICBvdmVybGluZVRoaWNrbmVzczogJ292ZXJsaW5lLXRoaWNrbmVzcycsXG4gICAgcGFpbnRPcmRlcjogJ3BhaW50LW9yZGVyJyxcbiAgICBwYW5vc2UxOiAncGFub3NlLTEnLFxuICAgIHBvaW50ZXJFdmVudHM6ICdwb2ludGVyLWV2ZW50cycsXG4gICAgcmVmZXJyZXJQb2xpY3k6ICdyZWZlcnJlcnBvbGljeScsXG4gICAgcmVuZGVyaW5nSW50ZW50OiAncmVuZGVyaW5nLWludGVudCcsXG4gICAgc2hhcGVSZW5kZXJpbmc6ICdzaGFwZS1yZW5kZXJpbmcnLFxuICAgIHN0b3BDb2xvcjogJ3N0b3AtY29sb3InLFxuICAgIHN0b3BPcGFjaXR5OiAnc3RvcC1vcGFjaXR5JyxcbiAgICBzdHJpa2V0aHJvdWdoUG9zaXRpb246ICdzdHJpa2V0aHJvdWdoLXBvc2l0aW9uJyxcbiAgICBzdHJpa2V0aHJvdWdoVGhpY2tuZXNzOiAnc3RyaWtldGhyb3VnaC10aGlja25lc3MnLFxuICAgIHN0cm9rZURhc2hBcnJheTogJ3N0cm9rZS1kYXNoYXJyYXknLFxuICAgIHN0cm9rZURhc2hPZmZzZXQ6ICdzdHJva2UtZGFzaG9mZnNldCcsXG4gICAgc3Ryb2tlTGluZUNhcDogJ3N0cm9rZS1saW5lY2FwJyxcbiAgICBzdHJva2VMaW5lSm9pbjogJ3N0cm9rZS1saW5lam9pbicsXG4gICAgc3Ryb2tlTWl0ZXJMaW1pdDogJ3N0cm9rZS1taXRlcmxpbWl0JyxcbiAgICBzdHJva2VPcGFjaXR5OiAnc3Ryb2tlLW9wYWNpdHknLFxuICAgIHN0cm9rZVdpZHRoOiAnc3Ryb2tlLXdpZHRoJyxcbiAgICB0YWJJbmRleDogJ3RhYmluZGV4JyxcbiAgICB0ZXh0QW5jaG9yOiAndGV4dC1hbmNob3InLFxuICAgIHRleHREZWNvcmF0aW9uOiAndGV4dC1kZWNvcmF0aW9uJyxcbiAgICB0ZXh0UmVuZGVyaW5nOiAndGV4dC1yZW5kZXJpbmcnLFxuICAgIHR5cGVPZjogJ3R5cGVvZicsXG4gICAgdW5kZXJsaW5lUG9zaXRpb246ICd1bmRlcmxpbmUtcG9zaXRpb24nLFxuICAgIHVuZGVybGluZVRoaWNrbmVzczogJ3VuZGVybGluZS10aGlja25lc3MnLFxuICAgIHVuaWNvZGVCaWRpOiAndW5pY29kZS1iaWRpJyxcbiAgICB1bmljb2RlUmFuZ2U6ICd1bmljb2RlLXJhbmdlJyxcbiAgICB1bml0c1BlckVtOiAndW5pdHMtcGVyLWVtJyxcbiAgICB2QWxwaGFiZXRpYzogJ3YtYWxwaGFiZXRpYycsXG4gICAgdkhhbmdpbmc6ICd2LWhhbmdpbmcnLFxuICAgIHZJZGVvZ3JhcGhpYzogJ3YtaWRlb2dyYXBoaWMnLFxuICAgIHZNYXRoZW1hdGljYWw6ICd2LW1hdGhlbWF0aWNhbCcsXG4gICAgdmVjdG9yRWZmZWN0OiAndmVjdG9yLWVmZmVjdCcsXG4gICAgdmVydEFkdlk6ICd2ZXJ0LWFkdi15JyxcbiAgICB2ZXJ0T3JpZ2luWDogJ3ZlcnQtb3JpZ2luLXgnLFxuICAgIHZlcnRPcmlnaW5ZOiAndmVydC1vcmlnaW4teScsXG4gICAgd29yZFNwYWNpbmc6ICd3b3JkLXNwYWNpbmcnLFxuICAgIHdyaXRpbmdNb2RlOiAnd3JpdGluZy1tb2RlJyxcbiAgICB4SGVpZ2h0OiAneC1oZWlnaHQnLFxuICAgIC8vIFRoZXNlIHdlcmUgY2FtZWxjYXNlZCBpbiBUaW55LiBOb3cgbG93ZXJjYXNlZCBpbiBTVkcgMlxuICAgIHBsYXliYWNrT3JkZXI6ICdwbGF5YmFja29yZGVyJyxcbiAgICB0aW1lbGluZUJlZ2luOiAndGltZWxpbmViZWdpbidcbiAgfSxcbiAgdHJhbnNmb3JtOiBjYXNlU2Vuc2l0aXZlVHJhbnNmb3JtLFxuICBwcm9wZXJ0aWVzOiB7XG4gICAgYWJvdXQ6IGNvbW1hT3JTcGFjZVNlcGFyYXRlZCxcbiAgICBhY2NlbnRIZWlnaHQ6IG51bWJlcixcbiAgICBhY2N1bXVsYXRlOiBudWxsLFxuICAgIGFkZGl0aXZlOiBudWxsLFxuICAgIGFsaWdubWVudEJhc2VsaW5lOiBudWxsLFxuICAgIGFscGhhYmV0aWM6IG51bWJlcixcbiAgICBhbXBsaXR1ZGU6IG51bWJlcixcbiAgICBhcmFiaWNGb3JtOiBudWxsLFxuICAgIGFzY2VudDogbnVtYmVyLFxuICAgIGF0dHJpYnV0ZU5hbWU6IG51bGwsXG4gICAgYXR0cmlidXRlVHlwZTogbnVsbCxcbiAgICBhemltdXRoOiBudW1iZXIsXG4gICAgYmFuZHdpZHRoOiBudWxsLFxuICAgIGJhc2VsaW5lU2hpZnQ6IG51bGwsXG4gICAgYmFzZUZyZXF1ZW5jeTogbnVsbCxcbiAgICBiYXNlUHJvZmlsZTogbnVsbCxcbiAgICBiYm94OiBudWxsLFxuICAgIGJlZ2luOiBudWxsLFxuICAgIGJpYXM6IG51bWJlcixcbiAgICBieTogbnVsbCxcbiAgICBjYWxjTW9kZTogbnVsbCxcbiAgICBjYXBIZWlnaHQ6IG51bWJlcixcbiAgICBjbGFzc05hbWU6IHNwYWNlU2VwYXJhdGVkLFxuICAgIGNsaXA6IG51bGwsXG4gICAgY2xpcFBhdGg6IG51bGwsXG4gICAgY2xpcFBhdGhVbml0czogbnVsbCxcbiAgICBjbGlwUnVsZTogbnVsbCxcbiAgICBjb2xvcjogbnVsbCxcbiAgICBjb2xvckludGVycG9sYXRpb246IG51bGwsXG4gICAgY29sb3JJbnRlcnBvbGF0aW9uRmlsdGVyczogbnVsbCxcbiAgICBjb2xvclByb2ZpbGU6IG51bGwsXG4gICAgY29sb3JSZW5kZXJpbmc6IG51bGwsXG4gICAgY29udGVudDogbnVsbCxcbiAgICBjb250ZW50U2NyaXB0VHlwZTogbnVsbCxcbiAgICBjb250ZW50U3R5bGVUeXBlOiBudWxsLFxuICAgIGNyb3NzT3JpZ2luOiBudWxsLFxuICAgIGN1cnNvcjogbnVsbCxcbiAgICBjeDogbnVsbCxcbiAgICBjeTogbnVsbCxcbiAgICBkOiBudWxsLFxuICAgIGRhdGFUeXBlOiBudWxsLFxuICAgIGRlZmF1bHRBY3Rpb246IG51bGwsXG4gICAgZGVzY2VudDogbnVtYmVyLFxuICAgIGRpZmZ1c2VDb25zdGFudDogbnVtYmVyLFxuICAgIGRpcmVjdGlvbjogbnVsbCxcbiAgICBkaXNwbGF5OiBudWxsLFxuICAgIGR1cjogbnVsbCxcbiAgICBkaXZpc29yOiBudW1iZXIsXG4gICAgZG9taW5hbnRCYXNlbGluZTogbnVsbCxcbiAgICBkb3dubG9hZDogYm9vbGVhbixcbiAgICBkeDogbnVsbCxcbiAgICBkeTogbnVsbCxcbiAgICBlZGdlTW9kZTogbnVsbCxcbiAgICBlZGl0YWJsZTogbnVsbCxcbiAgICBlbGV2YXRpb246IG51bWJlcixcbiAgICBlbmFibGVCYWNrZ3JvdW5kOiBudWxsLFxuICAgIGVuZDogbnVsbCxcbiAgICBldmVudDogbnVsbCxcbiAgICBleHBvbmVudDogbnVtYmVyLFxuICAgIGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQ6IG51bGwsXG4gICAgZmlsbDogbnVsbCxcbiAgICBmaWxsT3BhY2l0eTogbnVtYmVyLFxuICAgIGZpbGxSdWxlOiBudWxsLFxuICAgIGZpbHRlcjogbnVsbCxcbiAgICBmaWx0ZXJSZXM6IG51bGwsXG4gICAgZmlsdGVyVW5pdHM6IG51bGwsXG4gICAgZmxvb2RDb2xvcjogbnVsbCxcbiAgICBmbG9vZE9wYWNpdHk6IG51bGwsXG4gICAgZm9jdXNhYmxlOiBudWxsLFxuICAgIGZvY3VzSGlnaGxpZ2h0OiBudWxsLFxuICAgIGZvbnRGYW1pbHk6IG51bGwsXG4gICAgZm9udFNpemU6IG51bGwsXG4gICAgZm9udFNpemVBZGp1c3Q6IG51bGwsXG4gICAgZm9udFN0cmV0Y2g6IG51bGwsXG4gICAgZm9udFN0eWxlOiBudWxsLFxuICAgIGZvbnRWYXJpYW50OiBudWxsLFxuICAgIGZvbnRXZWlnaHQ6IG51bGwsXG4gICAgZm9ybWF0OiBudWxsLFxuICAgIGZyOiBudWxsLFxuICAgIGZyb206IG51bGwsXG4gICAgZng6IG51bGwsXG4gICAgZnk6IG51bGwsXG4gICAgZzE6IGNvbW1hU2VwYXJhdGVkLFxuICAgIGcyOiBjb21tYVNlcGFyYXRlZCxcbiAgICBnbHlwaE5hbWU6IGNvbW1hU2VwYXJhdGVkLFxuICAgIGdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsOiBudWxsLFxuICAgIGdseXBoT3JpZW50YXRpb25WZXJ0aWNhbDogbnVsbCxcbiAgICBnbHlwaFJlZjogbnVsbCxcbiAgICBncmFkaWVudFRyYW5zZm9ybTogbnVsbCxcbiAgICBncmFkaWVudFVuaXRzOiBudWxsLFxuICAgIGhhbmRsZXI6IG51bGwsXG4gICAgaGFuZ2luZzogbnVtYmVyLFxuICAgIGhhdGNoQ29udGVudFVuaXRzOiBudWxsLFxuICAgIGhhdGNoVW5pdHM6IG51bGwsXG4gICAgaGVpZ2h0OiBudWxsLFxuICAgIGhyZWY6IG51bGwsXG4gICAgaHJlZkxhbmc6IG51bGwsXG4gICAgaG9yaXpBZHZYOiBudW1iZXIsXG4gICAgaG9yaXpPcmlnaW5YOiBudW1iZXIsXG4gICAgaG9yaXpPcmlnaW5ZOiBudW1iZXIsXG4gICAgaWQ6IG51bGwsXG4gICAgaWRlb2dyYXBoaWM6IG51bWJlcixcbiAgICBpbWFnZVJlbmRlcmluZzogbnVsbCxcbiAgICBpbml0aWFsVmlzaWJpbGl0eTogbnVsbCxcbiAgICBpbjogbnVsbCxcbiAgICBpbjI6IG51bGwsXG4gICAgaW50ZXJjZXB0OiBudW1iZXIsXG4gICAgazogbnVtYmVyLFxuICAgIGsxOiBudW1iZXIsXG4gICAgazI6IG51bWJlcixcbiAgICBrMzogbnVtYmVyLFxuICAgIGs0OiBudW1iZXIsXG4gICAga2VybmVsTWF0cml4OiBjb21tYU9yU3BhY2VTZXBhcmF0ZWQsXG4gICAga2VybmVsVW5pdExlbmd0aDogbnVsbCxcbiAgICBrZXlQb2ludHM6IG51bGwsIC8vIFNFTUlfQ09MT05fU0VQQVJBVEVEXG4gICAga2V5U3BsaW5lczogbnVsbCwgLy8gU0VNSV9DT0xPTl9TRVBBUkFURURcbiAgICBrZXlUaW1lczogbnVsbCwgLy8gU0VNSV9DT0xPTl9TRVBBUkFURURcbiAgICBrZXJuaW5nOiBudWxsLFxuICAgIGxhbmc6IG51bGwsXG4gICAgbGVuZ3RoQWRqdXN0OiBudWxsLFxuICAgIGxldHRlclNwYWNpbmc6IG51bGwsXG4gICAgbGlnaHRpbmdDb2xvcjogbnVsbCxcbiAgICBsaW1pdGluZ0NvbmVBbmdsZTogbnVtYmVyLFxuICAgIGxvY2FsOiBudWxsLFxuICAgIG1hcmtlckVuZDogbnVsbCxcbiAgICBtYXJrZXJNaWQ6IG51bGwsXG4gICAgbWFya2VyU3RhcnQ6IG51bGwsXG4gICAgbWFya2VySGVpZ2h0OiBudWxsLFxuICAgIG1hcmtlclVuaXRzOiBudWxsLFxuICAgIG1hcmtlcldpZHRoOiBudWxsLFxuICAgIG1hc2s6IG51bGwsXG4gICAgbWFza0NvbnRlbnRVbml0czogbnVsbCxcbiAgICBtYXNrVW5pdHM6IG51bGwsXG4gICAgbWF0aGVtYXRpY2FsOiBudWxsLFxuICAgIG1heDogbnVsbCxcbiAgICBtZWRpYTogbnVsbCxcbiAgICBtZWRpYUNoYXJhY3RlckVuY29kaW5nOiBudWxsLFxuICAgIG1lZGlhQ29udGVudEVuY29kaW5nczogbnVsbCxcbiAgICBtZWRpYVNpemU6IG51bWJlcixcbiAgICBtZWRpYVRpbWU6IG51bGwsXG4gICAgbWV0aG9kOiBudWxsLFxuICAgIG1pbjogbnVsbCxcbiAgICBtb2RlOiBudWxsLFxuICAgIG5hbWU6IG51bGwsXG4gICAgbmF2RG93bjogbnVsbCxcbiAgICBuYXZEb3duTGVmdDogbnVsbCxcbiAgICBuYXZEb3duUmlnaHQ6IG51bGwsXG4gICAgbmF2TGVmdDogbnVsbCxcbiAgICBuYXZOZXh0OiBudWxsLFxuICAgIG5hdlByZXY6IG51bGwsXG4gICAgbmF2UmlnaHQ6IG51bGwsXG4gICAgbmF2VXA6IG51bGwsXG4gICAgbmF2VXBMZWZ0OiBudWxsLFxuICAgIG5hdlVwUmlnaHQ6IG51bGwsXG4gICAgbnVtT2N0YXZlczogbnVsbCxcbiAgICBvYnNlcnZlcjogbnVsbCxcbiAgICBvZmZzZXQ6IG51bGwsXG4gICAgb25BYm9ydDogbnVsbCxcbiAgICBvbkFjdGl2YXRlOiBudWxsLFxuICAgIG9uQWZ0ZXJQcmludDogbnVsbCxcbiAgICBvbkJlZm9yZVByaW50OiBudWxsLFxuICAgIG9uQmVnaW46IG51bGwsXG4gICAgb25DYW5jZWw6IG51bGwsXG4gICAgb25DYW5QbGF5OiBudWxsLFxuICAgIG9uQ2FuUGxheVRocm91Z2g6IG51bGwsXG4gICAgb25DaGFuZ2U6IG51bGwsXG4gICAgb25DbGljazogbnVsbCxcbiAgICBvbkNsb3NlOiBudWxsLFxuICAgIG9uQ29weTogbnVsbCxcbiAgICBvbkN1ZUNoYW5nZTogbnVsbCxcbiAgICBvbkN1dDogbnVsbCxcbiAgICBvbkRibENsaWNrOiBudWxsLFxuICAgIG9uRHJhZzogbnVsbCxcbiAgICBvbkRyYWdFbmQ6IG51bGwsXG4gICAgb25EcmFnRW50ZXI6IG51bGwsXG4gICAgb25EcmFnRXhpdDogbnVsbCxcbiAgICBvbkRyYWdMZWF2ZTogbnVsbCxcbiAgICBvbkRyYWdPdmVyOiBudWxsLFxuICAgIG9uRHJhZ1N0YXJ0OiBudWxsLFxuICAgIG9uRHJvcDogbnVsbCxcbiAgICBvbkR1cmF0aW9uQ2hhbmdlOiBudWxsLFxuICAgIG9uRW1wdGllZDogbnVsbCxcbiAgICBvbkVuZDogbnVsbCxcbiAgICBvbkVuZGVkOiBudWxsLFxuICAgIG9uRXJyb3I6IG51bGwsXG4gICAgb25Gb2N1czogbnVsbCxcbiAgICBvbkZvY3VzSW46IG51bGwsXG4gICAgb25Gb2N1c091dDogbnVsbCxcbiAgICBvbkhhc2hDaGFuZ2U6IG51bGwsXG4gICAgb25JbnB1dDogbnVsbCxcbiAgICBvbkludmFsaWQ6IG51bGwsXG4gICAgb25LZXlEb3duOiBudWxsLFxuICAgIG9uS2V5UHJlc3M6IG51bGwsXG4gICAgb25LZXlVcDogbnVsbCxcbiAgICBvbkxvYWQ6IG51bGwsXG4gICAgb25Mb2FkZWREYXRhOiBudWxsLFxuICAgIG9uTG9hZGVkTWV0YWRhdGE6IG51bGwsXG4gICAgb25Mb2FkU3RhcnQ6IG51bGwsXG4gICAgb25NZXNzYWdlOiBudWxsLFxuICAgIG9uTW91c2VEb3duOiBudWxsLFxuICAgIG9uTW91c2VFbnRlcjogbnVsbCxcbiAgICBvbk1vdXNlTGVhdmU6IG51bGwsXG4gICAgb25Nb3VzZU1vdmU6IG51bGwsXG4gICAgb25Nb3VzZU91dDogbnVsbCxcbiAgICBvbk1vdXNlT3ZlcjogbnVsbCxcbiAgICBvbk1vdXNlVXA6IG51bGwsXG4gICAgb25Nb3VzZVdoZWVsOiBudWxsLFxuICAgIG9uT2ZmbGluZTogbnVsbCxcbiAgICBvbk9ubGluZTogbnVsbCxcbiAgICBvblBhZ2VIaWRlOiBudWxsLFxuICAgIG9uUGFnZVNob3c6IG51bGwsXG4gICAgb25QYXN0ZTogbnVsbCxcbiAgICBvblBhdXNlOiBudWxsLFxuICAgIG9uUGxheTogbnVsbCxcbiAgICBvblBsYXlpbmc6IG51bGwsXG4gICAgb25Qb3BTdGF0ZTogbnVsbCxcbiAgICBvblByb2dyZXNzOiBudWxsLFxuICAgIG9uUmF0ZUNoYW5nZTogbnVsbCxcbiAgICBvblJlcGVhdDogbnVsbCxcbiAgICBvblJlc2V0OiBudWxsLFxuICAgIG9uUmVzaXplOiBudWxsLFxuICAgIG9uU2Nyb2xsOiBudWxsLFxuICAgIG9uU2Vla2VkOiBudWxsLFxuICAgIG9uU2Vla2luZzogbnVsbCxcbiAgICBvblNlbGVjdDogbnVsbCxcbiAgICBvblNob3c6IG51bGwsXG4gICAgb25TdGFsbGVkOiBudWxsLFxuICAgIG9uU3RvcmFnZTogbnVsbCxcbiAgICBvblN1Ym1pdDogbnVsbCxcbiAgICBvblN1c3BlbmQ6IG51bGwsXG4gICAgb25UaW1lVXBkYXRlOiBudWxsLFxuICAgIG9uVG9nZ2xlOiBudWxsLFxuICAgIG9uVW5sb2FkOiBudWxsLFxuICAgIG9uVm9sdW1lQ2hhbmdlOiBudWxsLFxuICAgIG9uV2FpdGluZzogbnVsbCxcbiAgICBvblpvb206IG51bGwsXG4gICAgb3BhY2l0eTogbnVsbCxcbiAgICBvcGVyYXRvcjogbnVsbCxcbiAgICBvcmRlcjogbnVsbCxcbiAgICBvcmllbnQ6IG51bGwsXG4gICAgb3JpZW50YXRpb246IG51bGwsXG4gICAgb3JpZ2luOiBudWxsLFxuICAgIG92ZXJmbG93OiBudWxsLFxuICAgIG92ZXJsYXk6IG51bGwsXG4gICAgb3ZlcmxpbmVQb3NpdGlvbjogbnVtYmVyLFxuICAgIG92ZXJsaW5lVGhpY2tuZXNzOiBudW1iZXIsXG4gICAgcGFpbnRPcmRlcjogbnVsbCxcbiAgICBwYW5vc2UxOiBudWxsLFxuICAgIHBhdGg6IG51bGwsXG4gICAgcGF0aExlbmd0aDogbnVtYmVyLFxuICAgIHBhdHRlcm5Db250ZW50VW5pdHM6IG51bGwsXG4gICAgcGF0dGVyblRyYW5zZm9ybTogbnVsbCxcbiAgICBwYXR0ZXJuVW5pdHM6IG51bGwsXG4gICAgcGhhc2U6IG51bGwsXG4gICAgcGluZzogc3BhY2VTZXBhcmF0ZWQsXG4gICAgcGl0Y2g6IG51bGwsXG4gICAgcGxheWJhY2tPcmRlcjogbnVsbCxcbiAgICBwb2ludGVyRXZlbnRzOiBudWxsLFxuICAgIHBvaW50czogbnVsbCxcbiAgICBwb2ludHNBdFg6IG51bWJlcixcbiAgICBwb2ludHNBdFk6IG51bWJlcixcbiAgICBwb2ludHNBdFo6IG51bWJlcixcbiAgICBwcmVzZXJ2ZUFscGhhOiBudWxsLFxuICAgIHByZXNlcnZlQXNwZWN0UmF0aW86IG51bGwsXG4gICAgcHJpbWl0aXZlVW5pdHM6IG51bGwsXG4gICAgcHJvcGFnYXRlOiBudWxsLFxuICAgIHByb3BlcnR5OiBjb21tYU9yU3BhY2VTZXBhcmF0ZWQsXG4gICAgcjogbnVsbCxcbiAgICByYWRpdXM6IG51bGwsXG4gICAgcmVmZXJyZXJQb2xpY3k6IG51bGwsXG4gICAgcmVmWDogbnVsbCxcbiAgICByZWZZOiBudWxsLFxuICAgIHJlbDogY29tbWFPclNwYWNlU2VwYXJhdGVkLFxuICAgIHJldjogY29tbWFPclNwYWNlU2VwYXJhdGVkLFxuICAgIHJlbmRlcmluZ0ludGVudDogbnVsbCxcbiAgICByZXBlYXRDb3VudDogbnVsbCxcbiAgICByZXBlYXREdXI6IG51bGwsXG4gICAgcmVxdWlyZWRFeHRlbnNpb25zOiBjb21tYU9yU3BhY2VTZXBhcmF0ZWQsXG4gICAgcmVxdWlyZWRGZWF0dXJlczogY29tbWFPclNwYWNlU2VwYXJhdGVkLFxuICAgIHJlcXVpcmVkRm9udHM6IGNvbW1hT3JTcGFjZVNlcGFyYXRlZCxcbiAgICByZXF1aXJlZEZvcm1hdHM6IGNvbW1hT3JTcGFjZVNlcGFyYXRlZCxcbiAgICByZXNvdXJjZTogbnVsbCxcbiAgICByZXN0YXJ0OiBudWxsLFxuICAgIHJlc3VsdDogbnVsbCxcbiAgICByb3RhdGU6IG51bGwsXG4gICAgcng6IG51bGwsXG4gICAgcnk6IG51bGwsXG4gICAgc2NhbGU6IG51bGwsXG4gICAgc2VlZDogbnVsbCxcbiAgICBzaGFwZVJlbmRlcmluZzogbnVsbCxcbiAgICBzaWRlOiBudWxsLFxuICAgIHNsb3BlOiBudWxsLFxuICAgIHNuYXBzaG90VGltZTogbnVsbCxcbiAgICBzcGVjdWxhckNvbnN0YW50OiBudW1iZXIsXG4gICAgc3BlY3VsYXJFeHBvbmVudDogbnVtYmVyLFxuICAgIHNwcmVhZE1ldGhvZDogbnVsbCxcbiAgICBzcGFjaW5nOiBudWxsLFxuICAgIHN0YXJ0T2Zmc2V0OiBudWxsLFxuICAgIHN0ZERldmlhdGlvbjogbnVsbCxcbiAgICBzdGVtaDogbnVsbCxcbiAgICBzdGVtdjogbnVsbCxcbiAgICBzdGl0Y2hUaWxlczogbnVsbCxcbiAgICBzdG9wQ29sb3I6IG51bGwsXG4gICAgc3RvcE9wYWNpdHk6IG51bGwsXG4gICAgc3RyaWtldGhyb3VnaFBvc2l0aW9uOiBudW1iZXIsXG4gICAgc3RyaWtldGhyb3VnaFRoaWNrbmVzczogbnVtYmVyLFxuICAgIHN0cmluZzogbnVsbCxcbiAgICBzdHJva2U6IG51bGwsXG4gICAgc3Ryb2tlRGFzaEFycmF5OiBjb21tYU9yU3BhY2VTZXBhcmF0ZWQsXG4gICAgc3Ryb2tlRGFzaE9mZnNldDogbnVsbCxcbiAgICBzdHJva2VMaW5lQ2FwOiBudWxsLFxuICAgIHN0cm9rZUxpbmVKb2luOiBudWxsLFxuICAgIHN0cm9rZU1pdGVyTGltaXQ6IG51bWJlcixcbiAgICBzdHJva2VPcGFjaXR5OiBudW1iZXIsXG4gICAgc3Ryb2tlV2lkdGg6IG51bGwsXG4gICAgc3R5bGU6IG51bGwsXG4gICAgc3VyZmFjZVNjYWxlOiBudW1iZXIsXG4gICAgc3luY0JlaGF2aW9yOiBudWxsLFxuICAgIHN5bmNCZWhhdmlvckRlZmF1bHQ6IG51bGwsXG4gICAgc3luY01hc3RlcjogbnVsbCxcbiAgICBzeW5jVG9sZXJhbmNlOiBudWxsLFxuICAgIHN5bmNUb2xlcmFuY2VEZWZhdWx0OiBudWxsLFxuICAgIHN5c3RlbUxhbmd1YWdlOiBjb21tYU9yU3BhY2VTZXBhcmF0ZWQsXG4gICAgdGFiSW5kZXg6IG51bWJlcixcbiAgICB0YWJsZVZhbHVlczogbnVsbCxcbiAgICB0YXJnZXQ6IG51bGwsXG4gICAgdGFyZ2V0WDogbnVtYmVyLFxuICAgIHRhcmdldFk6IG51bWJlcixcbiAgICB0ZXh0QW5jaG9yOiBudWxsLFxuICAgIHRleHREZWNvcmF0aW9uOiBudWxsLFxuICAgIHRleHRSZW5kZXJpbmc6IG51bGwsXG4gICAgdGV4dExlbmd0aDogbnVsbCxcbiAgICB0aW1lbGluZUJlZ2luOiBudWxsLFxuICAgIHRpdGxlOiBudWxsLFxuICAgIHRyYW5zZm9ybUJlaGF2aW9yOiBudWxsLFxuICAgIHR5cGU6IG51bGwsXG4gICAgdHlwZU9mOiBjb21tYU9yU3BhY2VTZXBhcmF0ZWQsXG4gICAgdG86IG51bGwsXG4gICAgdHJhbnNmb3JtOiBudWxsLFxuICAgIHUxOiBudWxsLFxuICAgIHUyOiBudWxsLFxuICAgIHVuZGVybGluZVBvc2l0aW9uOiBudW1iZXIsXG4gICAgdW5kZXJsaW5lVGhpY2tuZXNzOiBudW1iZXIsXG4gICAgdW5pY29kZTogbnVsbCxcbiAgICB1bmljb2RlQmlkaTogbnVsbCxcbiAgICB1bmljb2RlUmFuZ2U6IG51bGwsXG4gICAgdW5pdHNQZXJFbTogbnVtYmVyLFxuICAgIHZhbHVlczogbnVsbCxcbiAgICB2QWxwaGFiZXRpYzogbnVtYmVyLFxuICAgIHZNYXRoZW1hdGljYWw6IG51bWJlcixcbiAgICB2ZWN0b3JFZmZlY3Q6IG51bGwsXG4gICAgdkhhbmdpbmc6IG51bWJlcixcbiAgICB2SWRlb2dyYXBoaWM6IG51bWJlcixcbiAgICB2ZXJzaW9uOiBudWxsLFxuICAgIHZlcnRBZHZZOiBudW1iZXIsXG4gICAgdmVydE9yaWdpblg6IG51bWJlcixcbiAgICB2ZXJ0T3JpZ2luWTogbnVtYmVyLFxuICAgIHZpZXdCb3g6IG51bGwsXG4gICAgdmlld1RhcmdldDogbnVsbCxcbiAgICB2aXNpYmlsaXR5OiBudWxsLFxuICAgIHdpZHRoOiBudWxsLFxuICAgIHdpZHRoczogbnVsbCxcbiAgICB3b3JkU3BhY2luZzogbnVsbCxcbiAgICB3cml0aW5nTW9kZTogbnVsbCxcbiAgICB4OiBudWxsLFxuICAgIHgxOiBudWxsLFxuICAgIHgyOiBudWxsLFxuICAgIHhDaGFubmVsU2VsZWN0b3I6IG51bGwsXG4gICAgeEhlaWdodDogbnVtYmVyLFxuICAgIHk6IG51bGwsXG4gICAgeTE6IG51bGwsXG4gICAgeTI6IG51bGwsXG4gICAgeUNoYW5uZWxTZWxlY3RvcjogbnVsbCxcbiAgICB6OiBudWxsLFxuICAgIHpvb21BbmRQYW46IG51bGxcbiAgfVxufSlcbiIsImltcG9ydCB7Y2FzZVNlbnNpdGl2ZVRyYW5zZm9ybX0gZnJvbSAnLi9jYXNlLXNlbnNpdGl2ZS10cmFuc2Zvcm0uanMnXG5cbi8qKlxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+fSBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYXNlSW5zZW5zaXRpdmVUcmFuc2Zvcm0oYXR0cmlidXRlcywgcHJvcGVydHkpIHtcbiAgcmV0dXJuIGNhc2VTZW5zaXRpdmVUcmFuc2Zvcm0oYXR0cmlidXRlcywgcHJvcGVydHkudG9Mb3dlckNhc2UoKSlcbn1cbiIsIi8qKlxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+fSBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge3N0cmluZ30gYXR0cmlidXRlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FzZVNlbnNpdGl2ZVRyYW5zZm9ybShhdHRyaWJ1dGVzLCBhdHRyaWJ1dGUpIHtcbiAgcmV0dXJuIGF0dHJpYnV0ZSBpbiBhdHRyaWJ1dGVzID8gYXR0cmlidXRlc1thdHRyaWJ1dGVdIDogYXR0cmlidXRlXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vc2NoZW1hLmpzJykuUHJvcGVydGllc30gUHJvcGVydGllc1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi9zY2hlbWEuanMnKS5Ob3JtYWx9IE5vcm1hbFxuICpcbiAqIEB0eXBlZGVmIHtSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+fSBBdHRyaWJ1dGVzXG4gKlxuICogQHR5cGVkZWYge09iamVjdH0gRGVmaW5pdGlvblxuICogQHByb3BlcnR5IHtSZWNvcmQ8c3RyaW5nLCBudW1iZXJ8bnVsbD59IHByb3BlcnRpZXNcbiAqIEBwcm9wZXJ0eSB7KGF0dHJpYnV0ZXM6IEF0dHJpYnV0ZXMsIHByb3BlcnR5OiBzdHJpbmcpID0+IHN0cmluZ30gdHJhbnNmb3JtXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3NwYWNlXVxuICogQHByb3BlcnR5IHtBdHRyaWJ1dGVzfSBbYXR0cmlidXRlc11cbiAqIEBwcm9wZXJ0eSB7QXJyYXk8c3RyaW5nPn0gW211c3RVc2VQcm9wZXJ0eV1cbiAqL1xuXG5pbXBvcnQge25vcm1hbGl6ZX0gZnJvbSAnLi4vbm9ybWFsaXplLmpzJ1xuaW1wb3J0IHtTY2hlbWF9IGZyb20gJy4vc2NoZW1hLmpzJ1xuaW1wb3J0IHtEZWZpbmVkSW5mb30gZnJvbSAnLi9kZWZpbmVkLWluZm8uanMnXG5cbmNvbnN0IG93biA9IHt9Lmhhc093blByb3BlcnR5XG5cbi8qKlxuICogQHBhcmFtIHtEZWZpbml0aW9ufSBkZWZpbml0aW9uXG4gKiBAcmV0dXJucyB7U2NoZW1hfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKGRlZmluaXRpb24pIHtcbiAgLyoqIEB0eXBlIHtQcm9wZXJ0aWVzfSAqL1xuICBjb25zdCBwcm9wZXJ0eSA9IHt9XG4gIC8qKiBAdHlwZSB7Tm9ybWFsfSAqL1xuICBjb25zdCBub3JtYWwgPSB7fVxuICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgbGV0IHByb3BcblxuICBmb3IgKHByb3AgaW4gZGVmaW5pdGlvbi5wcm9wZXJ0aWVzKSB7XG4gICAgaWYgKG93bi5jYWxsKGRlZmluaXRpb24ucHJvcGVydGllcywgcHJvcCkpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gZGVmaW5pdGlvbi5wcm9wZXJ0aWVzW3Byb3BdXG4gICAgICBjb25zdCBpbmZvID0gbmV3IERlZmluZWRJbmZvKFxuICAgICAgICBwcm9wLFxuICAgICAgICBkZWZpbml0aW9uLnRyYW5zZm9ybShkZWZpbml0aW9uLmF0dHJpYnV0ZXMgfHwge30sIHByb3ApLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgZGVmaW5pdGlvbi5zcGFjZVxuICAgICAgKVxuXG4gICAgICBpZiAoXG4gICAgICAgIGRlZmluaXRpb24ubXVzdFVzZVByb3BlcnR5ICYmXG4gICAgICAgIGRlZmluaXRpb24ubXVzdFVzZVByb3BlcnR5LmluY2x1ZGVzKHByb3ApXG4gICAgICApIHtcbiAgICAgICAgaW5mby5tdXN0VXNlUHJvcGVydHkgPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIHByb3BlcnR5W3Byb3BdID0gaW5mb1xuXG4gICAgICBub3JtYWxbbm9ybWFsaXplKHByb3ApXSA9IHByb3BcbiAgICAgIG5vcm1hbFtub3JtYWxpemUoaW5mby5hdHRyaWJ1dGUpXSA9IHByb3BcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNjaGVtYShwcm9wZXJ0eSwgbm9ybWFsLCBkZWZpbml0aW9uLnNwYWNlKVxufVxuIiwiaW1wb3J0IHtJbmZvfSBmcm9tICcuL2luZm8uanMnXG5pbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuL3R5cGVzLmpzJ1xuXG4vKiogQHR5cGUge0FycmF5PGtleW9mIHR5cGVzPn0gKi9cbi8vIEB0cy1leHBlY3QtZXJyb3I6IGh1c2guXG5jb25zdCBjaGVja3MgPSBPYmplY3Qua2V5cyh0eXBlcylcblxuZXhwb3J0IGNsYXNzIERlZmluZWRJbmZvIGV4dGVuZHMgSW5mbyB7XG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGVcbiAgICogQHBhcmFtIHtudW1iZXJ8bnVsbH0gW21hc2tdXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbc3BhY2VdXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm9wZXJ0eSwgYXR0cmlidXRlLCBtYXNrLCBzcGFjZSkge1xuICAgIGxldCBpbmRleCA9IC0xXG5cbiAgICBzdXBlcihwcm9wZXJ0eSwgYXR0cmlidXRlKVxuXG4gICAgbWFyayh0aGlzLCAnc3BhY2UnLCBzcGFjZSlcblxuICAgIGlmICh0eXBlb2YgbWFzayA9PT0gJ251bWJlcicpIHtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgY2hlY2tzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBjaGVjayA9IGNoZWNrc1tpbmRleF1cbiAgICAgICAgbWFyayh0aGlzLCBjaGVja3NbaW5kZXhdLCAobWFzayAmIHR5cGVzW2NoZWNrXSkgPT09IHR5cGVzW2NoZWNrXSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuRGVmaW5lZEluZm8ucHJvdG90eXBlLmRlZmluZWQgPSB0cnVlXG5cbi8qKlxuICogQHBhcmFtIHtEZWZpbmVkSW5mb30gdmFsdWVzXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcGFyYW0ge3Vua25vd259IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIG1hcmsodmFsdWVzLCBrZXksIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGFzc3VtZSBgdmFsdWVgIG1hdGNoZXMgdGhlIGV4cGVjdGVkIHZhbHVlIG9mIGBrZXlgLlxuICAgIHZhbHVlc1trZXldID0gdmFsdWVcbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIEluZm8ge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0cmlidXRlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm9wZXJ0eSwgYXR0cmlidXRlKSB7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpcy5wcm9wZXJ0eSA9IHByb3BlcnR5XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpcy5hdHRyaWJ1dGUgPSBhdHRyaWJ1dGVcbiAgfVxufVxuXG4vKiogQHR5cGUge3N0cmluZ3xudWxsfSAqL1xuSW5mby5wcm90b3R5cGUuc3BhY2UgPSBudWxsXG5JbmZvLnByb3RvdHlwZS5ib29sZWFuID0gZmFsc2VcbkluZm8ucHJvdG90eXBlLmJvb2xlYW5pc2ggPSBmYWxzZVxuSW5mby5wcm90b3R5cGUub3ZlcmxvYWRlZEJvb2xlYW4gPSBmYWxzZVxuSW5mby5wcm90b3R5cGUubnVtYmVyID0gZmFsc2VcbkluZm8ucHJvdG90eXBlLmNvbW1hU2VwYXJhdGVkID0gZmFsc2VcbkluZm8ucHJvdG90eXBlLnNwYWNlU2VwYXJhdGVkID0gZmFsc2VcbkluZm8ucHJvdG90eXBlLmNvbW1hT3JTcGFjZVNlcGFyYXRlZCA9IGZhbHNlXG5JbmZvLnByb3RvdHlwZS5tdXN0VXNlUHJvcGVydHkgPSBmYWxzZVxuSW5mby5wcm90b3R5cGUuZGVmaW5lZCA9IGZhbHNlXG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vc2NoZW1hLmpzJykuUHJvcGVydGllc30gUHJvcGVydGllc1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi9zY2hlbWEuanMnKS5Ob3JtYWx9IE5vcm1hbFxuICovXG5cbmltcG9ydCB7U2NoZW1hfSBmcm9tICcuL3NjaGVtYS5qcydcblxuLyoqXG4gKiBAcGFyYW0ge1NjaGVtYVtdfSBkZWZpbml0aW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IFtzcGFjZV1cbiAqIEByZXR1cm5zIHtTY2hlbWF9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZShkZWZpbml0aW9ucywgc3BhY2UpIHtcbiAgLyoqIEB0eXBlIHtQcm9wZXJ0aWVzfSAqL1xuICBjb25zdCBwcm9wZXJ0eSA9IHt9XG4gIC8qKiBAdHlwZSB7Tm9ybWFsfSAqL1xuICBjb25zdCBub3JtYWwgPSB7fVxuICBsZXQgaW5kZXggPSAtMVxuXG4gIHdoaWxlICgrK2luZGV4IDwgZGVmaW5pdGlvbnMubGVuZ3RoKSB7XG4gICAgT2JqZWN0LmFzc2lnbihwcm9wZXJ0eSwgZGVmaW5pdGlvbnNbaW5kZXhdLnByb3BlcnR5KVxuICAgIE9iamVjdC5hc3NpZ24obm9ybWFsLCBkZWZpbml0aW9uc1tpbmRleF0ubm9ybWFsKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTY2hlbWEocHJvcGVydHksIG5vcm1hbCwgc3BhY2UpXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vaW5mby5qcycpLkluZm99IEluZm9cbiAqIEB0eXBlZGVmIHtSZWNvcmQ8c3RyaW5nLCBJbmZvPn0gUHJvcGVydGllc1xuICogQHR5cGVkZWYge1JlY29yZDxzdHJpbmcsIHN0cmluZz59IE5vcm1hbFxuICovXG5cbmV4cG9ydCBjbGFzcyBTY2hlbWEge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7UHJvcGVydGllc30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtOb3JtYWx9IG5vcm1hbFxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3NwYWNlXVxuICAgKi9cbiAgY29uc3RydWN0b3IocHJvcGVydHksIG5vcm1hbCwgc3BhY2UpIHtcbiAgICB0aGlzLnByb3BlcnR5ID0gcHJvcGVydHlcbiAgICB0aGlzLm5vcm1hbCA9IG5vcm1hbFxuICAgIGlmIChzcGFjZSkge1xuICAgICAgdGhpcy5zcGFjZSA9IHNwYWNlXG4gICAgfVxuICB9XG59XG5cbi8qKiBAdHlwZSB7UHJvcGVydGllc30gKi9cblNjaGVtYS5wcm90b3R5cGUucHJvcGVydHkgPSB7fVxuLyoqIEB0eXBlIHtOb3JtYWx9ICovXG5TY2hlbWEucHJvdG90eXBlLm5vcm1hbCA9IHt9XG4vKiogQHR5cGUge3N0cmluZ3xudWxsfSAqL1xuU2NoZW1hLnByb3RvdHlwZS5zcGFjZSA9IG51bGxcbiIsImxldCBwb3dlcnMgPSAwXG5cbmV4cG9ydCBjb25zdCBib29sZWFuID0gaW5jcmVtZW50KClcbmV4cG9ydCBjb25zdCBib29sZWFuaXNoID0gaW5jcmVtZW50KClcbmV4cG9ydCBjb25zdCBvdmVybG9hZGVkQm9vbGVhbiA9IGluY3JlbWVudCgpXG5leHBvcnQgY29uc3QgbnVtYmVyID0gaW5jcmVtZW50KClcbmV4cG9ydCBjb25zdCBzcGFjZVNlcGFyYXRlZCA9IGluY3JlbWVudCgpXG5leHBvcnQgY29uc3QgY29tbWFTZXBhcmF0ZWQgPSBpbmNyZW1lbnQoKVxuZXhwb3J0IGNvbnN0IGNvbW1hT3JTcGFjZVNlcGFyYXRlZCA9IGluY3JlbWVudCgpXG5cbmZ1bmN0aW9uIGluY3JlbWVudCgpIHtcbiAgcmV0dXJuIDIgKiogKytwb3dlcnNcbn1cbiIsImltcG9ydCB7Y3JlYXRlfSBmcm9tICcuL3V0aWwvY3JlYXRlLmpzJ1xuXG5leHBvcnQgY29uc3QgeGxpbmsgPSBjcmVhdGUoe1xuICBzcGFjZTogJ3hsaW5rJyxcbiAgdHJhbnNmb3JtKF8sIHByb3ApIHtcbiAgICByZXR1cm4gJ3hsaW5rOicgKyBwcm9wLnNsaWNlKDUpLnRvTG93ZXJDYXNlKClcbiAgfSxcbiAgcHJvcGVydGllczoge1xuICAgIHhMaW5rQWN0dWF0ZTogbnVsbCxcbiAgICB4TGlua0FyY1JvbGU6IG51bGwsXG4gICAgeExpbmtIcmVmOiBudWxsLFxuICAgIHhMaW5rUm9sZTogbnVsbCxcbiAgICB4TGlua1Nob3c6IG51bGwsXG4gICAgeExpbmtUaXRsZTogbnVsbCxcbiAgICB4TGlua1R5cGU6IG51bGxcbiAgfVxufSlcbiIsImltcG9ydCB7Y3JlYXRlfSBmcm9tICcuL3V0aWwvY3JlYXRlLmpzJ1xuXG5leHBvcnQgY29uc3QgeG1sID0gY3JlYXRlKHtcbiAgc3BhY2U6ICd4bWwnLFxuICB0cmFuc2Zvcm0oXywgcHJvcCkge1xuICAgIHJldHVybiAneG1sOicgKyBwcm9wLnNsaWNlKDMpLnRvTG93ZXJDYXNlKClcbiAgfSxcbiAgcHJvcGVydGllczoge3htbExhbmc6IG51bGwsIHhtbEJhc2U6IG51bGwsIHhtbFNwYWNlOiBudWxsfVxufSlcbiIsImltcG9ydCB7Y3JlYXRlfSBmcm9tICcuL3V0aWwvY3JlYXRlLmpzJ1xuaW1wb3J0IHtjYXNlSW5zZW5zaXRpdmVUcmFuc2Zvcm19IGZyb20gJy4vdXRpbC9jYXNlLWluc2Vuc2l0aXZlLXRyYW5zZm9ybS5qcydcblxuZXhwb3J0IGNvbnN0IHhtbG5zID0gY3JlYXRlKHtcbiAgc3BhY2U6ICd4bWxucycsXG4gIGF0dHJpYnV0ZXM6IHt4bWxuc3hsaW5rOiAneG1sbnM6eGxpbmsnfSxcbiAgdHJhbnNmb3JtOiBjYXNlSW5zZW5zaXRpdmVUcmFuc2Zvcm0sXG4gIHByb3BlcnRpZXM6IHt4bWxuczogbnVsbCwgeG1sbnNYTGluazogbnVsbH1cbn0pXG4iLCIvKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdyZWFjdCcpLkNvbXBvbmVudFR5cGU8VD59IENvbXBvbmVudFR5cGU8VD5cbiAqL1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdyZWFjdCcpLkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjxUPn0gQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPFQ+XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdyZWFjdCcpLlJlYWN0Tm9kZX0gUmVhY3ROb2RlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLlBvc2l0aW9ufSBQb3NpdGlvblxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnR9IEVsZW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5FbGVtZW50Q29udGVudH0gRWxlbWVudENvbnRlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Sb290fSBSb290XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuVGV4dH0gVGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkNvbW1lbnR9IENvbW1lbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Eb2NUeXBlfSBEb2N0eXBlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdwcm9wZXJ0eS1pbmZvcm1hdGlvbicpLkluZm99IEluZm9cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3Byb3BlcnR5LWluZm9ybWF0aW9uJykuU2NoZW1hfSBTY2hlbWFcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vY29tcGxleC10eXBlcy5qcycpLlJlYWN0TWFya2Rvd25Qcm9wc30gUmVhY3RNYXJrZG93blByb3BzXG4gKlxuICogQHR5cGVkZWYgUmF3XG4gKiBAcHJvcGVydHkgeydyYXcnfSB0eXBlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdmFsdWVcbiAqXG4gKiBAdHlwZWRlZiBDb250ZXh0XG4gKiBAcHJvcGVydHkge09wdGlvbnN9IG9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7U2NoZW1hfSBzY2hlbWFcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsaXN0RGVwdGhcbiAqXG4gKiBAY2FsbGJhY2sgVHJhbnNmb3JtTGlua1xuICogQHBhcmFtIHtzdHJpbmd9IGhyZWZcbiAqIEBwYXJhbSB7QXJyYXk8RWxlbWVudENvbnRlbnQ+fSBjaGlsZHJlblxuICogQHBhcmFtIHtzdHJpbmc/fSB0aXRsZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqXG4gKiBAY2FsbGJhY2sgVHJhbnNmb3JtSW1hZ2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBzcmNcbiAqIEBwYXJhbSB7c3RyaW5nfSBhbHRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdGl0bGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKlxuICogQHR5cGVkZWYge2ltcG9ydCgncmVhY3QnKS5IVE1MQXR0cmlidXRlQW5jaG9yVGFyZ2V0fSBUcmFuc2Zvcm1MaW5rVGFyZ2V0VHlwZVxuICpcbiAqIEBjYWxsYmFjayBUcmFuc2Zvcm1MaW5rVGFyZ2V0XG4gKiBAcGFyYW0ge3N0cmluZ30gaHJlZlxuICogQHBhcmFtIHtBcnJheTxFbGVtZW50Q29udGVudD59IGNoaWxkcmVuXG4gKiBAcGFyYW0ge3N0cmluZz99IHRpdGxlXG4gKiBAcmV0dXJucyB7VHJhbnNmb3JtTGlua1RhcmdldFR5cGV8dW5kZWZpbmVkfVxuICpcbiAqIEB0eXBlZGVmIHtrZXlvZiBKU1guSW50cmluc2ljRWxlbWVudHN9IFJlYWN0TWFya2Rvd25OYW1lc1xuICpcbiAqIFRvIGRvOiBpcyBgZGF0YS1zb3VyY2Vwb3NgIHR5cGVhYmxlP1xuICpcbiAqIEB0eXBlZGVmIHtDb21wb25lbnRQcm9wc1dpdGhvdXRSZWY8J2NvZGUnPiAmIFJlYWN0TWFya2Rvd25Qcm9wcyAmIHtpbmxpbmU/OiBib29sZWFufX0gQ29kZVByb3BzXG4gKiBAdHlwZWRlZiB7Q29tcG9uZW50UHJvcHNXaXRob3V0UmVmPCdoMSc+ICYgUmVhY3RNYXJrZG93blByb3BzICYge2xldmVsOiBudW1iZXJ9fSBIZWFkaW5nUHJvcHNcbiAqIEB0eXBlZGVmIHtDb21wb25lbnRQcm9wc1dpdGhvdXRSZWY8J2xpJz4gJiBSZWFjdE1hcmtkb3duUHJvcHMgJiB7Y2hlY2tlZDogYm9vbGVhbnxudWxsLCBpbmRleDogbnVtYmVyLCBvcmRlcmVkOiBib29sZWFufX0gTGlQcm9wc1xuICogQHR5cGVkZWYge0NvbXBvbmVudFByb3BzV2l0aG91dFJlZjwnb2wnPiAmIFJlYWN0TWFya2Rvd25Qcm9wcyAmIHtkZXB0aDogbnVtYmVyLCBvcmRlcmVkOiB0cnVlfX0gT3JkZXJlZExpc3RQcm9wc1xuICogQHR5cGVkZWYge0NvbXBvbmVudFByb3BzV2l0aG91dFJlZjwndGQnPiAmIFJlYWN0TWFya2Rvd25Qcm9wcyAmIHtzdHlsZT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+LCBpc0hlYWRlcjogZmFsc2V9fSBUYWJsZURhdGFDZWxsUHJvcHNcbiAqIEB0eXBlZGVmIHtDb21wb25lbnRQcm9wc1dpdGhvdXRSZWY8J3RoJz4gJiBSZWFjdE1hcmtkb3duUHJvcHMgJiB7c3R5bGU/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiwgaXNIZWFkZXI6IHRydWV9fSBUYWJsZUhlYWRlckNlbGxQcm9wc1xuICogQHR5cGVkZWYge0NvbXBvbmVudFByb3BzV2l0aG91dFJlZjwndHInPiAmIFJlYWN0TWFya2Rvd25Qcm9wcyAmIHtpc0hlYWRlcjogYm9vbGVhbn19IFRhYmxlUm93UHJvcHNcbiAqIEB0eXBlZGVmIHtDb21wb25lbnRQcm9wc1dpdGhvdXRSZWY8J3VsJz4gJiBSZWFjdE1hcmtkb3duUHJvcHMgJiB7ZGVwdGg6IG51bWJlciwgb3JkZXJlZDogZmFsc2V9fSBVbm9yZGVyZWRMaXN0UHJvcHNcbiAqXG4gKiBAdHlwZWRlZiB7Q29tcG9uZW50VHlwZTxDb2RlUHJvcHM+fSBDb2RlQ29tcG9uZW50XG4gKiBAdHlwZWRlZiB7Q29tcG9uZW50VHlwZTxIZWFkaW5nUHJvcHM+fSBIZWFkaW5nQ29tcG9uZW50XG4gKiBAdHlwZWRlZiB7Q29tcG9uZW50VHlwZTxMaVByb3BzPn0gTGlDb21wb25lbnRcbiAqIEB0eXBlZGVmIHtDb21wb25lbnRUeXBlPE9yZGVyZWRMaXN0UHJvcHM+fSBPcmRlcmVkTGlzdENvbXBvbmVudFxuICogQHR5cGVkZWYge0NvbXBvbmVudFR5cGU8VGFibGVEYXRhQ2VsbFByb3BzPn0gVGFibGVEYXRhQ2VsbENvbXBvbmVudFxuICogQHR5cGVkZWYge0NvbXBvbmVudFR5cGU8VGFibGVIZWFkZXJDZWxsUHJvcHM+fSBUYWJsZUhlYWRlckNlbGxDb21wb25lbnRcbiAqIEB0eXBlZGVmIHtDb21wb25lbnRUeXBlPFRhYmxlUm93UHJvcHM+fSBUYWJsZVJvd0NvbXBvbmVudFxuICogQHR5cGVkZWYge0NvbXBvbmVudFR5cGU8VW5vcmRlcmVkTGlzdFByb3BzPn0gVW5vcmRlcmVkTGlzdENvbXBvbmVudFxuICpcbiAqIEB0eXBlZGVmIFNwZWNpYWxDb21wb25lbnRzXG4gKiBAcHJvcGVydHkge0NvZGVDb21wb25lbnR8UmVhY3RNYXJrZG93bk5hbWVzfSBjb2RlXG4gKiBAcHJvcGVydHkge0hlYWRpbmdDb21wb25lbnR8UmVhY3RNYXJrZG93bk5hbWVzfSBoMVxuICogQHByb3BlcnR5IHtIZWFkaW5nQ29tcG9uZW50fFJlYWN0TWFya2Rvd25OYW1lc30gaDJcbiAqIEBwcm9wZXJ0eSB7SGVhZGluZ0NvbXBvbmVudHxSZWFjdE1hcmtkb3duTmFtZXN9IGgzXG4gKiBAcHJvcGVydHkge0hlYWRpbmdDb21wb25lbnR8UmVhY3RNYXJrZG93bk5hbWVzfSBoNFxuICogQHByb3BlcnR5IHtIZWFkaW5nQ29tcG9uZW50fFJlYWN0TWFya2Rvd25OYW1lc30gaDVcbiAqIEBwcm9wZXJ0eSB7SGVhZGluZ0NvbXBvbmVudHxSZWFjdE1hcmtkb3duTmFtZXN9IGg2XG4gKiBAcHJvcGVydHkge0xpQ29tcG9uZW50fFJlYWN0TWFya2Rvd25OYW1lc30gbGlcbiAqIEBwcm9wZXJ0eSB7T3JkZXJlZExpc3RDb21wb25lbnR8UmVhY3RNYXJrZG93bk5hbWVzfSBvbFxuICogQHByb3BlcnR5IHtUYWJsZURhdGFDZWxsQ29tcG9uZW50fFJlYWN0TWFya2Rvd25OYW1lc30gdGRcbiAqIEBwcm9wZXJ0eSB7VGFibGVIZWFkZXJDZWxsQ29tcG9uZW50fFJlYWN0TWFya2Rvd25OYW1lc30gdGhcbiAqIEBwcm9wZXJ0eSB7VGFibGVSb3dDb21wb25lbnR8UmVhY3RNYXJrZG93bk5hbWVzfSB0clxuICogQHByb3BlcnR5IHtVbm9yZGVyZWRMaXN0Q29tcG9uZW50fFJlYWN0TWFya2Rvd25OYW1lc30gdWxcbiAqXG4gKiBAdHlwZWRlZiB7UGFydGlhbDxPbWl0PGltcG9ydCgnLi9jb21wbGV4LXR5cGVzLmpzJykuTm9ybWFsQ29tcG9uZW50cywga2V5b2YgU3BlY2lhbENvbXBvbmVudHM+ICYgU3BlY2lhbENvbXBvbmVudHM+fSBDb21wb25lbnRzXG4gKlxuICogQHR5cGVkZWYgT3B0aW9uc1xuICogQHByb3BlcnR5IHtib29sZWFufSBbc291cmNlUG9zPWZhbHNlXVxuICogQHByb3BlcnR5IHtib29sZWFufSBbcmF3U291cmNlUG9zPWZhbHNlXVxuICogQHByb3BlcnR5IHtib29sZWFufSBbc2tpcEh0bWw9ZmFsc2VdXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtpbmNsdWRlRWxlbWVudEluZGV4PWZhbHNlXVxuICogQHByb3BlcnR5IHtudWxsfGZhbHNlfFRyYW5zZm9ybUxpbmt9IFt0cmFuc2Zvcm1MaW5rVXJpXVxuICogQHByb3BlcnR5IHtUcmFuc2Zvcm1JbWFnZX0gW3RyYW5zZm9ybUltYWdlVXJpXVxuICogQHByb3BlcnR5IHtUcmFuc2Zvcm1MaW5rVGFyZ2V0VHlwZXxUcmFuc2Zvcm1MaW5rVGFyZ2V0fSBbbGlua1RhcmdldF1cbiAqIEBwcm9wZXJ0eSB7Q29tcG9uZW50c30gW2NvbXBvbmVudHNdXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFJlYWN0SXMgZnJvbSAncmVhY3QtaXMnXG5pbXBvcnQge3doaXRlc3BhY2V9IGZyb20gJ2hhc3QtdXRpbC13aGl0ZXNwYWNlJ1xuaW1wb3J0IHtzdmcsIGZpbmQsIGhhc3RUb1JlYWN0fSBmcm9tICdwcm9wZXJ0eS1pbmZvcm1hdGlvbidcbmltcG9ydCB7c3RyaW5naWZ5IGFzIHNwYWNlc30gZnJvbSAnc3BhY2Utc2VwYXJhdGVkLXRva2VucydcbmltcG9ydCB7c3RyaW5naWZ5IGFzIGNvbW1hc30gZnJvbSAnY29tbWEtc2VwYXJhdGVkLXRva2VucydcbmltcG9ydCBzdHlsZSBmcm9tICdzdHlsZS10by1vYmplY3QnXG5pbXBvcnQge3VyaVRyYW5zZm9ybWVyfSBmcm9tICcuL3VyaS10cmFuc2Zvcm1lci5qcydcblxuY29uc3Qgb3duID0ge30uaGFzT3duUHJvcGVydHlcblxuLy8gVGhlIHRhYmxlLXJlbGF0ZWQgZWxlbWVudHMgdGhhdCBtdXN0IG5vdCBjb250YWluIHdoaXRlc3BhY2UgdGV4dCBhY2NvcmRpbmdcbi8vIHRvIFJlYWN0LlxuY29uc3QgdGFibGVFbGVtZW50cyA9IG5ldyBTZXQoWyd0YWJsZScsICd0aGVhZCcsICd0Ym9keScsICd0Zm9vdCcsICd0ciddKVxuXG4vKipcbiAqIEBwYXJhbSB7Q29udGV4dH0gY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fFJvb3R9IG5vZGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoaWxkcmVuVG9SZWFjdChjb250ZXh0LCBub2RlKSB7XG4gIC8qKiBAdHlwZSB7QXJyYXk8UmVhY3ROb2RlPn0gKi9cbiAgY29uc3QgY2hpbGRyZW4gPSBbXVxuICBsZXQgY2hpbGRJbmRleCA9IC0xXG4gIC8qKiBAdHlwZSB7Q29tbWVudHxEb2N0eXBlfEVsZW1lbnR8UmF3fFRleHR9ICovXG4gIGxldCBjaGlsZFxuXG4gIHdoaWxlICgrK2NoaWxkSW5kZXggPCBub2RlLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgIGNoaWxkID0gbm9kZS5jaGlsZHJlbltjaGlsZEluZGV4XVxuXG4gICAgaWYgKGNoaWxkLnR5cGUgPT09ICdlbGVtZW50Jykge1xuICAgICAgY2hpbGRyZW4ucHVzaCh0b1JlYWN0KGNvbnRleHQsIGNoaWxkLCBjaGlsZEluZGV4LCBub2RlKSlcbiAgICB9IGVsc2UgaWYgKGNoaWxkLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgLy8gQ3VycmVudGx5LCBhIHdhcm5pbmcgaXMgdHJpZ2dlcmVkIGJ5IHJlYWN0IGZvciAqYW55KiB3aGl0ZSBzcGFjZSBpblxuICAgICAgLy8gdGFibGVzLlxuICAgICAgLy8gU28gd2UgZHJvcCBpdC5cbiAgICAgIC8vIFNlZTogPGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzcwODE+LlxuICAgICAgLy8gU2VlOiA8aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvNzUxNT4uXG4gICAgICAvLyBTZWU6IDxodHRwczovL2dpdGh1Yi5jb20vcmVtYXJranMvcmVtYXJrLXJlYWN0L2lzc3Vlcy82ND4uXG4gICAgICAvLyBTZWU6IDxodHRwczovL2dpdGh1Yi5jb20vcmVtYXJranMvcmVhY3QtbWFya2Rvd24vaXNzdWVzLzU3Nj4uXG4gICAgICBpZiAoXG4gICAgICAgIG5vZGUudHlwZSAhPT0gJ2VsZW1lbnQnIHx8XG4gICAgICAgICF0YWJsZUVsZW1lbnRzLmhhcyhub2RlLnRhZ05hbWUpIHx8XG4gICAgICAgICF3aGl0ZXNwYWNlKGNoaWxkKVxuICAgICAgKSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGQudmFsdWUpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjaGlsZC50eXBlID09PSAncmF3JyAmJiAhY29udGV4dC5vcHRpb25zLnNraXBIdG1sKSB7XG4gICAgICAvLyBEZWZhdWx0IGJlaGF2aW9yIGlzIHRvIHNob3cgKGVuY29kZWQpIEhUTUwuXG4gICAgICBjaGlsZHJlbi5wdXNoKGNoaWxkLnZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjaGlsZHJlblxufVxuXG4vKipcbiAqIEBwYXJhbSB7Q29udGV4dH0gY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7RWxlbWVudHxSb290fSBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gdG9SZWFjdChjb250ZXh0LCBub2RlLCBpbmRleCwgcGFyZW50KSB7XG4gIGNvbnN0IG9wdGlvbnMgPSBjb250ZXh0Lm9wdGlvbnNcbiAgY29uc3QgdHJhbnNmb3JtID1cbiAgICBvcHRpb25zLnRyYW5zZm9ybUxpbmtVcmkgPT09IHVuZGVmaW5lZFxuICAgICAgPyB1cmlUcmFuc2Zvcm1lclxuICAgICAgOiBvcHRpb25zLnRyYW5zZm9ybUxpbmtVcmlcbiAgY29uc3QgcGFyZW50U2NoZW1hID0gY29udGV4dC5zY2hlbWFcbiAgLyoqIEB0eXBlIHtSZWFjdE1hcmtkb3duTmFtZXN9ICovXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgYXNzdW1lIGEga25vd24gSFRNTC9TVkcgZWxlbWVudC5cbiAgY29uc3QgbmFtZSA9IG5vZGUudGFnTmFtZVxuICAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSAqL1xuICBjb25zdCBwcm9wZXJ0aWVzID0ge31cbiAgbGV0IHNjaGVtYSA9IHBhcmVudFNjaGVtYVxuICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgbGV0IHByb3BlcnR5XG5cbiAgaWYgKHBhcmVudFNjaGVtYS5zcGFjZSA9PT0gJ2h0bWwnICYmIG5hbWUgPT09ICdzdmcnKSB7XG4gICAgc2NoZW1hID0gc3ZnXG4gICAgY29udGV4dC5zY2hlbWEgPSBzY2hlbWFcbiAgfVxuXG4gIGlmIChub2RlLnByb3BlcnRpZXMpIHtcbiAgICBmb3IgKHByb3BlcnR5IGluIG5vZGUucHJvcGVydGllcykge1xuICAgICAgaWYgKG93bi5jYWxsKG5vZGUucHJvcGVydGllcywgcHJvcGVydHkpKSB7XG4gICAgICAgIGFkZFByb3BlcnR5KHByb3BlcnRpZXMsIHByb3BlcnR5LCBub2RlLnByb3BlcnRpZXNbcHJvcGVydHldLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChuYW1lID09PSAnb2wnIHx8IG5hbWUgPT09ICd1bCcpIHtcbiAgICBjb250ZXh0Lmxpc3REZXB0aCsrXG4gIH1cblxuICBjb25zdCBjaGlsZHJlbiA9IGNoaWxkcmVuVG9SZWFjdChjb250ZXh0LCBub2RlKVxuXG4gIGlmIChuYW1lID09PSAnb2wnIHx8IG5hbWUgPT09ICd1bCcpIHtcbiAgICBjb250ZXh0Lmxpc3REZXB0aC0tXG4gIH1cblxuICAvLyBSZXN0b3JlIHBhcmVudCBzY2hlbWEuXG4gIGNvbnRleHQuc2NoZW1hID0gcGFyZW50U2NoZW1hXG5cbiAgLy8gTm9kZXMgY3JlYXRlZCBieSBwbHVnaW5zIGRvIG5vdCBoYXZlIHBvc2l0aW9uYWwgaW5mbywgaW4gd2hpY2ggY2FzZSB3ZSB1c2VcbiAgLy8gYW4gb2JqZWN0IHRoYXQgbWF0Y2hlcyB0aGUgcG9zaXRpb24gaW50ZXJmYWNlLlxuICBjb25zdCBwb3NpdGlvbiA9IG5vZGUucG9zaXRpb24gfHwge1xuICAgIHN0YXJ0OiB7bGluZTogbnVsbCwgY29sdW1uOiBudWxsLCBvZmZzZXQ6IG51bGx9LFxuICAgIGVuZDoge2xpbmU6IG51bGwsIGNvbHVtbjogbnVsbCwgb2Zmc2V0OiBudWxsfVxuICB9XG4gIGNvbnN0IGNvbXBvbmVudCA9XG4gICAgb3B0aW9ucy5jb21wb25lbnRzICYmIG93bi5jYWxsKG9wdGlvbnMuY29tcG9uZW50cywgbmFtZSlcbiAgICAgID8gb3B0aW9ucy5jb21wb25lbnRzW25hbWVdXG4gICAgICA6IG5hbWVcbiAgY29uc3QgYmFzaWMgPSB0eXBlb2YgY29tcG9uZW50ID09PSAnc3RyaW5nJyB8fCBjb21wb25lbnQgPT09IFJlYWN0LkZyYWdtZW50XG5cbiAgaWYgKCFSZWFjdElzLmlzVmFsaWRFbGVtZW50VHlwZShjb21wb25lbnQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIGBDb21wb25lbnQgZm9yIG5hbWUgXFxgJHtuYW1lfVxcYCBub3QgZGVmaW5lZCBvciBpcyBub3QgcmVuZGVyYWJsZWBcbiAgICApXG4gIH1cblxuICBwcm9wZXJ0aWVzLmtleSA9IFtcbiAgICBuYW1lLFxuICAgIHBvc2l0aW9uLnN0YXJ0LmxpbmUsXG4gICAgcG9zaXRpb24uc3RhcnQuY29sdW1uLFxuICAgIGluZGV4XG4gIF0uam9pbignLScpXG5cbiAgaWYgKG5hbWUgPT09ICdhJyAmJiBvcHRpb25zLmxpbmtUYXJnZXQpIHtcbiAgICBwcm9wZXJ0aWVzLnRhcmdldCA9XG4gICAgICB0eXBlb2Ygb3B0aW9ucy5saW5rVGFyZ2V0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gb3B0aW9ucy5saW5rVGFyZ2V0KFxuICAgICAgICAgICAgU3RyaW5nKHByb3BlcnRpZXMuaHJlZiB8fCAnJyksXG4gICAgICAgICAgICBub2RlLmNoaWxkcmVuLFxuICAgICAgICAgICAgdHlwZW9mIHByb3BlcnRpZXMudGl0bGUgPT09ICdzdHJpbmcnID8gcHJvcGVydGllcy50aXRsZSA6IG51bGxcbiAgICAgICAgICApXG4gICAgICAgIDogb3B0aW9ucy5saW5rVGFyZ2V0XG4gIH1cblxuICBpZiAobmFtZSA9PT0gJ2EnICYmIHRyYW5zZm9ybSkge1xuICAgIHByb3BlcnRpZXMuaHJlZiA9IHRyYW5zZm9ybShcbiAgICAgIFN0cmluZyhwcm9wZXJ0aWVzLmhyZWYgfHwgJycpLFxuICAgICAgbm9kZS5jaGlsZHJlbixcbiAgICAgIHR5cGVvZiBwcm9wZXJ0aWVzLnRpdGxlID09PSAnc3RyaW5nJyA/IHByb3BlcnRpZXMudGl0bGUgOiBudWxsXG4gICAgKVxuICB9XG5cbiAgaWYgKFxuICAgICFiYXNpYyAmJlxuICAgIG5hbWUgPT09ICdjb2RlJyAmJlxuICAgIHBhcmVudC50eXBlID09PSAnZWxlbWVudCcgJiZcbiAgICBwYXJlbnQudGFnTmFtZSAhPT0gJ3ByZSdcbiAgKSB7XG4gICAgcHJvcGVydGllcy5pbmxpbmUgPSB0cnVlXG4gIH1cblxuICBpZiAoXG4gICAgIWJhc2ljICYmXG4gICAgKG5hbWUgPT09ICdoMScgfHxcbiAgICAgIG5hbWUgPT09ICdoMicgfHxcbiAgICAgIG5hbWUgPT09ICdoMycgfHxcbiAgICAgIG5hbWUgPT09ICdoNCcgfHxcbiAgICAgIG5hbWUgPT09ICdoNScgfHxcbiAgICAgIG5hbWUgPT09ICdoNicpXG4gICkge1xuICAgIHByb3BlcnRpZXMubGV2ZWwgPSBOdW1iZXIucGFyc2VJbnQobmFtZS5jaGFyQXQoMSksIDEwKVxuICB9XG5cbiAgaWYgKG5hbWUgPT09ICdpbWcnICYmIG9wdGlvbnMudHJhbnNmb3JtSW1hZ2VVcmkpIHtcbiAgICBwcm9wZXJ0aWVzLnNyYyA9IG9wdGlvbnMudHJhbnNmb3JtSW1hZ2VVcmkoXG4gICAgICBTdHJpbmcocHJvcGVydGllcy5zcmMgfHwgJycpLFxuICAgICAgU3RyaW5nKHByb3BlcnRpZXMuYWx0IHx8ICcnKSxcbiAgICAgIHR5cGVvZiBwcm9wZXJ0aWVzLnRpdGxlID09PSAnc3RyaW5nJyA/IHByb3BlcnRpZXMudGl0bGUgOiBudWxsXG4gICAgKVxuICB9XG5cbiAgaWYgKCFiYXNpYyAmJiBuYW1lID09PSAnbGknICYmIHBhcmVudC50eXBlID09PSAnZWxlbWVudCcpIHtcbiAgICBjb25zdCBpbnB1dCA9IGdldElucHV0RWxlbWVudChub2RlKVxuICAgIHByb3BlcnRpZXMuY2hlY2tlZCA9XG4gICAgICBpbnB1dCAmJiBpbnB1dC5wcm9wZXJ0aWVzID8gQm9vbGVhbihpbnB1dC5wcm9wZXJ0aWVzLmNoZWNrZWQpIDogbnVsbFxuICAgIHByb3BlcnRpZXMuaW5kZXggPSBnZXRFbGVtZW50c0JlZm9yZUNvdW50KHBhcmVudCwgbm9kZSlcbiAgICBwcm9wZXJ0aWVzLm9yZGVyZWQgPSBwYXJlbnQudGFnTmFtZSA9PT0gJ29sJ1xuICB9XG5cbiAgaWYgKCFiYXNpYyAmJiAobmFtZSA9PT0gJ29sJyB8fCBuYW1lID09PSAndWwnKSkge1xuICAgIHByb3BlcnRpZXMub3JkZXJlZCA9IG5hbWUgPT09ICdvbCdcbiAgICBwcm9wZXJ0aWVzLmRlcHRoID0gY29udGV4dC5saXN0RGVwdGhcbiAgfVxuXG4gIGlmIChuYW1lID09PSAndGQnIHx8IG5hbWUgPT09ICd0aCcpIHtcbiAgICBpZiAocHJvcGVydGllcy5hbGlnbikge1xuICAgICAgaWYgKCFwcm9wZXJ0aWVzLnN0eWxlKSBwcm9wZXJ0aWVzLnN0eWxlID0ge31cbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYXNzdW1lIGBzdHlsZWAgaXMgYW4gb2JqZWN0XG4gICAgICBwcm9wZXJ0aWVzLnN0eWxlLnRleHRBbGlnbiA9IHByb3BlcnRpZXMuYWxpZ25cbiAgICAgIGRlbGV0ZSBwcm9wZXJ0aWVzLmFsaWduXG4gICAgfVxuXG4gICAgaWYgKCFiYXNpYykge1xuICAgICAgcHJvcGVydGllcy5pc0hlYWRlciA9IG5hbWUgPT09ICd0aCdcbiAgICB9XG4gIH1cblxuICBpZiAoIWJhc2ljICYmIG5hbWUgPT09ICd0cicgJiYgcGFyZW50LnR5cGUgPT09ICdlbGVtZW50Jykge1xuICAgIHByb3BlcnRpZXMuaXNIZWFkZXIgPSBCb29sZWFuKHBhcmVudC50YWdOYW1lID09PSAndGhlYWQnKVxuICB9XG5cbiAgLy8gSWYgYHNvdXJjZVBvc2AgaXMgZ2l2ZW4sIHBhc3Mgc291cmNlIGluZm9ybWF0aW9uIChsaW5lL2NvbHVtbiBpbmZvIGZyb20gbWFya2Rvd24gc291cmNlKS5cbiAgaWYgKG9wdGlvbnMuc291cmNlUG9zKSB7XG4gICAgcHJvcGVydGllc1snZGF0YS1zb3VyY2Vwb3MnXSA9IGZsYXR0ZW5Qb3NpdGlvbihwb3NpdGlvbilcbiAgfVxuXG4gIGlmICghYmFzaWMgJiYgb3B0aW9ucy5yYXdTb3VyY2VQb3MpIHtcbiAgICBwcm9wZXJ0aWVzLnNvdXJjZVBvc2l0aW9uID0gbm9kZS5wb3NpdGlvblxuICB9XG5cbiAgLy8gSWYgYGluY2x1ZGVFbGVtZW50SW5kZXhgIGlzIGdpdmVuLCBwYXNzIG5vZGUgaW5kZXggaW5mbyB0byBjb21wb25lbnRzLlxuICBpZiAoIWJhc2ljICYmIG9wdGlvbnMuaW5jbHVkZUVsZW1lbnRJbmRleCkge1xuICAgIHByb3BlcnRpZXMuaW5kZXggPSBnZXRFbGVtZW50c0JlZm9yZUNvdW50KHBhcmVudCwgbm9kZSlcbiAgICBwcm9wZXJ0aWVzLnNpYmxpbmdDb3VudCA9IGdldEVsZW1lbnRzQmVmb3JlQ291bnQocGFyZW50KVxuICB9XG5cbiAgaWYgKCFiYXNpYykge1xuICAgIHByb3BlcnRpZXMubm9kZSA9IG5vZGVcbiAgfVxuXG4gIC8vIEVuc3VyZSBubyBSZWFjdCB3YXJuaW5ncyBhcmUgZW1pdHRlZCBmb3Igdm9pZCBlbGVtZW50cyB3LyBjaGlsZHJlbi5cbiAgcmV0dXJuIGNoaWxkcmVuLmxlbmd0aCA+IDBcbiAgICA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wZXJ0aWVzLCBjaGlsZHJlbilcbiAgICA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wZXJ0aWVzKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudHxSb290fSBub2RlXG4gKiBAcmV0dXJucyB7RWxlbWVudD99XG4gKi9cbmZ1bmN0aW9uIGdldElucHV0RWxlbWVudChub2RlKSB7XG4gIGxldCBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBub2RlLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgIGNvbnN0IGNoaWxkID0gbm9kZS5jaGlsZHJlbltpbmRleF1cblxuICAgIGlmIChjaGlsZC50eXBlID09PSAnZWxlbWVudCcgJiYgY2hpbGQudGFnTmFtZSA9PT0gJ2lucHV0Jykge1xuICAgICAgcmV0dXJuIGNoaWxkXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR8Um9vdH0gcGFyZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IFtub2RlXVxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gZ2V0RWxlbWVudHNCZWZvcmVDb3VudChwYXJlbnQsIG5vZGUpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgbGV0IGNvdW50ID0gMFxuXG4gIHdoaWxlICgrK2luZGV4IDwgcGFyZW50LmNoaWxkcmVuLmxlbmd0aCkge1xuICAgIGlmIChwYXJlbnQuY2hpbGRyZW5baW5kZXhdID09PSBub2RlKSBicmVha1xuICAgIGlmIChwYXJlbnQuY2hpbGRyZW5baW5kZXhdLnR5cGUgPT09ICdlbGVtZW50JykgY291bnQrK1xuICB9XG5cbiAgcmV0dXJuIGNvdW50XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCB1bmtub3duPn0gcHJvcHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wXG4gKiBAcGFyYW0ge3Vua25vd259IHZhbHVlXG4gKiBAcGFyYW0ge0NvbnRleHR9IGN0eFxuICovXG5mdW5jdGlvbiBhZGRQcm9wZXJ0eShwcm9wcywgcHJvcCwgdmFsdWUsIGN0eCkge1xuICBjb25zdCBpbmZvID0gZmluZChjdHguc2NoZW1hLCBwcm9wKVxuICBsZXQgcmVzdWx0ID0gdmFsdWVcblxuICAvLyBJZ25vcmUgbnVsbGlzaCBhbmQgYE5hTmAgdmFsdWVzLlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmIChyZXN1bHQgPT09IG51bGwgfHwgcmVzdWx0ID09PSB1bmRlZmluZWQgfHwgcmVzdWx0ICE9PSByZXN1bHQpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIEFjY2VwdCBgYXJyYXlgLlxuICAvLyBNb3N0IHByb3BzIGFyZSBzcGFjZS1zZXBhcmF0ZWQuXG4gIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICByZXN1bHQgPSBpbmZvLmNvbW1hU2VwYXJhdGVkID8gY29tbWFzKHJlc3VsdCkgOiBzcGFjZXMocmVzdWx0KVxuICB9XG5cbiAgaWYgKGluZm8ucHJvcGVydHkgPT09ICdzdHlsZScgJiYgdHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSBwYXJzZVN0eWxlKHJlc3VsdClcbiAgfVxuXG4gIGlmIChpbmZvLnNwYWNlICYmIGluZm8ucHJvcGVydHkpIHtcbiAgICBwcm9wc1tcbiAgICAgIG93bi5jYWxsKGhhc3RUb1JlYWN0LCBpbmZvLnByb3BlcnR5KVxuICAgICAgICA/IGhhc3RUb1JlYWN0W2luZm8ucHJvcGVydHldXG4gICAgICAgIDogaW5mby5wcm9wZXJ0eVxuICAgIF0gPSByZXN1bHRcbiAgfSBlbHNlIGlmIChpbmZvLmF0dHJpYnV0ZSkge1xuICAgIHByb3BzW2luZm8uYXR0cmlidXRlXSA9IHJlc3VsdFxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJucyB7UmVjb3JkPHN0cmluZywgc3RyaW5nPn1cbiAqL1xuZnVuY3Rpb24gcGFyc2VTdHlsZSh2YWx1ZSkge1xuICAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIHN0cmluZz59ICovXG4gIGNvbnN0IHJlc3VsdCA9IHt9XG5cbiAgdHJ5IHtcbiAgICBzdHlsZSh2YWx1ZSwgaXRlcmF0b3IpXG4gIH0gY2F0Y2gge1xuICAgIC8vIFNpbGVudC5cbiAgfVxuXG4gIHJldHVybiByZXN1bHRcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZcbiAgICovXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yKG5hbWUsIHYpIHtcbiAgICBjb25zdCBrID0gbmFtZS5zbGljZSgwLCA0KSA9PT0gJy1tcy0nID8gYG1zLSR7bmFtZS5zbGljZSg0KX1gIDogbmFtZVxuICAgIHJlc3VsdFtrLnJlcGxhY2UoLy0oW2Etel0pL2csIHN0eWxlUmVwbGFjZXIpXSA9IHZcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7dW5rbm93bn0gX1xuICogQHBhcmFtIHtzdHJpbmd9ICQxXG4gKi9cbmZ1bmN0aW9uIHN0eWxlUmVwbGFjZXIoXywgJDEpIHtcbiAgcmV0dXJuICQxLnRvVXBwZXJDYXNlKClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1Bvc2l0aW9ufHtzdGFydDoge2xpbmU6IG51bGwsIGNvbHVtbjogbnVsbCwgb2Zmc2V0OiBudWxsfSwgZW5kOiB7bGluZTogbnVsbCwgY29sdW1uOiBudWxsLCBvZmZzZXQ6IG51bGx9fX0gcG9zXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGF0dGVuUG9zaXRpb24ocG9zKSB7XG4gIHJldHVybiBbXG4gICAgcG9zLnN0YXJ0LmxpbmUsXG4gICAgJzonLFxuICAgIHBvcy5zdGFydC5jb2x1bW4sXG4gICAgJy0nLFxuICAgIHBvcy5lbmQubGluZSxcbiAgICAnOicsXG4gICAgcG9zLmVuZC5jb2x1bW5cbiAgXVxuICAgIC5tYXAoU3RyaW5nKVxuICAgIC5qb2luKCcnKVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdyZWFjdCcpLlJlYWN0Tm9kZX0gUmVhY3ROb2RlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdyZWFjdCcpLlJlYWN0RWxlbWVudDx7fT59IFJlYWN0RWxlbWVudFxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pZmllZCcpLlBsdWdnYWJsZUxpc3R9IFBsdWdnYWJsZUxpc3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Sb290fSBSb290XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3JlaHlwZS1maWx0ZXIuanMnKS5PcHRpb25zfSBGaWx0ZXJPcHRpb25zXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2FzdC10by1yZWFjdC5qcycpLk9wdGlvbnN9IFRyYW5zZm9ybU9wdGlvbnNcbiAqXG4gKiBAdHlwZWRlZiBDb3JlT3B0aW9uc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IGNoaWxkcmVuXG4gKlxuICogQHR5cGVkZWYgUGx1Z2luT3B0aW9uc1xuICogQHByb3BlcnR5IHtQbHVnZ2FibGVMaXN0fSBbcmVtYXJrUGx1Z2lucz1bXV1cbiAqIEBwcm9wZXJ0eSB7UGx1Z2dhYmxlTGlzdH0gW3JlaHlwZVBsdWdpbnM9W11dXG4gKiBAcHJvcGVydHkge2ltcG9ydCgncmVtYXJrLXJlaHlwZScpLk9wdGlvbnMgfCB1bmRlZmluZWR9IFtyZW1hcmtSZWh5cGVPcHRpb25zPXt9XVxuICpcbiAqIEB0eXBlZGVmIExheW91dE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY2xhc3NOYW1lXVxuICpcbiAqIEB0eXBlZGVmIHtDb3JlT3B0aW9ucyAmIFBsdWdpbk9wdGlvbnMgJiBMYXlvdXRPcHRpb25zICYgRmlsdGVyT3B0aW9ucyAmIFRyYW5zZm9ybU9wdGlvbnN9IFJlYWN0TWFya2Rvd25PcHRpb25zXG4gKlxuICogQHR5cGVkZWYgRGVwcmVjYXRpb25cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFt0b11cbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQge1ZGaWxlfSBmcm9tICd2ZmlsZSdcbmltcG9ydCB7dW5pZmllZH0gZnJvbSAndW5pZmllZCdcbmltcG9ydCByZW1hcmtQYXJzZSBmcm9tICdyZW1hcmstcGFyc2UnXG5pbXBvcnQgcmVtYXJrUmVoeXBlIGZyb20gJ3JlbWFyay1yZWh5cGUnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQge2h0bWx9IGZyb20gJ3Byb3BlcnR5LWluZm9ybWF0aW9uJ1xuaW1wb3J0IHJlaHlwZUZpbHRlciBmcm9tICcuL3JlaHlwZS1maWx0ZXIuanMnXG5pbXBvcnQge2NoaWxkcmVuVG9SZWFjdH0gZnJvbSAnLi9hc3QtdG8tcmVhY3QuanMnXG5cbmNvbnN0IG93biA9IHt9Lmhhc093blByb3BlcnR5XG5jb25zdCBjaGFuZ2Vsb2cgPVxuICAnaHR0cHM6Ly9naXRodWIuY29tL3JlbWFya2pzL3JlYWN0LW1hcmtkb3duL2Jsb2IvbWFpbi9jaGFuZ2Vsb2cubWQnXG5cbi8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgRGVwcmVjYXRpb24+fSAqL1xuY29uc3QgZGVwcmVjYXRlZCA9IHtcbiAgcGx1Z2luczoge3RvOiAncmVtYXJrUGx1Z2lucycsIGlkOiAnY2hhbmdlLXBsdWdpbnMtdG8tcmVtYXJrcGx1Z2lucyd9LFxuICByZW5kZXJlcnM6IHt0bzogJ2NvbXBvbmVudHMnLCBpZDogJ2NoYW5nZS1yZW5kZXJlcnMtdG8tY29tcG9uZW50cyd9LFxuICBhc3RQbHVnaW5zOiB7aWQ6ICdyZW1vdmUtYnVnZ3ktaHRtbC1pbi1tYXJrZG93bi1wYXJzZXInfSxcbiAgYWxsb3dEYW5nZXJvdXNIdG1sOiB7aWQ6ICdyZW1vdmUtYnVnZ3ktaHRtbC1pbi1tYXJrZG93bi1wYXJzZXInfSxcbiAgZXNjYXBlSHRtbDoge2lkOiAncmVtb3ZlLWJ1Z2d5LWh0bWwtaW4tbWFya2Rvd24tcGFyc2VyJ30sXG4gIHNvdXJjZToge3RvOiAnY2hpbGRyZW4nLCBpZDogJ2NoYW5nZS1zb3VyY2UtdG8tY2hpbGRyZW4nfSxcbiAgYWxsb3dOb2RlOiB7XG4gICAgdG86ICdhbGxvd0VsZW1lbnQnLFxuICAgIGlkOiAncmVwbGFjZS1hbGxvd25vZGUtYWxsb3dlZHR5cGVzLWFuZC1kaXNhbGxvd2VkdHlwZXMnXG4gIH0sXG4gIGFsbG93ZWRUeXBlczoge1xuICAgIHRvOiAnYWxsb3dlZEVsZW1lbnRzJyxcbiAgICBpZDogJ3JlcGxhY2UtYWxsb3dub2RlLWFsbG93ZWR0eXBlcy1hbmQtZGlzYWxsb3dlZHR5cGVzJ1xuICB9LFxuICBkaXNhbGxvd2VkVHlwZXM6IHtcbiAgICB0bzogJ2Rpc2FsbG93ZWRFbGVtZW50cycsXG4gICAgaWQ6ICdyZXBsYWNlLWFsbG93bm9kZS1hbGxvd2VkdHlwZXMtYW5kLWRpc2FsbG93ZWR0eXBlcydcbiAgfSxcbiAgaW5jbHVkZU5vZGVJbmRleDoge1xuICAgIHRvOiAnaW5jbHVkZUVsZW1lbnRJbmRleCcsXG4gICAgaWQ6ICdjaGFuZ2UtaW5jbHVkZW5vZGVpbmRleC10by1pbmNsdWRlZWxlbWVudGluZGV4J1xuICB9XG59XG5cbi8qKlxuICogUmVhY3QgY29tcG9uZW50IHRvIHJlbmRlciBtYXJrZG93bi5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0TWFya2Rvd25PcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gUmVhY3RNYXJrZG93bihvcHRpb25zKSB7XG4gIGZvciAoY29uc3Qga2V5IGluIGRlcHJlY2F0ZWQpIHtcbiAgICBpZiAob3duLmNhbGwoZGVwcmVjYXRlZCwga2V5KSAmJiBvd24uY2FsbChvcHRpb25zLCBrZXkpKSB7XG4gICAgICBjb25zdCBkZXByZWNhdGlvbiA9IGRlcHJlY2F0ZWRba2V5XVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBgW3JlYWN0LW1hcmtkb3duXSBXYXJuaW5nOiBwbGVhc2UgJHtcbiAgICAgICAgICBkZXByZWNhdGlvbi50byA/IGB1c2UgXFxgJHtkZXByZWNhdGlvbi50b31cXGAgaW5zdGVhZCBvZmAgOiAncmVtb3ZlJ1xuICAgICAgICB9IFxcYCR7a2V5fVxcYCAoc2VlIDwke2NoYW5nZWxvZ30jJHtkZXByZWNhdGlvbi5pZH0+IGZvciBtb3JlIGluZm8pYFxuICAgICAgKVxuICAgICAgZGVsZXRlIGRlcHJlY2F0ZWRba2V5XVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHByb2Nlc3NvciA9IHVuaWZpZWQoKVxuICAgIC51c2UocmVtYXJrUGFyc2UpXG4gICAgLnVzZShvcHRpb25zLnJlbWFya1BsdWdpbnMgfHwgW10pXG4gICAgLnVzZShyZW1hcmtSZWh5cGUsIHtcbiAgICAgIC4uLm9wdGlvbnMucmVtYXJrUmVoeXBlT3B0aW9ucyxcbiAgICAgIGFsbG93RGFuZ2Vyb3VzSHRtbDogdHJ1ZVxuICAgIH0pXG4gICAgLnVzZShvcHRpb25zLnJlaHlwZVBsdWdpbnMgfHwgW10pXG4gICAgLnVzZShyZWh5cGVGaWx0ZXIsIG9wdGlvbnMpXG5cbiAgY29uc3QgZmlsZSA9IG5ldyBWRmlsZSgpXG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmNoaWxkcmVuID09PSAnc3RyaW5nJykge1xuICAgIGZpbGUudmFsdWUgPSBvcHRpb25zLmNoaWxkcmVuXG4gIH0gZWxzZSBpZiAob3B0aW9ucy5jaGlsZHJlbiAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMuY2hpbGRyZW4gIT09IG51bGwpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBgW3JlYWN0LW1hcmtkb3duXSBXYXJuaW5nOiBwbGVhc2UgcGFzcyBhIHN0cmluZyBhcyBcXGBjaGlsZHJlblxcYCAobm90OiBcXGAke29wdGlvbnMuY2hpbGRyZW59XFxgKWBcbiAgICApXG4gIH1cblxuICBjb25zdCBoYXN0Tm9kZSA9IHByb2Nlc3Nvci5ydW5TeW5jKHByb2Nlc3Nvci5wYXJzZShmaWxlKSwgZmlsZSlcblxuICBpZiAoaGFzdE5vZGUudHlwZSAhPT0gJ3Jvb3QnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYSBgcm9vdGAgbm9kZScpXG4gIH1cblxuICAvKiogQHR5cGUge1JlYWN0RWxlbWVudH0gKi9cbiAgbGV0IHJlc3VsdCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgUmVhY3QuRnJhZ21lbnQsXG4gICAge30sXG4gICAgY2hpbGRyZW5Ub1JlYWN0KHtvcHRpb25zLCBzY2hlbWE6IGh0bWwsIGxpc3REZXB0aDogMH0sIGhhc3ROb2RlKVxuICApXG5cbiAgaWYgKG9wdGlvbnMuY2xhc3NOYW1lKSB7XG4gICAgcmVzdWx0ID0gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2Jywge2NsYXNzTmFtZTogb3B0aW9ucy5jbGFzc05hbWV9LCByZXN1bHQpXG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG5cblJlYWN0TWFya2Rvd24ucHJvcFR5cGVzID0ge1xuICAvLyBDb3JlIG9wdGlvbnM6XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvLyBMYXlvdXQgb3B0aW9uczpcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvLyBGaWx0ZXIgb3B0aW9uczpcbiAgYWxsb3dFbGVtZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgYWxsb3dlZEVsZW1lbnRzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKSxcbiAgZGlzYWxsb3dlZEVsZW1lbnRzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKSxcbiAgdW53cmFwRGlzYWxsb3dlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8vIFBsdWdpbiBvcHRpb25zOlxuICByZW1hcmtQbHVnaW5zOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5vYmplY3QsXG4gICAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICAgIFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgICBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgICBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICAgIFByb3BUeXBlcy5vYmplY3QsXG4gICAgICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgICAgUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgICAgIC8vIHR5cGUtY292ZXJhZ2U6aWdub3JlLW5leHQtbGluZVxuICAgICAgICAgICAgUHJvcFR5cGVzLmFueVxuICAgICAgICAgIClcbiAgICAgICAgXSlcbiAgICAgIClcbiAgICBdKVxuICApLFxuICByZWh5cGVQbHVnaW5zOiBQcm9wVHlwZXMuYXJyYXlPZihcbiAgICBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5vYmplY3QsXG4gICAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICAgIFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgICBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgICBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICAgIFByb3BUeXBlcy5vYmplY3QsXG4gICAgICAgICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgICAgUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgICAgIC8vIHR5cGUtY292ZXJhZ2U6aWdub3JlLW5leHQtbGluZVxuICAgICAgICAgICAgUHJvcFR5cGVzLmFueVxuICAgICAgICAgIClcbiAgICAgICAgXSlcbiAgICAgIClcbiAgICBdKVxuICApLFxuICAvLyBUcmFuc2Zvcm0gb3B0aW9uczpcbiAgc291cmNlUG9zOiBQcm9wVHlwZXMuYm9vbCxcbiAgcmF3U291cmNlUG9zOiBQcm9wVHlwZXMuYm9vbCxcbiAgc2tpcEh0bWw6IFByb3BUeXBlcy5ib29sLFxuICBpbmNsdWRlRWxlbWVudEluZGV4OiBQcm9wVHlwZXMuYm9vbCxcbiAgdHJhbnNmb3JtTGlua1VyaTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ib29sXSksXG4gIGxpbmtUYXJnZXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIHRyYW5zZm9ybUltYWdlVXJpOiBQcm9wVHlwZXMuZnVuYyxcbiAgY29tcG9uZW50czogUHJvcFR5cGVzLm9iamVjdFxufVxuIiwiaW1wb3J0IHt2aXNpdH0gZnJvbSAndW5pc3QtdXRpbC12aXNpdCdcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLk5vZGV9IE5vZGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QnKS5Sb290fSBSb290XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0JykuRWxlbWVudH0gRWxlbWVudFxuICpcbiAqIEBjYWxsYmFjayBBbGxvd0VsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge0VsZW1lbnR8Um9vdH0gcGFyZW50XG4gKiBAcmV0dXJucyB7Ym9vbGVhbnx1bmRlZmluZWR9XG4gKlxuICogQHR5cGVkZWYgT3B0aW9uc1xuICogQHByb3BlcnR5IHtBcnJheTxzdHJpbmc+fSBbYWxsb3dlZEVsZW1lbnRzXVxuICogQHByb3BlcnR5IHtBcnJheTxzdHJpbmc+fSBbZGlzYWxsb3dlZEVsZW1lbnRzPVtdXVxuICogQHByb3BlcnR5IHtBbGxvd0VsZW1lbnR9IFthbGxvd0VsZW1lbnRdXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFt1bndyYXBEaXNhbGxvd2VkPWZhbHNlXVxuICovXG5cbi8qKlxuICogQHR5cGUge2ltcG9ydCgndW5pZmllZCcpLlBsdWdpbjxbT3B0aW9uc10sIFJvb3Q+fVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWh5cGVGaWx0ZXIob3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5hbGxvd2VkRWxlbWVudHMgJiYgb3B0aW9ucy5kaXNhbGxvd2VkRWxlbWVudHMpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ09ubHkgb25lIG9mIGBhbGxvd2VkRWxlbWVudHNgIGFuZCBgZGlzYWxsb3dlZEVsZW1lbnRzYCBzaG91bGQgYmUgZGVmaW5lZCdcbiAgICApXG4gIH1cblxuICBpZiAoXG4gICAgb3B0aW9ucy5hbGxvd2VkRWxlbWVudHMgfHxcbiAgICBvcHRpb25zLmRpc2FsbG93ZWRFbGVtZW50cyB8fFxuICAgIG9wdGlvbnMuYWxsb3dFbGVtZW50XG4gICkge1xuICAgIHJldHVybiAodHJlZSkgPT4ge1xuICAgICAgdmlzaXQodHJlZSwgJ2VsZW1lbnQnLCAobm9kZSwgaW5kZXgsIHBhcmVudF8pID0+IHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gLyoqIEB0eXBlIHtFbGVtZW50fFJvb3R9ICovIChwYXJlbnRfKVxuICAgICAgICAvKiogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfSAqL1xuICAgICAgICBsZXQgcmVtb3ZlXG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYWxsb3dlZEVsZW1lbnRzKSB7XG4gICAgICAgICAgcmVtb3ZlID0gIW9wdGlvbnMuYWxsb3dlZEVsZW1lbnRzLmluY2x1ZGVzKG5vZGUudGFnTmFtZSlcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmRpc2FsbG93ZWRFbGVtZW50cykge1xuICAgICAgICAgIHJlbW92ZSA9IG9wdGlvbnMuZGlzYWxsb3dlZEVsZW1lbnRzLmluY2x1ZGVzKG5vZGUudGFnTmFtZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcmVtb3ZlICYmIG9wdGlvbnMuYWxsb3dFbGVtZW50ICYmIHR5cGVvZiBpbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICByZW1vdmUgPSAhb3B0aW9ucy5hbGxvd0VsZW1lbnQobm9kZSwgaW5kZXgsIHBhcmVudClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZW1vdmUgJiYgdHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIGlmIChvcHRpb25zLnVud3JhcERpc2FsbG93ZWQgJiYgbm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSwgLi4ubm9kZS5jaGlsZHJlbilcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gaW5kZXhcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG4iLCJjb25zdCBwcm90b2NvbHMgPSBbJ2h0dHAnLCAnaHR0cHMnLCAnbWFpbHRvJywgJ3RlbCddXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHVyaVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVyaVRyYW5zZm9ybWVyKHVyaSkge1xuICBjb25zdCB1cmwgPSAodXJpIHx8ICcnKS50cmltKClcbiAgY29uc3QgZmlyc3QgPSB1cmwuY2hhckF0KDApXG5cbiAgaWYgKGZpcnN0ID09PSAnIycgfHwgZmlyc3QgPT09ICcvJykge1xuICAgIHJldHVybiB1cmxcbiAgfVxuXG4gIGNvbnN0IGNvbG9uID0gdXJsLmluZGV4T2YoJzonKVxuICBpZiAoY29sb24gPT09IC0xKSB7XG4gICAgcmV0dXJuIHVybFxuICB9XG5cbiAgbGV0IGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IHByb3RvY29scy5sZW5ndGgpIHtcbiAgICBjb25zdCBwcm90b2NvbCA9IHByb3RvY29sc1tpbmRleF1cblxuICAgIGlmIChcbiAgICAgIGNvbG9uID09PSBwcm90b2NvbC5sZW5ndGggJiZcbiAgICAgIHVybC5zbGljZSgwLCBwcm90b2NvbC5sZW5ndGgpLnRvTG93ZXJDYXNlKCkgPT09IHByb3RvY29sXG4gICAgKSB7XG4gICAgICByZXR1cm4gdXJsXG4gICAgfVxuICB9XG5cbiAgaW5kZXggPSB1cmwuaW5kZXhPZignPycpXG4gIGlmIChpbmRleCAhPT0gLTEgJiYgY29sb24gPiBpbmRleCkge1xuICAgIHJldHVybiB1cmxcbiAgfVxuXG4gIGluZGV4ID0gdXJsLmluZGV4T2YoJyMnKVxuICBpZiAoaW5kZXggIT09IC0xICYmIGNvbG9uID4gaW5kZXgpIHtcbiAgICByZXR1cm4gdXJsXG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2NyaXB0LXVybFxuICByZXR1cm4gJ2phdmFzY3JpcHQ6dm9pZCgwKSdcbn1cbiIsImltcG9ydCByZW1hcmtQYXJzZSBmcm9tICcuL2xpYi9pbmRleC5qcydcblxuZXhwb3J0IGRlZmF1bHQgcmVtYXJrUGFyc2VcbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Sb290fSBSb290XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdC11dGlsLWZyb20tbWFya2Rvd24nKS5PcHRpb25zfSBPcHRpb25zXG4gKi9cblxuaW1wb3J0IHtmcm9tTWFya2Rvd259IGZyb20gJ21kYXN0LXV0aWwtZnJvbS1tYXJrZG93bidcblxuLyoqIEB0eXBlIHtpbXBvcnQoJ3VuaWZpZWQnKS5QbHVnaW48W09wdGlvbnM/XSB8IHZvaWRbXSwgc3RyaW5nLCBSb290Pn0gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbWFya1BhcnNlKG9wdGlvbnMpIHtcbiAgLyoqIEB0eXBlIHtpbXBvcnQoJ3VuaWZpZWQnKS5QYXJzZXJGdW5jdGlvbjxSb290Pn0gKi9cbiAgY29uc3QgcGFyc2VyID0gKGRvYykgPT4ge1xuICAgIC8vIEFzc3VtZSBvcHRpb25zLlxuICAgIGNvbnN0IHNldHRpbmdzID0gLyoqIEB0eXBlIHtPcHRpb25zfSAqLyAodGhpcy5kYXRhKCdzZXR0aW5ncycpKVxuXG4gICAgcmV0dXJuIGZyb21NYXJrZG93bihcbiAgICAgIGRvYyxcbiAgICAgIE9iamVjdC5hc3NpZ24oe30sIHNldHRpbmdzLCBvcHRpb25zLCB7XG4gICAgICAgIC8vIE5vdGU6IHRoZXNlIG9wdGlvbnMgYXJlIG5vdCBpbiB0aGUgcmVhZG1lLlxuICAgICAgICAvLyBUaGUgZ29hbCBpcyBmb3IgdGhlbSB0byBiZSBzZXQgYnkgcGx1Z2lucyBvbiBgZGF0YWAgaW5zdGVhZCBvZiBiZWluZ1xuICAgICAgICAvLyBwYXNzZWQgYnkgdXNlcnMuXG4gICAgICAgIGV4dGVuc2lvbnM6IHRoaXMuZGF0YSgnbWljcm9tYXJrRXh0ZW5zaW9ucycpIHx8IFtdLFxuICAgICAgICBtZGFzdEV4dGVuc2lvbnM6IHRoaXMuZGF0YSgnZnJvbU1hcmtkb3duRXh0ZW5zaW9ucycpIHx8IFtdXG4gICAgICB9KVxuICAgIClcbiAgfVxuXG4gIE9iamVjdC5hc3NpZ24odGhpcywge1BhcnNlcjogcGFyc2VyfSlcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLlJvb3R9IEhhc3RSb290XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdCcpLlJvb3R9IE1kYXN0Um9vdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QtdXRpbC10by1oYXN0JykuT3B0aW9uc30gT3B0aW9uc1xuICogQHR5cGVkZWYge2ltcG9ydCgndW5pZmllZCcpLlByb2Nlc3NvcjxhbnksIGFueSwgYW55LCBhbnk+fSBQcm9jZXNzb3JcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdC11dGlsLXRvLWhhc3QnKX0gRG9Ob3RUb3VjaEFzVGhpc0ltcG9ydEluY2x1ZGVzUmF3SW5UcmVlXG4gKi9cblxuaW1wb3J0IHt0b0hhc3R9IGZyb20gJ21kYXN0LXV0aWwtdG8taGFzdCdcblxuLy8gTm90ZTogdGhlIGA8TWRhc3RSb290LCBIYXN0Um9vdD5gIG92ZXJsb2FkIGRvZXNu4oCZdCBzZWVtIHRvIHdvcmsgOicoXG5cbi8qKlxuICogUGx1Z2luIHRoYXQgdHVybnMgbWFya2Rvd24gaW50byBIVE1MIHRvIHN1cHBvcnQgcmVoeXBlLlxuICpcbiAqICogICBJZiBhIGRlc3RpbmF0aW9uIHByb2Nlc3NvciBpcyBnaXZlbiwgdGhhdCBwcm9jZXNzb3IgcnVucyB3aXRoIGEgbmV3IEhUTUxcbiAqICAgICAoaGFzdCkgdHJlZSAoYnJpZGdlLW1vZGUpLlxuICogICAgIEFzIHRoZSBnaXZlbiBwcm9jZXNzb3IgcnVucyB3aXRoIGEgaGFzdCB0cmVlLCBhbmQgcmVoeXBlIHBsdWdpbnMgc3VwcG9ydFxuICogICAgIGhhc3QsIHRoYXQgbWVhbnMgcmVoeXBlIHBsdWdpbnMgY2FuIGJlIHVzZWQgd2l0aCB0aGUgZ2l2ZW4gcHJvY2Vzc29yLlxuICogICAgIFRoZSBoYXN0IHRyZWUgaXMgZGlzY2FyZGVkIGluIHRoZSBlbmQuXG4gKiAgICAgSXTigJlzIGhpZ2hseSB1bmxpa2VseSB0aGF0IHlvdSB3YW50IHRvIGRvIHRoaXMuXG4gKiAqICAgVGhlIGNvbW1vbiBjYXNlIGlzIHRvIG5vdCBwYXNzIGEgZGVzdGluYXRpb24gcHJvY2Vzc29yLCBpbiB3aGljaCBjYXNlIHRoZVxuICogICAgIGN1cnJlbnQgcHJvY2Vzc29yIGNvbnRpbnVlcyBydW5uaW5nIHdpdGggYSBuZXcgSFRNTCAoaGFzdCkgdHJlZVxuICogICAgIChtdXRhdGUtbW9kZSkuXG4gKiAgICAgQXMgdGhlIGN1cnJlbnQgcHJvY2Vzc29yIGNvbnRpbnVlcyB3aXRoIGEgaGFzdCB0cmVlLCBhbmQgcmVoeXBlIHBsdWdpbnNcbiAqICAgICBzdXBwb3J0IGhhc3QsIHRoYXQgbWVhbnMgcmVoeXBlIHBsdWdpbnMgY2FuIGJlIHVzZWQgYWZ0ZXJcbiAqICAgICBgcmVtYXJrLXJlaHlwZWAuXG4gKiAgICAgSXTigJlzIGxpa2VseSB0aGF0IHRoaXMgaXMgd2hhdCB5b3Ugd2FudCB0byBkby5cbiAqXG4gKiBAcGFyYW0gZGVzdGluYXRpb25cbiAqICAgT3B0aW9uYWwgdW5pZmllZCBwcm9jZXNzb3IuXG4gKiBAcGFyYW0gb3B0aW9uc1xuICogICBPcHRpb25zIHBhc3NlZCB0byBgbWRhc3QtdXRpbC10by1oYXN0YC5cbiAqL1xuY29uc3QgcmVtYXJrUmVoeXBlID1cbiAgLyoqIEB0eXBlIHsoaW1wb3J0KCd1bmlmaWVkJykuUGx1Z2luPFtQcm9jZXNzb3IsIE9wdGlvbnM/XXxbbnVsbHx1bmRlZmluZWQsIE9wdGlvbnM/XXxbT3B0aW9uc118W10sIE1kYXN0Um9vdD4pfSAqL1xuICAoXG4gICAgZnVuY3Rpb24gKGRlc3RpbmF0aW9uLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gZGVzdGluYXRpb24gJiYgJ3J1bicgaW4gZGVzdGluYXRpb25cbiAgICAgICAgPyBicmlkZ2UoZGVzdGluYXRpb24sIG9wdGlvbnMpXG4gICAgICAgIDogbXV0YXRlKGRlc3RpbmF0aW9uIHx8IG9wdGlvbnMpXG4gICAgfVxuICApXG5cbmV4cG9ydCBkZWZhdWx0IHJlbWFya1JlaHlwZVxuXG4vKipcbiAqIEJyaWRnZS1tb2RlLlxuICogUnVucyB0aGUgZGVzdGluYXRpb24gd2l0aCB0aGUgbmV3IGhhc3QgdHJlZS5cbiAqXG4gKiBAdHlwZSB7aW1wb3J0KCd1bmlmaWVkJykuUGx1Z2luPFtQcm9jZXNzb3IsIE9wdGlvbnM/XSwgTWRhc3RSb290Pn1cbiAqL1xuZnVuY3Rpb24gYnJpZGdlKGRlc3RpbmF0aW9uLCBvcHRpb25zKSB7XG4gIHJldHVybiAobm9kZSwgZmlsZSwgbmV4dCkgPT4ge1xuICAgIGRlc3RpbmF0aW9uLnJ1bih0b0hhc3Qobm9kZSwgb3B0aW9ucyksIGZpbGUsIChlcnJvcikgPT4ge1xuICAgICAgbmV4dChlcnJvcilcbiAgICB9KVxuICB9XG59XG5cbi8qKlxuICogTXV0YXRlLW1vZGUuXG4gKiBGdXJ0aGVyIHBsdWdpbnMgcnVuIG9uIHRoZSBoYXN0IHRyZWUuXG4gKlxuICogQHR5cGUge2ltcG9ydCgndW5pZmllZCcpLlBsdWdpbjxbT3B0aW9ucz9dfHZvaWRbXSwgTWRhc3RSb290LCBIYXN0Um9vdD59XG4gKi9cbmZ1bmN0aW9uIG11dGF0ZShvcHRpb25zKSB7XG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IGFzc3VtZSBhIGNvcnJlc3BvbmRpbmcgbm9kZSBpcyByZXR1cm5lZCBieSBgdG9IYXN0YC5cbiAgcmV0dXJuIChub2RlKSA9PiB0b0hhc3Qobm9kZSwgb3B0aW9ucylcbn1cbiIsIi8qKlxuICogUGFyc2Ugc3BhY2Utc2VwYXJhdGVkIHRva2VucyB0byBhbiBhcnJheSBvZiBzdHJpbmdzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogICBTcGFjZS1zZXBhcmF0ZWQgdG9rZW5zLlxuICogQHJldHVybnMge0FycmF5PHN0cmluZz59XG4gKiAgIExpc3Qgb2YgdG9rZW5zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UodmFsdWUpIHtcbiAgY29uc3QgaW5wdXQgPSBTdHJpbmcodmFsdWUgfHwgJycpLnRyaW0oKVxuICByZXR1cm4gaW5wdXQgPyBpbnB1dC5zcGxpdCgvWyBcXHRcXG5cXHJcXGZdKy9nKSA6IFtdXG59XG5cbi8qKlxuICogU2VyaWFsaXplIGFuIGFycmF5IG9mIHN0cmluZ3MgYXMgc3BhY2Ugc2VwYXJhdGVkLXRva2Vucy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZ3xudW1iZXI+fSB2YWx1ZXNcbiAqICAgTGlzdCBvZiB0b2tlbnMuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBTcGFjZS1zZXBhcmF0ZWQgdG9rZW5zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5KHZhbHVlcykge1xuICByZXR1cm4gdmFsdWVzLmpvaW4oJyAnKS50cmltKClcbn1cbiIsImNvbnN0IHRhYiA9IDkgLyogYFxcdGAgKi9cbmNvbnN0IHNwYWNlID0gMzIgLyogYCBgICovXG5cbi8qKlxuICogUmVtb3ZlIGluaXRpYWwgYW5kIGZpbmFsIHNwYWNlcyBhbmQgdGFicyBhdCB0aGUgbGluZSBicmVha3MgaW4gYHZhbHVlYC5cbiAqIERvZXMgbm90IHRyaW0gaW5pdGlhbCBhbmQgZmluYWwgc3BhY2VzIGFuZCB0YWJzIG9mIHRoZSB2YWx1ZSBpdHNlbGYuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiAgIFZhbHVlIHRvIHRyaW0uXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBUcmltbWVkIHZhbHVlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJpbUxpbmVzKHZhbHVlKSB7XG4gIGNvbnN0IHNvdXJjZSA9IFN0cmluZyh2YWx1ZSlcbiAgY29uc3Qgc2VhcmNoID0gL1xccj9cXG58XFxyL2dcbiAgbGV0IG1hdGNoID0gc2VhcmNoLmV4ZWMoc291cmNlKVxuICBsZXQgbGFzdCA9IDBcbiAgLyoqIEB0eXBlIHtBcnJheTxzdHJpbmc+fSAqL1xuICBjb25zdCBsaW5lcyA9IFtdXG5cbiAgd2hpbGUgKG1hdGNoKSB7XG4gICAgbGluZXMucHVzaChcbiAgICAgIHRyaW1MaW5lKHNvdXJjZS5zbGljZShsYXN0LCBtYXRjaC5pbmRleCksIGxhc3QgPiAwLCB0cnVlKSxcbiAgICAgIG1hdGNoWzBdXG4gICAgKVxuXG4gICAgbGFzdCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoXG4gICAgbWF0Y2ggPSBzZWFyY2guZXhlYyhzb3VyY2UpXG4gIH1cblxuICBsaW5lcy5wdXNoKHRyaW1MaW5lKHNvdXJjZS5zbGljZShsYXN0KSwgbGFzdCA+IDAsIGZhbHNlKSlcblxuICByZXR1cm4gbGluZXMuam9pbignJylcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqICAgTGluZSB0byB0cmltLlxuICogQHBhcmFtIHtib29sZWFufSBzdGFydFxuICogICBXaGV0aGVyIHRvIHRyaW0gdGhlIHN0YXJ0IG9mIHRoZSBsaW5lLlxuICogQHBhcmFtIHtib29sZWFufSBlbmRcbiAqICAgV2hldGhlciB0byB0cmltIHRoZSBlbmQgb2YgdGhlIGxpbmUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBUcmltbWVkIGxpbmUuXG4gKi9cbmZ1bmN0aW9uIHRyaW1MaW5lKHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gIGxldCBzdGFydEluZGV4ID0gMFxuICBsZXQgZW5kSW5kZXggPSB2YWx1ZS5sZW5ndGhcblxuICBpZiAoc3RhcnQpIHtcbiAgICBsZXQgY29kZSA9IHZhbHVlLmNvZGVQb2ludEF0KHN0YXJ0SW5kZXgpXG5cbiAgICB3aGlsZSAoY29kZSA9PT0gdGFiIHx8IGNvZGUgPT09IHNwYWNlKSB7XG4gICAgICBzdGFydEluZGV4KytcbiAgICAgIGNvZGUgPSB2YWx1ZS5jb2RlUG9pbnRBdChzdGFydEluZGV4KVxuICAgIH1cbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICBsZXQgY29kZSA9IHZhbHVlLmNvZGVQb2ludEF0KGVuZEluZGV4IC0gMSlcblxuICAgIHdoaWxlIChjb2RlID09PSB0YWIgfHwgY29kZSA9PT0gc3BhY2UpIHtcbiAgICAgIGVuZEluZGV4LS1cbiAgICAgIGNvZGUgPSB2YWx1ZS5jb2RlUG9pbnRBdChlbmRJbmRleCAtIDEpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGVuZEluZGV4ID4gc3RhcnRJbmRleCA/IHZhbHVlLnNsaWNlKHN0YXJ0SW5kZXgsIGVuZEluZGV4KSA6ICcnXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHsoZXJyb3I/OiBFcnJvcnxudWxsfHVuZGVmaW5lZCwgLi4ub3V0cHV0OiBBcnJheTxhbnk+KSA9PiB2b2lkfSBDYWxsYmFja1xuICogQHR5cGVkZWYgeyguLi5pbnB1dDogQXJyYXk8YW55PikgPT4gYW55fSBNaWRkbGV3YXJlXG4gKlxuICogQHR5cGVkZWYgeyguLi5pbnB1dDogQXJyYXk8YW55PikgPT4gdm9pZH0gUnVuXG4gKiAgIENhbGwgYWxsIG1pZGRsZXdhcmUuXG4gKiBAdHlwZWRlZiB7KGZuOiBNaWRkbGV3YXJlKSA9PiBQaXBlbGluZX0gVXNlXG4gKiAgIEFkZCBgZm5gIChtaWRkbGV3YXJlKSB0byB0aGUgbGlzdC5cbiAqIEB0eXBlZGVmIHt7cnVuOiBSdW4sIHVzZTogVXNlfX0gUGlwZWxpbmVcbiAqICAgTWlkZGxld2FyZS5cbiAqL1xuXG4vKipcbiAqIENyZWF0ZSBuZXcgbWlkZGxld2FyZS5cbiAqXG4gKiBAcmV0dXJucyB7UGlwZWxpbmV9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cm91Z2goKSB7XG4gIC8qKiBAdHlwZSB7QXJyYXk8TWlkZGxld2FyZT59ICovXG4gIGNvbnN0IGZucyA9IFtdXG4gIC8qKiBAdHlwZSB7UGlwZWxpbmV9ICovXG4gIGNvbnN0IHBpcGVsaW5lID0ge3J1biwgdXNlfVxuXG4gIHJldHVybiBwaXBlbGluZVxuXG4gIC8qKiBAdHlwZSB7UnVufSAqL1xuICBmdW5jdGlvbiBydW4oLi4udmFsdWVzKSB7XG4gICAgbGV0IG1pZGRsZXdhcmVJbmRleCA9IC0xXG4gICAgLyoqIEB0eXBlIHtDYWxsYmFja30gKi9cbiAgICBjb25zdCBjYWxsYmFjayA9IHZhbHVlcy5wb3AoKVxuXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgZnVuY3Rpb24gYXMgbGFzdCBhcmd1bWVudCwgbm90ICcgKyBjYWxsYmFjaylcbiAgICB9XG5cbiAgICBuZXh0KG51bGwsIC4uLnZhbHVlcylcblxuICAgIC8qKlxuICAgICAqIFJ1biB0aGUgbmV4dCBgZm5gLCBvciB3ZeKAmXJlIGRvbmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Vycm9yfG51bGx8dW5kZWZpbmVkfSBlcnJvclxuICAgICAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gb3V0cHV0XG4gICAgICovXG4gICAgZnVuY3Rpb24gbmV4dChlcnJvciwgLi4ub3V0cHV0KSB7XG4gICAgICBjb25zdCBmbiA9IGZuc1srK21pZGRsZXdhcmVJbmRleF1cbiAgICAgIGxldCBpbmRleCA9IC0xXG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjYWxsYmFjayhlcnJvcilcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIC8vIENvcHkgbm9uLW51bGxpc2ggaW5wdXQgaW50byB2YWx1ZXMuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IHZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKG91dHB1dFtpbmRleF0gPT09IG51bGwgfHwgb3V0cHV0W2luZGV4XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgb3V0cHV0W2luZGV4XSA9IHZhbHVlc1tpbmRleF1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBTYXZlIHRoZSBuZXdseSBjcmVhdGVkIGBvdXRwdXRgIGZvciB0aGUgbmV4dCBjYWxsLlxuICAgICAgdmFsdWVzID0gb3V0cHV0XG5cbiAgICAgIC8vIE5leHQgb3IgZG9uZS5cbiAgICAgIGlmIChmbikge1xuICAgICAgICB3cmFwKGZuLCBuZXh0KSguLi5vdXRwdXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhudWxsLCAuLi5vdXRwdXQpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqIEB0eXBlIHtVc2V9ICovXG4gIGZ1bmN0aW9uIHVzZShtaWRkZWx3YXJlKSB7XG4gICAgaWYgKHR5cGVvZiBtaWRkZWx3YXJlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnRXhwZWN0ZWQgYG1pZGRlbHdhcmVgIHRvIGJlIGEgZnVuY3Rpb24sIG5vdCAnICsgbWlkZGVsd2FyZVxuICAgICAgKVxuICAgIH1cblxuICAgIGZucy5wdXNoKG1pZGRlbHdhcmUpXG4gICAgcmV0dXJuIHBpcGVsaW5lXG4gIH1cbn1cblxuLyoqXG4gKiBXcmFwIGBtaWRkbGV3YXJlYC5cbiAqIENhbiBiZSBzeW5jIG9yIGFzeW5jOyByZXR1cm4gYSBwcm9taXNlLCByZWNlaXZlIGEgY2FsbGJhY2ssIG9yIHJldHVybiBuZXdcbiAqIHZhbHVlcyBhbmQgZXJyb3JzLlxuICpcbiAqIEBwYXJhbSB7TWlkZGxld2FyZX0gbWlkZGxld2FyZVxuICogQHBhcmFtIHtDYWxsYmFja30gY2FsbGJhY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXAobWlkZGxld2FyZSwgY2FsbGJhY2spIHtcbiAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICBsZXQgY2FsbGVkXG5cbiAgcmV0dXJuIHdyYXBwZWRcblxuICAvKipcbiAgICogQ2FsbCBgbWlkZGxld2FyZWAuXG4gICAqIEB0aGlzIHthbnl9XG4gICAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gcGFyYW1ldGVyc1xuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGZ1bmN0aW9uIHdyYXBwZWQoLi4ucGFyYW1ldGVycykge1xuICAgIGNvbnN0IGZuRXhwZWN0c0NhbGxiYWNrID0gbWlkZGxld2FyZS5sZW5ndGggPiBwYXJhbWV0ZXJzLmxlbmd0aFxuICAgIC8qKiBAdHlwZSB7YW55fSAqL1xuICAgIGxldCByZXN1bHRcblxuICAgIGlmIChmbkV4cGVjdHNDYWxsYmFjaykge1xuICAgICAgcGFyYW1ldGVycy5wdXNoKGRvbmUpXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IG1pZGRsZXdhcmUuYXBwbHkodGhpcywgcGFyYW1ldGVycylcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc3QgZXhjZXB0aW9uID0gLyoqIEB0eXBlIHtFcnJvcn0gKi8gKGVycm9yKVxuXG4gICAgICAvLyBXZWxsLCB0aGlzIGlzIHF1aXRlIHRoZSBwaWNrbGUuXG4gICAgICAvLyBgbWlkZGxld2FyZWAgcmVjZWl2ZWQgYSBjYWxsYmFjayBhbmQgY2FsbGVkIGl0IHN5bmNocm9ub3VzbHksIGJ1dCB0aGF0XG4gICAgICAvLyB0aHJldyBhbiBlcnJvci5cbiAgICAgIC8vIFRoZSBvbmx5IHRoaW5nIGxlZnQgdG8gZG8gaXMgdG8gdGhyb3cgdGhlIHRoaW5nIGluc3RlYWQuXG4gICAgICBpZiAoZm5FeHBlY3RzQ2FsbGJhY2sgJiYgY2FsbGVkKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvblxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZG9uZShleGNlcHRpb24pXG4gICAgfVxuXG4gICAgaWYgKCFmbkV4cGVjdHNDYWxsYmFjaykge1xuICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgcmVzdWx0LnRoZW4odGhlbiwgZG9uZSlcbiAgICAgIH0gZWxzZSBpZiAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgZG9uZShyZXN1bHQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGVuKHJlc3VsdClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbCBgY2FsbGJhY2tgLCBvbmx5IG9uY2UuXG4gICAqIEB0eXBlIHtDYWxsYmFja31cbiAgICovXG4gIGZ1bmN0aW9uIGRvbmUoZXJyb3IsIC4uLm91dHB1dCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlXG4gICAgICBjYWxsYmFjayhlcnJvciwgLi4ub3V0cHV0KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsIGBkb25lYCB3aXRoIG9uZSB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IFt2YWx1ZV1cbiAgICovXG4gIGZ1bmN0aW9uIHRoZW4odmFsdWUpIHtcbiAgICBkb25lKG51bGwsIHZhbHVlKVxuICB9XG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuTm9kZX0gTm9kZVxuICogQHR5cGVkZWYge2ltcG9ydCgndmZpbGUnKS5WRmlsZUNvbXBhdGlibGV9IFZGaWxlQ29tcGF0aWJsZVxuICogQHR5cGVkZWYge2ltcG9ydCgndmZpbGUnKS5WRmlsZVZhbHVlfSBWRmlsZVZhbHVlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLicpLlByb2Nlc3Nvcn0gUHJvY2Vzc29yXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLicpLlBsdWdpbn0gUGx1Z2luXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLicpLlByZXNldH0gUHJlc2V0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLicpLlBsdWdnYWJsZX0gUGx1Z2dhYmxlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLicpLlBsdWdnYWJsZUxpc3R9IFBsdWdnYWJsZUxpc3RcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uJykuVHJhbnNmb3JtZXJ9IFRyYW5zZm9ybWVyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLicpLlBhcnNlcn0gUGFyc2VyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLicpLkNvbXBpbGVyfSBDb21waWxlclxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4nKS5SdW5DYWxsYmFja30gUnVuQ2FsbGJhY2tcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uJykuUHJvY2Vzc0NhbGxiYWNrfSBQcm9jZXNzQ2FsbGJhY2tcbiAqXG4gKiBAdHlwZWRlZiBDb250ZXh0XG4gKiBAcHJvcGVydHkge05vZGV9IHRyZWVcbiAqIEBwcm9wZXJ0eSB7VkZpbGV9IGZpbGVcbiAqL1xuXG5pbXBvcnQge2JhaWx9IGZyb20gJ2JhaWwnXG5pbXBvcnQgaXNCdWZmZXIgZnJvbSAnaXMtYnVmZmVyJ1xuaW1wb3J0IGV4dGVuZCBmcm9tICdleHRlbmQnXG5pbXBvcnQgaXNQbGFpbk9iaiBmcm9tICdpcy1wbGFpbi1vYmonXG5pbXBvcnQge3Ryb3VnaH0gZnJvbSAndHJvdWdoJ1xuaW1wb3J0IHtWRmlsZX0gZnJvbSAndmZpbGUnXG5cbi8vIEV4cG9zZSBhIGZyb3plbiBwcm9jZXNzb3IuXG5leHBvcnQgY29uc3QgdW5pZmllZCA9IGJhc2UoKS5mcmVlemUoKVxuXG5jb25zdCBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eVxuXG4vLyBGdW5jdGlvbiB0byBjcmVhdGUgdGhlIGZpcnN0IHByb2Nlc3Nvci5cbi8qKlxuICogQHJldHVybnMge1Byb2Nlc3Nvcn1cbiAqL1xuZnVuY3Rpb24gYmFzZSgpIHtcbiAgY29uc3QgdHJhbnNmb3JtZXJzID0gdHJvdWdoKClcbiAgLyoqIEB0eXBlIHtQcm9jZXNzb3JbJ2F0dGFjaGVycyddfSAqL1xuICBjb25zdCBhdHRhY2hlcnMgPSBbXVxuICAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSAqL1xuICBsZXQgbmFtZXNwYWNlID0ge31cbiAgLyoqIEB0eXBlIHtib29sZWFufHVuZGVmaW5lZH0gKi9cbiAgbGV0IGZyb3plblxuICBsZXQgZnJlZXplSW5kZXggPSAtMVxuXG4gIC8vIERhdGEgbWFuYWdlbWVudC5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvcjogb3ZlcmxvYWRzIGFyZSBoYW5kbGVkLlxuICBwcm9jZXNzb3IuZGF0YSA9IGRhdGFcbiAgcHJvY2Vzc29yLlBhcnNlciA9IHVuZGVmaW5lZFxuICBwcm9jZXNzb3IuQ29tcGlsZXIgPSB1bmRlZmluZWRcblxuICAvLyBMb2NrLlxuICBwcm9jZXNzb3IuZnJlZXplID0gZnJlZXplXG5cbiAgLy8gUGx1Z2lucy5cbiAgcHJvY2Vzc29yLmF0dGFjaGVycyA9IGF0dGFjaGVyc1xuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBvdmVybG9hZHMgYXJlIGhhbmRsZWQuXG4gIHByb2Nlc3Nvci51c2UgPSB1c2VcblxuICAvLyBBUEkuXG4gIHByb2Nlc3Nvci5wYXJzZSA9IHBhcnNlXG4gIHByb2Nlc3Nvci5zdHJpbmdpZnkgPSBzdHJpbmdpZnlcbiAgLy8gQHRzLWV4cGVjdC1lcnJvcjogb3ZlcmxvYWRzIGFyZSBoYW5kbGVkLlxuICBwcm9jZXNzb3IucnVuID0gcnVuXG4gIHByb2Nlc3Nvci5ydW5TeW5jID0gcnVuU3luY1xuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBvdmVybG9hZHMgYXJlIGhhbmRsZWQuXG4gIHByb2Nlc3Nvci5wcm9jZXNzID0gcHJvY2Vzc1xuICBwcm9jZXNzb3IucHJvY2Vzc1N5bmMgPSBwcm9jZXNzU3luY1xuXG4gIC8vIEV4cG9zZS5cbiAgcmV0dXJuIHByb2Nlc3NvclxuXG4gIC8vIENyZWF0ZSBhIG5ldyBwcm9jZXNzb3IgYmFzZWQgb24gdGhlIHByb2Nlc3NvciBpbiB0aGUgY3VycmVudCBzY29wZS5cbiAgLyoqIEB0eXBlIHtQcm9jZXNzb3J9ICovXG4gIGZ1bmN0aW9uIHByb2Nlc3NvcigpIHtcbiAgICBjb25zdCBkZXN0aW5hdGlvbiA9IGJhc2UoKVxuICAgIGxldCBpbmRleCA9IC0xXG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGF0dGFjaGVycy5sZW5ndGgpIHtcbiAgICAgIGRlc3RpbmF0aW9uLnVzZSguLi5hdHRhY2hlcnNbaW5kZXhdKVxuICAgIH1cblxuICAgIGRlc3RpbmF0aW9uLmRhdGEoZXh0ZW5kKHRydWUsIHt9LCBuYW1lc3BhY2UpKVxuXG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd8UmVjb3JkPHN0cmluZywgdW5rbm93bj59IFtrZXldXG4gICAqIEBwYXJhbSB7dW5rbm93bn0gW3ZhbHVlXVxuICAgKiBAcmV0dXJucyB7dW5rbm93bn1cbiAgICovXG4gIGZ1bmN0aW9uIGRhdGEoa2V5LCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gU2V0IGBrZXlgLlxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgYXNzZXJ0VW5mcm96ZW4oJ2RhdGEnLCBmcm96ZW4pXG4gICAgICAgIG5hbWVzcGFjZVtrZXldID0gdmFsdWVcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NvclxuICAgICAgfVxuXG4gICAgICAvLyBHZXQgYGtleWAuXG4gICAgICByZXR1cm4gKG93bi5jYWxsKG5hbWVzcGFjZSwga2V5KSAmJiBuYW1lc3BhY2Vba2V5XSkgfHwgbnVsbFxuICAgIH1cblxuICAgIC8vIFNldCBzcGFjZS5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBhc3NlcnRVbmZyb3plbignZGF0YScsIGZyb3plbilcbiAgICAgIG5hbWVzcGFjZSA9IGtleVxuICAgICAgcmV0dXJuIHByb2Nlc3NvclxuICAgIH1cblxuICAgIC8vIEdldCBzcGFjZS5cbiAgICByZXR1cm4gbmFtZXNwYWNlXG4gIH1cblxuICAvKiogQHR5cGUge1Byb2Nlc3NvclsnZnJlZXplJ119ICovXG4gIGZ1bmN0aW9uIGZyZWV6ZSgpIHtcbiAgICBpZiAoZnJvemVuKSB7XG4gICAgICByZXR1cm4gcHJvY2Vzc29yXG4gICAgfVxuXG4gICAgd2hpbGUgKCsrZnJlZXplSW5kZXggPCBhdHRhY2hlcnMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBbYXR0YWNoZXIsIC4uLm9wdGlvbnNdID0gYXR0YWNoZXJzW2ZyZWV6ZUluZGV4XVxuXG4gICAgICBpZiAob3B0aW9uc1swXSA9PT0gZmFsc2UpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnNbMF0gPT09IHRydWUpIHtcbiAgICAgICAgb3B0aW9uc1swXSA9IHVuZGVmaW5lZFxuICAgICAgfVxuXG4gICAgICAvKiogQHR5cGUge1RyYW5zZm9ybWVyfHZvaWR9ICovXG4gICAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGF0dGFjaGVyLmNhbGwocHJvY2Vzc29yLCAuLi5vcHRpb25zKVxuXG4gICAgICBpZiAodHlwZW9mIHRyYW5zZm9ybWVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRyYW5zZm9ybWVycy51c2UodHJhbnNmb3JtZXIpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnJvemVuID0gdHJ1ZVxuICAgIGZyZWV6ZUluZGV4ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXG5cbiAgICByZXR1cm4gcHJvY2Vzc29yXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtQbHVnZ2FibGV8bnVsbHx1bmRlZmluZWR9IFt2YWx1ZV1cbiAgICogQHBhcmFtIHsuLi51bmtub3dufSBvcHRpb25zXG4gICAqIEByZXR1cm5zIHtQcm9jZXNzb3J9XG4gICAqL1xuICBmdW5jdGlvbiB1c2UodmFsdWUsIC4uLm9wdGlvbnMpIHtcbiAgICAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIHVua25vd24+fHVuZGVmaW5lZH0gKi9cbiAgICBsZXQgc2V0dGluZ3NcblxuICAgIGFzc2VydFVuZnJvemVuKCd1c2UnLCBmcm96ZW4pXG5cbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gRW1wdHkuXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFkZFBsdWdpbih2YWx1ZSwgLi4ub3B0aW9ucylcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBhZGRMaXN0KHZhbHVlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWRkUHJlc2V0KHZhbHVlKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB1c2FibGUgdmFsdWUsIG5vdCBgJyArIHZhbHVlICsgJ2AnKVxuICAgIH1cblxuICAgIGlmIChzZXR0aW5ncykge1xuICAgICAgbmFtZXNwYWNlLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbihuYW1lc3BhY2Uuc2V0dGluZ3MgfHwge30sIHNldHRpbmdzKVxuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzb3JcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7aW1wb3J0KCcuLicpLlBsdWdnYWJsZTx1bmtub3duW10+fSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBhZGRQbHVnaW4odmFsdWUpXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgY29uc3QgW3BsdWdpbiwgLi4ub3B0aW9uc10gPSB2YWx1ZVxuICAgICAgICAgIGFkZFBsdWdpbihwbHVnaW4sIC4uLm9wdGlvbnMpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkUHJlc2V0KHZhbHVlKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB1c2FibGUgdmFsdWUsIG5vdCBgJyArIHZhbHVlICsgJ2AnKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UHJlc2V0fSByZXN1bHRcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRQcmVzZXQocmVzdWx0KSB7XG4gICAgICBhZGRMaXN0KHJlc3VsdC5wbHVnaW5zKVxuXG4gICAgICBpZiAocmVzdWx0LnNldHRpbmdzKSB7XG4gICAgICAgIHNldHRpbmdzID0gT2JqZWN0LmFzc2lnbihzZXR0aW5ncyB8fCB7fSwgcmVzdWx0LnNldHRpbmdzKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UGx1Z2dhYmxlTGlzdHxudWxsfHVuZGVmaW5lZH0gW3BsdWdpbnNdXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkTGlzdChwbHVnaW5zKSB7XG4gICAgICBsZXQgaW5kZXggPSAtMVxuXG4gICAgICBpZiAocGx1Z2lucyA9PT0gbnVsbCB8fCBwbHVnaW5zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gRW1wdHkuXG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocGx1Z2lucykpIHtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBwbHVnaW5zLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnN0IHRoaW5nID0gcGx1Z2luc1tpbmRleF1cbiAgICAgICAgICBhZGQodGhpbmcpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgbGlzdCBvZiBwbHVnaW5zLCBub3QgYCcgKyBwbHVnaW5zICsgJ2AnKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UGx1Z2lufSBwbHVnaW5cbiAgICAgKiBAcGFyYW0gey4uLnVua25vd259IFt2YWx1ZV1cbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRQbHVnaW4ocGx1Z2luLCB2YWx1ZSkge1xuICAgICAgbGV0IGluZGV4ID0gLTFcbiAgICAgIC8qKiBAdHlwZSB7UHJvY2Vzc29yWydhdHRhY2hlcnMnXVtudW1iZXJdfHVuZGVmaW5lZH0gKi9cbiAgICAgIGxldCBlbnRyeVxuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGF0dGFjaGVycy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGF0dGFjaGVyc1tpbmRleF1bMF0gPT09IHBsdWdpbikge1xuICAgICAgICAgIGVudHJ5ID0gYXR0YWNoZXJzW2luZGV4XVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgIGlmIChpc1BsYWluT2JqKGVudHJ5WzFdKSAmJiBpc1BsYWluT2JqKHZhbHVlKSkge1xuICAgICAgICAgIHZhbHVlID0gZXh0ZW5kKHRydWUsIGVudHJ5WzFdLCB2YWx1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGVudHJ5WzFdID0gdmFsdWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGZpbmUuXG4gICAgICAgIGF0dGFjaGVycy5wdXNoKFsuLi5hcmd1bWVudHNdKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKiBAdHlwZSB7UHJvY2Vzc29yWydwYXJzZSddfSAqL1xuICBmdW5jdGlvbiBwYXJzZShkb2MpIHtcbiAgICBwcm9jZXNzb3IuZnJlZXplKClcbiAgICBjb25zdCBmaWxlID0gdmZpbGUoZG9jKVxuICAgIGNvbnN0IFBhcnNlciA9IHByb2Nlc3Nvci5QYXJzZXJcbiAgICBhc3NlcnRQYXJzZXIoJ3BhcnNlJywgUGFyc2VyKVxuXG4gICAgaWYgKG5ld2FibGUoUGFyc2VyLCAncGFyc2UnKSkge1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogYG5ld2FibGVgIGNoZWNrcyB0aGlzLlxuICAgICAgcmV0dXJuIG5ldyBQYXJzZXIoU3RyaW5nKGZpbGUpLCBmaWxlKS5wYXJzZSgpXG4gICAgfVxuXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogYG5ld2FibGVgIGNoZWNrcyB0aGlzLlxuICAgIHJldHVybiBQYXJzZXIoU3RyaW5nKGZpbGUpLCBmaWxlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcbiAgfVxuXG4gIC8qKiBAdHlwZSB7UHJvY2Vzc29yWydzdHJpbmdpZnknXX0gKi9cbiAgZnVuY3Rpb24gc3RyaW5naWZ5KG5vZGUsIGRvYykge1xuICAgIHByb2Nlc3Nvci5mcmVlemUoKVxuICAgIGNvbnN0IGZpbGUgPSB2ZmlsZShkb2MpXG4gICAgY29uc3QgQ29tcGlsZXIgPSBwcm9jZXNzb3IuQ29tcGlsZXJcbiAgICBhc3NlcnRDb21waWxlcignc3RyaW5naWZ5JywgQ29tcGlsZXIpXG4gICAgYXNzZXJ0Tm9kZShub2RlKVxuXG4gICAgaWYgKG5ld2FibGUoQ29tcGlsZXIsICdjb21waWxlJykpIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGBuZXdhYmxlYCBjaGVja3MgdGhpcy5cbiAgICAgIHJldHVybiBuZXcgQ29tcGlsZXIobm9kZSwgZmlsZSkuY29tcGlsZSgpXG4gICAgfVxuXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogYG5ld2FibGVgIGNoZWNrcyB0aGlzLlxuICAgIHJldHVybiBDb21waWxlcihub2RlLCBmaWxlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAgICogQHBhcmFtIHtWRmlsZUNvbXBhdGlibGV8UnVuQ2FsbGJhY2t9IFtkb2NdXG4gICAqIEBwYXJhbSB7UnVuQ2FsbGJhY2t9IFtjYWxsYmFja11cbiAgICogQHJldHVybnMge1Byb21pc2U8Tm9kZT58dm9pZH1cbiAgICovXG4gIGZ1bmN0aW9uIHJ1bihub2RlLCBkb2MsIGNhbGxiYWNrKSB7XG4gICAgYXNzZXJ0Tm9kZShub2RlKVxuICAgIHByb2Nlc3Nvci5mcmVlemUoKVxuXG4gICAgaWYgKCFjYWxsYmFjayAmJiB0eXBlb2YgZG9jID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjayA9IGRvY1xuICAgICAgZG9jID0gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGV4ZWN1dG9yKVxuICAgIH1cblxuICAgIGV4ZWN1dG9yKG51bGwsIGNhbGxiYWNrKVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtudWxsfCgobm9kZTogTm9kZSkgPT4gdm9pZCl9IHJlc29sdmVcbiAgICAgKiBAcGFyYW0geyhlcnJvcjogRXJyb3IpID0+IHZvaWR9IHJlamVjdFxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV4ZWN1dG9yKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogYGRvY2AgY2Fu4oCZdCBiZSBhIGNhbGxiYWNrIGFueW1vcmUsIHdlIGNoZWNrZWQuXG4gICAgICB0cmFuc2Zvcm1lcnMucnVuKG5vZGUsIHZmaWxlKGRvYyksIGRvbmUpXG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtFcnJvcnxudWxsfSBlcnJvclxuICAgICAgICogQHBhcmFtIHtOb2RlfSB0cmVlXG4gICAgICAgKiBAcGFyYW0ge1ZGaWxlfSBmaWxlXG4gICAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gZG9uZShlcnJvciwgdHJlZSwgZmlsZSkge1xuICAgICAgICB0cmVlID0gdHJlZSB8fCBub2RlXG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIHJlamVjdChlcnJvcilcbiAgICAgICAgfSBlbHNlIGlmIChyZXNvbHZlKSB7XG4gICAgICAgICAgcmVzb2x2ZSh0cmVlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGBjYWxsYmFja2AgaXMgZGVmaW5lZCBpZiBgcmVzb2x2ZWAgaXMgbm90LlxuICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHRyZWUsIGZpbGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiogQHR5cGUge1Byb2Nlc3NvclsncnVuU3luYyddfSAqL1xuICBmdW5jdGlvbiBydW5TeW5jKG5vZGUsIGZpbGUpIHtcbiAgICAvKiogQHR5cGUge05vZGV8dW5kZWZpbmVkfSAqL1xuICAgIGxldCByZXN1bHRcbiAgICAvKiogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfSAqL1xuICAgIGxldCBjb21wbGV0ZVxuXG4gICAgcHJvY2Vzc29yLnJ1bihub2RlLCBmaWxlLCBkb25lKVxuXG4gICAgYXNzZXJ0RG9uZSgncnVuU3luYycsICdydW4nLCBjb21wbGV0ZSlcblxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHdlIGVpdGhlciBiYWlsZWQgb24gYW4gZXJyb3Igb3IgaGF2ZSBhIHRyZWUuXG4gICAgcmV0dXJuIHJlc3VsdFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFcnJvcnxudWxsfSBbZXJyb3JdXG4gICAgICogQHBhcmFtIHtOb2RlfSBbdHJlZV1cbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkb25lKGVycm9yLCB0cmVlKSB7XG4gICAgICBiYWlsKGVycm9yKVxuICAgICAgcmVzdWx0ID0gdHJlZVxuICAgICAgY29tcGxldGUgPSB0cnVlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7VkZpbGVDb21wYXRpYmxlfSBkb2NcbiAgICogQHBhcmFtIHtQcm9jZXNzQ2FsbGJhY2t9IFtjYWxsYmFja11cbiAgICogQHJldHVybnMge1Byb21pc2U8VkZpbGU+fHVuZGVmaW5lZH1cbiAgICovXG4gIGZ1bmN0aW9uIHByb2Nlc3MoZG9jLCBjYWxsYmFjaykge1xuICAgIHByb2Nlc3Nvci5mcmVlemUoKVxuICAgIGFzc2VydFBhcnNlcigncHJvY2VzcycsIHByb2Nlc3Nvci5QYXJzZXIpXG4gICAgYXNzZXJ0Q29tcGlsZXIoJ3Byb2Nlc3MnLCBwcm9jZXNzb3IuQ29tcGlsZXIpXG5cbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZXhlY3V0b3IpXG4gICAgfVxuXG4gICAgZXhlY3V0b3IobnVsbCwgY2FsbGJhY2spXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge251bGx8KChmaWxlOiBWRmlsZSkgPT4gdm9pZCl9IHJlc29sdmVcbiAgICAgKiBAcGFyYW0geyhlcnJvcj86IEVycm9yfG51bGx8dW5kZWZpbmVkKSA9PiB2b2lkfSByZWplY3RcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBleGVjdXRvcihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGNvbnN0IGZpbGUgPSB2ZmlsZShkb2MpXG5cbiAgICAgIHByb2Nlc3Nvci5ydW4ocHJvY2Vzc29yLnBhcnNlKGZpbGUpLCBmaWxlLCAoZXJyb3IsIHRyZWUsIGZpbGUpID0+IHtcbiAgICAgICAgaWYgKGVycm9yIHx8ICF0cmVlIHx8ICFmaWxlKSB7XG4gICAgICAgICAgZG9uZShlcnJvcilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvKiogQHR5cGUge3Vua25vd259ICovXG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gcHJvY2Vzc29yLnN0cmluZ2lmeSh0cmVlLCBmaWxlKVxuXG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkIHx8IHJlc3VsdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gRW1wdHkuXG4gICAgICAgICAgfSBlbHNlIGlmIChsb29rc0xpa2VBVkZpbGVWYWx1ZShyZXN1bHQpKSB7XG4gICAgICAgICAgICBmaWxlLnZhbHVlID0gcmVzdWx0XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZpbGUucmVzdWx0ID0gcmVzdWx0XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9uZShlcnJvciwgZmlsZSlcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge0Vycm9yfG51bGx8dW5kZWZpbmVkfSBbZXJyb3JdXG4gICAgICAgKiBAcGFyYW0ge1ZGaWxlfHVuZGVmaW5lZH0gW2ZpbGVdXG4gICAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gZG9uZShlcnJvciwgZmlsZSkge1xuICAgICAgICBpZiAoZXJyb3IgfHwgIWZpbGUpIHtcbiAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgIH0gZWxzZSBpZiAocmVzb2x2ZSkge1xuICAgICAgICAgIHJlc29sdmUoZmlsZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBgY2FsbGJhY2tgIGlzIGRlZmluZWQgaWYgYHJlc29sdmVgIGlzIG5vdC5cbiAgICAgICAgICBjYWxsYmFjayhudWxsLCBmaWxlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqIEB0eXBlIHtQcm9jZXNzb3JbJ3Byb2Nlc3NTeW5jJ119ICovXG4gIGZ1bmN0aW9uIHByb2Nlc3NTeW5jKGRvYykge1xuICAgIC8qKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9ICovXG4gICAgbGV0IGNvbXBsZXRlXG5cbiAgICBwcm9jZXNzb3IuZnJlZXplKClcbiAgICBhc3NlcnRQYXJzZXIoJ3Byb2Nlc3NTeW5jJywgcHJvY2Vzc29yLlBhcnNlcilcbiAgICBhc3NlcnRDb21waWxlcigncHJvY2Vzc1N5bmMnLCBwcm9jZXNzb3IuQ29tcGlsZXIpXG5cbiAgICBjb25zdCBmaWxlID0gdmZpbGUoZG9jKVxuXG4gICAgcHJvY2Vzc29yLnByb2Nlc3MoZmlsZSwgZG9uZSlcblxuICAgIGFzc2VydERvbmUoJ3Byb2Nlc3NTeW5jJywgJ3Byb2Nlc3MnLCBjb21wbGV0ZSlcblxuICAgIHJldHVybiBmaWxlXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Vycm9yfG51bGx8dW5kZWZpbmVkfSBbZXJyb3JdXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZG9uZShlcnJvcikge1xuICAgICAgY29tcGxldGUgPSB0cnVlXG4gICAgICBiYWlsKGVycm9yKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGB2YWx1ZWAgaXMgYSBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIG5ld2FibGUodmFsdWUsIG5hbWUpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiZcbiAgICAvLyBQcm90b3R5cGVzIGRvIGV4aXN0LlxuICAgIC8vIHR5cGUtY292ZXJhZ2U6aWdub3JlLW5leHQtbGluZVxuICAgIHZhbHVlLnByb3RvdHlwZSAmJlxuICAgIC8vIEEgZnVuY3Rpb24gd2l0aCBrZXlzIGluIGl0cyBwcm90b3R5cGUgaXMgcHJvYmFibHkgYSBjb25zdHJ1Y3Rvci5cbiAgICAvLyBDbGFzc2Vz4oCZIHByb3RvdHlwZSBtZXRob2RzIGFyZSBub3QgZW51bWVyYWJsZSwgc28gd2UgY2hlY2sgaWYgc29tZSB2YWx1ZVxuICAgIC8vIGV4aXN0cyBpbiB0aGUgcHJvdG90eXBlLlxuICAgIC8vIHR5cGUtY292ZXJhZ2U6aWdub3JlLW5leHQtbGluZVxuICAgIChrZXlzKHZhbHVlLnByb3RvdHlwZSkgfHwgbmFtZSBpbiB2YWx1ZS5wcm90b3R5cGUpXG4gIClcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCB3aXRoIGtleXMuXG4gKlxuICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCB1bmtub3duPn0gdmFsdWVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBrZXlzKHZhbHVlKSB7XG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICBsZXQga2V5XG5cbiAgZm9yIChrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAob3duLmNhbGwodmFsdWUsIGtleSkpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qKlxuICogQXNzZXJ0IGEgcGFyc2VyIGlzIGF2YWlsYWJsZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHt1bmtub3dufSB2YWx1ZVxuICogQHJldHVybnMge2Fzc2VydHMgdmFsdWUgaXMgUGFyc2VyfVxuICovXG5mdW5jdGlvbiBhc3NlcnRQYXJzZXIobmFtZSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBgJyArIG5hbWUgKyAnYCB3aXRob3V0IGBQYXJzZXJgJylcbiAgfVxufVxuXG4vKipcbiAqIEFzc2VydCBhIGNvbXBpbGVyIGlzIGF2YWlsYWJsZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHt1bmtub3dufSB2YWx1ZVxuICogQHJldHVybnMge2Fzc2VydHMgdmFsdWUgaXMgQ29tcGlsZXJ9XG4gKi9cbmZ1bmN0aW9uIGFzc2VydENvbXBpbGVyKG5hbWUsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgYCcgKyBuYW1lICsgJ2Agd2l0aG91dCBgQ29tcGlsZXJgJylcbiAgfVxufVxuXG4vKipcbiAqIEFzc2VydCB0aGUgcHJvY2Vzc29yIGlzIG5vdCBmcm96ZW4uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7dW5rbm93bn0gZnJvemVuXG4gKiBAcmV0dXJucyB7YXNzZXJ0cyBmcm96ZW4gaXMgZmFsc2V9XG4gKi9cbmZ1bmN0aW9uIGFzc2VydFVuZnJvemVuKG5hbWUsIGZyb3plbikge1xuICBpZiAoZnJvemVuKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0Nhbm5vdCBjYWxsIGAnICtcbiAgICAgICAgbmFtZSArXG4gICAgICAgICdgIG9uIGEgZnJvemVuIHByb2Nlc3Nvci5cXG5DcmVhdGUgYSBuZXcgcHJvY2Vzc29yIGZpcnN0LCBieSBjYWxsaW5nIGl0OiB1c2UgYHByb2Nlc3NvcigpYCBpbnN0ZWFkIG9mIGBwcm9jZXNzb3JgLidcbiAgICApXG4gIH1cbn1cblxuLyoqXG4gKiBBc3NlcnQgYG5vZGVgIGlzIGEgdW5pc3Qgbm9kZS5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IG5vZGVcbiAqIEByZXR1cm5zIHthc3NlcnRzIG5vZGUgaXMgTm9kZX1cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0Tm9kZShub2RlKSB7XG4gIC8vIGBpc1BsYWluT2JqYCB1bmZvcnR1bmF0ZWx5IHVzZXMgYGFueWAgaW5zdGVhZCBvZiBgdW5rbm93bmAuXG4gIC8vIHR5cGUtY292ZXJhZ2U6aWdub3JlLW5leHQtbGluZVxuICBpZiAoIWlzUGxhaW5PYmoobm9kZSkgfHwgdHlwZW9mIG5vZGUudHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBub2RlLCBnb3QgYCcgKyBub2RlICsgJ2AnKVxuICAgIC8vIEZpbmUuXG4gIH1cbn1cblxuLyoqXG4gKiBBc3NlcnQgdGhhdCBgY29tcGxldGVgIGlzIGB0cnVlYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IGFzeW5jTmFtZVxuICogQHBhcmFtIHt1bmtub3dufSBjb21wbGV0ZVxuICogQHJldHVybnMge2Fzc2VydHMgY29tcGxldGUgaXMgdHJ1ZX1cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0RG9uZShuYW1lLCBhc3luY05hbWUsIGNvbXBsZXRlKSB7XG4gIGlmICghY29tcGxldGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnYCcgKyBuYW1lICsgJ2AgZmluaXNoZWQgYXN5bmMuIFVzZSBgJyArIGFzeW5jTmFtZSArICdgIGluc3RlYWQnXG4gICAgKVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtWRmlsZUNvbXBhdGlibGV9IFt2YWx1ZV1cbiAqIEByZXR1cm5zIHtWRmlsZX1cbiAqL1xuZnVuY3Rpb24gdmZpbGUodmFsdWUpIHtcbiAgcmV0dXJuIGxvb2tzTGlrZUFWRmlsZSh2YWx1ZSkgPyB2YWx1ZSA6IG5ldyBWRmlsZSh2YWx1ZSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1ZGaWxlQ29tcGF0aWJsZX0gW3ZhbHVlXVxuICogQHJldHVybnMge3ZhbHVlIGlzIFZGaWxlfVxuICovXG5mdW5jdGlvbiBsb29rc0xpa2VBVkZpbGUodmFsdWUpIHtcbiAgcmV0dXJuIEJvb2xlYW4oXG4gICAgdmFsdWUgJiZcbiAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICdtZXNzYWdlJyBpbiB2YWx1ZSAmJlxuICAgICAgJ21lc3NhZ2VzJyBpbiB2YWx1ZVxuICApXG59XG5cbi8qKlxuICogQHBhcmFtIHt1bmtub3dufSBbdmFsdWVdXG4gKiBAcmV0dXJucyB7dmFsdWUgaXMgVkZpbGVWYWx1ZX1cbiAqL1xuZnVuY3Rpb24gbG9va3NMaWtlQVZGaWxlVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgaXNCdWZmZXIodmFsdWUpXG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG5cdGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHZhbHVlID09PSBudWxsKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Y29uc3QgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKTtcblx0cmV0dXJuIChwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90b3R5cGUpID09PSBudWxsKSAmJiAhKFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWx1ZSkgJiYgIShTeW1ib2wuaXRlcmF0b3IgaW4gdmFsdWUpO1xufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiBQb2ludExpa2VcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2xpbmVdXG4gKiBAcHJvcGVydHkge251bWJlciB8IG51bGwgfCB1bmRlZmluZWR9IFtjb2x1bW5dXG4gKiBAcHJvcGVydHkge251bWJlciB8IG51bGwgfCB1bmRlZmluZWR9IFtvZmZzZXRdXG4gKlxuICogQHR5cGVkZWYgUG9zaXRpb25MaWtlXG4gKiBAcHJvcGVydHkge1BvaW50TGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IFtzdGFydF1cbiAqIEBwcm9wZXJ0eSB7UG9pbnRMaWtlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2VuZF1cbiAqXG4gKiBAdHlwZWRlZiBOb2RlTGlrZVxuICogQHByb3BlcnR5IHtQb3NpdGlvbkxpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBbcG9zaXRpb25dXG4gKi9cblxuLyoqXG4gKiBDaGVjayBpZiBgbm9kZWAgaXMgZ2VuZXJhdGVkLlxuICpcbiAqIEBwYXJhbSB7Tm9kZUxpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBbbm9kZV1cbiAqICAgTm9kZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogICBXaGV0aGVyIGBub2RlYCBpcyBnZW5lcmF0ZWQgKGRvZXMgbm90IGhhdmUgcG9zaXRpb25hbCBpbmZvKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlZChub2RlKSB7XG4gIHJldHVybiAoXG4gICAgIW5vZGUgfHxcbiAgICAhbm9kZS5wb3NpdGlvbiB8fFxuICAgICFub2RlLnBvc2l0aW9uLnN0YXJ0IHx8XG4gICAgIW5vZGUucG9zaXRpb24uc3RhcnQubGluZSB8fFxuICAgICFub2RlLnBvc2l0aW9uLnN0YXJ0LmNvbHVtbiB8fFxuICAgICFub2RlLnBvc2l0aW9uLmVuZCB8fFxuICAgICFub2RlLnBvc2l0aW9uLmVuZC5saW5lIHx8XG4gICAgIW5vZGUucG9zaXRpb24uZW5kLmNvbHVtblxuICApXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuTm9kZX0gTm9kZVxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QnKS5QYXJlbnR9IFBhcmVudFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSBQcm9wc1xuICogQHR5cGVkZWYge251bGwgfCB1bmRlZmluZWQgfCBzdHJpbmcgfCBQcm9wcyB8IFRlc3RGdW5jdGlvbkFueXRoaW5nIHwgQXJyYXk8c3RyaW5nIHwgUHJvcHMgfCBUZXN0RnVuY3Rpb25Bbnl0aGluZz59IFRlc3RcbiAqICAgQ2hlY2sgZm9yIGFuIGFyYml0cmFyeSBub2RlLCB1bmF3YXJlIG9mIFR5cGVTY3JpcHQgaW5mZXJyYWwuXG4gKlxuICogQGNhbGxiYWNrIFRlc3RGdW5jdGlvbkFueXRoaW5nXG4gKiAgIENoZWNrIGlmIGEgbm9kZSBwYXNzZXMgYSB0ZXN0LCB1bmF3YXJlIG9mIFR5cGVTY3JpcHQgaW5mZXJyYWwuXG4gKiBAcGFyYW0ge3Vua25vd259IHRoaXNcbiAqICAgVGhlIGdpdmVuIGNvbnRleHQuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqICAgQSBub2RlLlxuICogQHBhcmFtIHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbaW5kZXhdXG4gKiAgIFRoZSBub2Rl4oCZcyBwb3NpdGlvbiBpbiBpdHMgcGFyZW50LlxuICogQHBhcmFtIHtQYXJlbnQgfCBudWxsIHwgdW5kZWZpbmVkfSBbcGFyZW50XVxuICogICBUaGUgbm9kZeKAmXMgcGFyZW50LlxuICogQHJldHVybnMge2Jvb2xlYW4gfCB2b2lkfVxuICogICBXaGV0aGVyIHRoaXMgbm9kZSBwYXNzZXMgdGhlIHRlc3QuXG4gKi9cblxuLyoqXG4gKiBAdGVtcGxhdGUge05vZGV9IEtpbmRcbiAqICAgTm9kZSB0eXBlLlxuICogQHR5cGVkZWYge0tpbmRbJ3R5cGUnXSB8IFBhcnRpYWw8S2luZD4gfCBUZXN0RnVuY3Rpb25QcmVkaWNhdGU8S2luZD4gfCBBcnJheTxLaW5kWyd0eXBlJ10gfCBQYXJ0aWFsPEtpbmQ+IHwgVGVzdEZ1bmN0aW9uUHJlZGljYXRlPEtpbmQ+Pn0gUHJlZGljYXRlVGVzdFxuICogICBDaGVjayBmb3IgYSBub2RlIHRoYXQgY2FuIGJlIGluZmVycmVkIGJ5IFR5cGVTY3JpcHQuXG4gKi9cblxuLyoqXG4gKiBDaGVjayBpZiBhIG5vZGUgcGFzc2VzIGEgY2VydGFpbiB0ZXN0LlxuICpcbiAqIEB0ZW1wbGF0ZSB7Tm9kZX0gS2luZFxuICogICBOb2RlIHR5cGUuXG4gKiBAY2FsbGJhY2sgVGVzdEZ1bmN0aW9uUHJlZGljYXRlXG4gKiAgIENvbXBsZXggdGVzdCBmdW5jdGlvbiBmb3IgYSBub2RlIHRoYXQgY2FuIGJlIGluZmVycmVkIGJ5IFR5cGVTY3JpcHQuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqICAgQSBub2RlLlxuICogQHBhcmFtIHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbaW5kZXhdXG4gKiAgIFRoZSBub2Rl4oCZcyBwb3NpdGlvbiBpbiBpdHMgcGFyZW50LlxuICogQHBhcmFtIHtQYXJlbnQgfCBudWxsIHwgdW5kZWZpbmVkfSBbcGFyZW50XVxuICogICBUaGUgbm9kZeKAmXMgcGFyZW50LlxuICogQHJldHVybnMge25vZGUgaXMgS2luZH1cbiAqICAgV2hldGhlciB0aGlzIG5vZGUgcGFzc2VzIHRoZSB0ZXN0LlxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIEFzc2VydEFueXRoaW5nXG4gKiAgIENoZWNrIHRoYXQgYW4gYXJiaXRyYXJ5IHZhbHVlIGlzIGEgbm9kZSwgdW5hd2FyZSBvZiBUeXBlU2NyaXB0IGluZmVycmFsLlxuICogQHBhcmFtIHt1bmtub3dufSBbbm9kZV1cbiAqICAgQW55dGhpbmcgKHR5cGljYWxseSBhIG5vZGUpLlxuICogQHBhcmFtIHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbaW5kZXhdXG4gKiAgIFRoZSBub2Rl4oCZcyBwb3NpdGlvbiBpbiBpdHMgcGFyZW50LlxuICogQHBhcmFtIHtQYXJlbnQgfCBudWxsIHwgdW5kZWZpbmVkfSBbcGFyZW50XVxuICogICBUaGUgbm9kZeKAmXMgcGFyZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiAgIFdoZXRoZXIgdGhpcyBpcyBhIG5vZGUgYW5kIHBhc3NlcyBhIHRlc3QuXG4gKi9cblxuLyoqXG4gKiBDaGVjayBpZiBhIG5vZGUgaXMgYSBub2RlIGFuZCBwYXNzZXMgYSBjZXJ0YWluIG5vZGUgdGVzdC5cbiAqXG4gKiBAdGVtcGxhdGUge05vZGV9IEtpbmRcbiAqICAgTm9kZSB0eXBlLlxuICogQGNhbGxiYWNrIEFzc2VydFByZWRpY2F0ZVxuICogICBDaGVjayB0aGF0IGFuIGFyYml0cmFyeSB2YWx1ZSBpcyBhIHNwZWNpZmljIG5vZGUsIGF3YXJlIG9mIFR5cGVTY3JpcHQuXG4gKiBAcGFyYW0ge3Vua25vd259IFtub2RlXVxuICogICBBbnl0aGluZyAodHlwaWNhbGx5IGEgbm9kZSkuXG4gKiBAcGFyYW0ge251bWJlciB8IG51bGwgfCB1bmRlZmluZWR9IFtpbmRleF1cbiAqICAgVGhlIG5vZGXigJlzIHBvc2l0aW9uIGluIGl0cyBwYXJlbnQuXG4gKiBAcGFyYW0ge1BhcmVudCB8IG51bGwgfCB1bmRlZmluZWR9IFtwYXJlbnRdXG4gKiAgIFRoZSBub2Rl4oCZcyBwYXJlbnQuXG4gKiBAcmV0dXJucyB7bm9kZSBpcyBLaW5kfVxuICogICBXaGV0aGVyIHRoaXMgaXMgYSBub2RlIGFuZCBwYXNzZXMgYSB0ZXN0LlxuICovXG5cbi8qKlxuICogQ2hlY2sgaWYgYG5vZGVgIGlzIGEgYE5vZGVgIGFuZCB3aGV0aGVyIGl0IHBhc3NlcyB0aGUgZ2l2ZW4gdGVzdC5cbiAqXG4gKiBAcGFyYW0gbm9kZVxuICogICBUaGluZyB0byBjaGVjaywgdHlwaWNhbGx5IGBOb2RlYC5cbiAqIEBwYXJhbSB0ZXN0XG4gKiAgIEEgY2hlY2sgZm9yIGEgc3BlY2lmaWMgbm9kZS5cbiAqIEBwYXJhbSBpbmRleFxuICogICBUaGUgbm9kZeKAmXMgcG9zaXRpb24gaW4gaXRzIHBhcmVudC5cbiAqIEBwYXJhbSBwYXJlbnRcbiAqICAgVGhlIG5vZGXigJlzIHBhcmVudC5cbiAqIEByZXR1cm5zXG4gKiAgIFdoZXRoZXIgYG5vZGVgIGlzIGEgbm9kZSBhbmQgcGFzc2VzIGEgdGVzdC5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzID1cbiAgLyoqXG4gICAqIEB0eXBlIHsoXG4gICAqICAgKCgpID0+IGZhbHNlKSAmXG4gICAqICAgKDxLaW5kIGV4dGVuZHMgTm9kZSA9IE5vZGU+KG5vZGU6IHVua25vd24sIHRlc3Q6IFByZWRpY2F0ZVRlc3Q8S2luZD4sIGluZGV4OiBudW1iZXIsIHBhcmVudDogUGFyZW50LCBjb250ZXh0PzogdW5rbm93bikgPT4gbm9kZSBpcyBLaW5kKSAmXG4gICAqICAgKDxLaW5kIGV4dGVuZHMgTm9kZSA9IE5vZGU+KG5vZGU6IHVua25vd24sIHRlc3Q6IFByZWRpY2F0ZVRlc3Q8S2luZD4sIGluZGV4PzogbnVsbCB8IHVuZGVmaW5lZCwgcGFyZW50PzogbnVsbCB8IHVuZGVmaW5lZCwgY29udGV4dD86IHVua25vd24pID0+IG5vZGUgaXMgS2luZCkgJlxuICAgKiAgICgobm9kZTogdW5rbm93biwgdGVzdDogVGVzdCwgaW5kZXg6IG51bWJlciwgcGFyZW50OiBQYXJlbnQsIGNvbnRleHQ/OiB1bmtub3duKSA9PiBib29sZWFuKSAmXG4gICAqICAgKChub2RlOiB1bmtub3duLCB0ZXN0PzogVGVzdCwgaW5kZXg/OiBudWxsIHwgdW5kZWZpbmVkLCBwYXJlbnQ/OiBudWxsIHwgdW5kZWZpbmVkLCBjb250ZXh0PzogdW5rbm93bikgPT4gYm9vbGVhbilcbiAgICogKX1cbiAgICovXG4gIChcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3Vua25vd259IFtub2RlXVxuICAgICAqIEBwYXJhbSB7VGVzdH0gW3Rlc3RdXG4gICAgICogQHBhcmFtIHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbaW5kZXhdXG4gICAgICogQHBhcmFtIHtQYXJlbnQgfCBudWxsIHwgdW5kZWZpbmVkfSBbcGFyZW50XVxuICAgICAqIEBwYXJhbSB7dW5rbm93bn0gW2NvbnRleHRdXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXNcbiAgICBmdW5jdGlvbiBpcyhub2RlLCB0ZXN0LCBpbmRleCwgcGFyZW50LCBjb250ZXh0KSB7XG4gICAgICBjb25zdCBjaGVjayA9IGNvbnZlcnQodGVzdClcblxuICAgICAgaWYgKFxuICAgICAgICBpbmRleCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIGluZGV4ICE9PSBudWxsICYmXG4gICAgICAgICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInIHx8XG4gICAgICAgICAgaW5kZXggPCAwIHx8XG4gICAgICAgICAgaW5kZXggPT09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSlcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHBvc2l0aXZlIGZpbml0ZSBpbmRleCcpXG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgcGFyZW50ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgcGFyZW50ICE9PSBudWxsICYmXG4gICAgICAgICghaXMocGFyZW50KSB8fCAhcGFyZW50LmNoaWxkcmVuKVxuICAgICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgcGFyZW50IG5vZGUnKVxuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIChwYXJlbnQgPT09IHVuZGVmaW5lZCB8fCBwYXJlbnQgPT09IG51bGwpICE9PVxuICAgICAgICAoaW5kZXggPT09IHVuZGVmaW5lZCB8fCBpbmRleCA9PT0gbnVsbClcbiAgICAgICkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGJvdGggcGFyZW50IGFuZCBpbmRleCcpXG4gICAgICB9XG5cbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgTG9va3MgbGlrZSBhIG5vZGUuXG4gICAgICByZXR1cm4gbm9kZSAmJiBub2RlLnR5cGUgJiYgdHlwZW9mIG5vZGUudHlwZSA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBCb29sZWFuKGNoZWNrLmNhbGwoY29udGV4dCwgbm9kZSwgaW5kZXgsIHBhcmVudCkpXG4gICAgICAgIDogZmFsc2VcbiAgICB9XG4gIClcblxuLyoqXG4gKiBHZW5lcmF0ZSBhbiBhc3NlcnRpb24gZnJvbSBhIHRlc3QuXG4gKlxuICogVXNlZnVsIGlmIHlvdeKAmXJlIGdvaW5nIHRvIHRlc3QgbWFueSBub2RlcywgZm9yIGV4YW1wbGUgd2hlbiBjcmVhdGluZyBhXG4gKiB1dGlsaXR5IHdoZXJlIHNvbWV0aGluZyBlbHNlIHBhc3NlcyBhIGNvbXBhdGlibGUgdGVzdC5cbiAqXG4gKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBhIGJpdCBmYXN0ZXIgYmVjYXVzZSBpdCBleHBlY3RzIHZhbGlkIGlucHV0IG9ubHk6XG4gKiBhIGBub2RlYCwgYGluZGV4YCwgYW5kIGBwYXJlbnRgLlxuICpcbiAqIEBwYXJhbSB0ZXN0XG4gKiAgICogICB3aGVuIG51bGxpc2gsIGNoZWNrcyBpZiBgbm9kZWAgaXMgYSBgTm9kZWAuXG4gKiAgICogICB3aGVuIGBzdHJpbmdgLCB3b3JrcyBsaWtlIHBhc3NpbmcgYChub2RlKSA9PiBub2RlLnR5cGUgPT09IHRlc3RgLlxuICogICAqICAgd2hlbiBgZnVuY3Rpb25gIGNoZWNrcyBpZiBmdW5jdGlvbiBwYXNzZWQgdGhlIG5vZGUgaXMgdHJ1ZS5cbiAqICAgKiAgIHdoZW4gYG9iamVjdGAsIGNoZWNrcyB0aGF0IGFsbCBrZXlzIGluIHRlc3QgYXJlIGluIG5vZGUsIGFuZCB0aGF0IHRoZXkgaGF2ZSAoc3RyaWN0bHkpIGVxdWFsIHZhbHVlcy5cbiAqICAgKiAgIHdoZW4gYGFycmF5YCwgY2hlY2tzIGlmIGFueSBvbmUgb2YgdGhlIHN1YnRlc3RzIHBhc3MuXG4gKiBAcmV0dXJuc1xuICogICBBbiBhc3NlcnRpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBjb252ZXJ0ID1cbiAgLyoqXG4gICAqIEB0eXBlIHsoXG4gICAqICAgKDxLaW5kIGV4dGVuZHMgTm9kZT4odGVzdDogUHJlZGljYXRlVGVzdDxLaW5kPikgPT4gQXNzZXJ0UHJlZGljYXRlPEtpbmQ+KSAmXG4gICAqICAgKCh0ZXN0PzogVGVzdCkgPT4gQXNzZXJ0QW55dGhpbmcpXG4gICAqICl9XG4gICAqL1xuICAoXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtUZXN0fSBbdGVzdF1cbiAgICAgKiBAcmV0dXJucyB7QXNzZXJ0QW55dGhpbmd9XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHRlc3QpIHtcbiAgICAgIGlmICh0ZXN0ID09PSB1bmRlZmluZWQgfHwgdGVzdCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gb2tcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0ZXN0ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdHlwZUZhY3RvcnkodGVzdClcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0ZXN0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0ZXN0KSA/IGFueUZhY3RvcnkodGVzdCkgOiBwcm9wc0ZhY3RvcnkodGVzdClcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0ZXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjYXN0RmFjdG9yeSh0ZXN0KVxuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGZ1bmN0aW9uLCBzdHJpbmcsIG9yIG9iamVjdCBhcyB0ZXN0JylcbiAgICB9XG4gIClcblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZyB8IFByb3BzIHwgVGVzdEZ1bmN0aW9uQW55dGhpbmc+fSB0ZXN0c1xuICogQHJldHVybnMge0Fzc2VydEFueXRoaW5nfVxuICovXG5mdW5jdGlvbiBhbnlGYWN0b3J5KHRlc3RzKSB7XG4gIC8qKiBAdHlwZSB7QXJyYXk8QXNzZXJ0QW55dGhpbmc+fSAqL1xuICBjb25zdCBjaGVja3MgPSBbXVxuICBsZXQgaW5kZXggPSAtMVxuXG4gIHdoaWxlICgrK2luZGV4IDwgdGVzdHMubGVuZ3RoKSB7XG4gICAgY2hlY2tzW2luZGV4XSA9IGNvbnZlcnQodGVzdHNbaW5kZXhdKVxuICB9XG5cbiAgcmV0dXJuIGNhc3RGYWN0b3J5KGFueSlcblxuICAvKipcbiAgICogQHRoaXMge3Vua25vd259XG4gICAqIEBwYXJhbSB7QXJyYXk8dW5rbm93bj59IHBhcmFtZXRlcnNcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBmdW5jdGlvbiBhbnkoLi4ucGFyYW1ldGVycykge1xuICAgIGxldCBpbmRleCA9IC0xXG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGNoZWNrcy5sZW5ndGgpIHtcbiAgICAgIGlmIChjaGVja3NbaW5kZXhdLmNhbGwodGhpcywgLi4ucGFyYW1ldGVycykpIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuLyoqXG4gKiBUdXJuIGFuIG9iamVjdCBpbnRvIGEgdGVzdCBmb3IgYSBub2RlIHdpdGggYSBjZXJ0YWluIGZpZWxkcy5cbiAqXG4gKiBAcGFyYW0ge1Byb3BzfSBjaGVja1xuICogQHJldHVybnMge0Fzc2VydEFueXRoaW5nfVxuICovXG5mdW5jdGlvbiBwcm9wc0ZhY3RvcnkoY2hlY2spIHtcbiAgcmV0dXJuIGNhc3RGYWN0b3J5KGFsbClcblxuICAvKipcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gYWxsKG5vZGUpIHtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICBsZXQga2V5XG5cbiAgICBmb3IgKGtleSBpbiBjaGVjaykge1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogaHVzaCwgaXQgc3VyZSB3b3JrcyBhcyBhbiBpbmRleC5cbiAgICAgIGlmIChub2RlW2tleV0gIT09IGNoZWNrW2tleV0pIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlXG4gIH1cbn1cblxuLyoqXG4gKiBUdXJuIGEgc3RyaW5nIGludG8gYSB0ZXN0IGZvciBhIG5vZGUgd2l0aCBhIGNlcnRhaW4gdHlwZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY2hlY2tcbiAqIEByZXR1cm5zIHtBc3NlcnRBbnl0aGluZ31cbiAqL1xuZnVuY3Rpb24gdHlwZUZhY3RvcnkoY2hlY2spIHtcbiAgcmV0dXJuIGNhc3RGYWN0b3J5KHR5cGUpXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICAgKi9cbiAgZnVuY3Rpb24gdHlwZShub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUgJiYgbm9kZS50eXBlID09PSBjaGVja1xuICB9XG59XG5cbi8qKlxuICogVHVybiBhIGN1c3RvbSB0ZXN0IGludG8gYSB0ZXN0IGZvciBhIG5vZGUgdGhhdCBwYXNzZXMgdGhhdCB0ZXN0LlxuICpcbiAqIEBwYXJhbSB7VGVzdEZ1bmN0aW9uQW55dGhpbmd9IGNoZWNrXG4gKiBAcmV0dXJucyB7QXNzZXJ0QW55dGhpbmd9XG4gKi9cbmZ1bmN0aW9uIGNhc3RGYWN0b3J5KGNoZWNrKSB7XG4gIHJldHVybiBhc3NlcnRpb25cblxuICAvKipcbiAgICogQHRoaXMge3Vua25vd259XG4gICAqIEBwYXJhbSB7dW5rbm93bn0gbm9kZVxuICAgKiBAcGFyYW0ge0FycmF5PHVua25vd24+fSBwYXJhbWV0ZXJzXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gYXNzZXJ0aW9uKG5vZGUsIC4uLnBhcmFtZXRlcnMpIHtcbiAgICByZXR1cm4gQm9vbGVhbihcbiAgICAgIG5vZGUgJiZcbiAgICAgICAgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnICYmXG4gICAgICAgICd0eXBlJyBpbiBub2RlICYmXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGZpbmUuXG4gICAgICAgIEJvb2xlYW4oY2hlY2suY2FsbCh0aGlzLCBub2RlLCAuLi5wYXJhbWV0ZXJzKSlcbiAgICApXG4gIH1cbn1cblxuZnVuY3Rpb24gb2soKSB7XG4gIHJldHVybiB0cnVlXG59XG4iLCIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuUG9zaXRpb259IFBvc2l0aW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLk5vZGV9IE5vZGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuUG9pbnR9IFBvaW50XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiBOb2RlTGlrZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGVcbiAqIEBwcm9wZXJ0eSB7UG9zaXRpb25MaWtlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW3Bvc2l0aW9uXVxuICpcbiAqIEB0eXBlZGVmIFBvc2l0aW9uTGlrZVxuICogQHByb3BlcnR5IHtQb2ludExpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBbc3RhcnRdXG4gKiBAcHJvcGVydHkge1BvaW50TGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IFtlbmRdXG4gKlxuICogQHR5cGVkZWYgUG9pbnRMaWtlXG4gKiBAcHJvcGVydHkge251bWJlciB8IG51bGwgfCB1bmRlZmluZWR9IFtsaW5lXVxuICogQHByb3BlcnR5IHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbY29sdW1uXVxuICogQHByb3BlcnR5IHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbb2Zmc2V0XVxuICovXG5cbi8qKlxuICogR2V0IHRoZSBzdGFydGluZyBwb2ludCBvZiBgbm9kZWAuXG4gKlxuICogQHBhcmFtIG5vZGVcbiAqICAgTm9kZS5cbiAqIEByZXR1cm5zXG4gKiAgIFBvaW50LlxuICovXG5leHBvcnQgY29uc3QgcG9pbnRTdGFydCA9IHBvaW50KCdzdGFydCcpXG5cbi8qKlxuICogR2V0IHRoZSBlbmRpbmcgcG9pbnQgb2YgYG5vZGVgLlxuICpcbiAqIEBwYXJhbSBub2RlXG4gKiAgIE5vZGUuXG4gKiBAcmV0dXJuc1xuICogICBQb2ludC5cbiAqL1xuZXhwb3J0IGNvbnN0IHBvaW50RW5kID0gcG9pbnQoJ2VuZCcpXG5cbi8qKlxuICogR2V0IHRoZSBwb3NpdGlvbmFsIGluZm8gb2YgYG5vZGVgLlxuICpcbiAqIEBwYXJhbSB7Tm9kZUxpa2UgfCBOb2RlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW25vZGVdXG4gKiAgIE5vZGUuXG4gKiBAcmV0dXJucyB7UG9zaXRpb259XG4gKiAgIFBvc2l0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcG9zaXRpb24obm9kZSkge1xuICByZXR1cm4ge3N0YXJ0OiBwb2ludFN0YXJ0KG5vZGUpLCBlbmQ6IHBvaW50RW5kKG5vZGUpfVxufVxuXG4vKipcbiAqIEdldCB0aGUgcG9zaXRpb25hbCBpbmZvIG9mIGBub2RlYC5cbiAqXG4gKiBAcGFyYW0geydzdGFydCcgfCAnZW5kJ30gdHlwZVxuICogICBTaWRlLlxuICogQHJldHVybnNcbiAqICAgR2V0dGVyLlxuICovXG5mdW5jdGlvbiBwb2ludCh0eXBlKSB7XG4gIHJldHVybiBwb2ludFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHBvaW50IGluZm8gb2YgYG5vZGVgIGF0IGEgYm91bmQgc2lkZS5cbiAgICpcbiAgICogQHBhcmFtIHtOb2RlTGlrZSB8IE5vZGUgfCBudWxsIHwgdW5kZWZpbmVkfSBbbm9kZV1cbiAgICogQHJldHVybnMge1BvaW50fVxuICAgKi9cbiAgZnVuY3Rpb24gcG9pbnQobm9kZSkge1xuICAgIGNvbnN0IHBvaW50ID0gKG5vZGUgJiYgbm9kZS5wb3NpdGlvbiAmJiBub2RlLnBvc2l0aW9uW3R5cGVdKSB8fCB7fVxuXG4gICAgLy8gVG8gZG86IG5leHQgbWFqb3I6IGRvbuKAmXQgcmV0dXJuIHBvaW50cyB3aGVuIGludmFsaWQuXG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGluIHByYWN0aWNlLCBudWxsIGlzIGFsbG93ZWQuXG4gICAgICBsaW5lOiBwb2ludC5saW5lIHx8IG51bGwsXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBpbiBwcmFjdGljZSwgbnVsbCBpcyBhbGxvd2VkLlxuICAgICAgY29sdW1uOiBwb2ludC5jb2x1bW4gfHwgbnVsbCxcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGluIHByYWN0aWNlLCBudWxsIGlzIGFsbG93ZWQuXG4gICAgICBvZmZzZXQ6IHBvaW50Lm9mZnNldCA+IC0xID8gcG9pbnQub2Zmc2V0IDogbnVsbFxuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLk5vZGV9IE5vZGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuUG9pbnR9IFBvaW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLlBvc2l0aW9ufSBQb3NpdGlvblxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgTm9kZUxpa2VcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlXG4gKiBAcHJvcGVydHkge1Bvc2l0aW9uTGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IFtwb3NpdGlvbl1cbiAqXG4gKiBAdHlwZWRlZiBQb3NpdGlvbkxpa2VcbiAqIEBwcm9wZXJ0eSB7UG9pbnRMaWtlIHwgbnVsbCB8IHVuZGVmaW5lZH0gW3N0YXJ0XVxuICogQHByb3BlcnR5IHtQb2ludExpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBbZW5kXVxuICpcbiAqIEB0eXBlZGVmIFBvaW50TGlrZVxuICogQHByb3BlcnR5IHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBbbGluZV1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2NvbHVtbl1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29mZnNldF1cbiAqL1xuXG4vKipcbiAqIFNlcmlhbGl6ZSB0aGUgcG9zaXRpb25hbCBpbmZvIG9mIGEgcG9pbnQsIHBvc2l0aW9uIChzdGFydCBhbmQgZW5kIHBvaW50cyksXG4gKiBvciBub2RlLlxuICpcbiAqIEBwYXJhbSB7Tm9kZSB8IE5vZGVMaWtlIHwgUG9zaXRpb24gfCBQb3NpdGlvbkxpa2UgfCBQb2ludCB8IFBvaW50TGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IFt2YWx1ZV1cbiAqICAgTm9kZSwgcG9zaXRpb24sIG9yIHBvaW50LlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgUHJldHR5IHByaW50ZWQgcG9zaXRpb25hbCBpbmZvIG9mIGEgbm9kZSAoYHN0cmluZ2ApLlxuICpcbiAqICAgSW4gdGhlIGZvcm1hdCBvZiBhIHJhbmdlIGBsczpjcy1sZTpjZWAgKHdoZW4gZ2l2ZW4gYG5vZGVgIG9yIGBwb3NpdGlvbmApXG4gKiAgIG9yIGEgcG9pbnQgYGw6Y2AgKHdoZW4gZ2l2ZW4gYHBvaW50YCksIHdoZXJlIGBsYCBzdGFuZHMgZm9yIGxpbmUsIGBjYCBmb3JcbiAqICAgY29sdW1uLCBgc2AgZm9yIGBzdGFydGAsIGFuZCBgZWAgZm9yIGVuZC5cbiAqICAgQW4gZW1wdHkgc3RyaW5nIChgJydgKSBpcyByZXR1cm5lZCBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgbmVpdGhlciBgbm9kZWAsXG4gKiAgIGBwb3NpdGlvbmAsIG5vciBgcG9pbnRgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5UG9zaXRpb24odmFsdWUpIHtcbiAgLy8gTm90aGluZy5cbiAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBOb2RlLlxuICBpZiAoJ3Bvc2l0aW9uJyBpbiB2YWx1ZSB8fCAndHlwZScgaW4gdmFsdWUpIHtcbiAgICByZXR1cm4gcG9zaXRpb24odmFsdWUucG9zaXRpb24pXG4gIH1cblxuICAvLyBQb3NpdGlvbi5cbiAgaWYgKCdzdGFydCcgaW4gdmFsdWUgfHwgJ2VuZCcgaW4gdmFsdWUpIHtcbiAgICByZXR1cm4gcG9zaXRpb24odmFsdWUpXG4gIH1cblxuICAvLyBQb2ludC5cbiAgaWYgKCdsaW5lJyBpbiB2YWx1ZSB8fCAnY29sdW1uJyBpbiB2YWx1ZSkge1xuICAgIHJldHVybiBwb2ludCh2YWx1ZSlcbiAgfVxuXG4gIC8vID9cbiAgcmV0dXJuICcnXG59XG5cbi8qKlxuICogQHBhcmFtIHtQb2ludCB8IFBvaW50TGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IHBvaW50XG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBwb2ludChwb2ludCkge1xuICByZXR1cm4gaW5kZXgocG9pbnQgJiYgcG9pbnQubGluZSkgKyAnOicgKyBpbmRleChwb2ludCAmJiBwb2ludC5jb2x1bW4pXG59XG5cbi8qKlxuICogQHBhcmFtIHtQb3NpdGlvbiB8IFBvc2l0aW9uTGlrZSB8IG51bGwgfCB1bmRlZmluZWR9IHBvc1xuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gcG9zaXRpb24ocG9zKSB7XG4gIHJldHVybiBwb2ludChwb3MgJiYgcG9zLnN0YXJ0KSArICctJyArIHBvaW50KHBvcyAmJiBwb3MuZW5kKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZH0gdmFsdWVcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGluZGV4KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInID8gdmFsdWUgOiAxXG59XG4iLCIvKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBkXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29sb3IoZCkge1xuICByZXR1cm4gZFxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLk5vZGV9IE5vZGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuUGFyZW50fSBQYXJlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0LXV0aWwtaXMnKS5UZXN0fSBUZXN0XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7Ym9vbGVhbiB8ICdza2lwJ30gQWN0aW9uXG4gKiAgIFVuaW9uIG9mIHRoZSBhY3Rpb24gdHlwZXMuXG4gKlxuICogQHR5cGVkZWYge251bWJlcn0gSW5kZXhcbiAqICAgTW92ZSB0byB0aGUgc2libGluZyBhdCBgaW5kZXhgIG5leHQgKGFmdGVyIG5vZGUgaXRzZWxmIGlzIGNvbXBsZXRlbHlcbiAqICAgdHJhdmVyc2VkKS5cbiAqXG4gKiAgIFVzZWZ1bCBpZiBtdXRhdGluZyB0aGUgdHJlZSwgc3VjaCBhcyByZW1vdmluZyB0aGUgbm9kZSB0aGUgdmlzaXRvciBpc1xuICogICBjdXJyZW50bHkgb24sIG9yIGFueSBvZiBpdHMgcHJldmlvdXMgc2libGluZ3MuXG4gKiAgIFJlc3VsdHMgbGVzcyB0aGFuIDAgb3IgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBjaGlsZHJlbi5sZW5ndGhgIHN0b3BcbiAqICAgdHJhdmVyc2luZyB0aGUgcGFyZW50LlxuICpcbiAqIEB0eXBlZGVmIHtbKEFjdGlvbiB8IG51bGwgfCB1bmRlZmluZWQgfCB2b2lkKT8sIChJbmRleCB8IG51bGwgfCB1bmRlZmluZWQpP119IEFjdGlvblR1cGxlXG4gKiAgIExpc3Qgd2l0aCBvbmUgb3IgdHdvIHZhbHVlcywgdGhlIGZpcnN0IGFuIGFjdGlvbiwgdGhlIHNlY29uZCBhbiBpbmRleC5cbiAqXG4gKiBAdHlwZWRlZiB7QWN0aW9uIHwgQWN0aW9uVHVwbGUgfCBJbmRleCB8IG51bGwgfCB1bmRlZmluZWQgfCB2b2lkfSBWaXNpdG9yUmVzdWx0XG4gKiAgIEFueSB2YWx1ZSB0aGF0IGNhbiBiZSByZXR1cm5lZCBmcm9tIGEgdmlzaXRvci5cbiAqL1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7Tm9kZX0gW1Zpc2l0ZWQ9Tm9kZV1cbiAqICAgVmlzaXRlZCBub2RlIHR5cGUuXG4gKiBAdGVtcGxhdGUge1BhcmVudH0gW0FuY2VzdG9yPVBhcmVudF1cbiAqICAgQW5jZXN0b3IgdHlwZS5cbiAqIEBjYWxsYmFjayBWaXNpdG9yXG4gKiAgIEhhbmRsZSBhIG5vZGUgKG1hdGNoaW5nIGB0ZXN0YCwgaWYgZ2l2ZW4pLlxuICpcbiAqICAgVmlzaXRvcnMgYXJlIGZyZWUgdG8gdHJhbnNmb3JtIGBub2RlYC5cbiAqICAgVGhleSBjYW4gYWxzbyB0cmFuc2Zvcm0gdGhlIHBhcmVudCBvZiBub2RlICh0aGUgbGFzdCBvZiBgYW5jZXN0b3JzYCkuXG4gKlxuICogICBSZXBsYWNpbmcgYG5vZGVgIGl0c2VsZiwgaWYgYFNLSVBgIGlzIG5vdCByZXR1cm5lZCwgc3RpbGwgY2F1c2VzIGl0c1xuICogICBkZXNjZW5kYW50cyB0byBiZSB3YWxrZWQgKHdoaWNoIGlzIGEgYnVnKS5cbiAqXG4gKiAgIFdoZW4gYWRkaW5nIG9yIHJlbW92aW5nIHByZXZpb3VzIHNpYmxpbmdzIG9mIGBub2RlYCAob3IgbmV4dCBzaWJsaW5ncywgaW5cbiAqICAgY2FzZSBvZiByZXZlcnNlKSwgdGhlIGBWaXNpdG9yYCBzaG91bGQgcmV0dXJuIGEgbmV3IGBJbmRleGAgdG8gc3BlY2lmeSB0aGVcbiAqICAgc2libGluZyB0byB0cmF2ZXJzZSBhZnRlciBgbm9kZWAgaXMgdHJhdmVyc2VkLlxuICogICBBZGRpbmcgb3IgcmVtb3ZpbmcgbmV4dCBzaWJsaW5ncyBvZiBgbm9kZWAgKG9yIHByZXZpb3VzIHNpYmxpbmdzLCBpbiBjYXNlXG4gKiAgIG9mIHJldmVyc2UpIGlzIGhhbmRsZWQgYXMgZXhwZWN0ZWQgd2l0aG91dCBuZWVkaW5nIHRvIHJldHVybiBhIG5ldyBgSW5kZXhgLlxuICpcbiAqICAgUmVtb3ZpbmcgdGhlIGNoaWxkcmVuIHByb3BlcnR5IG9mIGFuIGFuY2VzdG9yIHN0aWxsIHJlc3VsdHMgaW4gdGhlbSBiZWluZ1xuICogICB0cmF2ZXJzZWQuXG4gKiBAcGFyYW0ge1Zpc2l0ZWR9IG5vZGVcbiAqICAgRm91bmQgbm9kZS5cbiAqIEBwYXJhbSB7QXJyYXk8QW5jZXN0b3I+fSBhbmNlc3RvcnNcbiAqICAgQW5jZXN0b3JzIG9mIGBub2RlYC5cbiAqIEByZXR1cm5zIHtWaXNpdG9yUmVzdWx0fVxuICogICBXaGF0IHRvIGRvIG5leHQuXG4gKlxuICogICBBbiBgSW5kZXhgIGlzIHRyZWF0ZWQgYXMgYSB0dXBsZSBvZiBgW0NPTlRJTlVFLCBJbmRleF1gLlxuICogICBBbiBgQWN0aW9uYCBpcyB0cmVhdGVkIGFzIGEgdHVwbGUgb2YgYFtBY3Rpb25dYC5cbiAqXG4gKiAgIFBhc3NpbmcgYSB0dXBsZSBiYWNrIG9ubHkgbWFrZXMgc2Vuc2UgaWYgdGhlIGBBY3Rpb25gIGlzIGBTS0lQYC5cbiAqICAgV2hlbiB0aGUgYEFjdGlvbmAgaXMgYEVYSVRgLCB0aGF0IGFjdGlvbiBjYW4gYmUgcmV0dXJuZWQuXG4gKiAgIFdoZW4gdGhlIGBBY3Rpb25gIGlzIGBDT05USU5VRWAsIGBJbmRleGAgY2FuIGJlIHJldHVybmVkLlxuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIHtOb2RlfSBbVHJlZT1Ob2RlXVxuICogICBUcmVlIHR5cGUuXG4gKiBAdGVtcGxhdGUge1Rlc3R9IFtDaGVjaz1zdHJpbmddXG4gKiAgIFRlc3QgdHlwZS5cbiAqIEB0eXBlZGVmIHtWaXNpdG9yPGltcG9ydCgnLi9jb21wbGV4LXR5cGVzLmpzJykuTWF0Y2hlczxpbXBvcnQoJy4vY29tcGxleC10eXBlcy5qcycpLkluY2x1c2l2ZURlc2NlbmRhbnQ8VHJlZT4sIENoZWNrPiwgRXh0cmFjdDxpbXBvcnQoJy4vY29tcGxleC10eXBlcy5qcycpLkluY2x1c2l2ZURlc2NlbmRhbnQ8VHJlZT4sIFBhcmVudD4+fSBCdWlsZFZpc2l0b3JcbiAqICAgQnVpbGQgYSB0eXBlZCBgVmlzaXRvcmAgZnVuY3Rpb24gZnJvbSBhIHRyZWUgYW5kIGEgdGVzdC5cbiAqXG4gKiAgIEl0IHdpbGwgaW5mZXIgd2hpY2ggdmFsdWVzIGFyZSBwYXNzZWQgYXMgYG5vZGVgIGFuZCB3aGljaCBhcyBgcGFyZW50c2AuXG4gKi9cblxuaW1wb3J0IHtjb252ZXJ0fSBmcm9tICd1bmlzdC11dGlsLWlzJ1xuaW1wb3J0IHtjb2xvcn0gZnJvbSAnLi9jb2xvci5qcydcblxuLyoqXG4gKiBDb250aW51ZSB0cmF2ZXJzaW5nIGFzIG5vcm1hbC5cbiAqL1xuZXhwb3J0IGNvbnN0IENPTlRJTlVFID0gdHJ1ZVxuXG4vKipcbiAqIFN0b3AgdHJhdmVyc2luZyBpbW1lZGlhdGVseS5cbiAqL1xuZXhwb3J0IGNvbnN0IEVYSVQgPSBmYWxzZVxuXG4vKipcbiAqIERvIG5vdCB0cmF2ZXJzZSB0aGlzIG5vZGXigJlzIGNoaWxkcmVuLlxuICovXG5leHBvcnQgY29uc3QgU0tJUCA9ICdza2lwJ1xuXG4vKipcbiAqIFZpc2l0IG5vZGVzLCB3aXRoIGFuY2VzdHJhbCBpbmZvcm1hdGlvbi5cbiAqXG4gKiBUaGlzIGFsZ29yaXRobSBwZXJmb3JtcyAqZGVwdGgtZmlyc3QqICp0cmVlIHRyYXZlcnNhbCogaW4gKnByZW9yZGVyKlxuICogKCoqTkxSKiopIG9yIGlmIGByZXZlcnNlYCBpcyBnaXZlbiwgaW4gKnJldmVyc2UgcHJlb3JkZXIqICgqKk5STCoqKS5cbiAqXG4gKiBZb3UgY2FuIGNob29zZSBmb3Igd2hpY2ggbm9kZXMgYHZpc2l0b3JgIGlzIGNhbGxlZCBieSBwYXNzaW5nIGEgYHRlc3RgLlxuICogRm9yIGNvbXBsZXggdGVzdHMsIHlvdSBzaG91bGQgdGVzdCB5b3Vyc2VsZiBpbiBgdmlzaXRvcmAsIGFzIGl0IHdpbGwgYmVcbiAqIGZhc3RlciBhbmQgd2lsbCBoYXZlIGltcHJvdmVkIHR5cGUgaW5mb3JtYXRpb24uXG4gKlxuICogV2Fsa2luZyB0aGUgdHJlZSBpcyBhbiBpbnRlbnNpdmUgdGFzay5cbiAqIE1ha2UgdXNlIG9mIHRoZSByZXR1cm4gdmFsdWVzIG9mIHRoZSB2aXNpdG9yIHdoZW4gcG9zc2libGUuXG4gKiBJbnN0ZWFkIG9mIHdhbGtpbmcgYSB0cmVlIG11bHRpcGxlIHRpbWVzLCB3YWxrIGl0IG9uY2UsIHVzZSBgdW5pc3QtdXRpbC1pc2BcbiAqIHRvIGNoZWNrIGlmIGEgbm9kZSBtYXRjaGVzLCBhbmQgdGhlbiBwZXJmb3JtIGRpZmZlcmVudCBvcGVyYXRpb25zLlxuICpcbiAqIFlvdSBjYW4gY2hhbmdlIHRoZSB0cmVlLlxuICogU2VlIGBWaXNpdG9yYCBmb3IgbW9yZSBpbmZvLlxuICpcbiAqIEBwYXJhbSB0cmVlXG4gKiAgIFRyZWUgdG8gdHJhdmVyc2UuXG4gKiBAcGFyYW0gdGVzdFxuICogICBgdW5pc3QtdXRpbC1pc2AtY29tcGF0aWJsZSB0ZXN0XG4gKiBAcGFyYW0gdmlzaXRvclxuICogICBIYW5kbGUgZWFjaCBub2RlLlxuICogQHBhcmFtIHJldmVyc2VcbiAqICAgVHJhdmVyc2UgaW4gcmV2ZXJzZSBwcmVvcmRlciAoTlJMKSBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IHByZW9yZGVyIChOTFIpLlxuICogQHJldHVybnNcbiAqICAgTm90aGluZy5cbiAqL1xuZXhwb3J0IGNvbnN0IHZpc2l0UGFyZW50cyA9XG4gIC8qKlxuICAgKiBAdHlwZSB7KFxuICAgKiAgICg8VHJlZSBleHRlbmRzIE5vZGUsIENoZWNrIGV4dGVuZHMgVGVzdD4odHJlZTogVHJlZSwgdGVzdDogQ2hlY2ssIHZpc2l0b3I6IEJ1aWxkVmlzaXRvcjxUcmVlLCBDaGVjaz4sIHJldmVyc2U/OiBib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4gdm9pZCkgJlxuICAgKiAgICg8VHJlZSBleHRlbmRzIE5vZGU+KHRyZWU6IFRyZWUsIHZpc2l0b3I6IEJ1aWxkVmlzaXRvcjxUcmVlPiwgcmV2ZXJzZT86IGJvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkKSA9PiB2b2lkKVxuICAgKiApfVxuICAgKi9cbiAgKFxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gdHJlZVxuICAgICAqIEBwYXJhbSB7VGVzdH0gdGVzdFxuICAgICAqIEBwYXJhbSB7VmlzaXRvcjxOb2RlPn0gdmlzaXRvclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWR9IFtyZXZlcnNlXVxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh0cmVlLCB0ZXN0LCB2aXNpdG9yLCByZXZlcnNlKSB7XG4gICAgICBpZiAodHlwZW9mIHRlc3QgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZpc2l0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV2ZXJzZSA9IHZpc2l0b3JcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBubyB2aXNpdG9yIGdpdmVuLCBzbyBgdmlzaXRvcmAgaXMgdGVzdC5cbiAgICAgICAgdmlzaXRvciA9IHRlc3RcbiAgICAgICAgdGVzdCA9IG51bGxcbiAgICAgIH1cblxuICAgICAgY29uc3QgaXMgPSBjb252ZXJ0KHRlc3QpXG4gICAgICBjb25zdCBzdGVwID0gcmV2ZXJzZSA/IC0xIDogMVxuXG4gICAgICBmYWN0b3J5KHRyZWUsIHVuZGVmaW5lZCwgW10pKClcblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyIHwgdW5kZWZpbmVkfSBpbmRleFxuICAgICAgICogQHBhcmFtIHtBcnJheTxQYXJlbnQ+fSBwYXJlbnRzXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGZhY3Rvcnkobm9kZSwgaW5kZXgsIHBhcmVudHMpIHtcbiAgICAgICAgLyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCB1bmtub3duPn0gKi9cbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogaHVzaFxuICAgICAgICBjb25zdCB2YWx1ZSA9IG5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnID8gbm9kZSA6IHt9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZS50eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGNvbnN0IG5hbWUgPVxuICAgICAgICAgICAgLy8gYGhhc3RgXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUudGFnTmFtZSA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgPyB2YWx1ZS50YWdOYW1lXG4gICAgICAgICAgICAgIDogLy8gYHhhc3RgXG4gICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZS5uYW1lID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICA/IHZhbHVlLm5hbWVcbiAgICAgICAgICAgICAgOiB1bmRlZmluZWRcblxuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2aXNpdCwgJ25hbWUnLCB7XG4gICAgICAgICAgICB2YWx1ZTpcbiAgICAgICAgICAgICAgJ25vZGUgKCcgKyBjb2xvcihub2RlLnR5cGUgKyAobmFtZSA/ICc8JyArIG5hbWUgKyAnPicgOiAnJykpICsgJyknXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2aXNpdFxuXG4gICAgICAgIGZ1bmN0aW9uIHZpc2l0KCkge1xuICAgICAgICAgIC8qKiBAdHlwZSB7QWN0aW9uVHVwbGV9ICovXG4gICAgICAgICAgbGV0IHJlc3VsdCA9IFtdXG4gICAgICAgICAgLyoqIEB0eXBlIHtBY3Rpb25UdXBsZX0gKi9cbiAgICAgICAgICBsZXQgc3VicmVzdWx0XG4gICAgICAgICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgICAgICAgbGV0IG9mZnNldFxuICAgICAgICAgIC8qKiBAdHlwZSB7QXJyYXk8UGFyZW50Pn0gKi9cbiAgICAgICAgICBsZXQgZ3JhbmRwYXJlbnRzXG5cbiAgICAgICAgICBpZiAoIXRlc3QgfHwgaXMobm9kZSwgaW5kZXgsIHBhcmVudHNbcGFyZW50cy5sZW5ndGggLSAxXSB8fCBudWxsKSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdG9SZXN1bHQodmlzaXRvcihub2RlLCBwYXJlbnRzKSlcblxuICAgICAgICAgICAgaWYgKHJlc3VsdFswXSA9PT0gRVhJVCkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBsb29rcyBsaWtlIGEgcGFyZW50LlxuICAgICAgICAgIGlmIChub2RlLmNoaWxkcmVuICYmIHJlc3VsdFswXSAhPT0gU0tJUCkge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBsb29rcyBsaWtlIGEgcGFyZW50LlxuICAgICAgICAgICAgb2Zmc2V0ID0gKHJldmVyc2UgPyBub2RlLmNoaWxkcmVuLmxlbmd0aCA6IC0xKSArIHN0ZXBcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgbG9va3MgbGlrZSBhIHBhcmVudC5cbiAgICAgICAgICAgIGdyYW5kcGFyZW50cyA9IHBhcmVudHMuY29uY2F0KG5vZGUpXG5cbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgbG9va3MgbGlrZSBhIHBhcmVudC5cbiAgICAgICAgICAgIHdoaWxlIChvZmZzZXQgPiAtMSAmJiBvZmZzZXQgPCBub2RlLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGxvb2tzIGxpa2UgYSBwYXJlbnQuXG4gICAgICAgICAgICAgIHN1YnJlc3VsdCA9IGZhY3Rvcnkobm9kZS5jaGlsZHJlbltvZmZzZXRdLCBvZmZzZXQsIGdyYW5kcGFyZW50cykoKVxuXG4gICAgICAgICAgICAgIGlmIChzdWJyZXN1bHRbMF0gPT09IEVYSVQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3VicmVzdWx0XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBvZmZzZXQgPVxuICAgICAgICAgICAgICAgIHR5cGVvZiBzdWJyZXN1bHRbMV0gPT09ICdudW1iZXInID8gc3VicmVzdWx0WzFdIDogb2Zmc2V0ICsgc3RlcFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgKVxuXG4vKipcbiAqIFR1cm4gYSByZXR1cm4gdmFsdWUgaW50byBhIGNsZWFuIHJlc3VsdC5cbiAqXG4gKiBAcGFyYW0ge1Zpc2l0b3JSZXN1bHR9IHZhbHVlXG4gKiAgIFZhbGlkIHJldHVybiB2YWx1ZXMgZnJvbSB2aXNpdG9ycy5cbiAqIEByZXR1cm5zIHtBY3Rpb25UdXBsZX1cbiAqICAgQ2xlYW4gcmVzdWx0LlxuICovXG5mdW5jdGlvbiB0b1Jlc3VsdCh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIFtDT05USU5VRSwgdmFsdWVdXG4gIH1cblxuICByZXR1cm4gW3ZhbHVlXVxufVxuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLk5vZGV9IE5vZGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuUGFyZW50fSBQYXJlbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0LXV0aWwtaXMnKS5UZXN0fSBUZXN0XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdC11dGlsLXZpc2l0LXBhcmVudHMnKS5WaXNpdG9yUmVzdWx0fSBWaXNpdG9yUmVzdWx0XG4gKi9cblxuLyoqXG4gKiBDaGVjayBpZiBgQ2hpbGRgIGNhbiBiZSBhIGNoaWxkIG9mIGBBbmNlc3RvcmAuXG4gKlxuICogUmV0dXJucyB0aGUgYW5jZXN0b3Igd2hlbiBgQ2hpbGRgIGNhbiBiZSBhIGNoaWxkIG9mIGBBbmNlc3RvcmAsIG9yIHJldHVybnNcbiAqIGBuZXZlcmAuXG4gKlxuICogQHRlbXBsYXRlIHtOb2RlfSBBbmNlc3RvclxuICogICBOb2RlIHR5cGUuXG4gKiBAdGVtcGxhdGUge05vZGV9IENoaWxkXG4gKiAgIE5vZGUgdHlwZS5cbiAqIEB0eXBlZGVmIHsoXG4gKiAgIEFuY2VzdG9yIGV4dGVuZHMgUGFyZW50XG4gKiAgICAgPyBDaGlsZCBleHRlbmRzIEFuY2VzdG9yWydjaGlsZHJlbiddW251bWJlcl1cbiAqICAgICAgID8gQW5jZXN0b3JcbiAqICAgICAgIDogbmV2ZXJcbiAqICAgICA6IG5ldmVyXG4gKiApfSBQYXJlbnRzT2ZcbiAqL1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7Tm9kZX0gW1Zpc2l0ZWQ9Tm9kZV1cbiAqICAgVmlzaXRlZCBub2RlIHR5cGUuXG4gKiBAdGVtcGxhdGUge1BhcmVudH0gW0FuY2VzdG9yPVBhcmVudF1cbiAqICAgQW5jZXN0b3IgdHlwZS5cbiAqIEBjYWxsYmFjayBWaXNpdG9yXG4gKiAgIEhhbmRsZSBhIG5vZGUgKG1hdGNoaW5nIGB0ZXN0YCwgaWYgZ2l2ZW4pLlxuICpcbiAqICAgVmlzaXRvcnMgYXJlIGZyZWUgdG8gdHJhbnNmb3JtIGBub2RlYC5cbiAqICAgVGhleSBjYW4gYWxzbyB0cmFuc2Zvcm0gYHBhcmVudGAuXG4gKlxuICogICBSZXBsYWNpbmcgYG5vZGVgIGl0c2VsZiwgaWYgYFNLSVBgIGlzIG5vdCByZXR1cm5lZCwgc3RpbGwgY2F1c2VzIGl0c1xuICogICBkZXNjZW5kYW50cyB0byBiZSB3YWxrZWQgKHdoaWNoIGlzIGEgYnVnKS5cbiAqXG4gKiAgIFdoZW4gYWRkaW5nIG9yIHJlbW92aW5nIHByZXZpb3VzIHNpYmxpbmdzIG9mIGBub2RlYCAob3IgbmV4dCBzaWJsaW5ncywgaW5cbiAqICAgY2FzZSBvZiByZXZlcnNlKSwgdGhlIGBWaXNpdG9yYCBzaG91bGQgcmV0dXJuIGEgbmV3IGBJbmRleGAgdG8gc3BlY2lmeSB0aGVcbiAqICAgc2libGluZyB0byB0cmF2ZXJzZSBhZnRlciBgbm9kZWAgaXMgdHJhdmVyc2VkLlxuICogICBBZGRpbmcgb3IgcmVtb3ZpbmcgbmV4dCBzaWJsaW5ncyBvZiBgbm9kZWAgKG9yIHByZXZpb3VzIHNpYmxpbmdzLCBpbiBjYXNlXG4gKiAgIG9mIHJldmVyc2UpIGlzIGhhbmRsZWQgYXMgZXhwZWN0ZWQgd2l0aG91dCBuZWVkaW5nIHRvIHJldHVybiBhIG5ldyBgSW5kZXhgLlxuICpcbiAqICAgUmVtb3ZpbmcgdGhlIGNoaWxkcmVuIHByb3BlcnR5IG9mIGBwYXJlbnRgIHN0aWxsIHJlc3VsdHMgaW4gdGhlbSBiZWluZ1xuICogICB0cmF2ZXJzZWQuXG4gKiBAcGFyYW0ge1Zpc2l0ZWR9IG5vZGVcbiAqICAgRm91bmQgbm9kZS5cbiAqIEBwYXJhbSB7VmlzaXRlZCBleHRlbmRzIE5vZGUgPyBudW1iZXIgfCBudWxsIDogbmV2ZXJ9IGluZGV4XG4gKiAgIEluZGV4IG9mIGBub2RlYCBpbiBgcGFyZW50YC5cbiAqIEBwYXJhbSB7QW5jZXN0b3IgZXh0ZW5kcyBOb2RlID8gQW5jZXN0b3IgfCBudWxsIDogbmV2ZXJ9IHBhcmVudFxuICogICBQYXJlbnQgb2YgYG5vZGVgLlxuICogQHJldHVybnMge1Zpc2l0b3JSZXN1bHR9XG4gKiAgIFdoYXQgdG8gZG8gbmV4dC5cbiAqXG4gKiAgIEFuIGBJbmRleGAgaXMgdHJlYXRlZCBhcyBhIHR1cGxlIG9mIGBbQ09OVElOVUUsIEluZGV4XWAuXG4gKiAgIEFuIGBBY3Rpb25gIGlzIHRyZWF0ZWQgYXMgYSB0dXBsZSBvZiBgW0FjdGlvbl1gLlxuICpcbiAqICAgUGFzc2luZyBhIHR1cGxlIGJhY2sgb25seSBtYWtlcyBzZW5zZSBpZiB0aGUgYEFjdGlvbmAgaXMgYFNLSVBgLlxuICogICBXaGVuIHRoZSBgQWN0aW9uYCBpcyBgRVhJVGAsIHRoYXQgYWN0aW9uIGNhbiBiZSByZXR1cm5lZC5cbiAqICAgV2hlbiB0aGUgYEFjdGlvbmAgaXMgYENPTlRJTlVFYCwgYEluZGV4YCBjYW4gYmUgcmV0dXJuZWQuXG4gKi9cblxuLyoqXG4gKiBCdWlsZCBhIHR5cGVkIGBWaXNpdG9yYCBmdW5jdGlvbiBmcm9tIGEgbm9kZSBhbmQgYWxsIHBvc3NpYmxlIHBhcmVudHMuXG4gKlxuICogSXQgd2lsbCBpbmZlciB3aGljaCB2YWx1ZXMgYXJlIHBhc3NlZCBhcyBgbm9kZWAgYW5kIHdoaWNoIGFzIGBwYXJlbnRgLlxuICpcbiAqIEB0ZW1wbGF0ZSB7Tm9kZX0gVmlzaXRlZFxuICogICBOb2RlIHR5cGUuXG4gKiBAdGVtcGxhdGUge1BhcmVudH0gQW5jZXN0b3JcbiAqICAgUGFyZW50IHR5cGUuXG4gKiBAdHlwZWRlZiB7VmlzaXRvcjxWaXNpdGVkLCBQYXJlbnRzT2Y8QW5jZXN0b3IsIFZpc2l0ZWQ+Pn0gQnVpbGRWaXNpdG9yRnJvbU1hdGNoXG4gKi9cblxuLyoqXG4gKiBCdWlsZCBhIHR5cGVkIGBWaXNpdG9yYCBmdW5jdGlvbiBmcm9tIGEgbGlzdCBvZiBkZXNjZW5kYW50cyBhbmQgYSB0ZXN0LlxuICpcbiAqIEl0IHdpbGwgaW5mZXIgd2hpY2ggdmFsdWVzIGFyZSBwYXNzZWQgYXMgYG5vZGVgIGFuZCB3aGljaCBhcyBgcGFyZW50YC5cbiAqXG4gKiBAdGVtcGxhdGUge05vZGV9IERlc2NlbmRhbnRcbiAqICAgTm9kZSB0eXBlLlxuICogQHRlbXBsYXRlIHtUZXN0fSBDaGVja1xuICogICBUZXN0IHR5cGUuXG4gKiBAdHlwZWRlZiB7KFxuICogICBCdWlsZFZpc2l0b3JGcm9tTWF0Y2g8XG4gKiAgICAgaW1wb3J0KCd1bmlzdC11dGlsLXZpc2l0LXBhcmVudHMvY29tcGxleC10eXBlcy5qcycpLk1hdGNoZXM8RGVzY2VuZGFudCwgQ2hlY2s+LFxuICogICAgIEV4dHJhY3Q8RGVzY2VuZGFudCwgUGFyZW50PlxuICogICA+XG4gKiApfSBCdWlsZFZpc2l0b3JGcm9tRGVzY2VuZGFudHNcbiAqL1xuXG4vKipcbiAqIEJ1aWxkIGEgdHlwZWQgYFZpc2l0b3JgIGZ1bmN0aW9uIGZyb20gYSB0cmVlIGFuZCBhIHRlc3QuXG4gKlxuICogSXQgd2lsbCBpbmZlciB3aGljaCB2YWx1ZXMgYXJlIHBhc3NlZCBhcyBgbm9kZWAgYW5kIHdoaWNoIGFzIGBwYXJlbnRgLlxuICpcbiAqIEB0ZW1wbGF0ZSB7Tm9kZX0gW1RyZWU9Tm9kZV1cbiAqICAgTm9kZSB0eXBlLlxuICogQHRlbXBsYXRlIHtUZXN0fSBbQ2hlY2s9c3RyaW5nXVxuICogICBUZXN0IHR5cGUuXG4gKiBAdHlwZWRlZiB7KFxuICogICBCdWlsZFZpc2l0b3JGcm9tRGVzY2VuZGFudHM8XG4gKiAgICAgaW1wb3J0KCd1bmlzdC11dGlsLXZpc2l0LXBhcmVudHMvY29tcGxleC10eXBlcy5qcycpLkluY2x1c2l2ZURlc2NlbmRhbnQ8VHJlZT4sXG4gKiAgICAgQ2hlY2tcbiAqICAgPlxuICogKX0gQnVpbGRWaXNpdG9yXG4gKi9cblxuaW1wb3J0IHt2aXNpdFBhcmVudHN9IGZyb20gJ3VuaXN0LXV0aWwtdmlzaXQtcGFyZW50cydcblxuLyoqXG4gKiBWaXNpdCBub2Rlcy5cbiAqXG4gKiBUaGlzIGFsZ29yaXRobSBwZXJmb3JtcyAqZGVwdGgtZmlyc3QqICp0cmVlIHRyYXZlcnNhbCogaW4gKnByZW9yZGVyKlxuICogKCoqTkxSKiopIG9yIGlmIGByZXZlcnNlYCBpcyBnaXZlbiwgaW4gKnJldmVyc2UgcHJlb3JkZXIqICgqKk5STCoqKS5cbiAqXG4gKiBZb3UgY2FuIGNob29zZSBmb3Igd2hpY2ggbm9kZXMgYHZpc2l0b3JgIGlzIGNhbGxlZCBieSBwYXNzaW5nIGEgYHRlc3RgLlxuICogRm9yIGNvbXBsZXggdGVzdHMsIHlvdSBzaG91bGQgdGVzdCB5b3Vyc2VsZiBpbiBgdmlzaXRvcmAsIGFzIGl0IHdpbGwgYmVcbiAqIGZhc3RlciBhbmQgd2lsbCBoYXZlIGltcHJvdmVkIHR5cGUgaW5mb3JtYXRpb24uXG4gKlxuICogV2Fsa2luZyB0aGUgdHJlZSBpcyBhbiBpbnRlbnNpdmUgdGFzay5cbiAqIE1ha2UgdXNlIG9mIHRoZSByZXR1cm4gdmFsdWVzIG9mIHRoZSB2aXNpdG9yIHdoZW4gcG9zc2libGUuXG4gKiBJbnN0ZWFkIG9mIHdhbGtpbmcgYSB0cmVlIG11bHRpcGxlIHRpbWVzLCB3YWxrIGl0IG9uY2UsIHVzZSBgdW5pc3QtdXRpbC1pc2BcbiAqIHRvIGNoZWNrIGlmIGEgbm9kZSBtYXRjaGVzLCBhbmQgdGhlbiBwZXJmb3JtIGRpZmZlcmVudCBvcGVyYXRpb25zLlxuICpcbiAqIFlvdSBjYW4gY2hhbmdlIHRoZSB0cmVlLlxuICogU2VlIGBWaXNpdG9yYCBmb3IgbW9yZSBpbmZvLlxuICpcbiAqIEBwYXJhbSB0cmVlXG4gKiAgIFRyZWUgdG8gdHJhdmVyc2UuXG4gKiBAcGFyYW0gdGVzdFxuICogICBgdW5pc3QtdXRpbC1pc2AtY29tcGF0aWJsZSB0ZXN0XG4gKiBAcGFyYW0gdmlzaXRvclxuICogICBIYW5kbGUgZWFjaCBub2RlLlxuICogQHBhcmFtIHJldmVyc2VcbiAqICAgVHJhdmVyc2UgaW4gcmV2ZXJzZSBwcmVvcmRlciAoTlJMKSBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IHByZW9yZGVyIChOTFIpLlxuICogQHJldHVybnNcbiAqICAgTm90aGluZy5cbiAqL1xuZXhwb3J0IGNvbnN0IHZpc2l0ID1cbiAgLyoqXG4gICAqIEB0eXBlIHsoXG4gICAqICAgKDxUcmVlIGV4dGVuZHMgTm9kZSwgQ2hlY2sgZXh0ZW5kcyBUZXN0Pih0cmVlOiBUcmVlLCB0ZXN0OiBDaGVjaywgdmlzaXRvcjogQnVpbGRWaXNpdG9yPFRyZWUsIENoZWNrPiwgcmV2ZXJzZT86IGJvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkKSA9PiB2b2lkKSAmXG4gICAqICAgKDxUcmVlIGV4dGVuZHMgTm9kZT4odHJlZTogVHJlZSwgdmlzaXRvcjogQnVpbGRWaXNpdG9yPFRyZWU+LCByZXZlcnNlPzogYm9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWQpID0+IHZvaWQpXG4gICAqICl9XG4gICAqL1xuICAoXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOb2RlfSB0cmVlXG4gICAgICogQHBhcmFtIHtUZXN0fSB0ZXN0XG4gICAgICogQHBhcmFtIHtWaXNpdG9yfSB2aXNpdG9yXG4gICAgICogQHBhcmFtIHtib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW3JldmVyc2VdXG4gICAgICogQHJldHVybnMge3ZvaWR9XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHRyZWUsIHRlc3QsIHZpc2l0b3IsIHJldmVyc2UpIHtcbiAgICAgIGlmICh0eXBlb2YgdGVzdCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmlzaXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXZlcnNlID0gdmlzaXRvclxuICAgICAgICB2aXNpdG9yID0gdGVzdFxuICAgICAgICB0ZXN0ID0gbnVsbFxuICAgICAgfVxuXG4gICAgICB2aXNpdFBhcmVudHModHJlZSwgdGVzdCwgb3ZlcmxvYWQsIHJldmVyc2UpXG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtOb2RlfSBub2RlXG4gICAgICAgKiBAcGFyYW0ge0FycmF5PFBhcmVudD59IHBhcmVudHNcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gb3ZlcmxvYWQobm9kZSwgcGFyZW50cykge1xuICAgICAgICBjb25zdCBwYXJlbnQgPSBwYXJlbnRzW3BhcmVudHMubGVuZ3RoIC0gMV1cbiAgICAgICAgcmV0dXJuIHZpc2l0b3IoXG4gICAgICAgICAgbm9kZSxcbiAgICAgICAgICBwYXJlbnQgPyBwYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihub2RlKSA6IG51bGwsXG4gICAgICAgICAgcGFyZW50XG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG4gIClcblxuZXhwb3J0IHtDT05USU5VRSwgRVhJVCwgU0tJUH0gZnJvbSAndW5pc3QtdXRpbC12aXNpdC1wYXJlbnRzJ1xuIiwiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLk5vZGV9IE5vZGVcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaXN0JykuUG9zaXRpb259IFBvc2l0aW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLlBvaW50fSBQb2ludFxuICogQHR5cGVkZWYge29iamVjdCAmIHt0eXBlOiBzdHJpbmcsIHBvc2l0aW9uPzogUG9zaXRpb24gfCB1bmRlZmluZWR9fSBOb2RlTGlrZVxuICovXG5cbmltcG9ydCB7c3RyaW5naWZ5UG9zaXRpb259IGZyb20gJ3VuaXN0LXV0aWwtc3RyaW5naWZ5LXBvc2l0aW9uJ1xuXG4vKipcbiAqIE1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBWRmlsZU1lc3NhZ2UgZXh0ZW5kcyBFcnJvciB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBtZXNzYWdlIGZvciBgcmVhc29uYCBhdCBgcGxhY2VgIGZyb20gYG9yaWdpbmAuXG4gICAqXG4gICAqIFdoZW4gYW4gZXJyb3IgaXMgcGFzc2VkIGluIGFzIGByZWFzb25gLCB0aGUgYHN0YWNrYCBpcyBjb3BpZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgRXJyb3IgfCBWRmlsZU1lc3NhZ2V9IHJlYXNvblxuICAgKiAgIFJlYXNvbiBmb3IgbWVzc2FnZSwgdXNlcyB0aGUgc3RhY2sgYW5kIG1lc3NhZ2Ugb2YgdGhlIGVycm9yIGlmIGdpdmVuLlxuICAgKlxuICAgKiAgID4g8J+RiSAqKk5vdGUqKjogeW91IHNob3VsZCB1c2UgbWFya2Rvd24uXG4gICAqIEBwYXJhbSB7Tm9kZSB8IE5vZGVMaWtlIHwgUG9zaXRpb24gfCBQb2ludCB8IG51bGwgfCB1bmRlZmluZWR9IFtwbGFjZV1cbiAgICogICBQbGFjZSBpbiBmaWxlIHdoZXJlIHRoZSBtZXNzYWdlIG9jY3VycmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqICAgUGxhY2UgaW4gY29kZSB3aGVyZSB0aGUgbWVzc2FnZSBvcmlnaW5hdGVzIChleGFtcGxlOlxuICAgKiAgIGAnbXktcGFja2FnZTpteS1ydWxlJ2Agb3IgYCdteS1ydWxlJ2ApLlxuICAgKiBAcmV0dXJuc1xuICAgKiAgIEluc3RhbmNlIG9mIGBWRmlsZU1lc3NhZ2VgLlxuICAgKi9cbiAgLy8gVG8gZG86IG5leHQgbWFqb3I6IGV4cG9zZSBgdW5kZWZpbmVkYCBldmVyeXdoZXJlIGluc3RlYWQgb2YgYG51bGxgLlxuICBjb25zdHJ1Y3RvcihyZWFzb24sIHBsYWNlLCBvcmlnaW4pIHtcbiAgICAvKiogQHR5cGUge1tzdHJpbmcgfCBudWxsLCBzdHJpbmcgfCBudWxsXX0gKi9cbiAgICBjb25zdCBwYXJ0cyA9IFtudWxsLCBudWxsXVxuICAgIC8qKiBAdHlwZSB7UG9zaXRpb259ICovXG4gICAgbGV0IHBvc2l0aW9uID0ge1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogd2UgYWx3YXlzIGZvbGxvd3MgdGhlIHN0cnVjdHVyZSBvZiBgcG9zaXRpb25gLlxuICAgICAgc3RhcnQ6IHtsaW5lOiBudWxsLCBjb2x1bW46IG51bGx9LFxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogXCJcbiAgICAgIGVuZDoge2xpbmU6IG51bGwsIGNvbHVtbjogbnVsbH1cbiAgICB9XG5cbiAgICBzdXBlcigpXG5cbiAgICBpZiAodHlwZW9mIHBsYWNlID09PSAnc3RyaW5nJykge1xuICAgICAgb3JpZ2luID0gcGxhY2VcbiAgICAgIHBsYWNlID0gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcmlnaW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCBpbmRleCA9IG9yaWdpbi5pbmRleE9mKCc6JylcblxuICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICBwYXJ0c1sxXSA9IG9yaWdpblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFydHNbMF0gPSBvcmlnaW4uc2xpY2UoMCwgaW5kZXgpXG4gICAgICAgIHBhcnRzWzFdID0gb3JpZ2luLnNsaWNlKGluZGV4ICsgMSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGxhY2UpIHtcbiAgICAgIC8vIE5vZGUuXG4gICAgICBpZiAoJ3R5cGUnIGluIHBsYWNlIHx8ICdwb3NpdGlvbicgaW4gcGxhY2UpIHtcbiAgICAgICAgaWYgKHBsYWNlLnBvc2l0aW9uKSB7XG4gICAgICAgICAgLy8gVG8gZG86IG5leHQgbWFqb3I6IGRlZXAgY2xvbmUuXG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogbG9va3MgbGlrZSBhIHBvc2l0aW9uLlxuICAgICAgICAgIHBvc2l0aW9uID0gcGxhY2UucG9zaXRpb25cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gUG9zaXRpb24uXG4gICAgICBlbHNlIGlmICgnc3RhcnQnIGluIHBsYWNlIHx8ICdlbmQnIGluIHBsYWNlKSB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGxvb2tzIGxpa2UgYSBwb3NpdGlvbi5cbiAgICAgICAgLy8gVG8gZG86IG5leHQgbWFqb3I6IGRlZXAgY2xvbmUuXG4gICAgICAgIHBvc2l0aW9uID0gcGxhY2VcbiAgICAgIH1cbiAgICAgIC8vIFBvaW50LlxuICAgICAgZWxzZSBpZiAoJ2xpbmUnIGluIHBsYWNlIHx8ICdjb2x1bW4nIGluIHBsYWNlKSB7XG4gICAgICAgIC8vIFRvIGRvOiBuZXh0IG1ham9yOiBkZWVwIGNsb25lLlxuICAgICAgICBwb3NpdGlvbi5zdGFydCA9IHBsYWNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRmllbGRzIGZyb20gYEVycm9yYC5cbiAgICAvKipcbiAgICAgKiBTZXJpYWxpemVkIHBvc2l0aW9uYWwgaW5mbyBvZiBlcnJvci5cbiAgICAgKlxuICAgICAqIE9uIG5vcm1hbCBlcnJvcnMsIHRoaXMgd291bGQgYmUgc29tZXRoaW5nIGxpa2UgYFBhcnNlRXJyb3JgLCBidWl0IGluXG4gICAgICogYFZGaWxlYCBtZXNzYWdlcyB3ZSB1c2UgdGhpcyBzcGFjZSB0byBzaG93IHdoZXJlIGFuIGVycm9yIGhhcHBlbmVkLlxuICAgICAqL1xuICAgIHRoaXMubmFtZSA9IHN0cmluZ2lmeVBvc2l0aW9uKHBsYWNlKSB8fCAnMToxJ1xuXG4gICAgLyoqXG4gICAgICogUmVhc29uIGZvciBtZXNzYWdlLlxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLm1lc3NhZ2UgPSB0eXBlb2YgcmVhc29uID09PSAnb2JqZWN0JyA/IHJlYXNvbi5tZXNzYWdlIDogcmVhc29uXG5cbiAgICAvKipcbiAgICAgKiBTdGFjayBvZiBtZXNzYWdlLlxuICAgICAqXG4gICAgICogVGhpcyBpcyB1c2VkIGJ5IG5vcm1hbCBlcnJvcnMgdG8gc2hvdyB3aGVyZSBzb21ldGhpbmcgaGFwcGVuZWQgaW5cbiAgICAgKiBwcm9ncmFtbWluZyBjb2RlLCBpcnJlbGV2YW50IGZvciBgVkZpbGVgIG1lc3NhZ2VzLFxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnN0YWNrID0gJydcblxuICAgIGlmICh0eXBlb2YgcmVhc29uID09PSAnb2JqZWN0JyAmJiByZWFzb24uc3RhY2spIHtcbiAgICAgIHRoaXMuc3RhY2sgPSByZWFzb24uc3RhY2tcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWFzb24gZm9yIG1lc3NhZ2UuXG4gICAgICpcbiAgICAgKiA+IPCfkYkgKipOb3RlKio6IHlvdSBzaG91bGQgdXNlIG1hcmtkb3duLlxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnJlYXNvbiA9IHRoaXMubWVzc2FnZVxuXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG4gICAgLyoqXG4gICAgICogU3RhdGUgb2YgcHJvYmxlbS5cbiAgICAgKlxuICAgICAqICogYHRydWVgIOKAlCBtYXJrcyBhc3NvY2lhdGVkIGZpbGUgYXMgbm8gbG9uZ2VyIHByb2Nlc3NhYmxlIChlcnJvcilcbiAgICAgKiAqIGBmYWxzZWAg4oCUIG5lY2Vzc2l0YXRlcyBhIChwb3RlbnRpYWwpIGNoYW5nZSAod2FybmluZylcbiAgICAgKiAqIGBudWxsIHwgdW5kZWZpbmVkYCDigJQgZm9yIHRoaW5ncyB0aGF0IG1pZ2h0IG5vdCBuZWVkIGNoYW5naW5nIChpbmZvKVxuICAgICAqXG4gICAgICogQHR5cGUge2Jvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkfVxuICAgICAqL1xuICAgIHRoaXMuZmF0YWxcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0aW5nIGxpbmUgb2YgZXJyb3IuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7bnVtYmVyIHwgbnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLmxpbmUgPSBwb3NpdGlvbi5zdGFydC5saW5lXG5cbiAgICAvKipcbiAgICAgKiBTdGFydGluZyBjb2x1bW4gb2YgZXJyb3IuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7bnVtYmVyIHwgbnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLmNvbHVtbiA9IHBvc2l0aW9uLnN0YXJ0LmNvbHVtblxuXG4gICAgLyoqXG4gICAgICogRnVsbCB1bmlzdCBwb3NpdGlvbi5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtQb3NpdGlvbiB8IG51bGx9XG4gICAgICovXG4gICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uXG5cbiAgICAvKipcbiAgICAgKiBOYW1lc3BhY2Ugb2YgbWVzc2FnZSAoZXhhbXBsZTogYCdteS1wYWNrYWdlJ2ApLlxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZyB8IG51bGx9XG4gICAgICovXG4gICAgdGhpcy5zb3VyY2UgPSBwYXJ0c1swXVxuXG4gICAgLyoqXG4gICAgICogQ2F0ZWdvcnkgb2YgbWVzc2FnZSAoZXhhbXBsZTogYCdteS1ydWxlJ2ApLlxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZyB8IG51bGx9XG4gICAgICovXG4gICAgdGhpcy5ydWxlSWQgPSBwYXJ0c1sxXVxuXG4gICAgLyoqXG4gICAgICogUGF0aCBvZiBhIGZpbGUgKHVzZWQgdGhyb3VnaG91dCB0aGUgYFZGaWxlYCBlY29zeXN0ZW0pLlxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZyB8IG51bGx9XG4gICAgICovXG4gICAgdGhpcy5maWxlXG5cbiAgICAvLyBUaGUgZm9sbG93aW5nIGZpZWxkcyBhcmUg4oCcd2VsbCBrbm93buKAnS5cbiAgICAvLyBOb3Qgc3RhbmRhcmQuXG4gICAgLy8gRmVlbCBmcmVlIHRvIGFkZCBvdGhlciBub24tc3RhbmRhcmQgZmllbGRzIHRvIHlvdXIgbWVzc2FnZXMuXG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZ5IHRoZSBzb3VyY2UgdmFsdWUgdGhhdOKAmXMgYmVpbmcgcmVwb3J0ZWQsIHdoaWNoIGlzIGRlZW1lZFxuICAgICAqIGluY29ycmVjdC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmcgfCBudWxsfVxuICAgICAqL1xuICAgIHRoaXMuYWN0dWFsXG5cbiAgICAvKipcbiAgICAgKiBTdWdnZXN0IGFjY2VwdGFibGUgdmFsdWVzIHRoYXQgY2FuIGJlIHVzZWQgaW5zdGVhZCBvZiBgYWN0dWFsYC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtBcnJheTxzdHJpbmc+IHwgbnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLmV4cGVjdGVkXG5cbiAgICAvKipcbiAgICAgKiBMaW5rIHRvIGRvY3MgZm9yIHRoZSBtZXNzYWdlLlxuICAgICAqXG4gICAgICogPiDwn5GJICoqTm90ZSoqOiB0aGlzIG11c3QgYmUgYW4gYWJzb2x1dGUgVVJMIHRoYXQgY2FuIGJlIHBhc3NlZCBhcyBgeGBcbiAgICAgKiA+IHRvIGBuZXcgVVJMKHgpYC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmcgfCBudWxsfVxuICAgICAqL1xuICAgIHRoaXMudXJsXG5cbiAgICAvKipcbiAgICAgKiBMb25nIGZvcm0gZGVzY3JpcHRpb24gb2YgdGhlIG1lc3NhZ2UgKHlvdSBzaG91bGQgdXNlIG1hcmtkb3duKS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmcgfCBudWxsfVxuICAgICAqL1xuICAgIHRoaXMubm90ZVxuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG4gIH1cbn1cblxuVkZpbGVNZXNzYWdlLnByb3RvdHlwZS5maWxlID0gJydcblZGaWxlTWVzc2FnZS5wcm90b3R5cGUubmFtZSA9ICcnXG5WRmlsZU1lc3NhZ2UucHJvdG90eXBlLnJlYXNvbiA9ICcnXG5WRmlsZU1lc3NhZ2UucHJvdG90eXBlLm1lc3NhZ2UgPSAnJ1xuVkZpbGVNZXNzYWdlLnByb3RvdHlwZS5zdGFjayA9ICcnXG5WRmlsZU1lc3NhZ2UucHJvdG90eXBlLmZhdGFsID0gbnVsbFxuVkZpbGVNZXNzYWdlLnByb3RvdHlwZS5jb2x1bW4gPSBudWxsXG5WRmlsZU1lc3NhZ2UucHJvdG90eXBlLmxpbmUgPSBudWxsXG5WRmlsZU1lc3NhZ2UucHJvdG90eXBlLnNvdXJjZSA9IG51bGxcblZGaWxlTWVzc2FnZS5wcm90b3R5cGUucnVsZUlkID0gbnVsbFxuVkZpbGVNZXNzYWdlLnByb3RvdHlwZS5wb3NpdGlvbiA9IG51bGxcbiIsIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QnKS5Ob2RlfSBOb2RlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlzdCcpLlBvc2l0aW9ufSBQb3NpdGlvblxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pc3QnKS5Qb2ludH0gUG9pbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vbWludXJsLnNoYXJlZC5qcycpLlVSTH0gVVJMXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9pbmRleC5qcycpLkRhdGF9IERhdGFcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL2luZGV4LmpzJykuVmFsdWV9IFZhbHVlXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7UmVjb3JkPHN0cmluZywgdW5rbm93bj4gJiB7dHlwZTogc3RyaW5nLCBwb3NpdGlvbj86IFBvc2l0aW9uIHwgdW5kZWZpbmVkfX0gTm9kZUxpa2VcbiAqXG4gKiBAdHlwZWRlZiB7J2FzY2lpJyB8ICd1dGY4JyB8ICd1dGYtOCcgfCAndXRmMTZsZScgfCAndWNzMicgfCAndWNzLTInIHwgJ2Jhc2U2NCcgfCAnYmFzZTY0dXJsJyB8ICdsYXRpbjEnIHwgJ2JpbmFyeScgfCAnaGV4J30gQnVmZmVyRW5jb2RpbmdcbiAqICAgRW5jb2RpbmdzIHN1cHBvcnRlZCBieSB0aGUgYnVmZmVyIGNsYXNzLlxuICpcbiAqICAgVGhpcyBpcyBhIGNvcHkgb2YgdGhlIHR5cGVzIGZyb20gTm9kZSwgY29waWVkIHRvIHByZXZlbnQgTm9kZSBnbG9iYWxzIGZyb21cbiAqICAgYmVpbmcgbmVlZGVkLlxuICogICBDb3BpZWQgZnJvbTogPGh0dHBzOi8vZ2l0aHViLmNvbS9EZWZpbml0ZWx5VHlwZWQvRGVmaW5pdGVseVR5cGVkL2Jsb2IvOTBhNGVjOC90eXBlcy9ub2RlL2J1ZmZlci5kLnRzI0wxNzA+XG4gKlxuICogQHR5cGVkZWYge09wdGlvbnMgfCBVUkwgfCBWYWx1ZSB8IFZGaWxlfSBDb21wYXRpYmxlXG4gKiAgIFRoaW5ncyB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yLlxuICpcbiAqIEB0eXBlZGVmIFZGaWxlQ29yZU9wdGlvbnNcbiAqICAgU2V0IG11bHRpcGxlIHZhbHVlcy5cbiAqIEBwcm9wZXJ0eSB7VmFsdWUgfCBudWxsIHwgdW5kZWZpbmVkfSBbdmFsdWVdXG4gKiAgIFNldCBgdmFsdWVgLlxuICogQHByb3BlcnR5IHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbY3dkXVxuICogICBTZXQgYGN3ZGAuXG4gKiBAcHJvcGVydHkge0FycmF5PHN0cmluZz4gfCBudWxsIHwgdW5kZWZpbmVkfSBbaGlzdG9yeV1cbiAqICAgU2V0IGBoaXN0b3J5YC5cbiAqIEBwcm9wZXJ0eSB7VVJMIHwgc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW3BhdGhdXG4gKiAgIFNldCBgcGF0aGAuXG4gKiBAcHJvcGVydHkge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtiYXNlbmFtZV1cbiAqICAgU2V0IGBiYXNlbmFtZWAuXG4gKiBAcHJvcGVydHkge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtzdGVtXVxuICogICBTZXQgYHN0ZW1gLlxuICogQHByb3BlcnR5IHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbZXh0bmFtZV1cbiAqICAgU2V0IGBleHRuYW1lYC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW2Rpcm5hbWVdXG4gKiAgIFNldCBgZGlybmFtZWAuXG4gKiBAcHJvcGVydHkge0RhdGEgfCBudWxsIHwgdW5kZWZpbmVkfSBbZGF0YV1cbiAqICAgU2V0IGBkYXRhYC5cbiAqXG4gKiBAdHlwZWRlZiBNYXBcbiAqICAgUmF3IHNvdXJjZSBtYXAuXG4gKlxuICogICBTZWU6XG4gKiAgIDxodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9zb3VyY2UtbWFwL2Jsb2IvNTg4MTlmMC9zb3VyY2UtbWFwLmQudHMjTDE1LUwyMz4uXG4gKiBAcHJvcGVydHkge251bWJlcn0gdmVyc2lvblxuICogICBXaGljaCB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwIHNwZWMgdGhpcyBtYXAgaXMgZm9sbG93aW5nLlxuICogQHByb3BlcnR5IHtBcnJheTxzdHJpbmc+fSBzb3VyY2VzXG4gKiAgIEFuIGFycmF5IG9mIFVSTHMgdG8gdGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlcy5cbiAqIEBwcm9wZXJ0eSB7QXJyYXk8c3RyaW5nPn0gbmFtZXNcbiAqICAgQW4gYXJyYXkgb2YgaWRlbnRpZmllcnMgd2hpY2ggY2FuIGJlIHJlZmVyZW5jZWQgYnkgaW5kaXZpZHVhbCBtYXBwaW5ncy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nIHwgdW5kZWZpbmVkfSBbc291cmNlUm9vdF1cbiAqICAgVGhlIFVSTCByb290IGZyb20gd2hpY2ggYWxsIHNvdXJjZXMgYXJlIHJlbGF0aXZlLlxuICogQHByb3BlcnR5IHtBcnJheTxzdHJpbmc+IHwgdW5kZWZpbmVkfSBbc291cmNlc0NvbnRlbnRdXG4gKiAgIEFuIGFycmF5IG9mIGNvbnRlbnRzIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZXMuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbWFwcGluZ3NcbiAqICAgQSBzdHJpbmcgb2YgYmFzZTY0IFZMUXMgd2hpY2ggY29udGFpbiB0aGUgYWN0dWFsIG1hcHBpbmdzLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGZpbGVcbiAqICAgVGhlIGdlbmVyYXRlZCBmaWxlIHRoaXMgc291cmNlIG1hcCBpcyBhc3NvY2lhdGVkIHdpdGguXG4gKlxuICogQHR5cGVkZWYge3tba2V5OiBzdHJpbmddOiB1bmtub3dufSAmIFZGaWxlQ29yZU9wdGlvbnN9IE9wdGlvbnNcbiAqICAgQ29uZmlndXJhdGlvbi5cbiAqXG4gKiAgIEEgYnVuY2ggb2Yga2V5cyB0aGF0IHdpbGwgYmUgc2hhbGxvdyBjb3BpZWQgb3ZlciB0byB0aGUgbmV3IGZpbGUuXG4gKlxuICogQHR5cGVkZWYge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSBSZXBvcnRlclNldHRpbmdzXG4gKiAgIENvbmZpZ3VyYXRpb24gZm9yIHJlcG9ydGVycy5cbiAqL1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7UmVwb3J0ZXJTZXR0aW5nc30gU2V0dGluZ3NcbiAqICAgT3B0aW9ucyB0eXBlLlxuICogQGNhbGxiYWNrIFJlcG9ydGVyXG4gKiAgIFR5cGUgZm9yIGEgcmVwb3J0ZXIuXG4gKiBAcGFyYW0ge0FycmF5PFZGaWxlPn0gZmlsZXNcbiAqICAgRmlsZXMgdG8gcmVwb3J0LlxuICogQHBhcmFtIHtTZXR0aW5nc30gb3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgUmVwb3J0LlxuICovXG5cbmltcG9ydCBidWZmZXJMaWtlIGZyb20gJ2lzLWJ1ZmZlcidcbmltcG9ydCB7VkZpbGVNZXNzYWdlfSBmcm9tICd2ZmlsZS1tZXNzYWdlJ1xuaW1wb3J0IHtwYXRofSBmcm9tICcuL21pbnBhdGguanMnXG5pbXBvcnQge3Byb2N9IGZyb20gJy4vbWlucHJvYy5qcydcbmltcG9ydCB7dXJsVG9QYXRoLCBpc1VybH0gZnJvbSAnLi9taW51cmwuanMnXG5cbi8qKlxuICogT3JkZXIgb2Ygc2V0dGluZyAobGVhc3Qgc3BlY2lmaWMgdG8gbW9zdCksIHdlIG5lZWQgdGhpcyBiZWNhdXNlIG90aGVyd2lzZVxuICogYHtzdGVtOiAnYScsIHBhdGg6ICd+L2IuanMnfWAgd291bGQgdGhyb3csIGFzIGEgcGF0aCBpcyBuZWVkZWQgYmVmb3JlIGFcbiAqIHN0ZW0gY2FuIGJlIHNldC5cbiAqXG4gKiBAdHlwZSB7QXJyYXk8J2Jhc2VuYW1lJyB8ICdkaXJuYW1lJyB8ICdleHRuYW1lJyB8ICdoaXN0b3J5JyB8ICdwYXRoJyB8ICdzdGVtJz59XG4gKi9cbmNvbnN0IG9yZGVyID0gWydoaXN0b3J5JywgJ3BhdGgnLCAnYmFzZW5hbWUnLCAnc3RlbScsICdleHRuYW1lJywgJ2Rpcm5hbWUnXVxuXG5leHBvcnQgY2xhc3MgVkZpbGUge1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHZpcnR1YWwgZmlsZS5cbiAgICpcbiAgICogYG9wdGlvbnNgIGlzIHRyZWF0ZWQgYXM6XG4gICAqXG4gICAqICogICBgc3RyaW5nYCBvciBgQnVmZmVyYCDigJQgYHt2YWx1ZTogb3B0aW9uc31gXG4gICAqICogICBgVVJMYCDigJQgYHtwYXRoOiBvcHRpb25zfWBcbiAgICogKiAgIGBWRmlsZWAg4oCUIHNoYWxsb3cgY29waWVzIGl0cyBkYXRhIG92ZXIgdG8gdGhlIG5ldyBmaWxlXG4gICAqICogICBgb2JqZWN0YCDigJQgYWxsIGZpZWxkcyBhcmUgc2hhbGxvdyBjb3BpZWQgb3ZlciB0byB0aGUgbmV3IGZpbGVcbiAgICpcbiAgICogUGF0aCByZWxhdGVkIGZpZWxkcyBhcmUgc2V0IGluIHRoZSBmb2xsb3dpbmcgb3JkZXIgKGxlYXN0IHNwZWNpZmljIHRvXG4gICAqIG1vc3Qgc3BlY2lmaWMpOiBgaGlzdG9yeWAsIGBwYXRoYCwgYGJhc2VuYW1lYCwgYHN0ZW1gLCBgZXh0bmFtZWAsXG4gICAqIGBkaXJuYW1lYC5cbiAgICpcbiAgICogWW91IGNhbm5vdCBzZXQgYGRpcm5hbWVgIG9yIGBleHRuYW1lYCB3aXRob3V0IHNldHRpbmcgZWl0aGVyIGBoaXN0b3J5YCxcbiAgICogYHBhdGhgLCBgYmFzZW5hbWVgLCBvciBgc3RlbWAgdG9vLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbXBhdGlibGUgfCBudWxsIHwgdW5kZWZpbmVkfSBbdmFsdWVdXG4gICAqICAgRmlsZSB2YWx1ZS5cbiAgICogQHJldHVybnNcbiAgICogICBOZXcgaW5zdGFuY2UuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIC8qKiBAdHlwZSB7T3B0aW9ucyB8IFZGaWxlfSAqL1xuICAgIGxldCBvcHRpb25zXG5cbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICBvcHRpb25zID0ge31cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgYnVmZmVyKHZhbHVlKSkge1xuICAgICAgb3B0aW9ucyA9IHt2YWx1ZX1cbiAgICB9IGVsc2UgaWYgKGlzVXJsKHZhbHVlKSkge1xuICAgICAgb3B0aW9ucyA9IHtwYXRoOiB2YWx1ZX1cbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucyA9IHZhbHVlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGxhY2UgdG8gc3RvcmUgY3VzdG9tIGluZm9ybWF0aW9uIChkZWZhdWx0OiBge31gKS5cbiAgICAgKlxuICAgICAqIEl04oCZcyBPSyB0byBzdG9yZSBjdXN0b20gZGF0YSBkaXJlY3RseSBvbiB0aGUgZmlsZSBidXQgbW92aW5nIGl0IHRvXG4gICAgICogYGRhdGFgIGlzIHJlY29tbWVuZGVkLlxuICAgICAqXG4gICAgICogQHR5cGUge0RhdGF9XG4gICAgICovXG4gICAgdGhpcy5kYXRhID0ge31cblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgbWVzc2FnZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBmaWxlLlxuICAgICAqXG4gICAgICogQHR5cGUge0FycmF5PFZGaWxlTWVzc2FnZT59XG4gICAgICovXG4gICAgdGhpcy5tZXNzYWdlcyA9IFtdXG5cbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIGZpbGVwYXRocyB0aGUgZmlsZSBtb3ZlZCBiZXR3ZWVuLlxuICAgICAqXG4gICAgICogVGhlIGZpcnN0IGlzIHRoZSBvcmlnaW5hbCBwYXRoIGFuZCB0aGUgbGFzdCBpcyB0aGUgY3VycmVudCBwYXRoLlxuICAgICAqXG4gICAgICogQHR5cGUge0FycmF5PHN0cmluZz59XG4gICAgICovXG4gICAgdGhpcy5oaXN0b3J5ID0gW11cblxuICAgIC8qKlxuICAgICAqIEJhc2Ugb2YgYHBhdGhgIChkZWZhdWx0OiBgcHJvY2Vzcy5jd2QoKWAgb3IgYCcvJ2AgaW4gYnJvd3NlcnMpLlxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmN3ZCA9IHByb2MuY3dkKClcblxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICAgIC8qKlxuICAgICAqIFJhdyB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtWYWx1ZX1cbiAgICAgKi9cbiAgICB0aGlzLnZhbHVlXG5cbiAgICAvLyBUaGUgYmVsb3cgYXJlIG5vbi1zdGFuZGFyZCwgdGhleSBhcmUg4oCcd2VsbC1rbm93buKAnS5cbiAgICAvLyBBcyBpbiwgdXNlZCBpbiBzZXZlcmFsIHRvb2xzLlxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBhIGZpbGUgd2FzIHNhdmVkIHRvIGRpc2suXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIHVzZWQgYnkgdmZpbGUgcmVwb3J0ZXJzLlxuICAgICAqXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5zdG9yZWRcblxuICAgIC8qKlxuICAgICAqIEN1c3RvbSwgbm9uLXN0cmluZywgY29tcGlsZWQsIHJlcHJlc2VudGF0aW9uLlxuICAgICAqXG4gICAgICogVGhpcyBpcyB1c2VkIGJ5IHVuaWZpZWQgdG8gc3RvcmUgbm9uLXN0cmluZyByZXN1bHRzLlxuICAgICAqIE9uZSBleGFtcGxlIGlzIHdoZW4gdHVybmluZyBtYXJrZG93biBpbnRvIFJlYWN0IG5vZGVzLlxuICAgICAqXG4gICAgICogQHR5cGUge3Vua25vd259XG4gICAgICovXG4gICAgdGhpcy5yZXN1bHRcblxuICAgIC8qKlxuICAgICAqIFNvdXJjZSBtYXAuXG4gICAgICpcbiAgICAgKiBUaGlzIHR5cGUgaXMgZXF1aXZhbGVudCB0byB0aGUgYFJhd1NvdXJjZU1hcGAgdHlwZSBmcm9tIHRoZSBgc291cmNlLW1hcGBcbiAgICAgKiBtb2R1bGUuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TWFwIHwgbnVsbCB8IHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICB0aGlzLm1hcFxuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG5cbiAgICAvLyBTZXQgcGF0aCByZWxhdGVkIHByb3BlcnRpZXMgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuXG4gICAgbGV0IGluZGV4ID0gLTFcblxuICAgIHdoaWxlICgrK2luZGV4IDwgb3JkZXIubGVuZ3RoKSB7XG4gICAgICBjb25zdCBwcm9wID0gb3JkZXJbaW5kZXhdXG5cbiAgICAgIC8vIE5vdGU6IHdlIHNwZWNpZmljYWxseSB1c2UgYGluYCBpbnN0ZWFkIG9mIGBoYXNPd25Qcm9wZXJ0eWAgdG8gYWNjZXB0XG4gICAgICAvLyBgdmZpbGVgcyB0b28uXG4gICAgICBpZiAoXG4gICAgICAgIHByb3AgaW4gb3B0aW9ucyAmJlxuICAgICAgICBvcHRpb25zW3Byb3BdICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgb3B0aW9uc1twcm9wXSAhPT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IFRTIGRvZXNu4oCZdCB1bmRlcnN0YW5kIGJhc2ljIHJlYWxpdHkuXG4gICAgICAgIHRoaXNbcHJvcF0gPSBwcm9wID09PSAnaGlzdG9yeScgPyBbLi4ub3B0aW9uc1twcm9wXV0gOiBvcHRpb25zW3Byb3BdXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgbGV0IHByb3BcblxuICAgIC8vIFNldCBub24tcGF0aCByZWxhdGVkIHByb3BlcnRpZXMuXG4gICAgZm9yIChwcm9wIGluIG9wdGlvbnMpIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGZpbmUgdG8gc2V0IG90aGVyIHRoaW5ncy5cbiAgICAgIGlmICghb3JkZXIuaW5jbHVkZXMocHJvcCkpIHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogZmluZSB0byBzZXQgb3RoZXIgdGhpbmdzLlxuICAgICAgICB0aGlzW3Byb3BdID0gb3B0aW9uc1twcm9wXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGZ1bGwgcGF0aCAoZXhhbXBsZTogYCd+L2luZGV4Lm1pbi5qcydgKS5cbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGdldCBwYXRoKCkge1xuICAgIHJldHVybiB0aGlzLmhpc3RvcnlbdGhpcy5oaXN0b3J5Lmxlbmd0aCAtIDFdXG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBmdWxsIHBhdGggKGV4YW1wbGU6IGAnfi9pbmRleC5taW4uanMnYCkuXG4gICAqXG4gICAqIENhbm5vdCBiZSBudWxsaWZpZWQuXG4gICAqIFlvdSBjYW4gc2V0IGEgZmlsZSBVUkwgKGEgYFVSTGAgb2JqZWN0IHdpdGggYSBgZmlsZTpgIHByb3RvY29sKSB3aGljaCB3aWxsXG4gICAqIGJlIHR1cm5lZCBpbnRvIGEgcGF0aCB3aXRoIGB1cmwuZmlsZVVSTFRvUGF0aGAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgVVJMfSBwYXRoXG4gICAqL1xuICBzZXQgcGF0aChwYXRoKSB7XG4gICAgaWYgKGlzVXJsKHBhdGgpKSB7XG4gICAgICBwYXRoID0gdXJsVG9QYXRoKHBhdGgpXG4gICAgfVxuXG4gICAgYXNzZXJ0Tm9uRW1wdHkocGF0aCwgJ3BhdGgnKVxuXG4gICAgaWYgKHRoaXMucGF0aCAhPT0gcGF0aCkge1xuICAgICAgdGhpcy5oaXN0b3J5LnB1c2gocGF0aClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBwYXJlbnQgcGF0aCAoZXhhbXBsZTogYCd+J2ApLlxuICAgKi9cbiAgZ2V0IGRpcm5hbWUoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLnBhdGggPT09ICdzdHJpbmcnID8gcGF0aC5kaXJuYW1lKHRoaXMucGF0aCkgOiB1bmRlZmluZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHBhcmVudCBwYXRoIChleGFtcGxlOiBgJ34nYCkuXG4gICAqXG4gICAqIENhbm5vdCBiZSBzZXQgaWYgdGhlcmXigJlzIG5vIGBwYXRoYCB5ZXQuXG4gICAqL1xuICBzZXQgZGlybmFtZShkaXJuYW1lKSB7XG4gICAgYXNzZXJ0UGF0aCh0aGlzLmJhc2VuYW1lLCAnZGlybmFtZScpXG4gICAgdGhpcy5wYXRoID0gcGF0aC5qb2luKGRpcm5hbWUgfHwgJycsIHRoaXMuYmFzZW5hbWUpXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBiYXNlbmFtZSAoaW5jbHVkaW5nIGV4dG5hbWUpIChleGFtcGxlOiBgJ2luZGV4Lm1pbi5qcydgKS5cbiAgICovXG4gIGdldCBiYXNlbmFtZSgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMucGF0aCA9PT0gJ3N0cmluZycgPyBwYXRoLmJhc2VuYW1lKHRoaXMucGF0aCkgOiB1bmRlZmluZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYmFzZW5hbWUgKGluY2x1ZGluZyBleHRuYW1lKSAoYCdpbmRleC5taW4uanMnYCkuXG4gICAqXG4gICAqIENhbm5vdCBjb250YWluIHBhdGggc2VwYXJhdG9ycyAoYCcvJ2Agb24gdW5peCwgbWFjT1MsIGFuZCBicm93c2VycywgYCdcXCdgXG4gICAqIG9uIHdpbmRvd3MpLlxuICAgKiBDYW5ub3QgYmUgbnVsbGlmaWVkICh1c2UgYGZpbGUucGF0aCA9IGZpbGUuZGlybmFtZWAgaW5zdGVhZCkuXG4gICAqL1xuICBzZXQgYmFzZW5hbWUoYmFzZW5hbWUpIHtcbiAgICBhc3NlcnROb25FbXB0eShiYXNlbmFtZSwgJ2Jhc2VuYW1lJylcbiAgICBhc3NlcnRQYXJ0KGJhc2VuYW1lLCAnYmFzZW5hbWUnKVxuICAgIHRoaXMucGF0aCA9IHBhdGguam9pbih0aGlzLmRpcm5hbWUgfHwgJycsIGJhc2VuYW1lKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZXh0bmFtZSAoaW5jbHVkaW5nIGRvdCkgKGV4YW1wbGU6IGAnLmpzJ2ApLlxuICAgKi9cbiAgZ2V0IGV4dG5hbWUoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLnBhdGggPT09ICdzdHJpbmcnID8gcGF0aC5leHRuYW1lKHRoaXMucGF0aCkgOiB1bmRlZmluZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGV4dG5hbWUgKGluY2x1ZGluZyBkb3QpIChleGFtcGxlOiBgJy5qcydgKS5cbiAgICpcbiAgICogQ2Fubm90IGNvbnRhaW4gcGF0aCBzZXBhcmF0b3JzIChgJy8nYCBvbiB1bml4LCBtYWNPUywgYW5kIGJyb3dzZXJzLCBgJ1xcJ2BcbiAgICogb24gd2luZG93cykuXG4gICAqIENhbm5vdCBiZSBzZXQgaWYgdGhlcmXigJlzIG5vIGBwYXRoYCB5ZXQuXG4gICAqL1xuICBzZXQgZXh0bmFtZShleHRuYW1lKSB7XG4gICAgYXNzZXJ0UGFydChleHRuYW1lLCAnZXh0bmFtZScpXG4gICAgYXNzZXJ0UGF0aCh0aGlzLmRpcm5hbWUsICdleHRuYW1lJylcblxuICAgIGlmIChleHRuYW1lKSB7XG4gICAgICBpZiAoZXh0bmFtZS5jaGFyQ29kZUF0KDApICE9PSA0NiAvKiBgLmAgKi8pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgZXh0bmFtZWAgbXVzdCBzdGFydCB3aXRoIGAuYCcpXG4gICAgICB9XG5cbiAgICAgIGlmIChleHRuYW1lLmluY2x1ZGVzKCcuJywgMSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgZXh0bmFtZWAgY2Fubm90IGNvbnRhaW4gbXVsdGlwbGUgZG90cycpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5wYXRoID0gcGF0aC5qb2luKHRoaXMuZGlybmFtZSwgdGhpcy5zdGVtICsgKGV4dG5hbWUgfHwgJycpKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgc3RlbSAoYmFzZW5hbWUgdy9vIGV4dG5hbWUpIChleGFtcGxlOiBgJ2luZGV4Lm1pbidgKS5cbiAgICovXG4gIGdldCBzdGVtKCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5wYXRoID09PSAnc3RyaW5nJ1xuICAgICAgPyBwYXRoLmJhc2VuYW1lKHRoaXMucGF0aCwgdGhpcy5leHRuYW1lKVxuICAgICAgOiB1bmRlZmluZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHN0ZW0gKGJhc2VuYW1lIHcvbyBleHRuYW1lKSAoZXhhbXBsZTogYCdpbmRleC5taW4nYCkuXG4gICAqXG4gICAqIENhbm5vdCBjb250YWluIHBhdGggc2VwYXJhdG9ycyAoYCcvJ2Agb24gdW5peCwgbWFjT1MsIGFuZCBicm93c2VycywgYCdcXCdgXG4gICAqIG9uIHdpbmRvd3MpLlxuICAgKiBDYW5ub3QgYmUgbnVsbGlmaWVkICh1c2UgYGZpbGUucGF0aCA9IGZpbGUuZGlybmFtZWAgaW5zdGVhZCkuXG4gICAqL1xuICBzZXQgc3RlbShzdGVtKSB7XG4gICAgYXNzZXJ0Tm9uRW1wdHkoc3RlbSwgJ3N0ZW0nKVxuICAgIGFzc2VydFBhcnQoc3RlbSwgJ3N0ZW0nKVxuICAgIHRoaXMucGF0aCA9IHBhdGguam9pbih0aGlzLmRpcm5hbWUgfHwgJycsIHN0ZW0gKyAodGhpcy5leHRuYW1lIHx8ICcnKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemUgdGhlIGZpbGUuXG4gICAqXG4gICAqIEBwYXJhbSB7QnVmZmVyRW5jb2RpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbZW5jb2Rpbmc9J3V0ZjgnXVxuICAgKiAgIENoYXJhY3RlciBlbmNvZGluZyB0byB1bmRlcnN0YW5kIGB2YWx1ZWAgYXMgd2hlbiBpdOKAmXMgYSBgQnVmZmVyYFxuICAgKiAgIChkZWZhdWx0OiBgJ3V0ZjgnYCkuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqICAgU2VyaWFsaXplZCBmaWxlLlxuICAgKi9cbiAgdG9TdHJpbmcoZW5jb2RpbmcpIHtcbiAgICByZXR1cm4gKHRoaXMudmFsdWUgfHwgJycpLnRvU3RyaW5nKGVuY29kaW5nIHx8IHVuZGVmaW5lZClcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSB3YXJuaW5nIG1lc3NhZ2UgYXNzb2NpYXRlZCB3aXRoIHRoZSBmaWxlLlxuICAgKlxuICAgKiBJdHMgYGZhdGFsYCBpcyBzZXQgdG8gYGZhbHNlYCBhbmQgYGZpbGVgIGlzIHNldCB0byB0aGUgY3VycmVudCBmaWxlIHBhdGguXG4gICAqIEl0cyBhZGRlZCB0byBgZmlsZS5tZXNzYWdlc2AuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgRXJyb3IgfCBWRmlsZU1lc3NhZ2V9IHJlYXNvblxuICAgKiAgIFJlYXNvbiBmb3IgbWVzc2FnZSwgdXNlcyB0aGUgc3RhY2sgYW5kIG1lc3NhZ2Ugb2YgdGhlIGVycm9yIGlmIGdpdmVuLlxuICAgKiBAcGFyYW0ge05vZGUgfCBOb2RlTGlrZSB8IFBvc2l0aW9uIHwgUG9pbnQgfCBudWxsIHwgdW5kZWZpbmVkfSBbcGxhY2VdXG4gICAqICAgUGxhY2UgaW4gZmlsZSB3aGVyZSB0aGUgbWVzc2FnZSBvY2N1cnJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3JpZ2luXVxuICAgKiAgIFBsYWNlIGluIGNvZGUgd2hlcmUgdGhlIG1lc3NhZ2Ugb3JpZ2luYXRlcyAoZXhhbXBsZTpcbiAgICogICBgJ215LXBhY2thZ2U6bXktcnVsZSdgIG9yIGAnbXktcnVsZSdgKS5cbiAgICogQHJldHVybnMge1ZGaWxlTWVzc2FnZX1cbiAgICogICBNZXNzYWdlLlxuICAgKi9cbiAgbWVzc2FnZShyZWFzb24sIHBsYWNlLCBvcmlnaW4pIHtcbiAgICBjb25zdCBtZXNzYWdlID0gbmV3IFZGaWxlTWVzc2FnZShyZWFzb24sIHBsYWNlLCBvcmlnaW4pXG5cbiAgICBpZiAodGhpcy5wYXRoKSB7XG4gICAgICBtZXNzYWdlLm5hbWUgPSB0aGlzLnBhdGggKyAnOicgKyBtZXNzYWdlLm5hbWVcbiAgICAgIG1lc3NhZ2UuZmlsZSA9IHRoaXMucGF0aFxuICAgIH1cblxuICAgIG1lc3NhZ2UuZmF0YWwgPSBmYWxzZVxuXG4gICAgdGhpcy5tZXNzYWdlcy5wdXNoKG1lc3NhZ2UpXG5cbiAgICByZXR1cm4gbWVzc2FnZVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbmZvIG1lc3NhZ2UgYXNzb2NpYXRlZCB3aXRoIHRoZSBmaWxlLlxuICAgKlxuICAgKiBJdHMgYGZhdGFsYCBpcyBzZXQgdG8gYG51bGxgIGFuZCBgZmlsZWAgaXMgc2V0IHRvIHRoZSBjdXJyZW50IGZpbGUgcGF0aC5cbiAgICogSXRzIGFkZGVkIHRvIGBmaWxlLm1lc3NhZ2VzYC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBFcnJvciB8IFZGaWxlTWVzc2FnZX0gcmVhc29uXG4gICAqICAgUmVhc29uIGZvciBtZXNzYWdlLCB1c2VzIHRoZSBzdGFjayBhbmQgbWVzc2FnZSBvZiB0aGUgZXJyb3IgaWYgZ2l2ZW4uXG4gICAqIEBwYXJhbSB7Tm9kZSB8IE5vZGVMaWtlIHwgUG9zaXRpb24gfCBQb2ludCB8IG51bGwgfCB1bmRlZmluZWR9IFtwbGFjZV1cbiAgICogICBQbGFjZSBpbiBmaWxlIHdoZXJlIHRoZSBtZXNzYWdlIG9jY3VycmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqICAgUGxhY2UgaW4gY29kZSB3aGVyZSB0aGUgbWVzc2FnZSBvcmlnaW5hdGVzIChleGFtcGxlOlxuICAgKiAgIGAnbXktcGFja2FnZTpteS1ydWxlJ2Agb3IgYCdteS1ydWxlJ2ApLlxuICAgKiBAcmV0dXJucyB7VkZpbGVNZXNzYWdlfVxuICAgKiAgIE1lc3NhZ2UuXG4gICAqL1xuICBpbmZvKHJlYXNvbiwgcGxhY2UsIG9yaWdpbikge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2UocmVhc29uLCBwbGFjZSwgb3JpZ2luKVxuXG4gICAgbWVzc2FnZS5mYXRhbCA9IG51bGxcblxuICAgIHJldHVybiBtZXNzYWdlXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgZmF0YWwgZXJyb3IgYXNzb2NpYXRlZCB3aXRoIHRoZSBmaWxlLlxuICAgKlxuICAgKiBJdHMgYGZhdGFsYCBpcyBzZXQgdG8gYHRydWVgIGFuZCBgZmlsZWAgaXMgc2V0IHRvIHRoZSBjdXJyZW50IGZpbGUgcGF0aC5cbiAgICogSXRzIGFkZGVkIHRvIGBmaWxlLm1lc3NhZ2VzYC5cbiAgICpcbiAgICogPiDwn5GJICoqTm90ZSoqOiBhIGZhdGFsIGVycm9yIG1lYW5zIHRoYXQgYSBmaWxlIGlzIG5vIGxvbmdlciBwcm9jZXNzYWJsZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBFcnJvciB8IFZGaWxlTWVzc2FnZX0gcmVhc29uXG4gICAqICAgUmVhc29uIGZvciBtZXNzYWdlLCB1c2VzIHRoZSBzdGFjayBhbmQgbWVzc2FnZSBvZiB0aGUgZXJyb3IgaWYgZ2l2ZW4uXG4gICAqIEBwYXJhbSB7Tm9kZSB8IE5vZGVMaWtlIHwgUG9zaXRpb24gfCBQb2ludCB8IG51bGwgfCB1bmRlZmluZWR9IFtwbGFjZV1cbiAgICogICBQbGFjZSBpbiBmaWxlIHdoZXJlIHRoZSBtZXNzYWdlIG9jY3VycmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcmlnaW5dXG4gICAqICAgUGxhY2UgaW4gY29kZSB3aGVyZSB0aGUgbWVzc2FnZSBvcmlnaW5hdGVzIChleGFtcGxlOlxuICAgKiAgIGAnbXktcGFja2FnZTpteS1ydWxlJ2Agb3IgYCdteS1ydWxlJ2ApLlxuICAgKiBAcmV0dXJucyB7bmV2ZXJ9XG4gICAqICAgTWVzc2FnZS5cbiAgICogQHRocm93cyB7VkZpbGVNZXNzYWdlfVxuICAgKiAgIE1lc3NhZ2UuXG4gICAqL1xuICBmYWlsKHJlYXNvbiwgcGxhY2UsIG9yaWdpbikge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2UocmVhc29uLCBwbGFjZSwgb3JpZ2luKVxuXG4gICAgbWVzc2FnZS5mYXRhbCA9IHRydWVcblxuICAgIHRocm93IG1lc3NhZ2VcbiAgfVxufVxuXG4vKipcbiAqIEFzc2VydCB0aGF0IGBwYXJ0YCBpcyBub3QgYSBwYXRoIChhcyBpbiwgZG9lcyBub3QgY29udGFpbiBgcGF0aC5zZXBgKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IHBhcnRcbiAqICAgRmlsZSBwYXRoIHBhcnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogICBQYXJ0IG5hbWUuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqICAgTm90aGluZy5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UGFydChwYXJ0LCBuYW1lKSB7XG4gIGlmIChwYXJ0ICYmIHBhcnQuaW5jbHVkZXMocGF0aC5zZXApKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ2AnICsgbmFtZSArICdgIGNhbm5vdCBiZSBhIHBhdGg6IGRpZCBub3QgZXhwZWN0IGAnICsgcGF0aC5zZXAgKyAnYCdcbiAgICApXG4gIH1cbn1cblxuLyoqXG4gKiBBc3NlcnQgdGhhdCBgcGFydGAgaXMgbm90IGVtcHR5LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nIHwgdW5kZWZpbmVkfSBwYXJ0XG4gKiAgIFRoaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqICAgUGFydCBuYW1lLlxuICogQHJldHVybnMge2Fzc2VydHMgcGFydCBpcyBzdHJpbmd9XG4gKiAgIE5vdGhpbmcuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydE5vbkVtcHR5KHBhcnQsIG5hbWUpIHtcbiAgaWYgKCFwYXJ0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgJyArIG5hbWUgKyAnYCBjYW5ub3QgYmUgZW1wdHknKVxuICB9XG59XG5cbi8qKlxuICogQXNzZXJ0IGBwYXRoYCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmcgfCB1bmRlZmluZWR9IHBhdGhcbiAqICAgUGF0aC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiAgIERlcGVuZGVuY3kgbmFtZS5cbiAqIEByZXR1cm5zIHthc3NlcnRzIHBhdGggaXMgc3RyaW5nfVxuICogICBOb3RoaW5nLlxuICovXG5mdW5jdGlvbiBhc3NlcnRQYXRoKHBhdGgsIG5hbWUpIHtcbiAgaWYgKCFwYXRoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZXR0aW5nIGAnICsgbmFtZSArICdgIHJlcXVpcmVzIGBwYXRoYCB0byBiZSBzZXQgdG9vJylcbiAgfVxufVxuXG4vKipcbiAqIEFzc2VydCBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gdmFsdWVcbiAqICAgdGhpbmcuXG4gKiBAcmV0dXJucyB7dmFsdWUgaXMgQnVmZmVyfVxuICogICBXaGV0aGVyIGB2YWx1ZWAgaXMgYSBOb2RlLmpzIGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gYnVmZmVyKHZhbHVlKSB7XG4gIHJldHVybiBidWZmZXJMaWtlKHZhbHVlKVxufVxuIiwiLy8gQSBkZXJpdmF0aXZlIHdvcmsgYmFzZWQgb246XG4vLyA8aHR0cHM6Ly9naXRodWIuY29tL2Jyb3dzZXJpZnkvcGF0aC1icm93c2VyaWZ5Pi5cbi8vIFdoaWNoIGlzIGxpY2Vuc2VkOlxuLy9cbi8vIE1JVCBMaWNlbnNlXG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDEzIEphbWVzIEhhbGxpZGF5XG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZlxuLy8gdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpblxuLy8gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0b1xuLy8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2Zcbi8vIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbi8vIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuLy8gY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTU1xuLy8gRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SXG4vLyBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVJcbi8vIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXG4vLyBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuLy8gQSBkZXJpdmF0aXZlIHdvcmsgYmFzZWQgb246XG4vL1xuLy8gUGFydHMgb2YgdGhhdCBhcmUgZXh0cmFjdGVkIGZyb20gTm9kZeKAmXMgaW50ZXJuYWwgYHBhdGhgIG1vZHVsZTpcbi8vIDxodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi9tYXN0ZXIvbGliL3BhdGguanM+LlxuLy8gV2hpY2ggaXMgbGljZW5zZWQ6XG4vL1xuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbmV4cG9ydCBjb25zdCBwYXRoID0ge2Jhc2VuYW1lLCBkaXJuYW1lLCBleHRuYW1lLCBqb2luLCBzZXA6ICcvJ31cblxuLyogZXNsaW50LWRpc2FibGUgbWF4LWRlcHRoLCBjb21wbGV4aXR5ICovXG5cbi8qKlxuICogR2V0IHRoZSBiYXNlbmFtZSBmcm9tIGEgcGF0aC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogICBGaWxlIHBhdGguXG4gKiBAcGFyYW0ge3N0cmluZyB8IHVuZGVmaW5lZH0gW2V4dF1cbiAqICAgRXh0ZW5zaW9uIHRvIHN0cmlwLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgU3RlbSBvciBiYXNlbmFtZS5cbiAqL1xuZnVuY3Rpb24gYmFzZW5hbWUocGF0aCwgZXh0KSB7XG4gIGlmIChleHQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZXh0ICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZXh0XCIgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZycpXG4gIH1cblxuICBhc3NlcnRQYXRoKHBhdGgpXG4gIGxldCBzdGFydCA9IDBcbiAgbGV0IGVuZCA9IC0xXG4gIGxldCBpbmRleCA9IHBhdGgubGVuZ3RoXG4gIC8qKiBAdHlwZSB7Ym9vbGVhbiB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IHNlZW5Ob25TbGFzaFxuXG4gIGlmIChleHQgPT09IHVuZGVmaW5lZCB8fCBleHQubGVuZ3RoID09PSAwIHx8IGV4dC5sZW5ndGggPiBwYXRoLmxlbmd0aCkge1xuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBpZiAocGF0aC5jaGFyQ29kZUF0KGluZGV4KSA9PT0gNDcgLyogYC9gICovKSB7XG4gICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vdy5cbiAgICAgICAgaWYgKHNlZW5Ob25TbGFzaCkge1xuICAgICAgICAgIHN0YXJ0ID0gaW5kZXggKyAxXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCBtYXJrIHRoaXMgYXMgdGhlIGVuZCBvZiBvdXJcbiAgICAgICAgLy8gcGF0aCBjb21wb25lbnQuXG4gICAgICAgIHNlZW5Ob25TbGFzaCA9IHRydWVcbiAgICAgICAgZW5kID0gaW5kZXggKyAxXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuZCA8IDAgPyAnJyA6IHBhdGguc2xpY2Uoc3RhcnQsIGVuZClcbiAgfVxuXG4gIGlmIChleHQgPT09IHBhdGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGxldCBmaXJzdE5vblNsYXNoRW5kID0gLTFcbiAgbGV0IGV4dEluZGV4ID0gZXh0Lmxlbmd0aCAtIDFcblxuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIGlmIChwYXRoLmNoYXJDb2RlQXQoaW5kZXgpID09PSA0NyAvKiBgL2AgKi8pIHtcbiAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3cuXG4gICAgICBpZiAoc2Vlbk5vblNsYXNoKSB7XG4gICAgICAgIHN0YXJ0ID0gaW5kZXggKyAxXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChmaXJzdE5vblNsYXNoRW5kIDwgMCkge1xuICAgICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgcmVtZW1iZXIgdGhpcyBpbmRleCBpbiBjYXNlXG4gICAgICAgIC8vIHdlIG5lZWQgaXQgaWYgdGhlIGV4dGVuc2lvbiBlbmRzIHVwIG5vdCBtYXRjaGluZy5cbiAgICAgICAgc2Vlbk5vblNsYXNoID0gdHJ1ZVxuICAgICAgICBmaXJzdE5vblNsYXNoRW5kID0gaW5kZXggKyAxXG4gICAgICB9XG5cbiAgICAgIGlmIChleHRJbmRleCA+IC0xKSB7XG4gICAgICAgIC8vIFRyeSB0byBtYXRjaCB0aGUgZXhwbGljaXQgZXh0ZW5zaW9uLlxuICAgICAgICBpZiAocGF0aC5jaGFyQ29kZUF0KGluZGV4KSA9PT0gZXh0LmNoYXJDb2RlQXQoZXh0SW5kZXgtLSkpIHtcbiAgICAgICAgICBpZiAoZXh0SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAvLyBXZSBtYXRjaGVkIHRoZSBleHRlbnNpb24sIHNvIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91ciBwYXRoXG4gICAgICAgICAgICAvLyBjb21wb25lbnRcbiAgICAgICAgICAgIGVuZCA9IGluZGV4XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEV4dGVuc2lvbiBkb2VzIG5vdCBtYXRjaCwgc28gb3VyIHJlc3VsdCBpcyB0aGUgZW50aXJlIHBhdGhcbiAgICAgICAgICAvLyBjb21wb25lbnRcbiAgICAgICAgICBleHRJbmRleCA9IC0xXG4gICAgICAgICAgZW5kID0gZmlyc3ROb25TbGFzaEVuZFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSBlbmQpIHtcbiAgICBlbmQgPSBmaXJzdE5vblNsYXNoRW5kXG4gIH0gZWxzZSBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCA9IHBhdGgubGVuZ3RoXG4gIH1cblxuICByZXR1cm4gcGF0aC5zbGljZShzdGFydCwgZW5kKVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGlybmFtZSBmcm9tIGEgcGF0aC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogICBGaWxlIHBhdGguXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBGaWxlIHBhdGguXG4gKi9cbmZ1bmN0aW9uIGRpcm5hbWUocGF0aCkge1xuICBhc3NlcnRQYXRoKHBhdGgpXG5cbiAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICcuJ1xuICB9XG5cbiAgbGV0IGVuZCA9IC0xXG4gIGxldCBpbmRleCA9IHBhdGgubGVuZ3RoXG4gIC8qKiBAdHlwZSB7Ym9vbGVhbiB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IHVubWF0Y2hlZFNsYXNoXG5cbiAgLy8gUHJlZml4IGAtLWAgaXMgaW1wb3J0YW50IHRvIG5vdCBydW4gb24gYDBgLlxuICB3aGlsZSAoLS1pbmRleCkge1xuICAgIGlmIChwYXRoLmNoYXJDb2RlQXQoaW5kZXgpID09PSA0NyAvKiBgL2AgKi8pIHtcbiAgICAgIGlmICh1bm1hdGNoZWRTbGFzaCkge1xuICAgICAgICBlbmQgPSBpbmRleFxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIXVubWF0Y2hlZFNsYXNoKSB7XG4gICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvclxuICAgICAgdW5tYXRjaGVkU2xhc2ggPSB0cnVlXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGVuZCA8IDBcbiAgICA/IHBhdGguY2hhckNvZGVBdCgwKSA9PT0gNDcgLyogYC9gICovXG4gICAgICA/ICcvJ1xuICAgICAgOiAnLidcbiAgICA6IGVuZCA9PT0gMSAmJiBwYXRoLmNoYXJDb2RlQXQoMCkgPT09IDQ3IC8qIGAvYCAqL1xuICAgID8gJy8vJ1xuICAgIDogcGF0aC5zbGljZSgwLCBlbmQpXG59XG5cbi8qKlxuICogR2V0IGFuIGV4dG5hbWUgZnJvbSBhIHBhdGguXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAqICAgRmlsZSBwYXRoLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgRXh0bmFtZS5cbiAqL1xuZnVuY3Rpb24gZXh0bmFtZShwYXRoKSB7XG4gIGFzc2VydFBhdGgocGF0aClcblxuICBsZXQgaW5kZXggPSBwYXRoLmxlbmd0aFxuXG4gIGxldCBlbmQgPSAtMVxuICBsZXQgc3RhcnRQYXJ0ID0gMFxuICBsZXQgc3RhcnREb3QgPSAtMVxuICAvLyBUcmFjayB0aGUgc3RhdGUgb2YgY2hhcmFjdGVycyAoaWYgYW55KSB3ZSBzZWUgYmVmb3JlIG91ciBmaXJzdCBkb3QgYW5kXG4gIC8vIGFmdGVyIGFueSBwYXRoIHNlcGFyYXRvciB3ZSBmaW5kLlxuICBsZXQgcHJlRG90U3RhdGUgPSAwXG4gIC8qKiBAdHlwZSB7Ym9vbGVhbiB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IHVubWF0Y2hlZFNsYXNoXG5cbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICBjb25zdCBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KGluZGV4KVxuXG4gICAgaWYgKGNvZGUgPT09IDQ3IC8qIGAvYCAqLykge1xuICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcbiAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vdy5cbiAgICAgIGlmICh1bm1hdGNoZWRTbGFzaCkge1xuICAgICAgICBzdGFydFBhcnQgPSBpbmRleCArIDFcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgLy8gZXh0ZW5zaW9uLlxuICAgICAgdW5tYXRjaGVkU2xhc2ggPSB0cnVlXG4gICAgICBlbmQgPSBpbmRleCArIDFcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gNDYgLyogYC5gICovKSB7XG4gICAgICAvLyBJZiB0aGlzIGlzIG91ciBmaXJzdCBkb3QsIG1hcmsgaXQgYXMgdGhlIHN0YXJ0IG9mIG91ciBleHRlbnNpb24uXG4gICAgICBpZiAoc3RhcnREb3QgPCAwKSB7XG4gICAgICAgIHN0YXJ0RG90ID0gaW5kZXhcbiAgICAgIH0gZWxzZSBpZiAocHJlRG90U3RhdGUgIT09IDEpIHtcbiAgICAgICAgcHJlRG90U3RhdGUgPSAxXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzdGFydERvdCA+IC0xKSB7XG4gICAgICAvLyBXZSBzYXcgYSBub24tZG90IGFuZCBub24tcGF0aCBzZXBhcmF0b3IgYmVmb3JlIG91ciBkb3QsIHNvIHdlIHNob3VsZFxuICAgICAgLy8gaGF2ZSBhIGdvb2QgY2hhbmNlIGF0IGhhdmluZyBhIG5vbi1lbXB0eSBleHRlbnNpb24uXG4gICAgICBwcmVEb3RTdGF0ZSA9IC0xXG4gICAgfVxuICB9XG5cbiAgaWYgKFxuICAgIHN0YXJ0RG90IDwgMCB8fFxuICAgIGVuZCA8IDAgfHxcbiAgICAvLyBXZSBzYXcgYSBub24tZG90IGNoYXJhY3RlciBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGRvdC5cbiAgICBwcmVEb3RTdGF0ZSA9PT0gMCB8fFxuICAgIC8vIFRoZSAocmlnaHQtbW9zdCkgdHJpbW1lZCBwYXRoIGNvbXBvbmVudCBpcyBleGFjdGx5IGAuLmAuXG4gICAgKHByZURvdFN0YXRlID09PSAxICYmIHN0YXJ0RG90ID09PSBlbmQgLSAxICYmIHN0YXJ0RG90ID09PSBzdGFydFBhcnQgKyAxKVxuICApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIHJldHVybiBwYXRoLnNsaWNlKHN0YXJ0RG90LCBlbmQpXG59XG5cbi8qKlxuICogSm9pbiBzZWdtZW50cyBmcm9tIGEgcGF0aC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IHNlZ21lbnRzXG4gKiAgIFBhdGggc2VnbWVudHMuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBGaWxlIHBhdGguXG4gKi9cbmZ1bmN0aW9uIGpvaW4oLi4uc2VnbWVudHMpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgLyoqIEB0eXBlIHtzdHJpbmcgfCB1bmRlZmluZWR9ICovXG4gIGxldCBqb2luZWRcblxuICB3aGlsZSAoKytpbmRleCA8IHNlZ21lbnRzLmxlbmd0aCkge1xuICAgIGFzc2VydFBhdGgoc2VnbWVudHNbaW5kZXhdKVxuXG4gICAgaWYgKHNlZ21lbnRzW2luZGV4XSkge1xuICAgICAgam9pbmVkID1cbiAgICAgICAgam9pbmVkID09PSB1bmRlZmluZWQgPyBzZWdtZW50c1tpbmRleF0gOiBqb2luZWQgKyAnLycgKyBzZWdtZW50c1tpbmRleF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gam9pbmVkID09PSB1bmRlZmluZWQgPyAnLicgOiBub3JtYWxpemUoam9pbmVkKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIGJhc2ljIGZpbGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogICBGaWxlIHBhdGguXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBGaWxlIHBhdGguXG4gKi9cbi8vIE5vdGU6IGBub3JtYWxpemVgIGlzIG5vdCBleHBvc2VkIGFzIGBwYXRoLm5vcm1hbGl6ZWAsIHNvIHNvbWUgY29kZSBpc1xuLy8gbWFudWFsbHkgcmVtb3ZlZCBmcm9tIGl0LlxuZnVuY3Rpb24gbm9ybWFsaXplKHBhdGgpIHtcbiAgYXNzZXJ0UGF0aChwYXRoKVxuXG4gIGNvbnN0IGFic29sdXRlID0gcGF0aC5jaGFyQ29kZUF0KDApID09PSA0NyAvKiBgL2AgKi9cblxuICAvLyBOb3JtYWxpemUgdGhlIHBhdGggYWNjb3JkaW5nIHRvIFBPU0lYIHJ1bGVzLlxuICBsZXQgdmFsdWUgPSBub3JtYWxpemVTdHJpbmcocGF0aCwgIWFic29sdXRlKVxuXG4gIGlmICh2YWx1ZS5sZW5ndGggPT09IDAgJiYgIWFic29sdXRlKSB7XG4gICAgdmFsdWUgPSAnLidcbiAgfVxuXG4gIGlmICh2YWx1ZS5sZW5ndGggPiAwICYmIHBhdGguY2hhckNvZGVBdChwYXRoLmxlbmd0aCAtIDEpID09PSA0NyAvKiAvICovKSB7XG4gICAgdmFsdWUgKz0gJy8nXG4gIH1cblxuICByZXR1cm4gYWJzb2x1dGUgPyAnLycgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbi8qKlxuICogUmVzb2x2ZSBgLmAgYW5kIGAuLmAgZWxlbWVudHMgaW4gYSBwYXRoIHdpdGggZGlyZWN0b3J5IG5hbWVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoXG4gKiAgIEZpbGUgcGF0aC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYWxsb3dBYm92ZVJvb3RcbiAqICAgV2hldGhlciBgLi5gIGNhbiBtb3ZlIGFib3ZlIHJvb3QuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBGaWxlIHBhdGguXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0cmluZyhwYXRoLCBhbGxvd0Fib3ZlUm9vdCkge1xuICBsZXQgcmVzdWx0ID0gJydcbiAgbGV0IGxhc3RTZWdtZW50TGVuZ3RoID0gMFxuICBsZXQgbGFzdFNsYXNoID0gLTFcbiAgbGV0IGRvdHMgPSAwXG4gIGxldCBpbmRleCA9IC0xXG4gIC8qKiBAdHlwZSB7bnVtYmVyIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgY29kZVxuICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgbGV0IGxhc3RTbGFzaEluZGV4XG5cbiAgd2hpbGUgKCsraW5kZXggPD0gcGF0aC5sZW5ndGgpIHtcbiAgICBpZiAoaW5kZXggPCBwYXRoLmxlbmd0aCkge1xuICAgICAgY29kZSA9IHBhdGguY2hhckNvZGVBdChpbmRleClcbiAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDQ3IC8qIGAvYCAqLykge1xuICAgICAgYnJlYWtcbiAgICB9IGVsc2Uge1xuICAgICAgY29kZSA9IDQ3IC8qIGAvYCAqL1xuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA0NyAvKiBgL2AgKi8pIHtcbiAgICAgIGlmIChsYXN0U2xhc2ggPT09IGluZGV4IC0gMSB8fCBkb3RzID09PSAxKSB7XG4gICAgICAgIC8vIEVtcHR5LlxuICAgICAgfSBlbHNlIGlmIChsYXN0U2xhc2ggIT09IGluZGV4IC0gMSAmJiBkb3RzID09PSAyKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICByZXN1bHQubGVuZ3RoIDwgMiB8fFxuICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoICE9PSAyIHx8XG4gICAgICAgICAgcmVzdWx0LmNoYXJDb2RlQXQocmVzdWx0Lmxlbmd0aCAtIDEpICE9PSA0NiAvKiBgLmAgKi8gfHxcbiAgICAgICAgICByZXN1bHQuY2hhckNvZGVBdChyZXN1bHQubGVuZ3RoIC0gMikgIT09IDQ2IC8qIGAuYCAqL1xuICAgICAgICApIHtcbiAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgIGxhc3RTbGFzaEluZGV4ID0gcmVzdWx0Lmxhc3RJbmRleE9mKCcvJylcblxuICAgICAgICAgICAgaWYgKGxhc3RTbGFzaEluZGV4ICE9PSByZXN1bHQubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICBpZiAobGFzdFNsYXNoSW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gJydcbiAgICAgICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IDBcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgbGFzdFNsYXNoSW5kZXgpXG4gICAgICAgICAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggPSByZXN1bHQubGVuZ3RoIC0gMSAtIHJlc3VsdC5sYXN0SW5kZXhPZignLycpXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBsYXN0U2xhc2ggPSBpbmRleFxuICAgICAgICAgICAgICBkb3RzID0gMFxuICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlc3VsdCA9ICcnXG4gICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IDBcbiAgICAgICAgICAgIGxhc3RTbGFzaCA9IGluZGV4XG4gICAgICAgICAgICBkb3RzID0gMFxuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWxsb3dBYm92ZVJvb3QpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQubGVuZ3RoID4gMCA/IHJlc3VsdCArICcvLi4nIDogJy4uJ1xuICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gMlxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXN1bHQgKz0gJy8nICsgcGF0aC5zbGljZShsYXN0U2xhc2ggKyAxLCBpbmRleClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBwYXRoLnNsaWNlKGxhc3RTbGFzaCArIDEsIGluZGV4KVxuICAgICAgICB9XG5cbiAgICAgICAgbGFzdFNlZ21lbnRMZW5ndGggPSBpbmRleCAtIGxhc3RTbGFzaCAtIDFcbiAgICAgIH1cblxuICAgICAgbGFzdFNsYXNoID0gaW5kZXhcbiAgICAgIGRvdHMgPSAwXG4gICAgfSBlbHNlIGlmIChjb2RlID09PSA0NiAvKiBgLmAgKi8gJiYgZG90cyA+IC0xKSB7XG4gICAgICBkb3RzKytcbiAgICB9IGVsc2Uge1xuICAgICAgZG90cyA9IC0xXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKipcbiAqIE1ha2Ugc3VyZSBgcGF0aGAgaXMgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAqICAgRmlsZSBwYXRoLlxuICogQHJldHVybnMge2Fzc2VydHMgcGF0aCBpcyBzdHJpbmd9XG4gKiAgIE5vdGhpbmcuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFBhdGgocGF0aCkge1xuICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdQYXRoIG11c3QgYmUgYSBzdHJpbmcuIFJlY2VpdmVkICcgKyBKU09OLnN0cmluZ2lmeShwYXRoKVxuICAgIClcbiAgfVxufVxuXG4vKiBlc2xpbnQtZW5hYmxlIG1heC1kZXB0aCwgY29tcGxleGl0eSAqL1xuIiwiLy8gU29tZXdoYXQgYmFzZWQgb246XG4vLyA8aHR0cHM6Ly9naXRodWIuY29tL2RlZnVuY3R6b21iaWUvbm9kZS1wcm9jZXNzL2Jsb2IvbWFzdGVyL2Jyb3dzZXIuanM+LlxuLy8gQnV0IEkgZG9u4oCZdCB0aGluayBvbmUgdGlueSBsaW5lIG9mIGNvZGUgY2FuIGJlIGNvcHlyaWdodGVkLiDwn5iFXG5leHBvcnQgY29uc3QgcHJvYyA9IHtjd2R9XG5cbmZ1bmN0aW9uIGN3ZCgpIHtcbiAgcmV0dXJuICcvJ1xufVxuIiwiLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIgLz5cblxuaW1wb3J0IHtpc1VybH0gZnJvbSAnLi9taW51cmwuc2hhcmVkLmpzJ1xuXG4vLyBTZWU6IDxodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi9mY2Y4YmE0L2xpYi9pbnRlcm5hbC91cmwuanM+XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmcgfCBVUkx9IHBhdGhcbiAqICAgRmlsZSBVUkwuXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICogICBGaWxlIFVSTC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVybFRvUGF0aChwYXRoKSB7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICBwYXRoID0gbmV3IFVSTChwYXRoKVxuICB9IGVsc2UgaWYgKCFpc1VybChwYXRoKSkge1xuICAgIC8qKiBAdHlwZSB7Tm9kZUpTLkVycm5vRXhjZXB0aW9ufSAqL1xuICAgIGNvbnN0IGVycm9yID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJwYXRoXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZyBvciBhbiBpbnN0YW5jZSBvZiBVUkwuIFJlY2VpdmVkIGAnICtcbiAgICAgICAgcGF0aCArXG4gICAgICAgICdgJ1xuICAgIClcbiAgICBlcnJvci5jb2RlID0gJ0VSUl9JTlZBTElEX0FSR19UWVBFJ1xuICAgIHRocm93IGVycm9yXG4gIH1cblxuICBpZiAocGF0aC5wcm90b2NvbCAhPT0gJ2ZpbGU6Jykge1xuICAgIC8qKiBAdHlwZSB7Tm9kZUpTLkVycm5vRXhjZXB0aW9ufSAqL1xuICAgIGNvbnN0IGVycm9yID0gbmV3IFR5cGVFcnJvcignVGhlIFVSTCBtdXN0IGJlIG9mIHNjaGVtZSBmaWxlJylcbiAgICBlcnJvci5jb2RlID0gJ0VSUl9JTlZBTElEX1VSTF9TQ0hFTUUnXG4gICAgdGhyb3cgZXJyb3JcbiAgfVxuXG4gIHJldHVybiBnZXRQYXRoRnJvbVVSTFBvc2l4KHBhdGgpXG59XG5cbi8qKlxuICogR2V0IGEgcGF0aCBmcm9tIGEgUE9TSVggVVJMLlxuICpcbiAqIEBwYXJhbSB7VVJMfSB1cmxcbiAqICAgVVJMLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgRmlsZSBwYXRoLlxuICovXG5mdW5jdGlvbiBnZXRQYXRoRnJvbVVSTFBvc2l4KHVybCkge1xuICBpZiAodXJsLmhvc3RuYW1lICE9PSAnJykge1xuICAgIC8qKiBAdHlwZSB7Tm9kZUpTLkVycm5vRXhjZXB0aW9ufSAqL1xuICAgIGNvbnN0IGVycm9yID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICdGaWxlIFVSTCBob3N0IG11c3QgYmUgXCJsb2NhbGhvc3RcIiBvciBlbXB0eSBvbiBkYXJ3aW4nXG4gICAgKVxuICAgIGVycm9yLmNvZGUgPSAnRVJSX0lOVkFMSURfRklMRV9VUkxfSE9TVCdcbiAgICB0aHJvdyBlcnJvclxuICB9XG5cbiAgY29uc3QgcGF0aG5hbWUgPSB1cmwucGF0aG5hbWVcbiAgbGV0IGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IHBhdGhuYW1lLmxlbmd0aCkge1xuICAgIGlmIChcbiAgICAgIHBhdGhuYW1lLmNoYXJDb2RlQXQoaW5kZXgpID09PSAzNyAvKiBgJWAgKi8gJiZcbiAgICAgIHBhdGhuYW1lLmNoYXJDb2RlQXQoaW5kZXggKyAxKSA9PT0gNTAgLyogYDJgICovXG4gICAgKSB7XG4gICAgICBjb25zdCB0aGlyZCA9IHBhdGhuYW1lLmNoYXJDb2RlQXQoaW5kZXggKyAyKVxuICAgICAgaWYgKHRoaXJkID09PSA3MCAvKiBgRmAgKi8gfHwgdGhpcmQgPT09IDEwMiAvKiBgZmAgKi8pIHtcbiAgICAgICAgLyoqIEB0eXBlIHtOb2RlSlMuRXJybm9FeGNlcHRpb259ICovXG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAnRmlsZSBVUkwgcGF0aCBtdXN0IG5vdCBpbmNsdWRlIGVuY29kZWQgLyBjaGFyYWN0ZXJzJ1xuICAgICAgICApXG4gICAgICAgIGVycm9yLmNvZGUgPSAnRVJSX0lOVkFMSURfRklMRV9VUkxfUEFUSCdcbiAgICAgICAgdGhyb3cgZXJyb3JcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHBhdGhuYW1lKVxufVxuXG5leHBvcnQge2lzVXJsfSBmcm9tICcuL21pbnVybC5zaGFyZWQuanMnXG4iLCIvKipcbiAqIEB0eXBlZGVmIFVSTFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGhhc2hcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBob3N0XG4gKiBAcHJvcGVydHkge3N0cmluZ30gaG9zdG5hbWVcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBocmVmXG4gKiBAcHJvcGVydHkge3N0cmluZ30gb3JpZ2luXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcGFzc3dvcmRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwYXRobmFtZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHBvcnRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwcm90b2NvbFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHNlYXJjaFxuICogQHByb3BlcnR5IHthbnl9IHNlYXJjaFBhcmFtc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IHVzZXJuYW1lXG4gKiBAcHJvcGVydHkgeygpID0+IHN0cmluZ30gdG9TdHJpbmdcbiAqIEBwcm9wZXJ0eSB7KCkgPT4gc3RyaW5nfSB0b0pTT05cbiAqL1xuXG4vKipcbiAqIENoZWNrIGlmIGBmaWxlVXJsT3JQYXRoYCBsb29rcyBsaWtlIGEgVVJMLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gZmlsZVVybE9yUGF0aFxuICogICBGaWxlIHBhdGggb3IgVVJMLlxuICogQHJldHVybnMge2ZpbGVVcmxPclBhdGggaXMgVVJMfVxuICogICBXaGV0aGVyIGl04oCZcyBhIFVSTC5cbiAqL1xuLy8gRnJvbTogPGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL2ZjZjhiYTQvbGliL2ludGVybmFsL3VybC5qcyNMMTUwMT5cbmV4cG9ydCBmdW5jdGlvbiBpc1VybChmaWxlVXJsT3JQYXRoKSB7XG4gIHJldHVybiAoXG4gICAgZmlsZVVybE9yUGF0aCAhPT0gbnVsbCAmJlxuICAgIHR5cGVvZiBmaWxlVXJsT3JQYXRoID09PSAnb2JqZWN0JyAmJlxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGluZGV4YWJsZS5cbiAgICBmaWxlVXJsT3JQYXRoLmhyZWYgJiZcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBpbmRleGFibGUuXG4gICAgZmlsZVVybE9yUGF0aC5vcmlnaW5cbiAgKVxufVxuIiwidmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGZpbmQoaXRlciwgdGFyLCBrZXkpIHtcblx0Zm9yIChrZXkgb2YgaXRlci5rZXlzKCkpIHtcblx0XHRpZiAoZGVxdWFsKGtleSwgdGFyKSkgcmV0dXJuIGtleTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVxdWFsKGZvbywgYmFyKSB7XG5cdHZhciBjdG9yLCBsZW4sIHRtcDtcblx0aWYgKGZvbyA9PT0gYmFyKSByZXR1cm4gdHJ1ZTtcblxuXHRpZiAoZm9vICYmIGJhciAmJiAoY3Rvcj1mb28uY29uc3RydWN0b3IpID09PSBiYXIuY29uc3RydWN0b3IpIHtcblx0XHRpZiAoY3RvciA9PT0gRGF0ZSkgcmV0dXJuIGZvby5nZXRUaW1lKCkgPT09IGJhci5nZXRUaW1lKCk7XG5cdFx0aWYgKGN0b3IgPT09IFJlZ0V4cCkgcmV0dXJuIGZvby50b1N0cmluZygpID09PSBiYXIudG9TdHJpbmcoKTtcblxuXHRcdGlmIChjdG9yID09PSBBcnJheSkge1xuXHRcdFx0aWYgKChsZW49Zm9vLmxlbmd0aCkgPT09IGJhci5sZW5ndGgpIHtcblx0XHRcdFx0d2hpbGUgKGxlbi0tICYmIGRlcXVhbChmb29bbGVuXSwgYmFyW2xlbl0pKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBsZW4gPT09IC0xO1xuXHRcdH1cblxuXHRcdGlmIChjdG9yID09PSBTZXQpIHtcblx0XHRcdGlmIChmb28uc2l6ZSAhPT0gYmFyLnNpemUpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yIChsZW4gb2YgZm9vKSB7XG5cdFx0XHRcdHRtcCA9IGxlbjtcblx0XHRcdFx0aWYgKHRtcCAmJiB0eXBlb2YgdG1wID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRcdHRtcCA9IGZpbmQoYmFyLCB0bXApO1xuXHRcdFx0XHRcdGlmICghdG1wKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFiYXIuaGFzKHRtcCkpIHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGlmIChjdG9yID09PSBNYXApIHtcblx0XHRcdGlmIChmb28uc2l6ZSAhPT0gYmFyLnNpemUpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yIChsZW4gb2YgZm9vKSB7XG5cdFx0XHRcdHRtcCA9IGxlblswXTtcblx0XHRcdFx0aWYgKHRtcCAmJiB0eXBlb2YgdG1wID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRcdHRtcCA9IGZpbmQoYmFyLCB0bXApO1xuXHRcdFx0XHRcdGlmICghdG1wKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFkZXF1YWwobGVuWzFdLCBiYXIuZ2V0KHRtcCkpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoY3RvciA9PT0gQXJyYXlCdWZmZXIpIHtcblx0XHRcdGZvbyA9IG5ldyBVaW50OEFycmF5KGZvbyk7XG5cdFx0XHRiYXIgPSBuZXcgVWludDhBcnJheShiYXIpO1xuXHRcdH0gZWxzZSBpZiAoY3RvciA9PT0gRGF0YVZpZXcpIHtcblx0XHRcdGlmICgobGVuPWZvby5ieXRlTGVuZ3RoKSA9PT0gYmFyLmJ5dGVMZW5ndGgpIHtcblx0XHRcdFx0d2hpbGUgKGxlbi0tICYmIGZvby5nZXRJbnQ4KGxlbikgPT09IGJhci5nZXRJbnQ4KGxlbikpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGxlbiA9PT0gLTE7XG5cdFx0fVxuXG5cdFx0aWYgKEFycmF5QnVmZmVyLmlzVmlldyhmb28pKSB7XG5cdFx0XHRpZiAoKGxlbj1mb28uYnl0ZUxlbmd0aCkgPT09IGJhci5ieXRlTGVuZ3RoKSB7XG5cdFx0XHRcdHdoaWxlIChsZW4tLSAmJiBmb29bbGVuXSA9PT0gYmFyW2xlbl0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGxlbiA9PT0gLTE7XG5cdFx0fVxuXG5cdFx0aWYgKCFjdG9yIHx8IHR5cGVvZiBmb28gPT09ICdvYmplY3QnKSB7XG5cdFx0XHRsZW4gPSAwO1xuXHRcdFx0Zm9yIChjdG9yIGluIGZvbykge1xuXHRcdFx0XHRpZiAoaGFzLmNhbGwoZm9vLCBjdG9yKSAmJiArK2xlbiAmJiAhaGFzLmNhbGwoYmFyLCBjdG9yKSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZiAoIShjdG9yIGluIGJhcikgfHwgIWRlcXVhbChmb29bY3Rvcl0sIGJhcltjdG9yXSkpIHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBPYmplY3Qua2V5cyhiYXIpLmxlbmd0aCA9PT0gbGVuO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmb28gIT09IGZvbyAmJiBiYXIgIT09IGJhcjtcbn1cbiIsImZ1bmN0aW9uIERpZmYoKSB7fVxuRGlmZi5wcm90b3R5cGUgPSB7XG4gIGRpZmY6IGZ1bmN0aW9uIGRpZmYob2xkU3RyaW5nLCBuZXdTdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgdmFyIGNhbGxiYWNrID0gb3B0aW9ucy5jYWxsYmFjaztcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgZnVuY3Rpb24gZG9uZSh2YWx1ZSkge1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgdmFsdWUpO1xuICAgICAgICB9LCAwKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfSAvLyBBbGxvdyBzdWJjbGFzc2VzIHRvIG1hc3NhZ2UgdGhlIGlucHV0IHByaW9yIHRvIHJ1bm5pbmdcblxuXG4gICAgb2xkU3RyaW5nID0gdGhpcy5jYXN0SW5wdXQob2xkU3RyaW5nKTtcbiAgICBuZXdTdHJpbmcgPSB0aGlzLmNhc3RJbnB1dChuZXdTdHJpbmcpO1xuICAgIG9sZFN0cmluZyA9IHRoaXMucmVtb3ZlRW1wdHkodGhpcy50b2tlbml6ZShvbGRTdHJpbmcpKTtcbiAgICBuZXdTdHJpbmcgPSB0aGlzLnJlbW92ZUVtcHR5KHRoaXMudG9rZW5pemUobmV3U3RyaW5nKSk7XG4gICAgdmFyIG5ld0xlbiA9IG5ld1N0cmluZy5sZW5ndGgsXG4gICAgICAgIG9sZExlbiA9IG9sZFN0cmluZy5sZW5ndGg7XG4gICAgdmFyIGVkaXRMZW5ndGggPSAxO1xuICAgIHZhciBtYXhFZGl0TGVuZ3RoID0gbmV3TGVuICsgb2xkTGVuO1xuXG4gICAgaWYgKG9wdGlvbnMubWF4RWRpdExlbmd0aCkge1xuICAgICAgbWF4RWRpdExlbmd0aCA9IE1hdGgubWluKG1heEVkaXRMZW5ndGgsIG9wdGlvbnMubWF4RWRpdExlbmd0aCk7XG4gICAgfVxuXG4gICAgdmFyIGJlc3RQYXRoID0gW3tcbiAgICAgIG5ld1BvczogLTEsXG4gICAgICBjb21wb25lbnRzOiBbXVxuICAgIH1dOyAvLyBTZWVkIGVkaXRMZW5ndGggPSAwLCBpLmUuIHRoZSBjb250ZW50IHN0YXJ0cyB3aXRoIHRoZSBzYW1lIHZhbHVlc1xuXG4gICAgdmFyIG9sZFBvcyA9IHRoaXMuZXh0cmFjdENvbW1vbihiZXN0UGF0aFswXSwgbmV3U3RyaW5nLCBvbGRTdHJpbmcsIDApO1xuXG4gICAgaWYgKGJlc3RQYXRoWzBdLm5ld1BvcyArIDEgPj0gbmV3TGVuICYmIG9sZFBvcyArIDEgPj0gb2xkTGVuKSB7XG4gICAgICAvLyBJZGVudGl0eSBwZXIgdGhlIGVxdWFsaXR5IGFuZCB0b2tlbml6ZXJcbiAgICAgIHJldHVybiBkb25lKFt7XG4gICAgICAgIHZhbHVlOiB0aGlzLmpvaW4obmV3U3RyaW5nKSxcbiAgICAgICAgY291bnQ6IG5ld1N0cmluZy5sZW5ndGhcbiAgICAgIH1dKTtcbiAgICB9IC8vIE1haW4gd29ya2VyIG1ldGhvZC4gY2hlY2tzIGFsbCBwZXJtdXRhdGlvbnMgb2YgYSBnaXZlbiBlZGl0IGxlbmd0aCBmb3IgYWNjZXB0YW5jZS5cblxuXG4gICAgZnVuY3Rpb24gZXhlY0VkaXRMZW5ndGgoKSB7XG4gICAgICBmb3IgKHZhciBkaWFnb25hbFBhdGggPSAtMSAqIGVkaXRMZW5ndGg7IGRpYWdvbmFsUGF0aCA8PSBlZGl0TGVuZ3RoOyBkaWFnb25hbFBhdGggKz0gMikge1xuICAgICAgICB2YXIgYmFzZVBhdGggPSB2b2lkIDA7XG5cbiAgICAgICAgdmFyIGFkZFBhdGggPSBiZXN0UGF0aFtkaWFnb25hbFBhdGggLSAxXSxcbiAgICAgICAgICAgIHJlbW92ZVBhdGggPSBiZXN0UGF0aFtkaWFnb25hbFBhdGggKyAxXSxcbiAgICAgICAgICAgIF9vbGRQb3MgPSAocmVtb3ZlUGF0aCA/IHJlbW92ZVBhdGgubmV3UG9zIDogMCkgLSBkaWFnb25hbFBhdGg7XG5cbiAgICAgICAgaWYgKGFkZFBhdGgpIHtcbiAgICAgICAgICAvLyBObyBvbmUgZWxzZSBpcyBnb2luZyB0byBhdHRlbXB0IHRvIHVzZSB0aGlzIHZhbHVlLCBjbGVhciBpdFxuICAgICAgICAgIGJlc3RQYXRoW2RpYWdvbmFsUGF0aCAtIDFdID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNhbkFkZCA9IGFkZFBhdGggJiYgYWRkUGF0aC5uZXdQb3MgKyAxIDwgbmV3TGVuLFxuICAgICAgICAgICAgY2FuUmVtb3ZlID0gcmVtb3ZlUGF0aCAmJiAwIDw9IF9vbGRQb3MgJiYgX29sZFBvcyA8IG9sZExlbjtcblxuICAgICAgICBpZiAoIWNhbkFkZCAmJiAhY2FuUmVtb3ZlKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBwYXRoIGlzIGEgdGVybWluYWwgdGhlbiBwcnVuZVxuICAgICAgICAgIGJlc3RQYXRoW2RpYWdvbmFsUGF0aF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gLy8gU2VsZWN0IHRoZSBkaWFnb25hbCB0aGF0IHdlIHdhbnQgdG8gYnJhbmNoIGZyb20uIFdlIHNlbGVjdCB0aGUgcHJpb3JcbiAgICAgICAgLy8gcGF0aCB3aG9zZSBwb3NpdGlvbiBpbiB0aGUgbmV3IHN0cmluZyBpcyB0aGUgZmFydGhlc3QgZnJvbSB0aGUgb3JpZ2luXG4gICAgICAgIC8vIGFuZCBkb2VzIG5vdCBwYXNzIHRoZSBib3VuZHMgb2YgdGhlIGRpZmYgZ3JhcGhcblxuXG4gICAgICAgIGlmICghY2FuQWRkIHx8IGNhblJlbW92ZSAmJiBhZGRQYXRoLm5ld1BvcyA8IHJlbW92ZVBhdGgubmV3UG9zKSB7XG4gICAgICAgICAgYmFzZVBhdGggPSBjbG9uZVBhdGgocmVtb3ZlUGF0aCk7XG4gICAgICAgICAgc2VsZi5wdXNoQ29tcG9uZW50KGJhc2VQYXRoLmNvbXBvbmVudHMsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmFzZVBhdGggPSBhZGRQYXRoOyAvLyBObyBuZWVkIHRvIGNsb25lLCB3ZSd2ZSBwdWxsZWQgaXQgZnJvbSB0aGUgbGlzdFxuXG4gICAgICAgICAgYmFzZVBhdGgubmV3UG9zKys7XG4gICAgICAgICAgc2VsZi5wdXNoQ29tcG9uZW50KGJhc2VQYXRoLmNvbXBvbmVudHMsIHRydWUsIHVuZGVmaW5lZCk7XG4gICAgICAgIH1cblxuICAgICAgICBfb2xkUG9zID0gc2VsZi5leHRyYWN0Q29tbW9uKGJhc2VQYXRoLCBuZXdTdHJpbmcsIG9sZFN0cmluZywgZGlhZ29uYWxQYXRoKTsgLy8gSWYgd2UgaGF2ZSBoaXQgdGhlIGVuZCBvZiBib3RoIHN0cmluZ3MsIHRoZW4gd2UgYXJlIGRvbmVcblxuICAgICAgICBpZiAoYmFzZVBhdGgubmV3UG9zICsgMSA+PSBuZXdMZW4gJiYgX29sZFBvcyArIDEgPj0gb2xkTGVuKSB7XG4gICAgICAgICAgcmV0dXJuIGRvbmUoYnVpbGRWYWx1ZXMoc2VsZiwgYmFzZVBhdGguY29tcG9uZW50cywgbmV3U3RyaW5nLCBvbGRTdHJpbmcsIHNlbGYudXNlTG9uZ2VzdFRva2VuKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIHRyYWNrIHRoaXMgcGF0aCBhcyBhIHBvdGVudGlhbCBjYW5kaWRhdGUgYW5kIGNvbnRpbnVlLlxuICAgICAgICAgIGJlc3RQYXRoW2RpYWdvbmFsUGF0aF0gPSBiYXNlUGF0aDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBlZGl0TGVuZ3RoKys7XG4gICAgfSAvLyBQZXJmb3JtcyB0aGUgbGVuZ3RoIG9mIGVkaXQgaXRlcmF0aW9uLiBJcyBhIGJpdCBmdWdseSBhcyB0aGlzIGhhcyB0byBzdXBwb3J0IHRoZVxuICAgIC8vIHN5bmMgYW5kIGFzeW5jIG1vZGUgd2hpY2ggaXMgbmV2ZXIgZnVuLiBMb29wcyBvdmVyIGV4ZWNFZGl0TGVuZ3RoIHVudGlsIGEgdmFsdWVcbiAgICAvLyBpcyBwcm9kdWNlZCwgb3IgdW50aWwgdGhlIGVkaXQgbGVuZ3RoIGV4Y2VlZHMgb3B0aW9ucy5tYXhFZGl0TGVuZ3RoIChpZiBnaXZlbiksXG4gICAgLy8gaW4gd2hpY2ggY2FzZSBpdCB3aWxsIHJldHVybiB1bmRlZmluZWQuXG5cblxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgKGZ1bmN0aW9uIGV4ZWMoKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChlZGl0TGVuZ3RoID4gbWF4RWRpdExlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFleGVjRWRpdExlbmd0aCgpKSB7XG4gICAgICAgICAgICBleGVjKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAwKTtcbiAgICAgIH0pKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlIChlZGl0TGVuZ3RoIDw9IG1heEVkaXRMZW5ndGgpIHtcbiAgICAgICAgdmFyIHJldCA9IGV4ZWNFZGl0TGVuZ3RoKCk7XG5cbiAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHB1c2hDb21wb25lbnQ6IGZ1bmN0aW9uIHB1c2hDb21wb25lbnQoY29tcG9uZW50cywgYWRkZWQsIHJlbW92ZWQpIHtcbiAgICB2YXIgbGFzdCA9IGNvbXBvbmVudHNbY29tcG9uZW50cy5sZW5ndGggLSAxXTtcblxuICAgIGlmIChsYXN0ICYmIGxhc3QuYWRkZWQgPT09IGFkZGVkICYmIGxhc3QucmVtb3ZlZCA9PT0gcmVtb3ZlZCkge1xuICAgICAgLy8gV2UgbmVlZCB0byBjbG9uZSBoZXJlIGFzIHRoZSBjb21wb25lbnQgY2xvbmUgb3BlcmF0aW9uIGlzIGp1c3RcbiAgICAgIC8vIGFzIHNoYWxsb3cgYXJyYXkgY2xvbmVcbiAgICAgIGNvbXBvbmVudHNbY29tcG9uZW50cy5sZW5ndGggLSAxXSA9IHtcbiAgICAgICAgY291bnQ6IGxhc3QuY291bnQgKyAxLFxuICAgICAgICBhZGRlZDogYWRkZWQsXG4gICAgICAgIHJlbW92ZWQ6IHJlbW92ZWRcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXBvbmVudHMucHVzaCh7XG4gICAgICAgIGNvdW50OiAxLFxuICAgICAgICBhZGRlZDogYWRkZWQsXG4gICAgICAgIHJlbW92ZWQ6IHJlbW92ZWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgZXh0cmFjdENvbW1vbjogZnVuY3Rpb24gZXh0cmFjdENvbW1vbihiYXNlUGF0aCwgbmV3U3RyaW5nLCBvbGRTdHJpbmcsIGRpYWdvbmFsUGF0aCkge1xuICAgIHZhciBuZXdMZW4gPSBuZXdTdHJpbmcubGVuZ3RoLFxuICAgICAgICBvbGRMZW4gPSBvbGRTdHJpbmcubGVuZ3RoLFxuICAgICAgICBuZXdQb3MgPSBiYXNlUGF0aC5uZXdQb3MsXG4gICAgICAgIG9sZFBvcyA9IG5ld1BvcyAtIGRpYWdvbmFsUGF0aCxcbiAgICAgICAgY29tbW9uQ291bnQgPSAwO1xuXG4gICAgd2hpbGUgKG5ld1BvcyArIDEgPCBuZXdMZW4gJiYgb2xkUG9zICsgMSA8IG9sZExlbiAmJiB0aGlzLmVxdWFscyhuZXdTdHJpbmdbbmV3UG9zICsgMV0sIG9sZFN0cmluZ1tvbGRQb3MgKyAxXSkpIHtcbiAgICAgIG5ld1BvcysrO1xuICAgICAgb2xkUG9zKys7XG4gICAgICBjb21tb25Db3VudCsrO1xuICAgIH1cblxuICAgIGlmIChjb21tb25Db3VudCkge1xuICAgICAgYmFzZVBhdGguY29tcG9uZW50cy5wdXNoKHtcbiAgICAgICAgY291bnQ6IGNvbW1vbkNvdW50XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBiYXNlUGF0aC5uZXdQb3MgPSBuZXdQb3M7XG4gICAgcmV0dXJuIG9sZFBvcztcbiAgfSxcbiAgZXF1YWxzOiBmdW5jdGlvbiBlcXVhbHMobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuY29tcGFyYXRvcihsZWZ0LCByaWdodCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCB0aGlzLm9wdGlvbnMuaWdub3JlQ2FzZSAmJiBsZWZ0LnRvTG93ZXJDYXNlKCkgPT09IHJpZ2h0LnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICB9LFxuICByZW1vdmVFbXB0eTogZnVuY3Rpb24gcmVtb3ZlRW1wdHkoYXJyYXkpIHtcbiAgICB2YXIgcmV0ID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYXJyYXlbaV0pIHtcbiAgICAgICAgcmV0LnB1c2goYXJyYXlbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH0sXG4gIGNhc3RJbnB1dDogZnVuY3Rpb24gY2FzdElucHV0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICB0b2tlbml6ZTogZnVuY3Rpb24gdG9rZW5pemUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUuc3BsaXQoJycpO1xuICB9LFxuICBqb2luOiBmdW5jdGlvbiBqb2luKGNoYXJzKSB7XG4gICAgcmV0dXJuIGNoYXJzLmpvaW4oJycpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBidWlsZFZhbHVlcyhkaWZmLCBjb21wb25lbnRzLCBuZXdTdHJpbmcsIG9sZFN0cmluZywgdXNlTG9uZ2VzdFRva2VuKSB7XG4gIHZhciBjb21wb25lbnRQb3MgPSAwLFxuICAgICAgY29tcG9uZW50TGVuID0gY29tcG9uZW50cy5sZW5ndGgsXG4gICAgICBuZXdQb3MgPSAwLFxuICAgICAgb2xkUG9zID0gMDtcblxuICBmb3IgKDsgY29tcG9uZW50UG9zIDwgY29tcG9uZW50TGVuOyBjb21wb25lbnRQb3MrKykge1xuICAgIHZhciBjb21wb25lbnQgPSBjb21wb25lbnRzW2NvbXBvbmVudFBvc107XG5cbiAgICBpZiAoIWNvbXBvbmVudC5yZW1vdmVkKSB7XG4gICAgICBpZiAoIWNvbXBvbmVudC5hZGRlZCAmJiB1c2VMb25nZXN0VG9rZW4pIHtcbiAgICAgICAgdmFyIHZhbHVlID0gbmV3U3RyaW5nLnNsaWNlKG5ld1BvcywgbmV3UG9zICsgY29tcG9uZW50LmNvdW50KTtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5tYXAoZnVuY3Rpb24gKHZhbHVlLCBpKSB7XG4gICAgICAgICAgdmFyIG9sZFZhbHVlID0gb2xkU3RyaW5nW29sZFBvcyArIGldO1xuICAgICAgICAgIHJldHVybiBvbGRWYWx1ZS5sZW5ndGggPiB2YWx1ZS5sZW5ndGggPyBvbGRWYWx1ZSA6IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgICAgY29tcG9uZW50LnZhbHVlID0gZGlmZi5qb2luKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBvbmVudC52YWx1ZSA9IGRpZmYuam9pbihuZXdTdHJpbmcuc2xpY2UobmV3UG9zLCBuZXdQb3MgKyBjb21wb25lbnQuY291bnQpKTtcbiAgICAgIH1cblxuICAgICAgbmV3UG9zICs9IGNvbXBvbmVudC5jb3VudDsgLy8gQ29tbW9uIGNhc2VcblxuICAgICAgaWYgKCFjb21wb25lbnQuYWRkZWQpIHtcbiAgICAgICAgb2xkUG9zICs9IGNvbXBvbmVudC5jb3VudDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29tcG9uZW50LnZhbHVlID0gZGlmZi5qb2luKG9sZFN0cmluZy5zbGljZShvbGRQb3MsIG9sZFBvcyArIGNvbXBvbmVudC5jb3VudCkpO1xuICAgICAgb2xkUG9zICs9IGNvbXBvbmVudC5jb3VudDsgLy8gUmV2ZXJzZSBhZGQgYW5kIHJlbW92ZSBzbyByZW1vdmVzIGFyZSBvdXRwdXQgZmlyc3QgdG8gbWF0Y2ggY29tbW9uIGNvbnZlbnRpb25cbiAgICAgIC8vIFRoZSBkaWZmaW5nIGFsZ29yaXRobSBpcyB0aWVkIHRvIGFkZCB0aGVuIHJlbW92ZSBvdXRwdXQgYW5kIHRoaXMgaXMgdGhlIHNpbXBsZXN0XG4gICAgICAvLyByb3V0ZSB0byBnZXQgdGhlIGRlc2lyZWQgb3V0cHV0IHdpdGggbWluaW1hbCBvdmVyaGVhZC5cblxuICAgICAgaWYgKGNvbXBvbmVudFBvcyAmJiBjb21wb25lbnRzW2NvbXBvbmVudFBvcyAtIDFdLmFkZGVkKSB7XG4gICAgICAgIHZhciB0bXAgPSBjb21wb25lbnRzW2NvbXBvbmVudFBvcyAtIDFdO1xuICAgICAgICBjb21wb25lbnRzW2NvbXBvbmVudFBvcyAtIDFdID0gY29tcG9uZW50c1tjb21wb25lbnRQb3NdO1xuICAgICAgICBjb21wb25lbnRzW2NvbXBvbmVudFBvc10gPSB0bXA7XG4gICAgICB9XG4gICAgfVxuICB9IC8vIFNwZWNpYWwgY2FzZSBoYW5kbGUgZm9yIHdoZW4gb25lIHRlcm1pbmFsIGlzIGlnbm9yZWQgKGkuZS4gd2hpdGVzcGFjZSkuXG4gIC8vIEZvciB0aGlzIGNhc2Ugd2UgbWVyZ2UgdGhlIHRlcm1pbmFsIGludG8gdGhlIHByaW9yIHN0cmluZyBhbmQgZHJvcCB0aGUgY2hhbmdlLlxuICAvLyBUaGlzIGlzIG9ubHkgYXZhaWxhYmxlIGZvciBzdHJpbmcgbW9kZS5cblxuXG4gIHZhciBsYXN0Q29tcG9uZW50ID0gY29tcG9uZW50c1tjb21wb25lbnRMZW4gLSAxXTtcblxuICBpZiAoY29tcG9uZW50TGVuID4gMSAmJiB0eXBlb2YgbGFzdENvbXBvbmVudC52YWx1ZSA9PT0gJ3N0cmluZycgJiYgKGxhc3RDb21wb25lbnQuYWRkZWQgfHwgbGFzdENvbXBvbmVudC5yZW1vdmVkKSAmJiBkaWZmLmVxdWFscygnJywgbGFzdENvbXBvbmVudC52YWx1ZSkpIHtcbiAgICBjb21wb25lbnRzW2NvbXBvbmVudExlbiAtIDJdLnZhbHVlICs9IGxhc3RDb21wb25lbnQudmFsdWU7XG4gICAgY29tcG9uZW50cy5wb3AoKTtcbiAgfVxuXG4gIHJldHVybiBjb21wb25lbnRzO1xufVxuXG5mdW5jdGlvbiBjbG9uZVBhdGgocGF0aCkge1xuICByZXR1cm4ge1xuICAgIG5ld1BvczogcGF0aC5uZXdQb3MsXG4gICAgY29tcG9uZW50czogcGF0aC5jb21wb25lbnRzLnNsaWNlKDApXG4gIH07XG59XG5cbnZhciBjaGFyYWN0ZXJEaWZmID0gbmV3IERpZmYoKTtcbmZ1bmN0aW9uIGRpZmZDaGFycyhvbGRTdHIsIG5ld1N0ciwgb3B0aW9ucykge1xuICByZXR1cm4gY2hhcmFjdGVyRGlmZi5kaWZmKG9sZFN0ciwgbmV3U3RyLCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVPcHRpb25zKG9wdGlvbnMsIGRlZmF1bHRzKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGRlZmF1bHRzLmNhbGxiYWNrID0gb3B0aW9ucztcbiAgfSBlbHNlIGlmIChvcHRpb25zKSB7XG4gICAgZm9yICh2YXIgbmFtZSBpbiBvcHRpb25zKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgZGVmYXVsdHNbbmFtZV0gPSBvcHRpb25zW25hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZWZhdWx0cztcbn1cblxuLy9cbi8vIFJhbmdlcyBhbmQgZXhjZXB0aW9uczpcbi8vIExhdGluLTEgU3VwcGxlbWVudCwgMDA4MOKAkzAwRkZcbi8vICAtIFUrMDBENyAgw5cgTXVsdGlwbGljYXRpb24gc2lnblxuLy8gIC0gVSswMEY3ICDDtyBEaXZpc2lvbiBzaWduXG4vLyBMYXRpbiBFeHRlbmRlZC1BLCAwMTAw4oCTMDE3RlxuLy8gTGF0aW4gRXh0ZW5kZWQtQiwgMDE4MOKAkzAyNEZcbi8vIElQQSBFeHRlbnNpb25zLCAwMjUw4oCTMDJBRlxuLy8gU3BhY2luZyBNb2RpZmllciBMZXR0ZXJzLCAwMkIw4oCTMDJGRlxuLy8gIC0gVSswMkM3ICDLhyAmIzcxMTsgIENhcm9uXG4vLyAgLSBVKzAyRDggIMuYICYjNzI4OyAgQnJldmVcbi8vICAtIFUrMDJEOSAgy5kgJiM3Mjk7ICBEb3QgQWJvdmVcbi8vICAtIFUrMDJEQSAgy5ogJiM3MzA7ICBSaW5nIEFib3ZlXG4vLyAgLSBVKzAyREIgIMubICYjNzMxOyAgT2dvbmVrXG4vLyAgLSBVKzAyREMgIMucICYjNzMyOyAgU21hbGwgVGlsZGVcbi8vICAtIFUrMDJERCAgy50gJiM3MzM7ICBEb3VibGUgQWN1dGUgQWNjZW50XG4vLyBMYXRpbiBFeHRlbmRlZCBBZGRpdGlvbmFsLCAxRTAw4oCTMUVGRlxuXG52YXIgZXh0ZW5kZWRXb3JkQ2hhcnMgPSAvXltBLVphLXpcXHhDMC1cXHUwMkM2XFx1MDJDOC1cXHUwMkQ3XFx1MDJERS1cXHUwMkZGXFx1MUUwMC1cXHUxRUZGXSskLztcbnZhciByZVdoaXRlc3BhY2UgPSAvXFxTLztcbnZhciB3b3JkRGlmZiA9IG5ldyBEaWZmKCk7XG5cbndvcmREaWZmLmVxdWFscyA9IGZ1bmN0aW9uIChsZWZ0LCByaWdodCkge1xuICBpZiAodGhpcy5vcHRpb25zLmlnbm9yZUNhc2UpIHtcbiAgICBsZWZ0ID0gbGVmdC50b0xvd2VyQ2FzZSgpO1xuICAgIHJpZ2h0ID0gcmlnaHQudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIHJldHVybiBsZWZ0ID09PSByaWdodCB8fCB0aGlzLm9wdGlvbnMuaWdub3JlV2hpdGVzcGFjZSAmJiAhcmVXaGl0ZXNwYWNlLnRlc3QobGVmdCkgJiYgIXJlV2hpdGVzcGFjZS50ZXN0KHJpZ2h0KTtcbn07XG5cbndvcmREaWZmLnRva2VuaXplID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIC8vIEFsbCB3aGl0ZXNwYWNlIHN5bWJvbHMgZXhjZXB0IG5ld2xpbmUgZ3JvdXAgaW50byBvbmUgdG9rZW4sIGVhY2ggbmV3bGluZSAtIGluIHNlcGFyYXRlIHRva2VuXG4gIHZhciB0b2tlbnMgPSB2YWx1ZS5zcGxpdCgvKFteXFxTXFxyXFxuXSt8WygpW1xcXXt9J1wiXFxyXFxuXXxcXGIpLyk7IC8vIEpvaW4gdGhlIGJvdW5kYXJ5IHNwbGl0cyB0aGF0IHdlIGRvIG5vdCBjb25zaWRlciB0byBiZSBib3VuZGFyaWVzLiBUaGlzIGlzIHByaW1hcmlseSB0aGUgZXh0ZW5kZWQgTGF0aW4gY2hhcmFjdGVyIHNldC5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAvLyBJZiB3ZSBoYXZlIGFuIGVtcHR5IHN0cmluZyBpbiB0aGUgbmV4dCBmaWVsZCBhbmQgd2UgaGF2ZSBvbmx5IHdvcmQgY2hhcnMgYmVmb3JlIGFuZCBhZnRlciwgbWVyZ2VcbiAgICBpZiAoIXRva2Vuc1tpICsgMV0gJiYgdG9rZW5zW2kgKyAyXSAmJiBleHRlbmRlZFdvcmRDaGFycy50ZXN0KHRva2Vuc1tpXSkgJiYgZXh0ZW5kZWRXb3JkQ2hhcnMudGVzdCh0b2tlbnNbaSArIDJdKSkge1xuICAgICAgdG9rZW5zW2ldICs9IHRva2Vuc1tpICsgMl07XG4gICAgICB0b2tlbnMuc3BsaWNlKGkgKyAxLCAyKTtcbiAgICAgIGktLTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufTtcblxuZnVuY3Rpb24gZGlmZldvcmRzKG9sZFN0ciwgbmV3U3RyLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBnZW5lcmF0ZU9wdGlvbnMob3B0aW9ucywge1xuICAgIGlnbm9yZVdoaXRlc3BhY2U6IHRydWVcbiAgfSk7XG4gIHJldHVybiB3b3JkRGlmZi5kaWZmKG9sZFN0ciwgbmV3U3RyLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGRpZmZXb3Jkc1dpdGhTcGFjZShvbGRTdHIsIG5ld1N0ciwgb3B0aW9ucykge1xuICByZXR1cm4gd29yZERpZmYuZGlmZihvbGRTdHIsIG5ld1N0ciwgb3B0aW9ucyk7XG59XG5cbnZhciBsaW5lRGlmZiA9IG5ldyBEaWZmKCk7XG5cbmxpbmVEaWZmLnRva2VuaXplID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciByZXRMaW5lcyA9IFtdLFxuICAgICAgbGluZXNBbmROZXdsaW5lcyA9IHZhbHVlLnNwbGl0KC8oXFxufFxcclxcbikvKTsgLy8gSWdub3JlIHRoZSBmaW5hbCBlbXB0eSB0b2tlbiB0aGF0IG9jY3VycyBpZiB0aGUgc3RyaW5nIGVuZHMgd2l0aCBhIG5ldyBsaW5lXG5cbiAgaWYgKCFsaW5lc0FuZE5ld2xpbmVzW2xpbmVzQW5kTmV3bGluZXMubGVuZ3RoIC0gMV0pIHtcbiAgICBsaW5lc0FuZE5ld2xpbmVzLnBvcCgpO1xuICB9IC8vIE1lcmdlIHRoZSBjb250ZW50IGFuZCBsaW5lIHNlcGFyYXRvcnMgaW50byBzaW5nbGUgdG9rZW5zXG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzQW5kTmV3bGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbGluZSA9IGxpbmVzQW5kTmV3bGluZXNbaV07XG5cbiAgICBpZiAoaSAlIDIgJiYgIXRoaXMub3B0aW9ucy5uZXdsaW5lSXNUb2tlbikge1xuICAgICAgcmV0TGluZXNbcmV0TGluZXMubGVuZ3RoIC0gMV0gKz0gbGluZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5pZ25vcmVXaGl0ZXNwYWNlKSB7XG4gICAgICAgIGxpbmUgPSBsaW5lLnRyaW0oKTtcbiAgICAgIH1cblxuICAgICAgcmV0TGluZXMucHVzaChsaW5lKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmV0TGluZXM7XG59O1xuXG5mdW5jdGlvbiBkaWZmTGluZXMob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBsaW5lRGlmZi5kaWZmKG9sZFN0ciwgbmV3U3RyLCBjYWxsYmFjayk7XG59XG5mdW5jdGlvbiBkaWZmVHJpbW1lZExpbmVzKG9sZFN0ciwgbmV3U3RyLCBjYWxsYmFjaykge1xuICB2YXIgb3B0aW9ucyA9IGdlbmVyYXRlT3B0aW9ucyhjYWxsYmFjaywge1xuICAgIGlnbm9yZVdoaXRlc3BhY2U6IHRydWVcbiAgfSk7XG4gIHJldHVybiBsaW5lRGlmZi5kaWZmKG9sZFN0ciwgbmV3U3RyLCBvcHRpb25zKTtcbn1cblxudmFyIHNlbnRlbmNlRGlmZiA9IG5ldyBEaWZmKCk7XG5cbnNlbnRlbmNlRGlmZi50b2tlbml6ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUuc3BsaXQoLyhcXFMuKz9bLiE/XSkoPz1cXHMrfCQpLyk7XG59O1xuXG5mdW5jdGlvbiBkaWZmU2VudGVuY2VzKG9sZFN0ciwgbmV3U3RyLCBjYWxsYmFjaykge1xuICByZXR1cm4gc2VudGVuY2VEaWZmLmRpZmYob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKTtcbn1cblxudmFyIGNzc0RpZmYgPSBuZXcgRGlmZigpO1xuXG5jc3NEaWZmLnRva2VuaXplID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5zcGxpdCgvKFt7fTo7LF18XFxzKykvKTtcbn07XG5cbmZ1bmN0aW9uIGRpZmZDc3Mob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBjc3NEaWZmLmRpZmYob2xkU3RyLCBuZXdTdHIsIGNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gIHJldHVybiBhcnIyO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG52YXIgb2JqZWN0UHJvdG90eXBlVG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGpzb25EaWZmID0gbmV3IERpZmYoKTsgLy8gRGlzY3JpbWluYXRlIGJldHdlZW4gdHdvIGxpbmVzIG9mIHByZXR0eS1wcmludGVkLCBzZXJpYWxpemVkIEpTT04gd2hlcmUgb25lIG9mIHRoZW0gaGFzIGFcbi8vIGRhbmdsaW5nIGNvbW1hIGFuZCB0aGUgb3RoZXIgZG9lc24ndC4gVHVybnMgb3V0IGluY2x1ZGluZyB0aGUgZGFuZ2xpbmcgY29tbWEgeWllbGRzIHRoZSBuaWNlc3Qgb3V0cHV0OlxuXG5qc29uRGlmZi51c2VMb25nZXN0VG9rZW4gPSB0cnVlO1xuanNvbkRpZmYudG9rZW5pemUgPSBsaW5lRGlmZi50b2tlbml6ZTtcblxuanNvbkRpZmYuY2FzdElucHV0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBfdGhpcyRvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgdW5kZWZpbmVkUmVwbGFjZW1lbnQgPSBfdGhpcyRvcHRpb25zLnVuZGVmaW5lZFJlcGxhY2VtZW50LFxuICAgICAgX3RoaXMkb3B0aW9ucyRzdHJpbmdpID0gX3RoaXMkb3B0aW9ucy5zdHJpbmdpZnlSZXBsYWNlcixcbiAgICAgIHN0cmluZ2lmeVJlcGxhY2VyID0gX3RoaXMkb3B0aW9ucyRzdHJpbmdpID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoaywgdikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWRSZXBsYWNlbWVudCA6IHY7XG4gIH0gOiBfdGhpcyRvcHRpb25zJHN0cmluZ2k7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiBKU09OLnN0cmluZ2lmeShjYW5vbmljYWxpemUodmFsdWUsIG51bGwsIG51bGwsIHN0cmluZ2lmeVJlcGxhY2VyKSwgc3RyaW5naWZ5UmVwbGFjZXIsICcgICcpO1xufTtcblxuanNvbkRpZmYuZXF1YWxzID0gZnVuY3Rpb24gKGxlZnQsIHJpZ2h0KSB7XG4gIHJldHVybiBEaWZmLnByb3RvdHlwZS5lcXVhbHMuY2FsbChqc29uRGlmZiwgbGVmdC5yZXBsYWNlKC8sKFtcXHJcXG5dKS9nLCAnJDEnKSwgcmlnaHQucmVwbGFjZSgvLChbXFxyXFxuXSkvZywgJyQxJykpO1xufTtcblxuZnVuY3Rpb24gZGlmZkpzb24ob2xkT2JqLCBuZXdPYmosIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGpzb25EaWZmLmRpZmYob2xkT2JqLCBuZXdPYmosIG9wdGlvbnMpO1xufSAvLyBUaGlzIGZ1bmN0aW9uIGhhbmRsZXMgdGhlIHByZXNlbmNlIG9mIGNpcmN1bGFyIHJlZmVyZW5jZXMgYnkgYmFpbGluZyBvdXQgd2hlbiBlbmNvdW50ZXJpbmcgYW5cbi8vIG9iamVjdCB0aGF0IGlzIGFscmVhZHkgb24gdGhlIFwic3RhY2tcIiBvZiBpdGVtcyBiZWluZyBwcm9jZXNzZWQuIEFjY2VwdHMgYW4gb3B0aW9uYWwgcmVwbGFjZXJcblxuZnVuY3Rpb24gY2Fub25pY2FsaXplKG9iaiwgc3RhY2ssIHJlcGxhY2VtZW50U3RhY2ssIHJlcGxhY2VyLCBrZXkpIHtcbiAgc3RhY2sgPSBzdGFjayB8fCBbXTtcbiAgcmVwbGFjZW1lbnRTdGFjayA9IHJlcGxhY2VtZW50U3RhY2sgfHwgW107XG5cbiAgaWYgKHJlcGxhY2VyKSB7XG4gICAgb2JqID0gcmVwbGFjZXIoa2V5LCBvYmopO1xuICB9XG5cbiAgdmFyIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHN0YWNrW2ldID09PSBvYmopIHtcbiAgICAgIHJldHVybiByZXBsYWNlbWVudFN0YWNrW2ldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjYW5vbmljYWxpemVkT2JqO1xuXG4gIGlmICgnW29iamVjdCBBcnJheV0nID09PSBvYmplY3RQcm90b3R5cGVUb1N0cmluZy5jYWxsKG9iaikpIHtcbiAgICBzdGFjay5wdXNoKG9iaik7XG4gICAgY2Fub25pY2FsaXplZE9iaiA9IG5ldyBBcnJheShvYmoubGVuZ3RoKTtcbiAgICByZXBsYWNlbWVudFN0YWNrLnB1c2goY2Fub25pY2FsaXplZE9iaik7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjYW5vbmljYWxpemVkT2JqW2ldID0gY2Fub25pY2FsaXplKG9ialtpXSwgc3RhY2ssIHJlcGxhY2VtZW50U3RhY2ssIHJlcGxhY2VyLCBrZXkpO1xuICAgIH1cblxuICAgIHN0YWNrLnBvcCgpO1xuICAgIHJlcGxhY2VtZW50U3RhY2sucG9wKCk7XG4gICAgcmV0dXJuIGNhbm9uaWNhbGl6ZWRPYmo7XG4gIH1cblxuICBpZiAob2JqICYmIG9iai50b0pTT04pIHtcbiAgICBvYmogPSBvYmoudG9KU09OKCk7XG4gIH1cblxuICBpZiAoX3R5cGVvZihvYmopID09PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGwpIHtcbiAgICBzdGFjay5wdXNoKG9iaik7XG4gICAgY2Fub25pY2FsaXplZE9iaiA9IHt9O1xuICAgIHJlcGxhY2VtZW50U3RhY2sucHVzaChjYW5vbmljYWxpemVkT2JqKTtcblxuICAgIHZhciBzb3J0ZWRLZXlzID0gW10sXG4gICAgICAgIF9rZXk7XG5cbiAgICBmb3IgKF9rZXkgaW4gb2JqKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShfa2V5KSkge1xuICAgICAgICBzb3J0ZWRLZXlzLnB1c2goX2tleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc29ydGVkS2V5cy5zb3J0KCk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc29ydGVkS2V5cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgX2tleSA9IHNvcnRlZEtleXNbaV07XG4gICAgICBjYW5vbmljYWxpemVkT2JqW19rZXldID0gY2Fub25pY2FsaXplKG9ialtfa2V5XSwgc3RhY2ssIHJlcGxhY2VtZW50U3RhY2ssIHJlcGxhY2VyLCBfa2V5KTtcbiAgICB9XG5cbiAgICBzdGFjay5wb3AoKTtcbiAgICByZXBsYWNlbWVudFN0YWNrLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIGNhbm9uaWNhbGl6ZWRPYmogPSBvYmo7XG4gIH1cblxuICByZXR1cm4gY2Fub25pY2FsaXplZE9iajtcbn1cblxudmFyIGFycmF5RGlmZiA9IG5ldyBEaWZmKCk7XG5cbmFycmF5RGlmZi50b2tlbml6ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUuc2xpY2UoKTtcbn07XG5cbmFycmF5RGlmZi5qb2luID0gYXJyYXlEaWZmLnJlbW92ZUVtcHR5ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmZ1bmN0aW9uIGRpZmZBcnJheXMob2xkQXJyLCBuZXdBcnIsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBhcnJheURpZmYuZGlmZihvbGRBcnIsIG5ld0FyciwgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiBwYXJzZVBhdGNoKHVuaURpZmYpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgZGlmZnN0ciA9IHVuaURpZmYuc3BsaXQoL1xcclxcbnxbXFxuXFx2XFxmXFxyXFx4ODVdLyksXG4gICAgICBkZWxpbWl0ZXJzID0gdW5pRGlmZi5tYXRjaCgvXFxyXFxufFtcXG5cXHZcXGZcXHJcXHg4NV0vZykgfHwgW10sXG4gICAgICBsaXN0ID0gW10sXG4gICAgICBpID0gMDtcblxuICBmdW5jdGlvbiBwYXJzZUluZGV4KCkge1xuICAgIHZhciBpbmRleCA9IHt9O1xuICAgIGxpc3QucHVzaChpbmRleCk7IC8vIFBhcnNlIGRpZmYgbWV0YWRhdGFcblxuICAgIHdoaWxlIChpIDwgZGlmZnN0ci5sZW5ndGgpIHtcbiAgICAgIHZhciBsaW5lID0gZGlmZnN0cltpXTsgLy8gRmlsZSBoZWFkZXIgZm91bmQsIGVuZCBwYXJzaW5nIGRpZmYgbWV0YWRhdGFcblxuICAgICAgaWYgKC9eKFxcLVxcLVxcLXxcXCtcXCtcXCt8QEApXFxzLy50ZXN0KGxpbmUpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSAvLyBEaWZmIGluZGV4XG5cblxuICAgICAgdmFyIGhlYWRlciA9IC9eKD86SW5kZXg6fGRpZmYoPzogLXIgXFx3KykrKVxccysoLis/KVxccyokLy5leGVjKGxpbmUpO1xuXG4gICAgICBpZiAoaGVhZGVyKSB7XG4gICAgICAgIGluZGV4LmluZGV4ID0gaGVhZGVyWzFdO1xuICAgICAgfVxuXG4gICAgICBpKys7XG4gICAgfSAvLyBQYXJzZSBmaWxlIGhlYWRlcnMgaWYgdGhleSBhcmUgZGVmaW5lZC4gVW5pZmllZCBkaWZmIHJlcXVpcmVzIHRoZW0sIGJ1dFxuICAgIC8vIHRoZXJlJ3Mgbm8gdGVjaG5pY2FsIGlzc3VlcyB0byBoYXZlIGFuIGlzb2xhdGVkIGh1bmsgd2l0aG91dCBmaWxlIGhlYWRlclxuXG5cbiAgICBwYXJzZUZpbGVIZWFkZXIoaW5kZXgpO1xuICAgIHBhcnNlRmlsZUhlYWRlcihpbmRleCk7IC8vIFBhcnNlIGh1bmtzXG5cbiAgICBpbmRleC5odW5rcyA9IFtdO1xuXG4gICAgd2hpbGUgKGkgPCBkaWZmc3RyLmxlbmd0aCkge1xuICAgICAgdmFyIF9saW5lID0gZGlmZnN0cltpXTtcblxuICAgICAgaWYgKC9eKEluZGV4OnxkaWZmfFxcLVxcLVxcLXxcXCtcXCtcXCspXFxzLy50ZXN0KF9saW5lKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSBpZiAoL15AQC8udGVzdChfbGluZSkpIHtcbiAgICAgICAgaW5kZXguaHVua3MucHVzaChwYXJzZUh1bmsoKSk7XG4gICAgICB9IGVsc2UgaWYgKF9saW5lICYmIG9wdGlvbnMuc3RyaWN0KSB7XG4gICAgICAgIC8vIElnbm9yZSB1bmV4cGVjdGVkIGNvbnRlbnQgdW5sZXNzIGluIHN0cmljdCBtb2RlXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBsaW5lICcgKyAoaSArIDEpICsgJyAnICsgSlNPTi5zdHJpbmdpZnkoX2xpbmUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gUGFyc2VzIHRoZSAtLS0gYW5kICsrKyBoZWFkZXJzLCBpZiBub25lIGFyZSBmb3VuZCwgbm8gbGluZXNcbiAgLy8gYXJlIGNvbnN1bWVkLlxuXG5cbiAgZnVuY3Rpb24gcGFyc2VGaWxlSGVhZGVyKGluZGV4KSB7XG4gICAgdmFyIGZpbGVIZWFkZXIgPSAvXigtLS18XFwrXFwrXFwrKVxccysoLiopJC8uZXhlYyhkaWZmc3RyW2ldKTtcblxuICAgIGlmIChmaWxlSGVhZGVyKSB7XG4gICAgICB2YXIga2V5UHJlZml4ID0gZmlsZUhlYWRlclsxXSA9PT0gJy0tLScgPyAnb2xkJyA6ICduZXcnO1xuICAgICAgdmFyIGRhdGEgPSBmaWxlSGVhZGVyWzJdLnNwbGl0KCdcXHQnLCAyKTtcbiAgICAgIHZhciBmaWxlTmFtZSA9IGRhdGFbMF0ucmVwbGFjZSgvXFxcXFxcXFwvZywgJ1xcXFwnKTtcblxuICAgICAgaWYgKC9eXCIuKlwiJC8udGVzdChmaWxlTmFtZSkpIHtcbiAgICAgICAgZmlsZU5hbWUgPSBmaWxlTmFtZS5zdWJzdHIoMSwgZmlsZU5hbWUubGVuZ3RoIC0gMik7XG4gICAgICB9XG5cbiAgICAgIGluZGV4W2tleVByZWZpeCArICdGaWxlTmFtZSddID0gZmlsZU5hbWU7XG4gICAgICBpbmRleFtrZXlQcmVmaXggKyAnSGVhZGVyJ10gPSAoZGF0YVsxXSB8fCAnJykudHJpbSgpO1xuICAgICAgaSsrO1xuICAgIH1cbiAgfSAvLyBQYXJzZXMgYSBodW5rXG4gIC8vIFRoaXMgYXNzdW1lcyB0aGF0IHdlIGFyZSBhdCB0aGUgc3RhcnQgb2YgYSBodW5rLlxuXG5cbiAgZnVuY3Rpb24gcGFyc2VIdW5rKCkge1xuICAgIHZhciBjaHVua0hlYWRlckluZGV4ID0gaSxcbiAgICAgICAgY2h1bmtIZWFkZXJMaW5lID0gZGlmZnN0cltpKytdLFxuICAgICAgICBjaHVua0hlYWRlciA9IGNodW5rSGVhZGVyTGluZS5zcGxpdCgvQEAgLShcXGQrKSg/OiwoXFxkKykpPyBcXCsoXFxkKykoPzosKFxcZCspKT8gQEAvKTtcbiAgICB2YXIgaHVuayA9IHtcbiAgICAgIG9sZFN0YXJ0OiArY2h1bmtIZWFkZXJbMV0sXG4gICAgICBvbGRMaW5lczogdHlwZW9mIGNodW5rSGVhZGVyWzJdID09PSAndW5kZWZpbmVkJyA/IDEgOiArY2h1bmtIZWFkZXJbMl0sXG4gICAgICBuZXdTdGFydDogK2NodW5rSGVhZGVyWzNdLFxuICAgICAgbmV3TGluZXM6IHR5cGVvZiBjaHVua0hlYWRlcls0XSA9PT0gJ3VuZGVmaW5lZCcgPyAxIDogK2NodW5rSGVhZGVyWzRdLFxuICAgICAgbGluZXM6IFtdLFxuICAgICAgbGluZWRlbGltaXRlcnM6IFtdXG4gICAgfTsgLy8gVW5pZmllZCBEaWZmIEZvcm1hdCBxdWlyazogSWYgdGhlIGNodW5rIHNpemUgaXMgMCxcbiAgICAvLyB0aGUgZmlyc3QgbnVtYmVyIGlzIG9uZSBsb3dlciB0aGFuIG9uZSB3b3VsZCBleHBlY3QuXG4gICAgLy8gaHR0cHM6Ly93d3cuYXJ0aW1hLmNvbS93ZWJsb2dzL3ZpZXdwb3N0LmpzcD90aHJlYWQ9MTY0MjkzXG5cbiAgICBpZiAoaHVuay5vbGRMaW5lcyA9PT0gMCkge1xuICAgICAgaHVuay5vbGRTdGFydCArPSAxO1xuICAgIH1cblxuICAgIGlmIChodW5rLm5ld0xpbmVzID09PSAwKSB7XG4gICAgICBodW5rLm5ld1N0YXJ0ICs9IDE7XG4gICAgfVxuXG4gICAgdmFyIGFkZENvdW50ID0gMCxcbiAgICAgICAgcmVtb3ZlQ291bnQgPSAwO1xuXG4gICAgZm9yICg7IGkgPCBkaWZmc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBMaW5lcyBzdGFydGluZyB3aXRoICctLS0nIGNvdWxkIGJlIG1pc3Rha2VuIGZvciB0aGUgXCJyZW1vdmUgbGluZVwiIG9wZXJhdGlvblxuICAgICAgLy8gQnV0IHRoZXkgY291bGQgYmUgdGhlIGhlYWRlciBmb3IgdGhlIG5leHQgZmlsZS4gVGhlcmVmb3JlIHBydW5lIHN1Y2ggY2FzZXMgb3V0LlxuICAgICAgaWYgKGRpZmZzdHJbaV0uaW5kZXhPZignLS0tICcpID09PSAwICYmIGkgKyAyIDwgZGlmZnN0ci5sZW5ndGggJiYgZGlmZnN0cltpICsgMV0uaW5kZXhPZignKysrICcpID09PSAwICYmIGRpZmZzdHJbaSArIDJdLmluZGV4T2YoJ0BAJykgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHZhciBvcGVyYXRpb24gPSBkaWZmc3RyW2ldLmxlbmd0aCA9PSAwICYmIGkgIT0gZGlmZnN0ci5sZW5ndGggLSAxID8gJyAnIDogZGlmZnN0cltpXVswXTtcblxuICAgICAgaWYgKG9wZXJhdGlvbiA9PT0gJysnIHx8IG9wZXJhdGlvbiA9PT0gJy0nIHx8IG9wZXJhdGlvbiA9PT0gJyAnIHx8IG9wZXJhdGlvbiA9PT0gJ1xcXFwnKSB7XG4gICAgICAgIGh1bmsubGluZXMucHVzaChkaWZmc3RyW2ldKTtcbiAgICAgICAgaHVuay5saW5lZGVsaW1pdGVycy5wdXNoKGRlbGltaXRlcnNbaV0gfHwgJ1xcbicpO1xuXG4gICAgICAgIGlmIChvcGVyYXRpb24gPT09ICcrJykge1xuICAgICAgICAgIGFkZENvdW50Kys7XG4gICAgICAgIH0gZWxzZSBpZiAob3BlcmF0aW9uID09PSAnLScpIHtcbiAgICAgICAgICByZW1vdmVDb3VudCsrO1xuICAgICAgICB9IGVsc2UgaWYgKG9wZXJhdGlvbiA9PT0gJyAnKSB7XG4gICAgICAgICAgYWRkQ291bnQrKztcbiAgICAgICAgICByZW1vdmVDb3VudCsrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IC8vIEhhbmRsZSB0aGUgZW1wdHkgYmxvY2sgY291bnQgY2FzZVxuXG5cbiAgICBpZiAoIWFkZENvdW50ICYmIGh1bmsubmV3TGluZXMgPT09IDEpIHtcbiAgICAgIGh1bmsubmV3TGluZXMgPSAwO1xuICAgIH1cblxuICAgIGlmICghcmVtb3ZlQ291bnQgJiYgaHVuay5vbGRMaW5lcyA9PT0gMSkge1xuICAgICAgaHVuay5vbGRMaW5lcyA9IDA7XG4gICAgfSAvLyBQZXJmb3JtIG9wdGlvbmFsIHNhbml0eSBjaGVja2luZ1xuXG5cbiAgICBpZiAob3B0aW9ucy5zdHJpY3QpIHtcbiAgICAgIGlmIChhZGRDb3VudCAhPT0gaHVuay5uZXdMaW5lcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FkZGVkIGxpbmUgY291bnQgZGlkIG5vdCBtYXRjaCBmb3IgaHVuayBhdCBsaW5lICcgKyAoY2h1bmtIZWFkZXJJbmRleCArIDEpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbW92ZUNvdW50ICE9PSBodW5rLm9sZExpbmVzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmVtb3ZlZCBsaW5lIGNvdW50IGRpZCBub3QgbWF0Y2ggZm9yIGh1bmsgYXQgbGluZSAnICsgKGNodW5rSGVhZGVySW5kZXggKyAxKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGh1bms7XG4gIH1cblxuICB3aGlsZSAoaSA8IGRpZmZzdHIubGVuZ3RoKSB7XG4gICAgcGFyc2VJbmRleCgpO1xuICB9XG5cbiAgcmV0dXJuIGxpc3Q7XG59XG5cbi8vIEl0ZXJhdG9yIHRoYXQgdHJhdmVyc2VzIGluIHRoZSByYW5nZSBvZiBbbWluLCBtYXhdLCBzdGVwcGluZ1xuLy8gYnkgZGlzdGFuY2UgZnJvbSBhIGdpdmVuIHN0YXJ0IHBvc2l0aW9uLiBJLmUuIGZvciBbMCwgNF0sIHdpdGhcbi8vIHN0YXJ0IG9mIDIsIHRoaXMgd2lsbCBpdGVyYXRlIDIsIDMsIDEsIDQsIDAuXG5mdW5jdGlvbiBkaXN0YW5jZUl0ZXJhdG9yIChzdGFydCwgbWluTGluZSwgbWF4TGluZSkge1xuICB2YXIgd2FudEZvcndhcmQgPSB0cnVlLFxuICAgICAgYmFja3dhcmRFeGhhdXN0ZWQgPSBmYWxzZSxcbiAgICAgIGZvcndhcmRFeGhhdXN0ZWQgPSBmYWxzZSxcbiAgICAgIGxvY2FsT2Zmc2V0ID0gMTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGl0ZXJhdG9yKCkge1xuICAgIGlmICh3YW50Rm9yd2FyZCAmJiAhZm9yd2FyZEV4aGF1c3RlZCkge1xuICAgICAgaWYgKGJhY2t3YXJkRXhoYXVzdGVkKSB7XG4gICAgICAgIGxvY2FsT2Zmc2V0Kys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YW50Rm9yd2FyZCA9IGZhbHNlO1xuICAgICAgfSAvLyBDaGVjayBpZiB0cnlpbmcgdG8gZml0IGJleW9uZCB0ZXh0IGxlbmd0aCwgYW5kIGlmIG5vdCwgY2hlY2sgaXQgZml0c1xuICAgICAgLy8gYWZ0ZXIgb2Zmc2V0IGxvY2F0aW9uIChvciBkZXNpcmVkIGxvY2F0aW9uIG9uIGZpcnN0IGl0ZXJhdGlvbilcblxuXG4gICAgICBpZiAoc3RhcnQgKyBsb2NhbE9mZnNldCA8PSBtYXhMaW5lKSB7XG4gICAgICAgIHJldHVybiBsb2NhbE9mZnNldDtcbiAgICAgIH1cblxuICAgICAgZm9yd2FyZEV4aGF1c3RlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFiYWNrd2FyZEV4aGF1c3RlZCkge1xuICAgICAgaWYgKCFmb3J3YXJkRXhoYXVzdGVkKSB7XG4gICAgICAgIHdhbnRGb3J3YXJkID0gdHJ1ZTtcbiAgICAgIH0gLy8gQ2hlY2sgaWYgdHJ5aW5nIHRvIGZpdCBiZWZvcmUgdGV4dCBiZWdpbm5pbmcsIGFuZCBpZiBub3QsIGNoZWNrIGl0IGZpdHNcbiAgICAgIC8vIGJlZm9yZSBvZmZzZXQgbG9jYXRpb25cblxuXG4gICAgICBpZiAobWluTGluZSA8PSBzdGFydCAtIGxvY2FsT2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiAtbG9jYWxPZmZzZXQrKztcbiAgICAgIH1cblxuICAgICAgYmFja3dhcmRFeGhhdXN0ZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yKCk7XG4gICAgfSAvLyBXZSB0cmllZCB0byBmaXQgaHVuayBiZWZvcmUgdGV4dCBiZWdpbm5pbmcgYW5kIGJleW9uZCB0ZXh0IGxlbmd0aCwgdGhlblxuICAgIC8vIGh1bmsgY2FuJ3QgZml0IG9uIHRoZSB0ZXh0LiBSZXR1cm4gdW5kZWZpbmVkXG5cbiAgfTtcbn1cblxuZnVuY3Rpb24gYXBwbHlQYXRjaChzb3VyY2UsIHVuaURpZmYpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXG4gIGlmICh0eXBlb2YgdW5pRGlmZiA9PT0gJ3N0cmluZycpIHtcbiAgICB1bmlEaWZmID0gcGFyc2VQYXRjaCh1bmlEaWZmKTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHVuaURpZmYpKSB7XG4gICAgaWYgKHVuaURpZmYubGVuZ3RoID4gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdhcHBseVBhdGNoIG9ubHkgd29ya3Mgd2l0aCBhIHNpbmdsZSBpbnB1dC4nKTtcbiAgICB9XG5cbiAgICB1bmlEaWZmID0gdW5pRGlmZlswXTtcbiAgfSAvLyBBcHBseSB0aGUgZGlmZiB0byB0aGUgaW5wdXRcblxuXG4gIHZhciBsaW5lcyA9IHNvdXJjZS5zcGxpdCgvXFxyXFxufFtcXG5cXHZcXGZcXHJcXHg4NV0vKSxcbiAgICAgIGRlbGltaXRlcnMgPSBzb3VyY2UubWF0Y2goL1xcclxcbnxbXFxuXFx2XFxmXFxyXFx4ODVdL2cpIHx8IFtdLFxuICAgICAgaHVua3MgPSB1bmlEaWZmLmh1bmtzLFxuICAgICAgY29tcGFyZUxpbmUgPSBvcHRpb25zLmNvbXBhcmVMaW5lIHx8IGZ1bmN0aW9uIChsaW5lTnVtYmVyLCBsaW5lLCBvcGVyYXRpb24sIHBhdGNoQ29udGVudCkge1xuICAgIHJldHVybiBsaW5lID09PSBwYXRjaENvbnRlbnQ7XG4gIH0sXG4gICAgICBlcnJvckNvdW50ID0gMCxcbiAgICAgIGZ1enpGYWN0b3IgPSBvcHRpb25zLmZ1enpGYWN0b3IgfHwgMCxcbiAgICAgIG1pbkxpbmUgPSAwLFxuICAgICAgb2Zmc2V0ID0gMCxcbiAgICAgIHJlbW92ZUVPRk5MLFxuICAgICAgYWRkRU9GTkw7XG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGh1bmsgZXhhY3RseSBmaXRzIG9uIHRoZSBwcm92aWRlZCBsb2NhdGlvblxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGh1bmtGaXRzKGh1bmssIHRvUG9zKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBodW5rLmxpbmVzLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgbGluZSA9IGh1bmsubGluZXNbal0sXG4gICAgICAgICAgb3BlcmF0aW9uID0gbGluZS5sZW5ndGggPiAwID8gbGluZVswXSA6ICcgJyxcbiAgICAgICAgICBjb250ZW50ID0gbGluZS5sZW5ndGggPiAwID8gbGluZS5zdWJzdHIoMSkgOiBsaW5lO1xuXG4gICAgICBpZiAob3BlcmF0aW9uID09PSAnICcgfHwgb3BlcmF0aW9uID09PSAnLScpIHtcbiAgICAgICAgLy8gQ29udGV4dCBzYW5pdHkgY2hlY2tcbiAgICAgICAgaWYgKCFjb21wYXJlTGluZSh0b1BvcyArIDEsIGxpbmVzW3RvUG9zXSwgb3BlcmF0aW9uLCBjb250ZW50KSkge1xuICAgICAgICAgIGVycm9yQ291bnQrKztcblxuICAgICAgICAgIGlmIChlcnJvckNvdW50ID4gZnV6ekZhY3Rvcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRvUG9zKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gU2VhcmNoIGJlc3QgZml0IG9mZnNldHMgZm9yIGVhY2ggaHVuayBiYXNlZCBvbiB0aGUgcHJldmlvdXMgb25lc1xuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBodW5rcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBodW5rID0gaHVua3NbaV0sXG4gICAgICAgIG1heExpbmUgPSBsaW5lcy5sZW5ndGggLSBodW5rLm9sZExpbmVzLFxuICAgICAgICBsb2NhbE9mZnNldCA9IDAsXG4gICAgICAgIHRvUG9zID0gb2Zmc2V0ICsgaHVuay5vbGRTdGFydCAtIDE7XG4gICAgdmFyIGl0ZXJhdG9yID0gZGlzdGFuY2VJdGVyYXRvcih0b1BvcywgbWluTGluZSwgbWF4TGluZSk7XG5cbiAgICBmb3IgKDsgbG9jYWxPZmZzZXQgIT09IHVuZGVmaW5lZDsgbG9jYWxPZmZzZXQgPSBpdGVyYXRvcigpKSB7XG4gICAgICBpZiAoaHVua0ZpdHMoaHVuaywgdG9Qb3MgKyBsb2NhbE9mZnNldCkpIHtcbiAgICAgICAgaHVuay5vZmZzZXQgPSBvZmZzZXQgKz0gbG9jYWxPZmZzZXQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChsb2NhbE9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBTZXQgbG93ZXIgdGV4dCBsaW1pdCB0byBlbmQgb2YgdGhlIGN1cnJlbnQgaHVuaywgc28gbmV4dCBvbmVzIGRvbid0IHRyeVxuICAgIC8vIHRvIGZpdCBvdmVyIGFscmVhZHkgcGF0Y2hlZCB0ZXh0XG5cblxuICAgIG1pbkxpbmUgPSBodW5rLm9mZnNldCArIGh1bmsub2xkU3RhcnQgKyBodW5rLm9sZExpbmVzO1xuICB9IC8vIEFwcGx5IHBhdGNoIGh1bmtzXG5cblxuICB2YXIgZGlmZk9mZnNldCA9IDA7XG5cbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGh1bmtzLmxlbmd0aDsgX2krKykge1xuICAgIHZhciBfaHVuayA9IGh1bmtzW19pXSxcbiAgICAgICAgX3RvUG9zID0gX2h1bmsub2xkU3RhcnQgKyBfaHVuay5vZmZzZXQgKyBkaWZmT2Zmc2V0IC0gMTtcblxuICAgIGRpZmZPZmZzZXQgKz0gX2h1bmsubmV3TGluZXMgLSBfaHVuay5vbGRMaW5lcztcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgX2h1bmsubGluZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBsaW5lID0gX2h1bmsubGluZXNbal0sXG4gICAgICAgICAgb3BlcmF0aW9uID0gbGluZS5sZW5ndGggPiAwID8gbGluZVswXSA6ICcgJyxcbiAgICAgICAgICBjb250ZW50ID0gbGluZS5sZW5ndGggPiAwID8gbGluZS5zdWJzdHIoMSkgOiBsaW5lLFxuICAgICAgICAgIGRlbGltaXRlciA9IF9odW5rLmxpbmVkZWxpbWl0ZXJzW2pdO1xuXG4gICAgICBpZiAob3BlcmF0aW9uID09PSAnICcpIHtcbiAgICAgICAgX3RvUG9zKys7XG4gICAgICB9IGVsc2UgaWYgKG9wZXJhdGlvbiA9PT0gJy0nKSB7XG4gICAgICAgIGxpbmVzLnNwbGljZShfdG9Qb3MsIDEpO1xuICAgICAgICBkZWxpbWl0ZXJzLnNwbGljZShfdG9Qb3MsIDEpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgfSBlbHNlIGlmIChvcGVyYXRpb24gPT09ICcrJykge1xuICAgICAgICBsaW5lcy5zcGxpY2UoX3RvUG9zLCAwLCBjb250ZW50KTtcbiAgICAgICAgZGVsaW1pdGVycy5zcGxpY2UoX3RvUG9zLCAwLCBkZWxpbWl0ZXIpO1xuICAgICAgICBfdG9Qb3MrKztcbiAgICAgIH0gZWxzZSBpZiAob3BlcmF0aW9uID09PSAnXFxcXCcpIHtcbiAgICAgICAgdmFyIHByZXZpb3VzT3BlcmF0aW9uID0gX2h1bmsubGluZXNbaiAtIDFdID8gX2h1bmsubGluZXNbaiAtIDFdWzBdIDogbnVsbDtcblxuICAgICAgICBpZiAocHJldmlvdXNPcGVyYXRpb24gPT09ICcrJykge1xuICAgICAgICAgIHJlbW92ZUVPRk5MID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChwcmV2aW91c09wZXJhdGlvbiA9PT0gJy0nKSB7XG4gICAgICAgICAgYWRkRU9GTkwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IC8vIEhhbmRsZSBFT0ZOTCBpbnNlcnRpb24vcmVtb3ZhbFxuXG5cbiAgaWYgKHJlbW92ZUVPRk5MKSB7XG4gICAgd2hpbGUgKCFsaW5lc1tsaW5lcy5sZW5ndGggLSAxXSkge1xuICAgICAgbGluZXMucG9wKCk7XG4gICAgICBkZWxpbWl0ZXJzLnBvcCgpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChhZGRFT0ZOTCkge1xuICAgIGxpbmVzLnB1c2goJycpO1xuICAgIGRlbGltaXRlcnMucHVzaCgnXFxuJyk7XG4gIH1cblxuICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbGluZXMubGVuZ3RoIC0gMTsgX2srKykge1xuICAgIGxpbmVzW19rXSA9IGxpbmVzW19rXSArIGRlbGltaXRlcnNbX2tdO1xuICB9XG5cbiAgcmV0dXJuIGxpbmVzLmpvaW4oJycpO1xufSAvLyBXcmFwcGVyIHRoYXQgc3VwcG9ydHMgbXVsdGlwbGUgZmlsZSBwYXRjaGVzIHZpYSBjYWxsYmFja3MuXG5cbmZ1bmN0aW9uIGFwcGx5UGF0Y2hlcyh1bmlEaWZmLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgdW5pRGlmZiA9PT0gJ3N0cmluZycpIHtcbiAgICB1bmlEaWZmID0gcGFyc2VQYXRjaCh1bmlEaWZmKTtcbiAgfVxuXG4gIHZhciBjdXJyZW50SW5kZXggPSAwO1xuXG4gIGZ1bmN0aW9uIHByb2Nlc3NJbmRleCgpIHtcbiAgICB2YXIgaW5kZXggPSB1bmlEaWZmW2N1cnJlbnRJbmRleCsrXTtcblxuICAgIGlmICghaW5kZXgpIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgb3B0aW9ucy5sb2FkRmlsZShpbmRleCwgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5jb21wbGV0ZShlcnIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdXBkYXRlZENvbnRlbnQgPSBhcHBseVBhdGNoKGRhdGEsIGluZGV4LCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMucGF0Y2hlZChpbmRleCwgdXBkYXRlZENvbnRlbnQsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJldHVybiBvcHRpb25zLmNvbXBsZXRlKGVycik7XG4gICAgICAgIH1cblxuICAgICAgICBwcm9jZXNzSW5kZXgoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHJvY2Vzc0luZGV4KCk7XG59XG5cbmZ1bmN0aW9uIHN0cnVjdHVyZWRQYXRjaChvbGRGaWxlTmFtZSwgbmV3RmlsZU5hbWUsIG9sZFN0ciwgbmV3U3RyLCBvbGRIZWFkZXIsIG5ld0hlYWRlciwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMuY29udGV4dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBvcHRpb25zLmNvbnRleHQgPSA0O1xuICB9XG5cbiAgdmFyIGRpZmYgPSBkaWZmTGluZXMob2xkU3RyLCBuZXdTdHIsIG9wdGlvbnMpO1xuXG4gIGlmICghZGlmZikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGRpZmYucHVzaCh7XG4gICAgdmFsdWU6ICcnLFxuICAgIGxpbmVzOiBbXVxuICB9KTsgLy8gQXBwZW5kIGFuIGVtcHR5IHZhbHVlIHRvIG1ha2UgY2xlYW51cCBlYXNpZXJcblxuICBmdW5jdGlvbiBjb250ZXh0TGluZXMobGluZXMpIHtcbiAgICByZXR1cm4gbGluZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgcmV0dXJuICcgJyArIGVudHJ5O1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGh1bmtzID0gW107XG4gIHZhciBvbGRSYW5nZVN0YXJ0ID0gMCxcbiAgICAgIG5ld1JhbmdlU3RhcnQgPSAwLFxuICAgICAgY3VyUmFuZ2UgPSBbXSxcbiAgICAgIG9sZExpbmUgPSAxLFxuICAgICAgbmV3TGluZSA9IDE7XG5cbiAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoaSkge1xuICAgIHZhciBjdXJyZW50ID0gZGlmZltpXSxcbiAgICAgICAgbGluZXMgPSBjdXJyZW50LmxpbmVzIHx8IGN1cnJlbnQudmFsdWUucmVwbGFjZSgvXFxuJC8sICcnKS5zcGxpdCgnXFxuJyk7XG4gICAgY3VycmVudC5saW5lcyA9IGxpbmVzO1xuXG4gICAgaWYgKGN1cnJlbnQuYWRkZWQgfHwgY3VycmVudC5yZW1vdmVkKSB7XG4gICAgICB2YXIgX2N1clJhbmdlO1xuXG4gICAgICAvLyBJZiB3ZSBoYXZlIHByZXZpb3VzIGNvbnRleHQsIHN0YXJ0IHdpdGggdGhhdFxuICAgICAgaWYgKCFvbGRSYW5nZVN0YXJ0KSB7XG4gICAgICAgIHZhciBwcmV2ID0gZGlmZltpIC0gMV07XG4gICAgICAgIG9sZFJhbmdlU3RhcnQgPSBvbGRMaW5lO1xuICAgICAgICBuZXdSYW5nZVN0YXJ0ID0gbmV3TGluZTtcblxuICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgIGN1clJhbmdlID0gb3B0aW9ucy5jb250ZXh0ID4gMCA/IGNvbnRleHRMaW5lcyhwcmV2LmxpbmVzLnNsaWNlKC1vcHRpb25zLmNvbnRleHQpKSA6IFtdO1xuICAgICAgICAgIG9sZFJhbmdlU3RhcnQgLT0gY3VyUmFuZ2UubGVuZ3RoO1xuICAgICAgICAgIG5ld1JhbmdlU3RhcnQgLT0gY3VyUmFuZ2UubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9IC8vIE91dHB1dCBvdXIgY2hhbmdlc1xuXG5cbiAgICAgIChfY3VyUmFuZ2UgPSBjdXJSYW5nZSkucHVzaC5hcHBseShfY3VyUmFuZ2UsIF90b0NvbnN1bWFibGVBcnJheShsaW5lcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgIHJldHVybiAoY3VycmVudC5hZGRlZCA/ICcrJyA6ICctJykgKyBlbnRyeTtcbiAgICAgIH0pKSk7IC8vIFRyYWNrIHRoZSB1cGRhdGVkIGZpbGUgcG9zaXRpb25cblxuXG4gICAgICBpZiAoY3VycmVudC5hZGRlZCkge1xuICAgICAgICBuZXdMaW5lICs9IGxpbmVzLmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9sZExpbmUgKz0gbGluZXMubGVuZ3RoO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZGVudGljYWwgY29udGV4dCBsaW5lcy4gVHJhY2sgbGluZSBjaGFuZ2VzXG4gICAgICBpZiAob2xkUmFuZ2VTdGFydCkge1xuICAgICAgICAvLyBDbG9zZSBvdXQgYW55IGNoYW5nZXMgdGhhdCBoYXZlIGJlZW4gb3V0cHV0IChvciBqb2luIG92ZXJsYXBwaW5nKVxuICAgICAgICBpZiAobGluZXMubGVuZ3RoIDw9IG9wdGlvbnMuY29udGV4dCAqIDIgJiYgaSA8IGRpZmYubGVuZ3RoIC0gMikge1xuICAgICAgICAgIHZhciBfY3VyUmFuZ2UyO1xuXG4gICAgICAgICAgLy8gT3ZlcmxhcHBpbmdcbiAgICAgICAgICAoX2N1clJhbmdlMiA9IGN1clJhbmdlKS5wdXNoLmFwcGx5KF9jdXJSYW5nZTIsIF90b0NvbnN1bWFibGVBcnJheShjb250ZXh0TGluZXMobGluZXMpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIF9jdXJSYW5nZTM7XG5cbiAgICAgICAgICAvLyBlbmQgdGhlIHJhbmdlIGFuZCBvdXRwdXRcbiAgICAgICAgICB2YXIgY29udGV4dFNpemUgPSBNYXRoLm1pbihsaW5lcy5sZW5ndGgsIG9wdGlvbnMuY29udGV4dCk7XG5cbiAgICAgICAgICAoX2N1clJhbmdlMyA9IGN1clJhbmdlKS5wdXNoLmFwcGx5KF9jdXJSYW5nZTMsIF90b0NvbnN1bWFibGVBcnJheShjb250ZXh0TGluZXMobGluZXMuc2xpY2UoMCwgY29udGV4dFNpemUpKSkpO1xuXG4gICAgICAgICAgdmFyIGh1bmsgPSB7XG4gICAgICAgICAgICBvbGRTdGFydDogb2xkUmFuZ2VTdGFydCxcbiAgICAgICAgICAgIG9sZExpbmVzOiBvbGRMaW5lIC0gb2xkUmFuZ2VTdGFydCArIGNvbnRleHRTaXplLFxuICAgICAgICAgICAgbmV3U3RhcnQ6IG5ld1JhbmdlU3RhcnQsXG4gICAgICAgICAgICBuZXdMaW5lczogbmV3TGluZSAtIG5ld1JhbmdlU3RhcnQgKyBjb250ZXh0U2l6ZSxcbiAgICAgICAgICAgIGxpbmVzOiBjdXJSYW5nZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAoaSA+PSBkaWZmLmxlbmd0aCAtIDIgJiYgbGluZXMubGVuZ3RoIDw9IG9wdGlvbnMuY29udGV4dCkge1xuICAgICAgICAgICAgLy8gRU9GIGlzIGluc2lkZSB0aGlzIGh1bmtcbiAgICAgICAgICAgIHZhciBvbGRFT0ZOZXdsaW5lID0gL1xcbiQvLnRlc3Qob2xkU3RyKTtcbiAgICAgICAgICAgIHZhciBuZXdFT0ZOZXdsaW5lID0gL1xcbiQvLnRlc3QobmV3U3RyKTtcbiAgICAgICAgICAgIHZhciBub05sQmVmb3JlQWRkcyA9IGxpbmVzLmxlbmd0aCA9PSAwICYmIGN1clJhbmdlLmxlbmd0aCA+IGh1bmsub2xkTGluZXM7XG5cbiAgICAgICAgICAgIGlmICghb2xkRU9GTmV3bGluZSAmJiBub05sQmVmb3JlQWRkcyAmJiBvbGRTdHIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2U6IG9sZCBoYXMgbm8gZW9sIGFuZCBubyB0cmFpbGluZyBjb250ZXh0OyBuby1ubCBjYW4gZW5kIHVwIGJlZm9yZSBhZGRzXG4gICAgICAgICAgICAgIC8vIGhvd2V2ZXIsIGlmIHRoZSBvbGQgZmlsZSBpcyBlbXB0eSwgZG8gbm90IG91dHB1dCB0aGUgbm8tbmwgbGluZVxuICAgICAgICAgICAgICBjdXJSYW5nZS5zcGxpY2UoaHVuay5vbGRMaW5lcywgMCwgJ1xcXFwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIW9sZEVPRk5ld2xpbmUgJiYgIW5vTmxCZWZvcmVBZGRzIHx8ICFuZXdFT0ZOZXdsaW5lKSB7XG4gICAgICAgICAgICAgIGN1clJhbmdlLnB1c2goJ1xcXFwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGh1bmtzLnB1c2goaHVuayk7XG4gICAgICAgICAgb2xkUmFuZ2VTdGFydCA9IDA7XG4gICAgICAgICAgbmV3UmFuZ2VTdGFydCA9IDA7XG4gICAgICAgICAgY3VyUmFuZ2UgPSBbXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBvbGRMaW5lICs9IGxpbmVzLmxlbmd0aDtcbiAgICAgIG5ld0xpbmUgKz0gbGluZXMubGVuZ3RoO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRpZmYubGVuZ3RoOyBpKyspIHtcbiAgICBfbG9vcChpKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb2xkRmlsZU5hbWU6IG9sZEZpbGVOYW1lLFxuICAgIG5ld0ZpbGVOYW1lOiBuZXdGaWxlTmFtZSxcbiAgICBvbGRIZWFkZXI6IG9sZEhlYWRlcixcbiAgICBuZXdIZWFkZXI6IG5ld0hlYWRlcixcbiAgICBodW5rczogaHVua3NcbiAgfTtcbn1cbmZ1bmN0aW9uIGZvcm1hdFBhdGNoKGRpZmYpIHtcbiAgdmFyIHJldCA9IFtdO1xuXG4gIGlmIChkaWZmLm9sZEZpbGVOYW1lID09IGRpZmYubmV3RmlsZU5hbWUpIHtcbiAgICByZXQucHVzaCgnSW5kZXg6ICcgKyBkaWZmLm9sZEZpbGVOYW1lKTtcbiAgfVxuXG4gIHJldC5wdXNoKCc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Jyk7XG4gIHJldC5wdXNoKCctLS0gJyArIGRpZmYub2xkRmlsZU5hbWUgKyAodHlwZW9mIGRpZmYub2xkSGVhZGVyID09PSAndW5kZWZpbmVkJyA/ICcnIDogJ1xcdCcgKyBkaWZmLm9sZEhlYWRlcikpO1xuICByZXQucHVzaCgnKysrICcgKyBkaWZmLm5ld0ZpbGVOYW1lICsgKHR5cGVvZiBkaWZmLm5ld0hlYWRlciA9PT0gJ3VuZGVmaW5lZCcgPyAnJyA6ICdcXHQnICsgZGlmZi5uZXdIZWFkZXIpKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRpZmYuaHVua3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaHVuayA9IGRpZmYuaHVua3NbaV07IC8vIFVuaWZpZWQgRGlmZiBGb3JtYXQgcXVpcms6IElmIHRoZSBjaHVuayBzaXplIGlzIDAsXG4gICAgLy8gdGhlIGZpcnN0IG51bWJlciBpcyBvbmUgbG93ZXIgdGhhbiBvbmUgd291bGQgZXhwZWN0LlxuICAgIC8vIGh0dHBzOi8vd3d3LmFydGltYS5jb20vd2VibG9ncy92aWV3cG9zdC5qc3A/dGhyZWFkPTE2NDI5M1xuXG4gICAgaWYgKGh1bmsub2xkTGluZXMgPT09IDApIHtcbiAgICAgIGh1bmsub2xkU3RhcnQgLT0gMTtcbiAgICB9XG5cbiAgICBpZiAoaHVuay5uZXdMaW5lcyA9PT0gMCkge1xuICAgICAgaHVuay5uZXdTdGFydCAtPSAxO1xuICAgIH1cblxuICAgIHJldC5wdXNoKCdAQCAtJyArIGh1bmsub2xkU3RhcnQgKyAnLCcgKyBodW5rLm9sZExpbmVzICsgJyArJyArIGh1bmsubmV3U3RhcnQgKyAnLCcgKyBodW5rLm5ld0xpbmVzICsgJyBAQCcpO1xuICAgIHJldC5wdXNoLmFwcGx5KHJldCwgaHVuay5saW5lcyk7XG4gIH1cblxuICByZXR1cm4gcmV0LmpvaW4oJ1xcbicpICsgJ1xcbic7XG59XG5mdW5jdGlvbiBjcmVhdGVUd29GaWxlc1BhdGNoKG9sZEZpbGVOYW1lLCBuZXdGaWxlTmFtZSwgb2xkU3RyLCBuZXdTdHIsIG9sZEhlYWRlciwgbmV3SGVhZGVyLCBvcHRpb25zKSB7XG4gIHJldHVybiBmb3JtYXRQYXRjaChzdHJ1Y3R1cmVkUGF0Y2gob2xkRmlsZU5hbWUsIG5ld0ZpbGVOYW1lLCBvbGRTdHIsIG5ld1N0ciwgb2xkSGVhZGVyLCBuZXdIZWFkZXIsIG9wdGlvbnMpKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGNoKGZpbGVOYW1lLCBvbGRTdHIsIG5ld1N0ciwgb2xkSGVhZGVyLCBuZXdIZWFkZXIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGNyZWF0ZVR3b0ZpbGVzUGF0Y2goZmlsZU5hbWUsIGZpbGVOYW1lLCBvbGRTdHIsIG5ld1N0ciwgb2xkSGVhZGVyLCBuZXdIZWFkZXIsIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBhcnJheUVxdWFsKGEsIGIpIHtcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBhcnJheVN0YXJ0c1dpdGgoYSwgYik7XG59XG5mdW5jdGlvbiBhcnJheVN0YXJ0c1dpdGgoYXJyYXksIHN0YXJ0KSB7XG4gIGlmIChzdGFydC5sZW5ndGggPiBhcnJheS5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0YXJ0W2ldICE9PSBhcnJheVtpXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjYWxjTGluZUNvdW50KGh1bmspIHtcbiAgdmFyIF9jYWxjT2xkTmV3TGluZUNvdW50ID0gY2FsY09sZE5ld0xpbmVDb3VudChodW5rLmxpbmVzKSxcbiAgICAgIG9sZExpbmVzID0gX2NhbGNPbGROZXdMaW5lQ291bnQub2xkTGluZXMsXG4gICAgICBuZXdMaW5lcyA9IF9jYWxjT2xkTmV3TGluZUNvdW50Lm5ld0xpbmVzO1xuXG4gIGlmIChvbGRMaW5lcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaHVuay5vbGRMaW5lcyA9IG9sZExpbmVzO1xuICB9IGVsc2Uge1xuICAgIGRlbGV0ZSBodW5rLm9sZExpbmVzO1xuICB9XG5cbiAgaWYgKG5ld0xpbmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICBodW5rLm5ld0xpbmVzID0gbmV3TGluZXM7XG4gIH0gZWxzZSB7XG4gICAgZGVsZXRlIGh1bmsubmV3TGluZXM7XG4gIH1cbn1cbmZ1bmN0aW9uIG1lcmdlKG1pbmUsIHRoZWlycywgYmFzZSkge1xuICBtaW5lID0gbG9hZFBhdGNoKG1pbmUsIGJhc2UpO1xuICB0aGVpcnMgPSBsb2FkUGF0Y2godGhlaXJzLCBiYXNlKTtcbiAgdmFyIHJldCA9IHt9OyAvLyBGb3IgaW5kZXggd2UganVzdCBsZXQgaXQgcGFzcyB0aHJvdWdoIGFzIGl0IGRvZXNuJ3QgaGF2ZSBhbnkgbmVjZXNzYXJ5IG1lYW5pbmcuXG4gIC8vIExlYXZpbmcgc2FuaXR5IGNoZWNrcyBvbiB0aGlzIHRvIHRoZSBBUEkgY29uc3VtZXIgdGhhdCBtYXkga25vdyBtb3JlIGFib3V0IHRoZVxuICAvLyBtZWFuaW5nIGluIHRoZWlyIG93biBjb250ZXh0LlxuXG4gIGlmIChtaW5lLmluZGV4IHx8IHRoZWlycy5pbmRleCkge1xuICAgIHJldC5pbmRleCA9IG1pbmUuaW5kZXggfHwgdGhlaXJzLmluZGV4O1xuICB9XG5cbiAgaWYgKG1pbmUubmV3RmlsZU5hbWUgfHwgdGhlaXJzLm5ld0ZpbGVOYW1lKSB7XG4gICAgaWYgKCFmaWxlTmFtZUNoYW5nZWQobWluZSkpIHtcbiAgICAgIC8vIE5vIGhlYWRlciBvciBubyBjaGFuZ2UgaW4gb3VycywgdXNlIHRoZWlycyAoYW5kIG91cnMgaWYgdGhlaXJzIGRvZXMgbm90IGV4aXN0KVxuICAgICAgcmV0Lm9sZEZpbGVOYW1lID0gdGhlaXJzLm9sZEZpbGVOYW1lIHx8IG1pbmUub2xkRmlsZU5hbWU7XG4gICAgICByZXQubmV3RmlsZU5hbWUgPSB0aGVpcnMubmV3RmlsZU5hbWUgfHwgbWluZS5uZXdGaWxlTmFtZTtcbiAgICAgIHJldC5vbGRIZWFkZXIgPSB0aGVpcnMub2xkSGVhZGVyIHx8IG1pbmUub2xkSGVhZGVyO1xuICAgICAgcmV0Lm5ld0hlYWRlciA9IHRoZWlycy5uZXdIZWFkZXIgfHwgbWluZS5uZXdIZWFkZXI7XG4gICAgfSBlbHNlIGlmICghZmlsZU5hbWVDaGFuZ2VkKHRoZWlycykpIHtcbiAgICAgIC8vIE5vIGhlYWRlciBvciBubyBjaGFuZ2UgaW4gdGhlaXJzLCB1c2Ugb3Vyc1xuICAgICAgcmV0Lm9sZEZpbGVOYW1lID0gbWluZS5vbGRGaWxlTmFtZTtcbiAgICAgIHJldC5uZXdGaWxlTmFtZSA9IG1pbmUubmV3RmlsZU5hbWU7XG4gICAgICByZXQub2xkSGVhZGVyID0gbWluZS5vbGRIZWFkZXI7XG4gICAgICByZXQubmV3SGVhZGVyID0gbWluZS5uZXdIZWFkZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEJvdGggY2hhbmdlZC4uLiBmaWd1cmUgaXQgb3V0XG4gICAgICByZXQub2xkRmlsZU5hbWUgPSBzZWxlY3RGaWVsZChyZXQsIG1pbmUub2xkRmlsZU5hbWUsIHRoZWlycy5vbGRGaWxlTmFtZSk7XG4gICAgICByZXQubmV3RmlsZU5hbWUgPSBzZWxlY3RGaWVsZChyZXQsIG1pbmUubmV3RmlsZU5hbWUsIHRoZWlycy5uZXdGaWxlTmFtZSk7XG4gICAgICByZXQub2xkSGVhZGVyID0gc2VsZWN0RmllbGQocmV0LCBtaW5lLm9sZEhlYWRlciwgdGhlaXJzLm9sZEhlYWRlcik7XG4gICAgICByZXQubmV3SGVhZGVyID0gc2VsZWN0RmllbGQocmV0LCBtaW5lLm5ld0hlYWRlciwgdGhlaXJzLm5ld0hlYWRlcik7XG4gICAgfVxuICB9XG5cbiAgcmV0Lmh1bmtzID0gW107XG4gIHZhciBtaW5lSW5kZXggPSAwLFxuICAgICAgdGhlaXJzSW5kZXggPSAwLFxuICAgICAgbWluZU9mZnNldCA9IDAsXG4gICAgICB0aGVpcnNPZmZzZXQgPSAwO1xuXG4gIHdoaWxlIChtaW5lSW5kZXggPCBtaW5lLmh1bmtzLmxlbmd0aCB8fCB0aGVpcnNJbmRleCA8IHRoZWlycy5odW5rcy5sZW5ndGgpIHtcbiAgICB2YXIgbWluZUN1cnJlbnQgPSBtaW5lLmh1bmtzW21pbmVJbmRleF0gfHwge1xuICAgICAgb2xkU3RhcnQ6IEluZmluaXR5XG4gICAgfSxcbiAgICAgICAgdGhlaXJzQ3VycmVudCA9IHRoZWlycy5odW5rc1t0aGVpcnNJbmRleF0gfHwge1xuICAgICAgb2xkU3RhcnQ6IEluZmluaXR5XG4gICAgfTtcblxuICAgIGlmIChodW5rQmVmb3JlKG1pbmVDdXJyZW50LCB0aGVpcnNDdXJyZW50KSkge1xuICAgICAgLy8gVGhpcyBwYXRjaCBkb2VzIG5vdCBvdmVybGFwIHdpdGggYW55IG9mIHRoZSBvdGhlcnMsIHlheS5cbiAgICAgIHJldC5odW5rcy5wdXNoKGNsb25lSHVuayhtaW5lQ3VycmVudCwgbWluZU9mZnNldCkpO1xuICAgICAgbWluZUluZGV4Kys7XG4gICAgICB0aGVpcnNPZmZzZXQgKz0gbWluZUN1cnJlbnQubmV3TGluZXMgLSBtaW5lQ3VycmVudC5vbGRMaW5lcztcbiAgICB9IGVsc2UgaWYgKGh1bmtCZWZvcmUodGhlaXJzQ3VycmVudCwgbWluZUN1cnJlbnQpKSB7XG4gICAgICAvLyBUaGlzIHBhdGNoIGRvZXMgbm90IG92ZXJsYXAgd2l0aCBhbnkgb2YgdGhlIG90aGVycywgeWF5LlxuICAgICAgcmV0Lmh1bmtzLnB1c2goY2xvbmVIdW5rKHRoZWlyc0N1cnJlbnQsIHRoZWlyc09mZnNldCkpO1xuICAgICAgdGhlaXJzSW5kZXgrKztcbiAgICAgIG1pbmVPZmZzZXQgKz0gdGhlaXJzQ3VycmVudC5uZXdMaW5lcyAtIHRoZWlyc0N1cnJlbnQub2xkTGluZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE92ZXJsYXAsIG1lcmdlIGFzIGJlc3Qgd2UgY2FuXG4gICAgICB2YXIgbWVyZ2VkSHVuayA9IHtcbiAgICAgICAgb2xkU3RhcnQ6IE1hdGgubWluKG1pbmVDdXJyZW50Lm9sZFN0YXJ0LCB0aGVpcnNDdXJyZW50Lm9sZFN0YXJ0KSxcbiAgICAgICAgb2xkTGluZXM6IDAsXG4gICAgICAgIG5ld1N0YXJ0OiBNYXRoLm1pbihtaW5lQ3VycmVudC5uZXdTdGFydCArIG1pbmVPZmZzZXQsIHRoZWlyc0N1cnJlbnQub2xkU3RhcnQgKyB0aGVpcnNPZmZzZXQpLFxuICAgICAgICBuZXdMaW5lczogMCxcbiAgICAgICAgbGluZXM6IFtdXG4gICAgICB9O1xuICAgICAgbWVyZ2VMaW5lcyhtZXJnZWRIdW5rLCBtaW5lQ3VycmVudC5vbGRTdGFydCwgbWluZUN1cnJlbnQubGluZXMsIHRoZWlyc0N1cnJlbnQub2xkU3RhcnQsIHRoZWlyc0N1cnJlbnQubGluZXMpO1xuICAgICAgdGhlaXJzSW5kZXgrKztcbiAgICAgIG1pbmVJbmRleCsrO1xuICAgICAgcmV0Lmh1bmtzLnB1c2gobWVyZ2VkSHVuayk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gbG9hZFBhdGNoKHBhcmFtLCBiYXNlKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKC9eQEAvbS50ZXN0KHBhcmFtKSB8fCAvXkluZGV4Oi9tLnRlc3QocGFyYW0pKSB7XG4gICAgICByZXR1cm4gcGFyc2VQYXRjaChwYXJhbSlbMF07XG4gICAgfVxuXG4gICAgaWYgKCFiYXNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgcHJvdmlkZSBhIGJhc2UgcmVmZXJlbmNlIG9yIHBhc3MgaW4gYSBwYXRjaCcpO1xuICAgIH1cblxuICAgIHJldHVybiBzdHJ1Y3R1cmVkUGF0Y2godW5kZWZpbmVkLCB1bmRlZmluZWQsIGJhc2UsIHBhcmFtKTtcbiAgfVxuXG4gIHJldHVybiBwYXJhbTtcbn1cblxuZnVuY3Rpb24gZmlsZU5hbWVDaGFuZ2VkKHBhdGNoKSB7XG4gIHJldHVybiBwYXRjaC5uZXdGaWxlTmFtZSAmJiBwYXRjaC5uZXdGaWxlTmFtZSAhPT0gcGF0Y2gub2xkRmlsZU5hbWU7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdEZpZWxkKGluZGV4LCBtaW5lLCB0aGVpcnMpIHtcbiAgaWYgKG1pbmUgPT09IHRoZWlycykge1xuICAgIHJldHVybiBtaW5lO1xuICB9IGVsc2Uge1xuICAgIGluZGV4LmNvbmZsaWN0ID0gdHJ1ZTtcbiAgICByZXR1cm4ge1xuICAgICAgbWluZTogbWluZSxcbiAgICAgIHRoZWlyczogdGhlaXJzXG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBodW5rQmVmb3JlKHRlc3QsIGNoZWNrKSB7XG4gIHJldHVybiB0ZXN0Lm9sZFN0YXJ0IDwgY2hlY2sub2xkU3RhcnQgJiYgdGVzdC5vbGRTdGFydCArIHRlc3Qub2xkTGluZXMgPCBjaGVjay5vbGRTdGFydDtcbn1cblxuZnVuY3Rpb24gY2xvbmVIdW5rKGh1bmssIG9mZnNldCkge1xuICByZXR1cm4ge1xuICAgIG9sZFN0YXJ0OiBodW5rLm9sZFN0YXJ0LFxuICAgIG9sZExpbmVzOiBodW5rLm9sZExpbmVzLFxuICAgIG5ld1N0YXJ0OiBodW5rLm5ld1N0YXJ0ICsgb2Zmc2V0LFxuICAgIG5ld0xpbmVzOiBodW5rLm5ld0xpbmVzLFxuICAgIGxpbmVzOiBodW5rLmxpbmVzXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1lcmdlTGluZXMoaHVuaywgbWluZU9mZnNldCwgbWluZUxpbmVzLCB0aGVpck9mZnNldCwgdGhlaXJMaW5lcykge1xuICAvLyBUaGlzIHdpbGwgZ2VuZXJhbGx5IHJlc3VsdCBpbiBhIGNvbmZsaWN0ZWQgaHVuaywgYnV0IHRoZXJlIGFyZSBjYXNlcyB3aGVyZSB0aGUgY29udGV4dFxuICAvLyBpcyB0aGUgb25seSBvdmVybGFwIHdoZXJlIHdlIGNhbiBzdWNjZXNzZnVsbHkgbWVyZ2UgdGhlIGNvbnRlbnQgaGVyZS5cbiAgdmFyIG1pbmUgPSB7XG4gICAgb2Zmc2V0OiBtaW5lT2Zmc2V0LFxuICAgIGxpbmVzOiBtaW5lTGluZXMsXG4gICAgaW5kZXg6IDBcbiAgfSxcbiAgICAgIHRoZWlyID0ge1xuICAgIG9mZnNldDogdGhlaXJPZmZzZXQsXG4gICAgbGluZXM6IHRoZWlyTGluZXMsXG4gICAgaW5kZXg6IDBcbiAgfTsgLy8gSGFuZGxlIGFueSBsZWFkaW5nIGNvbnRlbnRcblxuICBpbnNlcnRMZWFkaW5nKGh1bmssIG1pbmUsIHRoZWlyKTtcbiAgaW5zZXJ0TGVhZGluZyhodW5rLCB0aGVpciwgbWluZSk7IC8vIE5vdyBpbiB0aGUgb3ZlcmxhcCBjb250ZW50LiBTY2FuIHRocm91Z2ggYW5kIHNlbGVjdCB0aGUgYmVzdCBjaGFuZ2VzIGZyb20gZWFjaC5cblxuICB3aGlsZSAobWluZS5pbmRleCA8IG1pbmUubGluZXMubGVuZ3RoICYmIHRoZWlyLmluZGV4IDwgdGhlaXIubGluZXMubGVuZ3RoKSB7XG4gICAgdmFyIG1pbmVDdXJyZW50ID0gbWluZS5saW5lc1ttaW5lLmluZGV4XSxcbiAgICAgICAgdGhlaXJDdXJyZW50ID0gdGhlaXIubGluZXNbdGhlaXIuaW5kZXhdO1xuXG4gICAgaWYgKChtaW5lQ3VycmVudFswXSA9PT0gJy0nIHx8IG1pbmVDdXJyZW50WzBdID09PSAnKycpICYmICh0aGVpckN1cnJlbnRbMF0gPT09ICctJyB8fCB0aGVpckN1cnJlbnRbMF0gPT09ICcrJykpIHtcbiAgICAgIC8vIEJvdGggbW9kaWZpZWQgLi4uXG4gICAgICBtdXR1YWxDaGFuZ2UoaHVuaywgbWluZSwgdGhlaXIpO1xuICAgIH0gZWxzZSBpZiAobWluZUN1cnJlbnRbMF0gPT09ICcrJyAmJiB0aGVpckN1cnJlbnRbMF0gPT09ICcgJykge1xuICAgICAgdmFyIF9odW5rJGxpbmVzO1xuXG4gICAgICAvLyBNaW5lIGluc2VydGVkXG4gICAgICAoX2h1bmskbGluZXMgPSBodW5rLmxpbmVzKS5wdXNoLmFwcGx5KF9odW5rJGxpbmVzLCBfdG9Db25zdW1hYmxlQXJyYXkoY29sbGVjdENoYW5nZShtaW5lKSkpO1xuICAgIH0gZWxzZSBpZiAodGhlaXJDdXJyZW50WzBdID09PSAnKycgJiYgbWluZUN1cnJlbnRbMF0gPT09ICcgJykge1xuICAgICAgdmFyIF9odW5rJGxpbmVzMjtcblxuICAgICAgLy8gVGhlaXJzIGluc2VydGVkXG4gICAgICAoX2h1bmskbGluZXMyID0gaHVuay5saW5lcykucHVzaC5hcHBseShfaHVuayRsaW5lczIsIF90b0NvbnN1bWFibGVBcnJheShjb2xsZWN0Q2hhbmdlKHRoZWlyKSkpO1xuICAgIH0gZWxzZSBpZiAobWluZUN1cnJlbnRbMF0gPT09ICctJyAmJiB0aGVpckN1cnJlbnRbMF0gPT09ICcgJykge1xuICAgICAgLy8gTWluZSByZW1vdmVkIG9yIGVkaXRlZFxuICAgICAgcmVtb3ZhbChodW5rLCBtaW5lLCB0aGVpcik7XG4gICAgfSBlbHNlIGlmICh0aGVpckN1cnJlbnRbMF0gPT09ICctJyAmJiBtaW5lQ3VycmVudFswXSA9PT0gJyAnKSB7XG4gICAgICAvLyBUaGVpciByZW1vdmVkIG9yIGVkaXRlZFxuICAgICAgcmVtb3ZhbChodW5rLCB0aGVpciwgbWluZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIGlmIChtaW5lQ3VycmVudCA9PT0gdGhlaXJDdXJyZW50KSB7XG4gICAgICAvLyBDb250ZXh0IGlkZW50aXR5XG4gICAgICBodW5rLmxpbmVzLnB1c2gobWluZUN1cnJlbnQpO1xuICAgICAgbWluZS5pbmRleCsrO1xuICAgICAgdGhlaXIuaW5kZXgrKztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ29udGV4dCBtaXNtYXRjaFxuICAgICAgY29uZmxpY3QoaHVuaywgY29sbGVjdENoYW5nZShtaW5lKSwgY29sbGVjdENoYW5nZSh0aGVpcikpO1xuICAgIH1cbiAgfSAvLyBOb3cgcHVzaCBhbnl0aGluZyB0aGF0IG1heSBiZSByZW1haW5pbmdcblxuXG4gIGluc2VydFRyYWlsaW5nKGh1bmssIG1pbmUpO1xuICBpbnNlcnRUcmFpbGluZyhodW5rLCB0aGVpcik7XG4gIGNhbGNMaW5lQ291bnQoaHVuayk7XG59XG5cbmZ1bmN0aW9uIG11dHVhbENoYW5nZShodW5rLCBtaW5lLCB0aGVpcikge1xuICB2YXIgbXlDaGFuZ2VzID0gY29sbGVjdENoYW5nZShtaW5lKSxcbiAgICAgIHRoZWlyQ2hhbmdlcyA9IGNvbGxlY3RDaGFuZ2UodGhlaXIpO1xuXG4gIGlmIChhbGxSZW1vdmVzKG15Q2hhbmdlcykgJiYgYWxsUmVtb3Zlcyh0aGVpckNoYW5nZXMpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciByZW1vdmUgY2hhbmdlcyB0aGF0IGFyZSBzdXBlcnNldHMgb2Ygb25lIGFub3RoZXJcbiAgICBpZiAoYXJyYXlTdGFydHNXaXRoKG15Q2hhbmdlcywgdGhlaXJDaGFuZ2VzKSAmJiBza2lwUmVtb3ZlU3VwZXJzZXQodGhlaXIsIG15Q2hhbmdlcywgbXlDaGFuZ2VzLmxlbmd0aCAtIHRoZWlyQ2hhbmdlcy5sZW5ndGgpKSB7XG4gICAgICB2YXIgX2h1bmskbGluZXMzO1xuXG4gICAgICAoX2h1bmskbGluZXMzID0gaHVuay5saW5lcykucHVzaC5hcHBseShfaHVuayRsaW5lczMsIF90b0NvbnN1bWFibGVBcnJheShteUNoYW5nZXMpKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoYXJyYXlTdGFydHNXaXRoKHRoZWlyQ2hhbmdlcywgbXlDaGFuZ2VzKSAmJiBza2lwUmVtb3ZlU3VwZXJzZXQobWluZSwgdGhlaXJDaGFuZ2VzLCB0aGVpckNoYW5nZXMubGVuZ3RoIC0gbXlDaGFuZ2VzLmxlbmd0aCkpIHtcbiAgICAgIHZhciBfaHVuayRsaW5lczQ7XG5cbiAgICAgIChfaHVuayRsaW5lczQgPSBodW5rLmxpbmVzKS5wdXNoLmFwcGx5KF9odW5rJGxpbmVzNCwgX3RvQ29uc3VtYWJsZUFycmF5KHRoZWlyQ2hhbmdlcykpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuICB9IGVsc2UgaWYgKGFycmF5RXF1YWwobXlDaGFuZ2VzLCB0aGVpckNoYW5nZXMpKSB7XG4gICAgdmFyIF9odW5rJGxpbmVzNTtcblxuICAgIChfaHVuayRsaW5lczUgPSBodW5rLmxpbmVzKS5wdXNoLmFwcGx5KF9odW5rJGxpbmVzNSwgX3RvQ29uc3VtYWJsZUFycmF5KG15Q2hhbmdlcykpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uZmxpY3QoaHVuaywgbXlDaGFuZ2VzLCB0aGVpckNoYW5nZXMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmFsKGh1bmssIG1pbmUsIHRoZWlyLCBzd2FwKSB7XG4gIHZhciBteUNoYW5nZXMgPSBjb2xsZWN0Q2hhbmdlKG1pbmUpLFxuICAgICAgdGhlaXJDaGFuZ2VzID0gY29sbGVjdENvbnRleHQodGhlaXIsIG15Q2hhbmdlcyk7XG5cbiAgaWYgKHRoZWlyQ2hhbmdlcy5tZXJnZWQpIHtcbiAgICB2YXIgX2h1bmskbGluZXM2O1xuXG4gICAgKF9odW5rJGxpbmVzNiA9IGh1bmsubGluZXMpLnB1c2guYXBwbHkoX2h1bmskbGluZXM2LCBfdG9Db25zdW1hYmxlQXJyYXkodGhlaXJDaGFuZ2VzLm1lcmdlZCkpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZsaWN0KGh1bmssIHN3YXAgPyB0aGVpckNoYW5nZXMgOiBteUNoYW5nZXMsIHN3YXAgPyBteUNoYW5nZXMgOiB0aGVpckNoYW5nZXMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbmZsaWN0KGh1bmssIG1pbmUsIHRoZWlyKSB7XG4gIGh1bmsuY29uZmxpY3QgPSB0cnVlO1xuICBodW5rLmxpbmVzLnB1c2goe1xuICAgIGNvbmZsaWN0OiB0cnVlLFxuICAgIG1pbmU6IG1pbmUsXG4gICAgdGhlaXJzOiB0aGVpclxuICB9KTtcbn1cblxuZnVuY3Rpb24gaW5zZXJ0TGVhZGluZyhodW5rLCBpbnNlcnQsIHRoZWlyKSB7XG4gIHdoaWxlIChpbnNlcnQub2Zmc2V0IDwgdGhlaXIub2Zmc2V0ICYmIGluc2VydC5pbmRleCA8IGluc2VydC5saW5lcy5sZW5ndGgpIHtcbiAgICB2YXIgbGluZSA9IGluc2VydC5saW5lc1tpbnNlcnQuaW5kZXgrK107XG4gICAgaHVuay5saW5lcy5wdXNoKGxpbmUpO1xuICAgIGluc2VydC5vZmZzZXQrKztcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnNlcnRUcmFpbGluZyhodW5rLCBpbnNlcnQpIHtcbiAgd2hpbGUgKGluc2VydC5pbmRleCA8IGluc2VydC5saW5lcy5sZW5ndGgpIHtcbiAgICB2YXIgbGluZSA9IGluc2VydC5saW5lc1tpbnNlcnQuaW5kZXgrK107XG4gICAgaHVuay5saW5lcy5wdXNoKGxpbmUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3RDaGFuZ2Uoc3RhdGUpIHtcbiAgdmFyIHJldCA9IFtdLFxuICAgICAgb3BlcmF0aW9uID0gc3RhdGUubGluZXNbc3RhdGUuaW5kZXhdWzBdO1xuXG4gIHdoaWxlIChzdGF0ZS5pbmRleCA8IHN0YXRlLmxpbmVzLmxlbmd0aCkge1xuICAgIHZhciBsaW5lID0gc3RhdGUubGluZXNbc3RhdGUuaW5kZXhdOyAvLyBHcm91cCBhZGRpdGlvbnMgdGhhdCBhcmUgaW1tZWRpYXRlbHkgYWZ0ZXIgc3VidHJhY3Rpb25zIGFuZCB0cmVhdCB0aGVtIGFzIG9uZSBcImF0b21pY1wiIG1vZGlmeSBjaGFuZ2UuXG5cbiAgICBpZiAob3BlcmF0aW9uID09PSAnLScgJiYgbGluZVswXSA9PT0gJysnKSB7XG4gICAgICBvcGVyYXRpb24gPSAnKyc7XG4gICAgfVxuXG4gICAgaWYgKG9wZXJhdGlvbiA9PT0gbGluZVswXSkge1xuICAgICAgcmV0LnB1c2gobGluZSk7XG4gICAgICBzdGF0ZS5pbmRleCsrO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBjb2xsZWN0Q29udGV4dChzdGF0ZSwgbWF0Y2hDaGFuZ2VzKSB7XG4gIHZhciBjaGFuZ2VzID0gW10sXG4gICAgICBtZXJnZWQgPSBbXSxcbiAgICAgIG1hdGNoSW5kZXggPSAwLFxuICAgICAgY29udGV4dENoYW5nZXMgPSBmYWxzZSxcbiAgICAgIGNvbmZsaWN0ZWQgPSBmYWxzZTtcblxuICB3aGlsZSAobWF0Y2hJbmRleCA8IG1hdGNoQ2hhbmdlcy5sZW5ndGggJiYgc3RhdGUuaW5kZXggPCBzdGF0ZS5saW5lcy5sZW5ndGgpIHtcbiAgICB2YXIgY2hhbmdlID0gc3RhdGUubGluZXNbc3RhdGUuaW5kZXhdLFxuICAgICAgICBtYXRjaCA9IG1hdGNoQ2hhbmdlc1ttYXRjaEluZGV4XTsgLy8gT25jZSB3ZSd2ZSBoaXQgb3VyIGFkZCwgdGhlbiB3ZSBhcmUgZG9uZVxuXG4gICAgaWYgKG1hdGNoWzBdID09PSAnKycpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNvbnRleHRDaGFuZ2VzID0gY29udGV4dENoYW5nZXMgfHwgY2hhbmdlWzBdICE9PSAnICc7XG4gICAgbWVyZ2VkLnB1c2gobWF0Y2gpO1xuICAgIG1hdGNoSW5kZXgrKzsgLy8gQ29uc3VtZSBhbnkgYWRkaXRpb25zIGluIHRoZSBvdGhlciBibG9jayBhcyBhIGNvbmZsaWN0IHRvIGF0dGVtcHRcbiAgICAvLyB0byBwdWxsIGluIHRoZSByZW1haW5pbmcgY29udGV4dCBhZnRlciB0aGlzXG5cbiAgICBpZiAoY2hhbmdlWzBdID09PSAnKycpIHtcbiAgICAgIGNvbmZsaWN0ZWQgPSB0cnVlO1xuXG4gICAgICB3aGlsZSAoY2hhbmdlWzBdID09PSAnKycpIHtcbiAgICAgICAgY2hhbmdlcy5wdXNoKGNoYW5nZSk7XG4gICAgICAgIGNoYW5nZSA9IHN0YXRlLmxpbmVzWysrc3RhdGUuaW5kZXhdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtYXRjaC5zdWJzdHIoMSkgPT09IGNoYW5nZS5zdWJzdHIoMSkpIHtcbiAgICAgIGNoYW5nZXMucHVzaChjaGFuZ2UpO1xuICAgICAgc3RhdGUuaW5kZXgrKztcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmxpY3RlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKChtYXRjaENoYW5nZXNbbWF0Y2hJbmRleF0gfHwgJycpWzBdID09PSAnKycgJiYgY29udGV4dENoYW5nZXMpIHtcbiAgICBjb25mbGljdGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChjb25mbGljdGVkKSB7XG4gICAgcmV0dXJuIGNoYW5nZXM7XG4gIH1cblxuICB3aGlsZSAobWF0Y2hJbmRleCA8IG1hdGNoQ2hhbmdlcy5sZW5ndGgpIHtcbiAgICBtZXJnZWQucHVzaChtYXRjaENoYW5nZXNbbWF0Y2hJbmRleCsrXSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1lcmdlZDogbWVyZ2VkLFxuICAgIGNoYW5nZXM6IGNoYW5nZXNcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWxsUmVtb3ZlcyhjaGFuZ2VzKSB7XG4gIHJldHVybiBjaGFuZ2VzLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY2hhbmdlKSB7XG4gICAgcmV0dXJuIHByZXYgJiYgY2hhbmdlWzBdID09PSAnLSc7XG4gIH0sIHRydWUpO1xufVxuXG5mdW5jdGlvbiBza2lwUmVtb3ZlU3VwZXJzZXQoc3RhdGUsIHJlbW92ZUNoYW5nZXMsIGRlbHRhKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGVsdGE7IGkrKykge1xuICAgIHZhciBjaGFuZ2VDb250ZW50ID0gcmVtb3ZlQ2hhbmdlc1tyZW1vdmVDaGFuZ2VzLmxlbmd0aCAtIGRlbHRhICsgaV0uc3Vic3RyKDEpO1xuXG4gICAgaWYgKHN0YXRlLmxpbmVzW3N0YXRlLmluZGV4ICsgaV0gIT09ICcgJyArIGNoYW5nZUNvbnRlbnQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBzdGF0ZS5pbmRleCArPSBkZWx0YTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNhbGNPbGROZXdMaW5lQ291bnQobGluZXMpIHtcbiAgdmFyIG9sZExpbmVzID0gMDtcbiAgdmFyIG5ld0xpbmVzID0gMDtcbiAgbGluZXMuZm9yRWFjaChmdW5jdGlvbiAobGluZSkge1xuICAgIGlmICh0eXBlb2YgbGluZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBteUNvdW50ID0gY2FsY09sZE5ld0xpbmVDb3VudChsaW5lLm1pbmUpO1xuICAgICAgdmFyIHRoZWlyQ291bnQgPSBjYWxjT2xkTmV3TGluZUNvdW50KGxpbmUudGhlaXJzKTtcblxuICAgICAgaWYgKG9sZExpbmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKG15Q291bnQub2xkTGluZXMgPT09IHRoZWlyQ291bnQub2xkTGluZXMpIHtcbiAgICAgICAgICBvbGRMaW5lcyArPSBteUNvdW50Lm9sZExpbmVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9sZExpbmVzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXdMaW5lcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChteUNvdW50Lm5ld0xpbmVzID09PSB0aGVpckNvdW50Lm5ld0xpbmVzKSB7XG4gICAgICAgICAgbmV3TGluZXMgKz0gbXlDb3VudC5uZXdMaW5lcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdMaW5lcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobmV3TGluZXMgIT09IHVuZGVmaW5lZCAmJiAobGluZVswXSA9PT0gJysnIHx8IGxpbmVbMF0gPT09ICcgJykpIHtcbiAgICAgICAgbmV3TGluZXMrKztcbiAgICAgIH1cblxuICAgICAgaWYgKG9sZExpbmVzICE9PSB1bmRlZmluZWQgJiYgKGxpbmVbMF0gPT09ICctJyB8fCBsaW5lWzBdID09PSAnICcpKSB7XG4gICAgICAgIG9sZExpbmVzKys7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBvbGRMaW5lczogb2xkTGluZXMsXG4gICAgbmV3TGluZXM6IG5ld0xpbmVzXG4gIH07XG59XG5cbi8vIFNlZTogaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2dvb2dsZS1kaWZmLW1hdGNoLXBhdGNoL3dpa2kvQVBJXG5mdW5jdGlvbiBjb252ZXJ0Q2hhbmdlc1RvRE1QKGNoYW5nZXMpIHtcbiAgdmFyIHJldCA9IFtdLFxuICAgICAgY2hhbmdlLFxuICAgICAgb3BlcmF0aW9uO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgIGNoYW5nZSA9IGNoYW5nZXNbaV07XG5cbiAgICBpZiAoY2hhbmdlLmFkZGVkKSB7XG4gICAgICBvcGVyYXRpb24gPSAxO1xuICAgIH0gZWxzZSBpZiAoY2hhbmdlLnJlbW92ZWQpIHtcbiAgICAgIG9wZXJhdGlvbiA9IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcGVyYXRpb24gPSAwO1xuICAgIH1cblxuICAgIHJldC5wdXNoKFtvcGVyYXRpb24sIGNoYW5nZS52YWx1ZV0pO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gY29udmVydENoYW5nZXNUb1hNTChjaGFuZ2VzKSB7XG4gIHZhciByZXQgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgY2hhbmdlID0gY2hhbmdlc1tpXTtcblxuICAgIGlmIChjaGFuZ2UuYWRkZWQpIHtcbiAgICAgIHJldC5wdXNoKCc8aW5zPicpO1xuICAgIH0gZWxzZSBpZiAoY2hhbmdlLnJlbW92ZWQpIHtcbiAgICAgIHJldC5wdXNoKCc8ZGVsPicpO1xuICAgIH1cblxuICAgIHJldC5wdXNoKGVzY2FwZUhUTUwoY2hhbmdlLnZhbHVlKSk7XG5cbiAgICBpZiAoY2hhbmdlLmFkZGVkKSB7XG4gICAgICByZXQucHVzaCgnPC9pbnM+Jyk7XG4gICAgfSBlbHNlIGlmIChjaGFuZ2UucmVtb3ZlZCkge1xuICAgICAgcmV0LnB1c2goJzwvZGVsPicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXQuam9pbignJyk7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZUhUTUwocykge1xuICB2YXIgbiA9IHM7XG4gIG4gPSBuLnJlcGxhY2UoLyYvZywgJyZhbXA7Jyk7XG4gIG4gPSBuLnJlcGxhY2UoLzwvZywgJyZsdDsnKTtcbiAgbiA9IG4ucmVwbGFjZSgvPi9nLCAnJmd0OycpO1xuICBuID0gbi5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG4gIHJldHVybiBuO1xufVxuXG5leHBvcnQgeyBEaWZmLCBhcHBseVBhdGNoLCBhcHBseVBhdGNoZXMsIGNhbm9uaWNhbGl6ZSwgY29udmVydENoYW5nZXNUb0RNUCwgY29udmVydENoYW5nZXNUb1hNTCwgY3JlYXRlUGF0Y2gsIGNyZWF0ZVR3b0ZpbGVzUGF0Y2gsIGRpZmZBcnJheXMsIGRpZmZDaGFycywgZGlmZkNzcywgZGlmZkpzb24sIGRpZmZMaW5lcywgZGlmZlNlbnRlbmNlcywgZGlmZlRyaW1tZWRMaW5lcywgZGlmZldvcmRzLCBkaWZmV29yZHNXaXRoU3BhY2UsIG1lcmdlLCBwYXJzZVBhdGNoLCBzdHJ1Y3R1cmVkUGF0Y2ggfTtcbiIsImltcG9ydCBTdHlsZVRvT2JqZWN0IGZyb20gJy4vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBTdHlsZVRvT2JqZWN0O1xuIiwiaW1wb3J0IHsgZGVxdWFswqB9IGZyb20gJ2RlcXVhbCc7XG5pbXBvcnQgeyBjb21wYXJlLCBsaW5lcyB9IGZyb20gJ3V2dS9kaWZmJztcblxuZnVuY3Rpb24gZGVkZW50KHN0cikge1xuXHRzdHIgPSBzdHIucmVwbGFjZSgvXFxyP1xcbi9nLCAnXFxuJyk7XG4gIGxldCBhcnIgPSBzdHIubWF0Y2goL15bIFxcdF0qKD89XFxTKS9nbSk7XG4gIGxldCBpID0gMCwgbWluID0gMS8wLCBsZW4gPSAoYXJyfHxbXSkubGVuZ3RoO1xuICBmb3IgKDsgaSA8IGxlbjsgaSsrKSBtaW4gPSBNYXRoLm1pbihtaW4sIGFycltpXS5sZW5ndGgpO1xuICByZXR1cm4gbGVuICYmIG1pbiA/IHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAoYF5bIFxcXFx0XXske21pbn19YCwgJ2dtJyksICcnKSA6IHN0cjtcbn1cblxuZXhwb3J0IGNsYXNzIEFzc2VydGlvbiBleHRlbmRzIEVycm9yIHtcblx0Y29uc3RydWN0b3Iob3B0cz17fSkge1xuXHRcdHN1cGVyKG9wdHMubWVzc2FnZSk7XG5cdFx0dGhpcy5uYW1lID0gJ0Fzc2VydGlvbic7XG5cdFx0dGhpcy5jb2RlID0gJ0VSUl9BU1NFUlRJT04nO1xuXHRcdGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuXHRcdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG5cdFx0fVxuXHRcdHRoaXMuZGV0YWlscyA9IG9wdHMuZGV0YWlscyB8fCBmYWxzZTtcblx0XHR0aGlzLmdlbmVyYXRlZCA9ICEhb3B0cy5nZW5lcmF0ZWQ7XG5cdFx0dGhpcy5vcGVyYXRvciA9IG9wdHMub3BlcmF0b3I7XG5cdFx0dGhpcy5leHBlY3RzID0gb3B0cy5leHBlY3RzO1xuXHRcdHRoaXMuYWN0dWFsID0gb3B0cy5hY3R1YWw7XG5cdH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0KGJvb2wsIGFjdHVhbCwgZXhwZWN0cywgb3BlcmF0b3IsIGRldGFpbGVyLCBiYWNrdXAsIG1zZykge1xuXHRpZiAoYm9vbCkgcmV0dXJuO1xuXHRsZXQgbWVzc2FnZSA9IG1zZyB8fCBiYWNrdXA7XG5cdGlmIChtc2cgaW5zdGFuY2VvZiBFcnJvcikgdGhyb3cgbXNnO1xuXHRsZXQgZGV0YWlscyA9IGRldGFpbGVyICYmIGRldGFpbGVyKGFjdHVhbCwgZXhwZWN0cyk7XG5cdHRocm93IG5ldyBBc3NlcnRpb24oeyBhY3R1YWwsIGV4cGVjdHMsIG9wZXJhdG9yLCBtZXNzYWdlLCBkZXRhaWxzLCBnZW5lcmF0ZWQ6ICFtc2cgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvayh2YWwsIG1zZykge1xuXHRhc3NlcnQoISF2YWwsIGZhbHNlLCB0cnVlLCAnb2snLCBmYWxzZSwgJ0V4cGVjdGVkIHZhbHVlIHRvIGJlIHRydXRoeScsIG1zZyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpcyh2YWwsIGV4cCwgbXNnKSB7XG5cdGFzc2VydCh2YWwgPT09IGV4cCwgdmFsLCBleHAsICdpcycsIGNvbXBhcmUsICdFeHBlY3RlZCB2YWx1ZXMgdG8gYmUgc3RyaWN0bHkgZXF1YWw6JywgbXNnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFsKHZhbCwgZXhwLCBtc2cpIHtcblx0YXNzZXJ0KGRlcXVhbCh2YWwsIGV4cCksIHZhbCwgZXhwLCAnZXF1YWwnLCBjb21wYXJlLCAnRXhwZWN0ZWQgdmFsdWVzIHRvIGJlIGRlZXBseSBlcXVhbDonLCBtc2cpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5yZWFjaGFibGUobXNnKSB7XG5cdGFzc2VydChmYWxzZSwgdHJ1ZSwgZmFsc2UsICd1bnJlYWNoYWJsZScsIGZhbHNlLCAnRXhwZWN0ZWQgbm90IHRvIGJlIHJlYWNoZWQhJywgbXNnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR5cGUodmFsLCBleHAsIG1zZykge1xuXHRsZXQgdG1wID0gdHlwZW9mIHZhbDtcblx0YXNzZXJ0KHRtcCA9PT0gZXhwLCB0bXAsIGV4cCwgJ3R5cGUnLCBmYWxzZSwgYEV4cGVjdGVkIFwiJHt0bXB9XCIgdG8gYmUgXCIke2V4cH1cImAsIG1zZyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnN0YW5jZSh2YWwsIGV4cCwgbXNnKSB7XG5cdGxldCBuYW1lID0gJ2AnICsgKGV4cC5uYW1lIHx8IGV4cC5jb25zdHJ1Y3Rvci5uYW1lKSArICdgJztcblx0YXNzZXJ0KHZhbCBpbnN0YW5jZW9mIGV4cCwgdmFsLCBleHAsICdpbnN0YW5jZScsIGZhbHNlLCBgRXhwZWN0ZWQgdmFsdWUgdG8gYmUgYW4gaW5zdGFuY2Ugb2YgJHtuYW1lfWAsIG1zZyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaCh2YWwsIGV4cCwgbXNnKSB7XG5cdGlmICh0eXBlb2YgZXhwID09PSAnc3RyaW5nJykge1xuXHRcdGFzc2VydCh2YWwuaW5jbHVkZXMoZXhwKSwgdmFsLCBleHAsICdtYXRjaCcsIGZhbHNlLCBgRXhwZWN0ZWQgdmFsdWUgdG8gaW5jbHVkZSBcIiR7ZXhwfVwiIHN1YnN0cmluZ2AsIG1zZyk7XG5cdH0gZWxzZSB7XG5cdFx0YXNzZXJ0KGV4cC50ZXN0KHZhbCksIHZhbCwgZXhwLCAnbWF0Y2gnLCBmYWxzZSwgYEV4cGVjdGVkIHZhbHVlIHRvIG1hdGNoIFxcYCR7U3RyaW5nKGV4cCl9XFxgIHBhdHRlcm5gLCBtc2cpO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzbmFwc2hvdCh2YWwsIGV4cCwgbXNnKSB7XG5cdHZhbD1kZWRlbnQodmFsKTsgZXhwPWRlZGVudChleHApO1xuXHRhc3NlcnQodmFsID09PSBleHAsIHZhbCwgZXhwLCAnc25hcHNob3QnLCBsaW5lcywgJ0V4cGVjdGVkIHZhbHVlIHRvIG1hdGNoIHNuYXBzaG90OicsIG1zZyk7XG59XG5cbmNvbnN0IGxpbmVOdW1zID0gKHgsIHkpID0+IGxpbmVzKHgsIHksIDEpO1xuZXhwb3J0IGZ1bmN0aW9uIGZpeHR1cmUodmFsLCBleHAsIG1zZykge1xuXHR2YWw9ZGVkZW50KHZhbCk7IGV4cD1kZWRlbnQoZXhwKTtcblx0YXNzZXJ0KHZhbCA9PT0gZXhwLCB2YWwsIGV4cCwgJ2ZpeHR1cmUnLCBsaW5lTnVtcywgJ0V4cGVjdGVkIHZhbHVlIHRvIG1hdGNoIGZpeHR1cmU6JywgbXNnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRocm93cyhibGssIGV4cCwgbXNnKSB7XG5cdGlmICghbXNnICYmIHR5cGVvZiBleHAgPT09ICdzdHJpbmcnKSB7XG5cdFx0bXNnID0gZXhwOyBleHAgPSBudWxsO1xuXHR9XG5cblx0dHJ5IHtcblx0XHRibGsoKTtcblx0XHRhc3NlcnQoZmFsc2UsIGZhbHNlLCB0cnVlLCAndGhyb3dzJywgZmFsc2UsICdFeHBlY3RlZCBmdW5jdGlvbiB0byB0aHJvdycsIG1zZyk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdGlmIChlcnIgaW5zdGFuY2VvZiBBc3NlcnRpb24pIHRocm93IGVycjtcblxuXHRcdGlmICh0eXBlb2YgZXhwID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRhc3NlcnQoZXhwKGVyciksIGZhbHNlLCB0cnVlLCAndGhyb3dzJywgZmFsc2UsICdFeHBlY3RlZCBmdW5jdGlvbiB0byB0aHJvdyBtYXRjaGluZyBleGNlcHRpb24nLCBtc2cpO1xuXHRcdH0gZWxzZSBpZiAoZXhwIGluc3RhbmNlb2YgUmVnRXhwKSB7XG5cdFx0XHRhc3NlcnQoZXhwLnRlc3QoZXJyLm1lc3NhZ2UpLCBmYWxzZSwgdHJ1ZSwgJ3Rocm93cycsIGZhbHNlLCBgRXhwZWN0ZWQgZnVuY3Rpb24gdG8gdGhyb3cgZXhjZXB0aW9uIG1hdGNoaW5nIFxcYCR7U3RyaW5nKGV4cCl9XFxgIHBhdHRlcm5gLCBtc2cpO1xuXHRcdH1cblx0fVxufVxuXG4vLyAtLS1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vdCh2YWwsIG1zZykge1xuXHRhc3NlcnQoIXZhbCwgdHJ1ZSwgZmFsc2UsICdub3QnLCBmYWxzZSwgJ0V4cGVjdGVkIHZhbHVlIHRvIGJlIGZhbHNleScsIG1zZyk7XG59XG5cbm5vdC5vayA9IG5vdDtcblxuaXMubm90ID0gZnVuY3Rpb24gKHZhbCwgZXhwLCBtc2cpIHtcblx0YXNzZXJ0KHZhbCAhPT0gZXhwLCB2YWwsIGV4cCwgJ2lzLm5vdCcsIGZhbHNlLCAnRXhwZWN0ZWQgdmFsdWVzIG5vdCB0byBiZSBzdHJpY3RseSBlcXVhbCcsIG1zZyk7XG59XG5cbm5vdC5lcXVhbCA9IGZ1bmN0aW9uICh2YWwsIGV4cCwgbXNnKSB7XG5cdGFzc2VydCghZGVxdWFsKHZhbCwgZXhwKSwgdmFsLCBleHAsICdub3QuZXF1YWwnLCBmYWxzZSwgJ0V4cGVjdGVkIHZhbHVlcyBub3QgdG8gYmUgZGVlcGx5IGVxdWFsJywgbXNnKTtcbn1cblxubm90LnR5cGUgPSBmdW5jdGlvbiAodmFsLCBleHAsIG1zZykge1xuXHRsZXQgdG1wID0gdHlwZW9mIHZhbDtcblx0YXNzZXJ0KHRtcCAhPT0gZXhwLCB0bXAsIGV4cCwgJ25vdC50eXBlJywgZmFsc2UsIGBFeHBlY3RlZCBcIiR7dG1wfVwiIG5vdCB0byBiZSBcIiR7ZXhwfVwiYCwgbXNnKTtcbn1cblxubm90Lmluc3RhbmNlID0gZnVuY3Rpb24gKHZhbCwgZXhwLCBtc2cpIHtcblx0bGV0IG5hbWUgPSAnYCcgKyAoZXhwLm5hbWUgfHwgZXhwLmNvbnN0cnVjdG9yLm5hbWUpICsgJ2AnO1xuXHRhc3NlcnQoISh2YWwgaW5zdGFuY2VvZiBleHApLCB2YWwsIGV4cCwgJ25vdC5pbnN0YW5jZScsIGZhbHNlLCBgRXhwZWN0ZWQgdmFsdWUgbm90IHRvIGJlIGFuIGluc3RhbmNlIG9mICR7bmFtZX1gLCBtc2cpO1xufVxuXG5ub3Quc25hcHNob3QgPSBmdW5jdGlvbiAodmFsLCBleHAsIG1zZykge1xuXHR2YWw9ZGVkZW50KHZhbCk7IGV4cD1kZWRlbnQoZXhwKTtcblx0YXNzZXJ0KHZhbCAhPT0gZXhwLCB2YWwsIGV4cCwgJ25vdC5zbmFwc2hvdCcsIGZhbHNlLCAnRXhwZWN0ZWQgdmFsdWUgbm90IHRvIG1hdGNoIHNuYXBzaG90JywgbXNnKTtcbn1cblxubm90LmZpeHR1cmUgPSBmdW5jdGlvbiAodmFsLCBleHAsIG1zZykge1xuXHR2YWw9ZGVkZW50KHZhbCk7IGV4cD1kZWRlbnQoZXhwKTtcblx0YXNzZXJ0KHZhbCAhPT0gZXhwLCB2YWwsIGV4cCwgJ25vdC5maXh0dXJlJywgZmFsc2UsICdFeHBlY3RlZCB2YWx1ZSBub3QgdG8gbWF0Y2ggZml4dHVyZScsIG1zZyk7XG59XG5cbm5vdC5tYXRjaCA9IGZ1bmN0aW9uICh2YWwsIGV4cCwgbXNnKSB7XG5cdGlmICh0eXBlb2YgZXhwID09PSAnc3RyaW5nJykge1xuXHRcdGFzc2VydCghdmFsLmluY2x1ZGVzKGV4cCksIHZhbCwgZXhwLCAnbm90Lm1hdGNoJywgZmFsc2UsIGBFeHBlY3RlZCB2YWx1ZSBub3QgdG8gaW5jbHVkZSBcIiR7ZXhwfVwiIHN1YnN0cmluZ2AsIG1zZyk7XG5cdH0gZWxzZSB7XG5cdFx0YXNzZXJ0KCFleHAudGVzdCh2YWwpLCB2YWwsIGV4cCwgJ25vdC5tYXRjaCcsIGZhbHNlLCBgRXhwZWN0ZWQgdmFsdWUgbm90IHRvIG1hdGNoIFxcYCR7U3RyaW5nKGV4cCl9XFxgIHBhdHRlcm5gLCBtc2cpO1xuXHR9XG59XG5cbm5vdC50aHJvd3MgPSBmdW5jdGlvbiAoYmxrLCBleHAsIG1zZykge1xuXHRpZiAoIW1zZyAmJiB0eXBlb2YgZXhwID09PSAnc3RyaW5nJykge1xuXHRcdG1zZyA9IGV4cDsgZXhwID0gbnVsbDtcblx0fVxuXG5cdHRyeSB7XG5cdFx0YmxrKCk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdGlmICh0eXBlb2YgZXhwID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRhc3NlcnQoIWV4cChlcnIpLCB0cnVlLCBmYWxzZSwgJ25vdC50aHJvd3MnLCBmYWxzZSwgJ0V4cGVjdGVkIGZ1bmN0aW9uIG5vdCB0byB0aHJvdyBtYXRjaGluZyBleGNlcHRpb24nLCBtc2cpO1xuXHRcdH0gZWxzZSBpZiAoZXhwIGluc3RhbmNlb2YgUmVnRXhwKSB7XG5cdFx0XHRhc3NlcnQoIWV4cC50ZXN0KGVyci5tZXNzYWdlKSwgdHJ1ZSwgZmFsc2UsICdub3QudGhyb3dzJywgZmFsc2UsIGBFeHBlY3RlZCBmdW5jdGlvbiBub3QgdG8gdGhyb3cgZXhjZXB0aW9uIG1hdGNoaW5nIFxcYCR7U3RyaW5nKGV4cCl9XFxgIHBhdHRlcm5gLCBtc2cpO1xuXHRcdH0gZWxzZSBpZiAoIWV4cCkge1xuXHRcdFx0YXNzZXJ0KGZhbHNlLCB0cnVlLCBmYWxzZSwgJ25vdC50aHJvd3MnLCBmYWxzZSwgJ0V4cGVjdGVkIGZ1bmN0aW9uIG5vdCB0byB0aHJvdycsIG1zZyk7XG5cdFx0fVxuXHR9XG59XG4iLCJpbXBvcnQga2xldXIgZnJvbSAna2xldXInO1xuaW1wb3J0ICogYXMgZGlmZiBmcm9tICdkaWZmJztcblxuY29uc3QgY29sb3JzID0ge1xuXHQnLS0nOiBrbGV1ci5yZWQsXG5cdCfCt8K3Jzoga2xldXIuZ3JleSxcblx0JysrJzoga2xldXIuZ3JlZW4sXG59O1xuXG5jb25zdCBUSVRMRSA9IGtsZXVyLmRpbSgpLml0YWxpYztcbmNvbnN0IFRBQj1rbGV1ci5kaW0oJ+KGkicpLCBTUEFDRT1rbGV1ci5kaW0oJ8K3JyksIE5MPWtsZXVyLmRpbSgn4oa1Jyk7XG5jb25zdCBMT0cgPSAoc3ltLCBzdHIpID0+IGNvbG9yc1tzeW1dKHN5bSArIFBSRVRUWShzdHIpKSArICdcXG4nO1xuY29uc3QgTElORSA9IChudW0sIHgpID0+IGtsZXVyLmRpbSgnTCcgKyBTdHJpbmcobnVtKS5wYWRTdGFydCh4LCAnMCcpICsgJyAnKTtcbmNvbnN0IFBSRVRUWSA9IHN0ciA9PiBzdHIucmVwbGFjZSgvWyBdL2csIFNQQUNFKS5yZXBsYWNlKC9cXHQvZywgVEFCKS5yZXBsYWNlKC8oXFxyP1xcbikvZywgTkwpO1xuXG5mdW5jdGlvbiBsaW5lKG9iaiwgcHJldiwgcGFkKSB7XG5cdGxldCBjaGFyID0gb2JqLnJlbW92ZWQgPyAnLS0nIDogb2JqLmFkZGVkID8gJysrJyA6ICfCt8K3Jztcblx0bGV0IGFyciA9IG9iai52YWx1ZS5yZXBsYWNlKC9cXHI/XFxuJC8sICcnKS5zcGxpdCgnXFxuJyk7XG5cdGxldCBpPTAsIHRtcCwgb3V0PScnO1xuXG5cdGlmIChvYmouYWRkZWQpIG91dCArPSBjb2xvcnNbY2hhcl0oKS51bmRlcmxpbmUoVElUTEUoJ0V4cGVjdGVkOicpKSArICdcXG4nO1xuXHRlbHNlIGlmIChvYmoucmVtb3ZlZCkgb3V0ICs9IGNvbG9yc1tjaGFyXSgpLnVuZGVybGluZShUSVRMRSgnQWN0dWFsOicpKSArICdcXG4nO1xuXG5cdGZvciAoOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG5cdFx0dG1wID0gYXJyW2ldO1xuXHRcdGlmICh0bXAgIT0gbnVsbCkge1xuXHRcdFx0aWYgKHByZXYpIG91dCArPSBMSU5FKHByZXYgKyBpLCBwYWQpO1xuXHRcdFx0b3V0ICs9IExPRyhjaGFyLCB0bXAgfHwgJ1xcbicpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBvdXQ7XG59XG5cbi8vIFRPRE86IHdhbnQgYmV0dGVyIGRpZmZpbmdcbi8vfj4gY29tcGxleCBpdGVtcyBiYWlsIG91dHJpZ2h0XG5leHBvcnQgZnVuY3Rpb24gYXJyYXlzKGlucHV0LCBleHBlY3QpIHtcblx0bGV0IGFyciA9IGRpZmYuZGlmZkFycmF5cyhpbnB1dCwgZXhwZWN0KTtcblx0bGV0IGk9MCwgaj0wLCBrPTAsIHRtcCwgdmFsLCBjaGFyLCBpc09iaiwgc3RyO1xuXHRsZXQgb3V0ID0gTE9HKCfCt8K3JywgJ1snKTtcblxuXHRmb3IgKDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuXHRcdGNoYXIgPSAodG1wID0gYXJyW2ldKS5yZW1vdmVkID8gJy0tJyA6IHRtcC5hZGRlZCA/ICcrKycgOiAnwrfCtyc7XG5cblx0XHRpZiAodG1wLmFkZGVkKSB7XG5cdFx0XHRvdXQgKz0gY29sb3JzW2NoYXJdKCkudW5kZXJsaW5lKFRJVExFKCdFeHBlY3RlZDonKSkgKyAnXFxuJztcblx0XHR9IGVsc2UgaWYgKHRtcC5yZW1vdmVkKSB7XG5cdFx0XHRvdXQgKz0gY29sb3JzW2NoYXJdKCkudW5kZXJsaW5lKFRJVExFKCdBY3R1YWw6JykpICsgJ1xcbic7XG5cdFx0fVxuXG5cdFx0Zm9yIChqPTA7IGogPCB0bXAudmFsdWUubGVuZ3RoOyBqKyspIHtcblx0XHRcdGlzT2JqID0gKHRtcC52YWx1ZVtqXSAmJiB0eXBlb2YgdG1wLnZhbHVlW2pdID09PSAnb2JqZWN0Jyk7XG5cdFx0XHR2YWwgPSBzdHJpbmdpZnkodG1wLnZhbHVlW2pdKS5zcGxpdCgvXFxyP1xcbi9nKTtcblx0XHRcdGZvciAoaz0wOyBrIDwgdmFsLmxlbmd0aDspIHtcblx0XHRcdFx0c3RyID0gJyAgJyArIHZhbFtrKytdICsgKGlzT2JqID8gJycgOiAnLCcpO1xuXHRcdFx0XHRpZiAoaXNPYmogJiYgayA9PT0gdmFsLmxlbmd0aCAmJiAoaiArIDEpIDwgdG1wLnZhbHVlLmxlbmd0aCkgc3RyICs9ICcsJztcblx0XHRcdFx0b3V0ICs9IExPRyhjaGFyLCBzdHIpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBvdXQgKyBMT0coJ8K3wrcnLCAnXScpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGluZXMoaW5wdXQsIGV4cGVjdCwgbGluZW51bSA9IDApIHtcblx0bGV0IGk9MCwgdG1wLCBvdXRwdXQ9Jyc7XG5cdGxldCBhcnIgPSBkaWZmLmRpZmZMaW5lcyhpbnB1dCwgZXhwZWN0KTtcblx0bGV0IHBhZCA9IFN0cmluZyhleHBlY3Quc3BsaXQoL1xccj9cXG4vZykubGVuZ3RoIC0gbGluZW51bSkubGVuZ3RoO1xuXG5cdGZvciAoOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG5cdFx0b3V0cHV0ICs9IGxpbmUodG1wID0gYXJyW2ldLCBsaW5lbnVtLCBwYWQpO1xuXHRcdGlmIChsaW5lbnVtICYmICF0bXAucmVtb3ZlZCkgbGluZW51bSArPSB0bXAuY291bnQ7XG5cdH1cblxuXHRyZXR1cm4gb3V0cHV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hhcnMoaW5wdXQsIGV4cGVjdCkge1xuXHRsZXQgYXJyID0gZGlmZi5kaWZmQ2hhcnMoaW5wdXQsIGV4cGVjdCk7XG5cdGxldCBpPTAsIG91dHB1dD0nJywgdG1wO1xuXG5cdGxldCBsMSA9IGlucHV0Lmxlbmd0aDtcblx0bGV0IGwyID0gZXhwZWN0Lmxlbmd0aDtcblxuXHRsZXQgcDEgPSBQUkVUVFkoaW5wdXQpO1xuXHRsZXQgcDIgPSBQUkVUVFkoZXhwZWN0KTtcblxuXHR0bXAgPSBhcnJbaV07XG5cblx0aWYgKGwxID09PSBsMikge1xuXHRcdC8vIG5vIGxlbmd0aCBvZmZzZXRzXG5cdH0gZWxzZSBpZiAodG1wLnJlbW92ZWQgJiYgYXJyW2kgKyAxXSkge1xuXHRcdGxldCBkZWwgPSB0bXAuY291bnQgLSBhcnJbaSArIDFdLmNvdW50O1xuXHRcdGlmIChkZWwgPT0gMCkge1xuXHRcdFx0Ly8gd2FzaH5cblx0XHR9IGVsc2UgaWYgKGRlbCA+IDApIHtcblx0XHRcdGV4cGVjdCA9ICcgJy5yZXBlYXQoZGVsKSArIGV4cGVjdDtcblx0XHRcdHAyID0gJyAnLnJlcGVhdChkZWwpICsgcDI7XG5cdFx0XHRsMiArPSBkZWw7XG5cdFx0fSBlbHNlIGlmIChkZWwgPCAwKSB7XG5cdFx0XHRpbnB1dCA9ICcgJy5yZXBlYXQoLWRlbCkgKyBpbnB1dDtcblx0XHRcdHAxID0gJyAnLnJlcGVhdCgtZGVsKSArIHAxO1xuXHRcdFx0bDEgKz0gLWRlbDtcblx0XHR9XG5cdH1cblxuXHRvdXRwdXQgKz0gZGlyZWN0KHAxLCBwMiwgbDEsIGwyKTtcblxuXHRpZiAobDEgPT09IGwyKSB7XG5cdFx0Zm9yICh0bXA9JyAgJzsgaSA8IGwxOyBpKyspIHtcblx0XHRcdHRtcCArPSBpbnB1dFtpXSA9PT0gZXhwZWN0W2ldID8gJyAnIDogJ14nO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRmb3IgKHRtcD0nICAnOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR0bXAgKz0gKChhcnJbaV0uYWRkZWQgfHwgYXJyW2ldLnJlbW92ZWQpID8gJ14nIDogJyAnKS5yZXBlYXQoTWF0aC5tYXgoYXJyW2ldLmNvdW50LCAwKSk7XG5cdFx0XHRpZiAoaSArIDEgPCBhcnIubGVuZ3RoICYmICgoYXJyW2ldLmFkZGVkICYmIGFycltpKzFdLnJlbW92ZWQpIHx8IChhcnJbaV0ucmVtb3ZlZCAmJiBhcnJbaSsxXS5hZGRlZCkpKSB7XG5cdFx0XHRcdGFycltpICsgMV0uY291bnQgLT0gYXJyW2ldLmNvdW50O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBvdXRwdXQgKyBrbGV1ci5yZWQodG1wKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpcmVjdChpbnB1dCwgZXhwZWN0LCBsZW5BID0gU3RyaW5nKGlucHV0KS5sZW5ndGgsIGxlbkIgPSBTdHJpbmcoZXhwZWN0KS5sZW5ndGgpIHtcblx0bGV0IGd1dHRlciA9IDQ7XG5cdGxldCBsZW5DID0gTWF0aC5tYXgobGVuQSwgbGVuQik7XG5cdGxldCB0eXBlQT10eXBlb2YgaW5wdXQsIHR5cGVCPXR5cGVvZiBleHBlY3Q7XG5cblx0aWYgKHR5cGVBICE9PSB0eXBlQikge1xuXHRcdGd1dHRlciA9IDI7XG5cblx0XHRsZXQgZGVsQSA9IGd1dHRlciArIGxlbkMgLSBsZW5BO1xuXHRcdGxldCBkZWxCID0gZ3V0dGVyICsgbGVuQyAtIGxlbkI7XG5cblx0XHRpbnB1dCArPSAnICcucmVwZWF0KGRlbEEpICsga2xldXIuZGltKGBbJHt0eXBlQX1dYCk7XG5cdFx0ZXhwZWN0ICs9ICcgJy5yZXBlYXQoZGVsQikgKyBrbGV1ci5kaW0oYFske3R5cGVCfV1gKTtcblxuXHRcdGxlbkEgKz0gZGVsQSArIHR5cGVBLmxlbmd0aCArIDI7XG5cdFx0bGVuQiArPSBkZWxCICsgdHlwZUIubGVuZ3RoICsgMjtcblx0XHRsZW5DID0gTWF0aC5tYXgobGVuQSwgbGVuQik7XG5cdH1cblxuXHRsZXQgb3V0cHV0ID0gY29sb3JzWycrKyddKCcrKycgKyBleHBlY3QgKyAnICcucmVwZWF0KGd1dHRlciArIGxlbkMgLSBsZW5CKSArIFRJVExFKCcoRXhwZWN0ZWQpJykpICsgJ1xcbic7XG5cdHJldHVybiBvdXRwdXQgKyBjb2xvcnNbJy0tJ10oJy0tJyArIGlucHV0ICsgJyAnLnJlcGVhdChndXR0ZXIgKyBsZW5DIC0gbGVuQSkgKyBUSVRMRSgnKEFjdHVhbCknKSkgKyAnXFxuJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNvcnQoaW5wdXQsIGV4cGVjdCkge1xuXHR2YXIgaywgaT0wLCB0bXAsIGlzQXJyID0gQXJyYXkuaXNBcnJheShpbnB1dCk7XG5cdHZhciBrZXlzPVtdLCBvdXQ9aXNBcnIgPyBBcnJheShpbnB1dC5sZW5ndGgpIDoge307XG5cblx0aWYgKGlzQXJyKSB7XG5cdFx0Zm9yIChpPTA7IGkgPCBvdXQubGVuZ3RoOyBpKyspIHtcblx0XHRcdHRtcCA9IGlucHV0W2ldO1xuXHRcdFx0aWYgKCF0bXAgfHwgdHlwZW9mIHRtcCAhPT0gJ29iamVjdCcpIG91dFtpXSA9IHRtcDtcblx0XHRcdGVsc2Ugb3V0W2ldID0gc29ydCh0bXAsIGV4cGVjdFtpXSk7IC8vIG1pZ2h0IG5vdCBiZSByaWdodFxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRmb3IgKGsgaW4gZXhwZWN0KVxuXHRcdFx0a2V5cy5wdXNoKGspO1xuXG5cdFx0Zm9yICg7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGlucHV0LCBrID0ga2V5c1tpXSkpIHtcblx0XHRcdFx0aWYgKCEodG1wID0gaW5wdXRba10pIHx8IHR5cGVvZiB0bXAgIT09ICdvYmplY3QnKSBvdXRba10gPSB0bXA7XG5cdFx0XHRcdGVsc2Ugb3V0W2tdID0gc29ydCh0bXAsIGV4cGVjdFtrXSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChrIGluIGlucHV0KSB7XG5cdFx0XHRpZiAoIW91dC5oYXNPd25Qcm9wZXJ0eShrKSkge1xuXHRcdFx0XHRvdXRba10gPSBpbnB1dFtrXTsgLy8gZXhwZWN0IGRpZG50IGhhdmVcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gb3V0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2lyY3VsYXIoKSB7XG5cdHZhciBjYWNoZSA9IG5ldyBTZXQ7XG5cdHJldHVybiBmdW5jdGlvbiBwcmludChrZXksIHZhbCkge1xuXHRcdGlmICh2YWwgPT09IHZvaWQgMCkgcmV0dXJuICdbX19WT0lEX19dJztcblx0XHRpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgdmFsICE9PSB2YWwpIHJldHVybiAnW19fTkFOX19dJztcblx0XHRpZiAodHlwZW9mIHZhbCA9PT0gJ2JpZ2ludCcpIHJldHVybiB2YWwudG9TdHJpbmcoKTtcblx0XHRpZiAoIXZhbCB8fCB0eXBlb2YgdmFsICE9PSAnb2JqZWN0JykgcmV0dXJuIHZhbDtcblx0XHRpZiAoY2FjaGUuaGFzKHZhbCkpIHJldHVybiAnW0NpcmN1bGFyXSc7XG5cdFx0Y2FjaGUuYWRkKHZhbCk7IHJldHVybiB2YWw7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeShpbnB1dCkge1xuXHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkoaW5wdXQsIGNpcmN1bGFyKCksIDIpLnJlcGxhY2UoL1wiXFxbX19OQU5fX1xcXVwiL2csICdOYU4nKS5yZXBsYWNlKC9cIlxcW19fVk9JRF9fXFxdXCIvZywgJ3VuZGVmaW5lZCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZShpbnB1dCwgZXhwZWN0KSB7XG5cdGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkgJiYgQXJyYXkuaXNBcnJheShpbnB1dCkpIHJldHVybiBhcnJheXMoaW5wdXQsIGV4cGVjdCk7XG5cdGlmIChleHBlY3QgaW5zdGFuY2VvZiBSZWdFeHApIHJldHVybiBjaGFycygnJytpbnB1dCwgJycrZXhwZWN0KTtcblxuXHRsZXQgaXNBID0gaW5wdXQgJiYgdHlwZW9mIGlucHV0ID09ICdvYmplY3QnO1xuXHRsZXQgaXNCID0gZXhwZWN0ICYmIHR5cGVvZiBleHBlY3QgPT0gJ29iamVjdCc7XG5cblx0aWYgKGlzQSAmJiBpc0IpIGlucHV0ID0gc29ydChpbnB1dCwgZXhwZWN0KTtcblx0aWYgKGlzQikgZXhwZWN0ID0gc3RyaW5naWZ5KGV4cGVjdCk7XG5cdGlmIChpc0EpIGlucHV0ID0gc3RyaW5naWZ5KGlucHV0KTtcblxuXHRpZiAoZXhwZWN0ICYmIHR5cGVvZiBleHBlY3QgPT0gJ29iamVjdCcpIHtcblx0XHRpbnB1dCA9IHN0cmluZ2lmeShzb3J0KGlucHV0LCBleHBlY3QpKTtcblx0XHRleHBlY3QgPSBzdHJpbmdpZnkoZXhwZWN0KTtcblx0fVxuXG5cdGlzQSA9IHR5cGVvZiBpbnB1dCA9PSAnc3RyaW5nJztcblx0aXNCID0gdHlwZW9mIGV4cGVjdCA9PSAnc3RyaW5nJztcblxuXHRpZiAoaXNBICYmIC9cXHI/XFxuLy50ZXN0KGlucHV0KSkgcmV0dXJuIGxpbmVzKGlucHV0LCAnJytleHBlY3QpO1xuXHRpZiAoaXNCICYmIC9cXHI/XFxuLy50ZXN0KGV4cGVjdCkpIHJldHVybiBsaW5lcygnJytpbnB1dCwgZXhwZWN0KTtcblx0aWYgKGlzQSAmJiBpc0IpIHJldHVybiBjaGFycyhpbnB1dCwgZXhwZWN0KTtcblxuXHRyZXR1cm4gZGlyZWN0KGlucHV0LCBleHBlY3QpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5sZXQgRk9SQ0VfQ09MT1IsIE5PREVfRElTQUJMRV9DT0xPUlMsIE5PX0NPTE9SLCBURVJNLCBpc1RUWT10cnVlO1xuaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xuXHQoeyBGT1JDRV9DT0xPUiwgTk9ERV9ESVNBQkxFX0NPTE9SUywgTk9fQ09MT1IsIFRFUk0gfSA9IHByb2Nlc3MuZW52IHx8IHt9KTtcblx0aXNUVFkgPSBwcm9jZXNzLnN0ZG91dCAmJiBwcm9jZXNzLnN0ZG91dC5pc1RUWTtcbn1cblxuY29uc3QgJCA9IHtcblx0ZW5hYmxlZDogIU5PREVfRElTQUJMRV9DT0xPUlMgJiYgTk9fQ09MT1IgPT0gbnVsbCAmJiBURVJNICE9PSAnZHVtYicgJiYgKFxuXHRcdEZPUkNFX0NPTE9SICE9IG51bGwgJiYgRk9SQ0VfQ09MT1IgIT09ICcwJyB8fCBpc1RUWVxuXHQpLFxuXG5cdC8vIG1vZGlmaWVyc1xuXHRyZXNldDogaW5pdCgwLCAwKSxcblx0Ym9sZDogaW5pdCgxLCAyMiksXG5cdGRpbTogaW5pdCgyLCAyMiksXG5cdGl0YWxpYzogaW5pdCgzLCAyMyksXG5cdHVuZGVybGluZTogaW5pdCg0LCAyNCksXG5cdGludmVyc2U6IGluaXQoNywgMjcpLFxuXHRoaWRkZW46IGluaXQoOCwgMjgpLFxuXHRzdHJpa2V0aHJvdWdoOiBpbml0KDksIDI5KSxcblxuXHQvLyBjb2xvcnNcblx0YmxhY2s6IGluaXQoMzAsIDM5KSxcblx0cmVkOiBpbml0KDMxLCAzOSksXG5cdGdyZWVuOiBpbml0KDMyLCAzOSksXG5cdHllbGxvdzogaW5pdCgzMywgMzkpLFxuXHRibHVlOiBpbml0KDM0LCAzOSksXG5cdG1hZ2VudGE6IGluaXQoMzUsIDM5KSxcblx0Y3lhbjogaW5pdCgzNiwgMzkpLFxuXHR3aGl0ZTogaW5pdCgzNywgMzkpLFxuXHRncmF5OiBpbml0KDkwLCAzOSksXG5cdGdyZXk6IGluaXQoOTAsIDM5KSxcblxuXHQvLyBiYWNrZ3JvdW5kIGNvbG9yc1xuXHRiZ0JsYWNrOiBpbml0KDQwLCA0OSksXG5cdGJnUmVkOiBpbml0KDQxLCA0OSksXG5cdGJnR3JlZW46IGluaXQoNDIsIDQ5KSxcblx0YmdZZWxsb3c6IGluaXQoNDMsIDQ5KSxcblx0YmdCbHVlOiBpbml0KDQ0LCA0OSksXG5cdGJnTWFnZW50YTogaW5pdCg0NSwgNDkpLFxuXHRiZ0N5YW46IGluaXQoNDYsIDQ5KSxcblx0YmdXaGl0ZTogaW5pdCg0NywgNDkpXG59O1xuXG5mdW5jdGlvbiBydW4oYXJyLCBzdHIpIHtcblx0bGV0IGk9MCwgdG1wLCBiZWc9JycsIGVuZD0nJztcblx0Zm9yICg7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcblx0XHR0bXAgPSBhcnJbaV07XG5cdFx0YmVnICs9IHRtcC5vcGVuO1xuXHRcdGVuZCArPSB0bXAuY2xvc2U7XG5cdFx0aWYgKCEhfnN0ci5pbmRleE9mKHRtcC5jbG9zZSkpIHtcblx0XHRcdHN0ciA9IHN0ci5yZXBsYWNlKHRtcC5yZ3gsIHRtcC5jbG9zZSArIHRtcC5vcGVuKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGJlZyArIHN0ciArIGVuZDtcbn1cblxuZnVuY3Rpb24gY2hhaW4oaGFzLCBrZXlzKSB7XG5cdGxldCBjdHggPSB7IGhhcywga2V5cyB9O1xuXG5cdGN0eC5yZXNldCA9ICQucmVzZXQuYmluZChjdHgpO1xuXHRjdHguYm9sZCA9ICQuYm9sZC5iaW5kKGN0eCk7XG5cdGN0eC5kaW0gPSAkLmRpbS5iaW5kKGN0eCk7XG5cdGN0eC5pdGFsaWMgPSAkLml0YWxpYy5iaW5kKGN0eCk7XG5cdGN0eC51bmRlcmxpbmUgPSAkLnVuZGVybGluZS5iaW5kKGN0eCk7XG5cdGN0eC5pbnZlcnNlID0gJC5pbnZlcnNlLmJpbmQoY3R4KTtcblx0Y3R4LmhpZGRlbiA9ICQuaGlkZGVuLmJpbmQoY3R4KTtcblx0Y3R4LnN0cmlrZXRocm91Z2ggPSAkLnN0cmlrZXRocm91Z2guYmluZChjdHgpO1xuXG5cdGN0eC5ibGFjayA9ICQuYmxhY2suYmluZChjdHgpO1xuXHRjdHgucmVkID0gJC5yZWQuYmluZChjdHgpO1xuXHRjdHguZ3JlZW4gPSAkLmdyZWVuLmJpbmQoY3R4KTtcblx0Y3R4LnllbGxvdyA9ICQueWVsbG93LmJpbmQoY3R4KTtcblx0Y3R4LmJsdWUgPSAkLmJsdWUuYmluZChjdHgpO1xuXHRjdHgubWFnZW50YSA9ICQubWFnZW50YS5iaW5kKGN0eCk7XG5cdGN0eC5jeWFuID0gJC5jeWFuLmJpbmQoY3R4KTtcblx0Y3R4LndoaXRlID0gJC53aGl0ZS5iaW5kKGN0eCk7XG5cdGN0eC5ncmF5ID0gJC5ncmF5LmJpbmQoY3R4KTtcblx0Y3R4LmdyZXkgPSAkLmdyZXkuYmluZChjdHgpO1xuXG5cdGN0eC5iZ0JsYWNrID0gJC5iZ0JsYWNrLmJpbmQoY3R4KTtcblx0Y3R4LmJnUmVkID0gJC5iZ1JlZC5iaW5kKGN0eCk7XG5cdGN0eC5iZ0dyZWVuID0gJC5iZ0dyZWVuLmJpbmQoY3R4KTtcblx0Y3R4LmJnWWVsbG93ID0gJC5iZ1llbGxvdy5iaW5kKGN0eCk7XG5cdGN0eC5iZ0JsdWUgPSAkLmJnQmx1ZS5iaW5kKGN0eCk7XG5cdGN0eC5iZ01hZ2VudGEgPSAkLmJnTWFnZW50YS5iaW5kKGN0eCk7XG5cdGN0eC5iZ0N5YW4gPSAkLmJnQ3lhbi5iaW5kKGN0eCk7XG5cdGN0eC5iZ1doaXRlID0gJC5iZ1doaXRlLmJpbmQoY3R4KTtcblxuXHRyZXR1cm4gY3R4O1xufVxuXG5mdW5jdGlvbiBpbml0KG9wZW4sIGNsb3NlKSB7XG5cdGxldCBibGsgPSB7XG5cdFx0b3BlbjogYFxceDFiWyR7b3Blbn1tYCxcblx0XHRjbG9zZTogYFxceDFiWyR7Y2xvc2V9bWAsXG5cdFx0cmd4OiBuZXcgUmVnRXhwKGBcXFxceDFiXFxcXFske2Nsb3NlfW1gLCAnZycpXG5cdH07XG5cdHJldHVybiBmdW5jdGlvbiAodHh0KSB7XG5cdFx0aWYgKHRoaXMgIT09IHZvaWQgMCAmJiB0aGlzLmhhcyAhPT0gdm9pZCAwKSB7XG5cdFx0XHQhIX50aGlzLmhhcy5pbmRleE9mKG9wZW4pIHx8ICh0aGlzLmhhcy5wdXNoKG9wZW4pLHRoaXMua2V5cy5wdXNoKGJsaykpO1xuXHRcdFx0cmV0dXJuIHR4dCA9PT0gdm9pZCAwID8gdGhpcyA6ICQuZW5hYmxlZCA/IHJ1bih0aGlzLmtleXMsIHR4dCsnJykgOiB0eHQrJyc7XG5cdFx0fVxuXHRcdHJldHVybiB0eHQgPT09IHZvaWQgMCA/IGNoYWluKFtvcGVuXSwgW2Jsa10pIDogJC5lbmFibGVkID8gcnVuKFtibGtdLCB0eHQrJycpIDogdHh0KycnO1xuXHR9O1xufVxuXG5leHBvcnQgZGVmYXVsdCAkO1xuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJmb3JtYXRBcmdzIiwic2F2ZSIsImxvYWQiLCJ1c2VDb2xvcnMiLCJzdG9yYWdlIiwibG9jYWxzdG9yYWdlIiwiZGVzdHJveSIsIndhcm5lZCIsImNvbnNvbGUiLCJ3YXJuIiwiY29sb3JzIiwid2luZG93IiwicHJvY2VzcyIsInR5cGUiLCJfX253anMiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0b0xvd2VyQ2FzZSIsIm1hdGNoIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJzdHlsZSIsIldlYmtpdEFwcGVhcmFuY2UiLCJmaXJlYnVnIiwiZXhjZXB0aW9uIiwidGFibGUiLCJwYXJzZUludCIsIlJlZ0V4cCIsIiQxIiwiYXJncyIsIm5hbWVzcGFjZSIsIm1vZHVsZSIsImh1bWFuaXplIiwiZGlmZiIsImMiLCJjb2xvciIsInNwbGljZSIsImluZGV4IiwibGFzdEMiLCJyZXBsYWNlIiwibG9nIiwiZGVidWciLCJuYW1lc3BhY2VzIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJlcnJvciIsInIiLCJnZXRJdGVtIiwiZW52IiwiREVCVUciLCJsb2NhbFN0b3JhZ2UiLCJyZXF1aXJlIiwiZm9ybWF0dGVycyIsImoiLCJ2IiwiSlNPTiIsInN0cmluZ2lmeSIsIm1lc3NhZ2UiLCJzZXR1cCIsImNyZWF0ZURlYnVnIiwiZGVmYXVsdCIsImNvZXJjZSIsImRpc2FibGUiLCJlbmFibGUiLCJlbmFibGVkIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJuYW1lcyIsInNraXBzIiwic2VsZWN0Q29sb3IiLCJoYXNoIiwiaSIsImxlbmd0aCIsImNoYXJDb2RlQXQiLCJNYXRoIiwiYWJzIiwicHJldlRpbWUiLCJlbmFibGVPdmVycmlkZSIsIm5hbWVzcGFjZXNDYWNoZSIsImVuYWJsZWRDYWNoZSIsIl9sZW4iLCJhcmd1bWVudHMiLCJBcnJheSIsIl9rZXkiLCJzZWxmIiwiY3VyciIsIk51bWJlciIsIkRhdGUiLCJtcyIsInByZXYiLCJ1bnNoaWZ0IiwiZm9ybWF0IiwiZm9ybWF0dGVyIiwidmFsIiwiY2FsbCIsImxvZ0ZuIiwiYXBwbHkiLCJleHRlbmQiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJnZXQiLCJzZXQiLCJpbml0IiwiZGVsaW1pdGVyIiwibmV3RGVidWciLCJzcGxpdCIsImxlbiIsInB1c2giLCJzbGljZSIsIm1hcCIsInRvTmFtZXNwYWNlIiwiam9pbiIsIm5hbWUiLCJ0ZXN0IiwicmVnZXhwIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJFcnJvciIsInN0YWNrIiwiaGFzT3duIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJ0b1N0ciIsImdPUEQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJpc0FycmF5IiwiYXJyIiwiaXNQbGFpbk9iamVjdCIsIm9iaiIsImhhc093bkNvbnN0cnVjdG9yIiwiaGFzSXNQcm90b3R5cGVPZiIsImNvbnN0cnVjdG9yIiwic2V0UHJvcGVydHkiLCJ0YXJnZXQiLCJvcHRpb25zIiwidmFsdWUiLCJuZXdWYWx1ZSIsIndyaXRhYmxlIiwiZ2V0UHJvcGVydHkiLCJzcmMiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsImRlZXAiLCJDT01NRU5UX1JFR0VYIiwiTkVXTElORV9SRUdFWCIsIldISVRFU1BBQ0VfUkVHRVgiLCJQUk9QRVJUWV9SRUdFWCIsIkNPTE9OX1JFR0VYIiwiVkFMVUVfUkVHRVgiLCJTRU1JQ09MT05fUkVHRVgiLCJUUklNX1JFR0VYIiwiTkVXTElORSIsIkZPUldBUkRfU0xBU0giLCJBU1RFUklTSyIsIkVNUFRZX1NUUklORyIsIlRZUEVfQ09NTUVOVCIsIlRZUEVfREVDTEFSQVRJT04iLCJUeXBlRXJyb3IiLCJsaW5lbm8iLCJjb2x1bW4iLCJ1cGRhdGVQb3NpdGlvbiIsInN0ciIsImxpbmVzIiwibGFzdEluZGV4T2YiLCJwb3NpdGlvbiIsInN0YXJ0IiwibGluZSIsIm5vZGUiLCJQb3NpdGlvbiIsIndoaXRlc3BhY2UiLCJlbmQiLCJzb3VyY2UiLCJjb250ZW50IiwiZXJyb3JzTGlzdCIsIm1zZyIsImVyciIsInJlYXNvbiIsImZpbGVuYW1lIiwic2lsZW50IiwicmUiLCJtIiwiZXhlYyIsImNvbW1lbnRzIiwicnVsZXMiLCJjb21tZW50IiwicG9zIiwiY2hhckF0IiwiZGVjbGFyYXRpb24iLCJwcm9wIiwicmV0IiwicHJvcGVydHkiLCJ0cmltIiwiZGVjbGFyYXRpb25zIiwiZGVjbHMiLCJkZWNsIiwiaXNCdWZmZXIiLCJzIiwiaCIsImQiLCJ3IiwieSIsInBhcnNlIiwiaXNGaW5pdGUiLCJsb25nIiwiZm10TG9uZyIsImZtdFNob3J0IiwiU3RyaW5nIiwibiIsInBhcnNlRmxvYXQiLCJ1bmRlZmluZWQiLCJtc0FicyIsInJvdW5kIiwicGx1cmFsIiwiaXNQbHVyYWwiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInNob3VsZFVzZU5hdGl2ZSIsImFzc2lnbiIsInRlc3QxIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwib3JkZXIyIiwidGVzdDMiLCJsZXR0ZXIiLCJmcm9tIiwidG8iLCJzeW1ib2xzIiwicHJpbnRXYXJuaW5nIiwiTk9ERV9FTlYiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImxvZ2dlZFR5cGVGYWlsdXJlcyIsImhhcyIsInRleHQiLCJ4IiwiY2hlY2tQcm9wVHlwZXMiLCJ0eXBlU3BlY3MiLCJ2YWx1ZXMiLCJsb2NhdGlvbiIsImNvbXBvbmVudE5hbWUiLCJnZXRTdGFjayIsInR5cGVTcGVjTmFtZSIsImV4IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJSZWFjdElzIiwiZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbCIsImlzVmFsaWRFbGVtZW50IiwidGhyb3dPbkRpcmVjdEFjY2VzcyIsIklURVJBVE9SX1NZTUJPTCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiRkFVWF9JVEVSQVRPUl9TWU1CT0wiLCJnZXRJdGVyYXRvckZuIiwibWF5YmVJdGVyYWJsZSIsIml0ZXJhdG9yRm4iLCJBTk9OWU1PVVMiLCJSZWFjdFByb3BUeXBlcyIsImFycmF5IiwiY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIiLCJiaWdpbnQiLCJib29sIiwiZnVuYyIsIm51bWJlciIsIm9iamVjdCIsInN0cmluZyIsInN5bWJvbCIsImFueSIsImNyZWF0ZUFueVR5cGVDaGVja2VyIiwiYXJyYXlPZiIsImNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlciIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIiLCJlbGVtZW50VHlwZSIsImNyZWF0ZUVsZW1lbnRUeXBlVHlwZUNoZWNrZXIiLCJpbnN0YW5jZU9mIiwiY3JlYXRlSW5zdGFuY2VUeXBlQ2hlY2tlciIsImNyZWF0ZU5vZGVDaGVja2VyIiwib2JqZWN0T2YiLCJjcmVhdGVPYmplY3RPZlR5cGVDaGVja2VyIiwib25lT2YiLCJjcmVhdGVFbnVtVHlwZUNoZWNrZXIiLCJvbmVPZlR5cGUiLCJjcmVhdGVVbmlvblR5cGVDaGVja2VyIiwic2hhcGUiLCJjcmVhdGVTaGFwZVR5cGVDaGVja2VyIiwiZXhhY3QiLCJjcmVhdGVTdHJpY3RTaGFwZVR5cGVDaGVja2VyIiwiaXMiLCJQcm9wVHlwZUVycm9yIiwiZGF0YSIsImNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyIiwidmFsaWRhdGUiLCJtYW51YWxQcm9wVHlwZUNhbGxDYWNoZSIsIm1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50IiwiY2hlY2tUeXBlIiwiaXNSZXF1aXJlZCIsInByb3BzIiwicHJvcE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJjYWNoZUtleSIsImNoYWluZWRDaGVja1R5cGUiLCJiaW5kIiwiZXhwZWN0ZWRUeXBlIiwicHJvcFZhbHVlIiwicHJvcFR5cGUiLCJnZXRQcm9wVHlwZSIsInByZWNpc2VUeXBlIiwiZ2V0UHJlY2lzZVR5cGUiLCJ0eXBlQ2hlY2tlciIsImlzVmFsaWRFbGVtZW50VHlwZSIsImV4cGVjdGVkQ2xhc3MiLCJleHBlY3RlZENsYXNzTmFtZSIsImFjdHVhbENsYXNzTmFtZSIsImdldENsYXNzTmFtZSIsImV4cGVjdGVkVmFsdWVzIiwidmFsdWVzU3RyaW5nIiwicmVwbGFjZXIiLCJhcnJheU9mVHlwZUNoZWNrZXJzIiwiY2hlY2tlciIsImdldFBvc3RmaXhGb3JUeXBlV2FybmluZyIsImV4cGVjdGVkVHlwZXMiLCJjaGVja2VyUmVzdWx0IiwiZXhwZWN0ZWRUeXBlc01lc3NhZ2UiLCJpc05vZGUiLCJpbnZhbGlkVmFsaWRhdG9yRXJyb3IiLCJzaGFwZVR5cGVzIiwiYWxsS2V5cyIsImV2ZXJ5Iiwic3RlcCIsImVudHJpZXMiLCJuZXh0IiwiZG9uZSIsImVudHJ5IiwiaXNTeW1ib2wiLCJQcm9wVHlwZXMiLCJpc0VsZW1lbnQiLCJGdW5jdGlvbiIsImhhc1N5bWJvbCIsImZvciIsIlJFQUNUX0VMRU1FTlRfVFlQRSIsIlJFQUNUX1BPUlRBTF9UWVBFIiwiUkVBQ1RfRlJBR01FTlRfVFlQRSIsIlJFQUNUX1NUUklDVF9NT0RFX1RZUEUiLCJSRUFDVF9QUk9GSUxFUl9UWVBFIiwiUkVBQ1RfUFJPVklERVJfVFlQRSIsIlJFQUNUX0NPTlRFWFRfVFlQRSIsIlJFQUNUX0FTWU5DX01PREVfVFlQRSIsIlJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFIiwiUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSIsIlJFQUNUX1NVU1BFTlNFX1RZUEUiLCJSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUiLCJSRUFDVF9NRU1PX1RZUEUiLCJSRUFDVF9MQVpZX1RZUEUiLCJSRUFDVF9CTE9DS19UWVBFIiwiUkVBQ1RfRlVOREFNRU5UQUxfVFlQRSIsIlJFQUNUX1JFU1BPTkRFUl9UWVBFIiwiUkVBQ1RfU0NPUEVfVFlQRSIsIiQkdHlwZW9mIiwidHlwZU9mIiwiJCR0eXBlb2ZUeXBlIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiRm9yd2FyZFJlZiIsIkZyYWdtZW50IiwiTGF6eSIsIk1lbW8iLCJQb3J0YWwiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQXN5bmNNb2RlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc01lbW8iLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiUkVBQ1RfU0VSVkVSX0NPTlRFWFRfVFlQRSIsIlJFQUNUX09GRlNDUkVFTl9UWVBFIiwiZW5hYmxlU2NvcGVBUEkiLCJlbmFibGVDYWNoZUVsZW1lbnQiLCJlbmFibGVUcmFuc2l0aW9uVHJhY2luZyIsImVuYWJsZUxlZ2FjeUhpZGRlbiIsImVuYWJsZURlYnVnVHJhY2luZyIsIlJFQUNUX01PRFVMRV9SRUZFUkVOQ0UiLCJnZXRNb2R1bGVJZCIsIlN1c3BlbnNlTGlzdCIsImhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQ29uY3VycmVudE1vZGUiLCJpc1N1c3BlbnNlTGlzdCIsIlN0eWxlVG9PYmplY3QiLCJvdXRwdXQiLCJoYXNJdGVyYXRvciIsImJhaWwiLCJ0b2tlbnMiLCJpbnB1dCIsImluZGV4T2YiLCJ0b2tlbiIsInNldHRpbmdzIiwicGFkUmlnaHQiLCJwYWRMZWZ0IiwiY3JlYXRlRWxlbWVudCIsImRlY29kZU5hbWVkQ2hhcmFjdGVyUmVmZXJlbmNlIiwiY2hhcmFjdGVyUmVmZXJlbmNlIiwiaW5uZXJIVE1MIiwiY2hhciIsInRleHRDb250ZW50IiwidGhpbmciLCJ2aXNpdCIsIm93biIsImRlZmluaXRpb25zIiwidHJlZSIsImNhY2hlIiwiY3JlYXRlIiwiZGVmaW5pdGlvbiIsImlkIiwiY2xlYW4iLCJpZGVudGlmaWVyIiwidG9VcHBlckNhc2UiLCJvayIsImFzc2VydCIsInByZXByb2Nlc3MiLCJwb3N0cHJvY2VzcyIsImRlY29kZU51bWVyaWNDaGFyYWN0ZXJSZWZlcmVuY2UiLCJkZWNvZGVTdHJpbmciLCJub3JtYWxpemVJZGVudGlmaWVyIiwiY29kZXMiLCJjb25zdGFudHMiLCJ0eXBlcyIsInN0cmluZ2lmeVBvc2l0aW9uIiwiZnJvbU1hcmtkb3duIiwiZW5jb2RpbmciLCJjb21waWxlciIsIndyaXRlIiwiY29uZmlnIiwidHJhbnNmb3JtcyIsImNhbkNvbnRhaW5Fb2xzIiwiZW50ZXIiLCJhdXRvbGluayIsIm9wZW5lciIsImxpbmsiLCJhdXRvbGlua1Byb3RvY29sIiwib25lbnRlcmRhdGEiLCJhdXRvbGlua0VtYWlsIiwiYXR4SGVhZGluZyIsImhlYWRpbmciLCJibG9ja1F1b3RlIiwiY2hhcmFjdGVyRXNjYXBlIiwiY29kZUZlbmNlZCIsImNvZGVGbG93IiwiY29kZUZlbmNlZEZlbmNlSW5mbyIsImJ1ZmZlciIsImNvZGVGZW5jZWRGZW5jZU1ldGEiLCJjb2RlSW5kZW50ZWQiLCJjb2RlVGV4dCIsImNvZGVUZXh0RGF0YSIsImNvZGVGbG93VmFsdWUiLCJkZWZpbml0aW9uRGVzdGluYXRpb25TdHJpbmciLCJkZWZpbml0aW9uTGFiZWxTdHJpbmciLCJkZWZpbml0aW9uVGl0bGVTdHJpbmciLCJlbXBoYXNpcyIsImhhcmRCcmVha0VzY2FwZSIsImhhcmRCcmVhayIsImhhcmRCcmVha1RyYWlsaW5nIiwiaHRtbEZsb3ciLCJodG1sIiwiaHRtbEZsb3dEYXRhIiwiaHRtbFRleHQiLCJodG1sVGV4dERhdGEiLCJpbWFnZSIsImxhYmVsIiwibGlzdEl0ZW0iLCJsaXN0SXRlbVZhbHVlIiwib25lbnRlcmxpc3RpdGVtdmFsdWUiLCJsaXN0T3JkZXJlZCIsImxpc3QiLCJvbmVudGVybGlzdG9yZGVyZWQiLCJsaXN0VW5vcmRlcmVkIiwicGFyYWdyYXBoIiwicmVmZXJlbmNlIiwib25lbnRlcnJlZmVyZW5jZSIsInJlZmVyZW5jZVN0cmluZyIsInJlc291cmNlRGVzdGluYXRpb25TdHJpbmciLCJyZXNvdXJjZVRpdGxlU3RyaW5nIiwic2V0ZXh0SGVhZGluZyIsInN0cm9uZyIsInRoZW1hdGljQnJlYWsiLCJleGl0IiwiY2xvc2VyIiwiYXR4SGVhZGluZ1NlcXVlbmNlIiwib25leGl0YXR4aGVhZGluZ3NlcXVlbmNlIiwib25leGl0YXV0b2xpbmtlbWFpbCIsIm9uZXhpdGF1dG9saW5rcHJvdG9jb2wiLCJjaGFyYWN0ZXJFc2NhcGVWYWx1ZSIsIm9uZXhpdGRhdGEiLCJjaGFyYWN0ZXJSZWZlcmVuY2VNYXJrZXJIZXhhZGVjaW1hbCIsIm9uZXhpdGNoYXJhY3RlcnJlZmVyZW5jZW1hcmtlciIsImNoYXJhY3RlclJlZmVyZW5jZU1hcmtlck51bWVyaWMiLCJjaGFyYWN0ZXJSZWZlcmVuY2VWYWx1ZSIsIm9uZXhpdGNoYXJhY3RlcnJlZmVyZW5jZXZhbHVlIiwib25leGl0Y29kZWZlbmNlZCIsImNvZGVGZW5jZWRGZW5jZSIsIm9uZXhpdGNvZGVmZW5jZWRmZW5jZSIsIm9uZXhpdGNvZGVmZW5jZWRmZW5jZWluZm8iLCJvbmV4aXRjb2RlZmVuY2VkZmVuY2VtZXRhIiwib25leGl0Y29kZWluZGVudGVkIiwib25leGl0Y29kZXRleHQiLCJvbmV4aXRkZWZpbml0aW9uZGVzdGluYXRpb25zdHJpbmciLCJvbmV4aXRkZWZpbml0aW9ubGFiZWxzdHJpbmciLCJvbmV4aXRkZWZpbml0aW9udGl0bGVzdHJpbmciLCJvbmV4aXRoYXJkYnJlYWsiLCJvbmV4aXRodG1sZmxvdyIsIm9uZXhpdGh0bWx0ZXh0Iiwib25leGl0aW1hZ2UiLCJvbmV4aXRsYWJlbCIsImxhYmVsVGV4dCIsIm9uZXhpdGxhYmVsdGV4dCIsImxpbmVFbmRpbmciLCJvbmV4aXRsaW5lZW5kaW5nIiwib25leGl0bGluayIsIm9uZXhpdHJlZmVyZW5jZXN0cmluZyIsIm9uZXhpdHJlc291cmNlZGVzdGluYXRpb25zdHJpbmciLCJvbmV4aXRyZXNvdXJjZXRpdGxlc3RyaW5nIiwicmVzb3VyY2UiLCJvbmV4aXRyZXNvdXJjZSIsIm9uZXhpdHNldGV4dGhlYWRpbmciLCJzZXRleHRIZWFkaW5nTGluZVNlcXVlbmNlIiwib25leGl0c2V0ZXh0aGVhZGluZ2xpbmVzZXF1ZW5jZSIsInNldGV4dEhlYWRpbmdUZXh0Iiwib25leGl0c2V0ZXh0aGVhZGluZ3RleHQiLCJjb25maWd1cmUiLCJtZGFzdEV4dGVuc2lvbnMiLCJjb21waWxlIiwiZXZlbnRzIiwiY2hpbGRyZW4iLCJjb250ZXh0IiwidG9rZW5TdGFjayIsInJlc3VtZSIsInNldERhdGEiLCJnZXREYXRhIiwibGlzdFN0YWNrIiwidGFpbCIsInBvcCIsInByZXBhcmVMaXN0IiwiaGFuZGxlciIsInNsaWNlU2VyaWFsaXplIiwiZGVmYXVsdE9uRXJyb3IiLCJwb2ludCIsIm9mZnNldCIsImNvbnRhaW5lckJhbGFuY2UiLCJsaXN0U3ByZWFkIiwibGluZUluZGV4IiwiZmlyc3RCbGFua0xpbmVJbmRleCIsImF0TWFya2VyIiwiZXZlbnQiLCJsaW5lRW5kaW5nQmxhbmsiLCJsaW5lUHJlZml4IiwibGlzdEl0ZW1NYXJrZXIiLCJsaXN0SXRlbVByZWZpeCIsImxpc3RJdGVtUHJlZml4V2hpdGVzcGFjZSIsInRhaWxJbmRleCIsInRhaWxFdmVudCIsImJsb2NrUXVvdGVQcmVmaXgiLCJibG9ja1F1b3RlUHJlZml4V2hpdGVzcGFjZSIsImJsb2NrUXVvdGVNYXJrZXIiLCJsaXN0SXRlbUluZGVudCIsIl9zcHJlYWQiLCJhbmQiLCJvcGVuIiwiZXJyb3JIYW5kbGVyIiwicGFyZW50IiwiY2xvc2UiLCJvbkV4aXRFcnJvciIsImFuY2VzdG9yIiwibnVtZXJpY0Jhc2VEZWNpbWFsIiwibGFuZyIsIm1ldGEiLCJ0aXRsZSIsInVybCIsImRlcHRoIiwiZXF1YWxzVG8iLCJpbmNsdWRlcyIsInJlZmVyZW5jZVR5cGUiLCJmcmFnbWVudCIsImFsdCIsIm51bWVyaWNCYXNlSGV4YWRlY2ltYWwiLCJyZXN1bHQiLCJvcmRlcmVkIiwic3ByZWFkIiwiY2hlY2tlZCIsImNvbWJpbmVkIiwiZXh0ZW5zaW9ucyIsImV4dGVuc2lvbiIsInJpZ2h0IiwibGVmdCIsIm5vcm1hbGl6ZVVyaSIsImZvb3RlciIsInN0YXRlIiwibGlzdEl0ZW1zIiwiZm9vdG5vdGVPcmRlciIsImRlZiIsImZvb3Rub3RlQnlJZCIsImFsbCIsInNhZmVJZCIsInJlZmVyZW5jZUluZGV4IiwiYmFja1JlZmVyZW5jZXMiLCJmb290bm90ZUNvdW50cyIsImJhY2tSZWZlcmVuY2UiLCJ0YWdOYW1lIiwicHJvcGVydGllcyIsImhyZWYiLCJjbG9iYmVyUHJlZml4IiwiZGF0YUZvb3Rub3RlQmFja3JlZiIsImNsYXNzTmFtZSIsImFyaWFMYWJlbCIsImZvb3Rub3RlQmFja0xhYmVsIiwidGFpbFRhaWwiLCJ3cmFwIiwicGF0Y2giLCJkYXRhRm9vdG5vdGVzIiwiZm9vdG5vdGVMYWJlbFRhZ05hbWUiLCJmb290bm90ZUxhYmVsUHJvcGVydGllcyIsImZvb3Rub3RlTGFiZWwiLCJibG9ja3F1b3RlIiwiYXBwbHlEYXRhIiwiY29kZSIsInN0cmlrZXRocm91Z2giLCJmb290bm90ZVJlZmVyZW5jZSIsImNvdW50ZXIiLCJyZXVzZUNvdW50ZXIiLCJkYXRhRm9vdG5vdGVSZWYiLCJhcmlhRGVzY3JpYmVkQnkiLCJzdXAiLCJmb290bm90ZSIsIm5vIiwiZGFuZ2Vyb3VzIiwicmV2ZXJ0IiwiaW1hZ2VSZWZlcmVuY2UiLCJpbmxpbmVDb2RlIiwibGlua1JlZmVyZW5jZSIsInJvb3QiLCJ0YWJsZVJvdyIsInRhYmxlQ2VsbCIsImhhbmRsZXJzIiwiYnJlYWsiLCJkZWxldGUiLCJ0b21sIiwiaWdub3JlIiwieWFtbCIsImZvb3Rub3RlRGVmaW5pdGlvbiIsInJlc3VsdHMiLCJsb29zZSIsImxpc3RMb29zZSIsImxpc3RJdGVtTG9vc2UiLCJoZWFkIiwiZGlzYWJsZWQiLCJjaGlsZCIsInNpYmxpbmdzIiwicm93SW5kZXgiLCJhbGlnbiIsImNlbGxJbmRleCIsImNlbGxzIiwiY2VsbCIsImFsaWduVmFsdWUiLCJwb2ludFN0YXJ0IiwicG9pbnRFbmQiLCJyb3dzIiwiZmlyc3RSb3ciLCJzaGlmdCIsInRhYmxlQ29udGVudCIsImJvZHkiLCJ0cmltTGluZXMiLCJjcmVhdGVTdGF0ZSIsInRvSGFzdCIsIm9uZSIsImZvb3QiLCJzdWJ0eXBlIiwic3VmZml4IiwiY29udGVudHMiLCJnZW5lcmF0ZWQiLCJhbGxvd0Rhbmdlcm91c0h0bWwiLCJ1bmtub3duSGFuZGxlciIsInBhc3NUaHJvdWdoIiwib25lQm91bmQiLCJhbGxCb3VuZCIsImF1Z21lbnQiLCJoTmFtZSIsImhQcm9wZXJ0aWVzIiwiaENoaWxkcmVuIiwiY3R4IiwiZGVmYXVsdFVua25vd25IYW5kbGVyIiwibm9kZXMiLCJpbmNsdWRlSW1hZ2VBbHQiLCJCb29sZWFuIiwiY2xhc3NpZnlDaGFyYWN0ZXIiLCJyZXNvbHZlQWxsIiwiYXR0ZW50aW9uIiwidG9rZW5pemUiLCJ0b2tlbml6ZUF0dGVudGlvbiIsInJlc29sdmVBbGxBdHRlbnRpb24iLCJncm91cCIsIm9wZW5pbmdTZXF1ZW5jZSIsImNsb3NpbmdTZXF1ZW5jZSIsInVzZSIsIm5leHRFdmVudHMiLCJfY2xvc2UiLCJfb3BlbiIsIm1vdmVQb2ludCIsInN0cm9uZ1NlcXVlbmNlIiwiZW1waGFzaXNTZXF1ZW5jZSIsInN0cm9uZ1RleHQiLCJlbXBoYXNpc1RleHQiLCJwYXJzZXIiLCJjb25zdHJ1Y3RzIiwiaW5zaWRlU3BhbiIsIm51bGwiLCJlZmZlY3RzIiwiYXR0ZW50aW9uTWFya2VycyIsInByZXZpb3VzIiwiYmVmb3JlIiwibWFya2VyIiwiYXN0ZXJpc2siLCJ1bmRlcnNjb3JlIiwic2VxdWVuY2UiLCJjb25zdW1lIiwiYWZ0ZXIiLCJjaGFyYWN0ZXJHcm91cFB1bmN0dWF0aW9uIiwiX2J1ZmZlckluZGV4IiwiYXNjaWlBbHBoYSIsImFzY2lpQWxwaGFudW1lcmljIiwiYXNjaWlBdGV4dCIsImFzY2lpQ29udHJvbCIsInRva2VuaXplQXV0b2xpbmsiLCJub2siLCJzaXplIiwibGVzc1RoYW4iLCJhdXRvbGlua01hcmtlciIsInNjaGVtZU9yRW1haWxBdGV4dCIsImVtYWlsQXRleHQiLCJwbHVzU2lnbiIsImRhc2giLCJkb3QiLCJzY2hlbWVJbnNpZGVPckVtYWlsQXRleHQiLCJjb2xvbiIsInVybEluc2lkZSIsImF1dG9saW5rU2NoZW1lU2l6ZU1heCIsImdyZWF0ZXJUaGFuIiwiZW9mIiwic3BhY2UiLCJhdFNpZ24iLCJlbWFpbEF0U2lnbk9yRG90IiwiZW1haWxMYWJlbCIsImVtYWlsVmFsdWUiLCJhdXRvbGlua0RvbWFpblNpemVNYXgiLCJmYWN0b3J5U3BhY2UiLCJtYXJrZG93bkxpbmVFbmRpbmciLCJibGFua0xpbmUiLCJ0b2tlbml6ZUJsYW5rTGluZSIsInBhcnRpYWwiLCJhZnRlcldoaXRlc3BhY2UiLCJtYXJrZG93blNwYWNlIiwidG9rZW5pemVCbG9ja1F1b3RlU3RhcnQiLCJjb250aW51YXRpb24iLCJ0b2tlbml6ZUJsb2NrUXVvdGVDb250aW51YXRpb24iLCJjb250YWluZXJTdGF0ZSIsIl9jb250YWluZXIiLCJhdHRlbXB0IiwidGFiU2l6ZSIsImFzY2lpUHVuY3R1YXRpb24iLCJ0b2tlbml6ZUNoYXJhY3RlckVzY2FwZSIsImJhY2tzbGFzaCIsImVzY2FwZU1hcmtlciIsImFzY2lpRGlnaXQiLCJhc2NpaUhleERpZ2l0IiwidG9rZW5pemVDaGFyYWN0ZXJSZWZlcmVuY2UiLCJtYXgiLCJhbXBlcnNhbmQiLCJjaGFyYWN0ZXJSZWZlcmVuY2VNYXJrZXIiLCJudW1iZXJTaWduIiwibnVtZXJpYyIsImNoYXJhY3RlclJlZmVyZW5jZU5hbWVkU2l6ZU1heCIsInVwcGVyY2FzZVgiLCJsb3dlcmNhc2VYIiwiY2hhcmFjdGVyUmVmZXJlbmNlSGV4YWRlY2ltYWxTaXplTWF4IiwiY2hhcmFjdGVyUmVmZXJlbmNlRGVjaW1hbFNpemVNYXgiLCJzZW1pY29sb24iLCJtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlIiwidG9rZW5pemVDb2RlRmVuY2VkIiwiY29uY3JldGUiLCJjbG9zaW5nRmVuY2VDb25zdHJ1Y3QiLCJ0b2tlbml6ZUNsb3NpbmdGZW5jZSIsIm5vbkxhenlMaW5lIiwidG9rZW5pemVOb25MYXp5TGluZSIsImluaXRpYWxQcmVmaXgiLCJzaXplT3BlbiIsImdyYXZlQWNjZW50IiwidGlsZGUiLCJjb2RlRmVuY2VkRmVuY2VTZXF1ZW5jZSIsInNlcXVlbmNlT3BlbiIsImNvZGVGZW5jZWRTZXF1ZW5jZVNpemVNaW4iLCJpbmZvT3BlbiIsIm9wZW5BZnRlciIsImNodW5rU3RyaW5nIiwiY29udGVudFR5cGUiLCJjb250ZW50VHlwZVN0cmluZyIsImluZm8iLCJpbmZvQWZ0ZXIiLCJpbnRlcnJ1cHQiLCJjb250ZW50U3RhcnQiLCJjb250ZW50Q29udGludWUiLCJsaW5lU3RhcnQiLCJsYXp5Iiwibm93IiwiY2xvc2luZ1NlcXVlbmNlU3RhcnQiLCJjbG9zaW5nU2VxdWVuY2VFbmQiLCJ0b2tlbml6ZUNvZGVJbmRlbnRlZCIsImluZGVudGVkQ29udGVudCIsInRva2VuaXplSW5kZW50ZWRDb250ZW50IiwiYWZ0ZXJTdGFydFByZWZpeCIsImFmdGVyUHJlZml4IiwidG9rZW5pemVDb2RlVGV4dCIsInJlc29sdmUiLCJyZXNvbHZlQ29kZVRleHQiLCJ0YWlsRXhpdEluZGV4IiwiaGVhZEVudGVySW5kZXgiLCJjb2RlVGV4dFBhZGRpbmciLCJjb2RlVGV4dFNlcXVlbmNlIiwiZ2FwIiwic3VidG9rZW5pemUiLCJ0b2tlbml6ZUNvbnRlbnQiLCJyZXNvbHZlQ29udGVudCIsImNvbnRpbnVhdGlvbkNvbnN0cnVjdCIsInRva2VuaXplQ29udGludWF0aW9uIiwiY2h1bmtDb250ZW50IiwiY29udGVudFR5cGVDb250ZW50IiwiY29udGVudEVuZCIsImNoZWNrIiwic3RhcnRMb29rYWhlYWQiLCJwcmVmaXhlZCIsImZsb3ciLCJmYWN0b3J5RGVzdGluYXRpb24iLCJmYWN0b3J5TGFiZWwiLCJmYWN0b3J5VGl0bGUiLCJmYWN0b3J5V2hpdGVzcGFjZSIsInRva2VuaXplRGVmaW5pdGlvbiIsInRpdGxlQ29uc3RydWN0IiwidG9rZW5pemVUaXRsZSIsImxlZnRTcXVhcmVCcmFja2V0IiwibGFiZWxBZnRlciIsImRlZmluaXRpb25MYWJlbCIsImRlZmluaXRpb25MYWJlbE1hcmtlciIsImRlZmluaXRpb25NYXJrZXIiLCJkZWZpbml0aW9uRGVzdGluYXRpb24iLCJkZWZpbml0aW9uRGVzdGluYXRpb25MaXRlcmFsIiwiZGVmaW5pdGlvbkRlc3RpbmF0aW9uTGl0ZXJhbE1hcmtlciIsImRlZmluaXRpb25EZXN0aW5hdGlvblJhdyIsImRlZmluZWQiLCJxdW90YXRpb25NYXJrIiwiYXBvc3Ryb3BoZSIsImxlZnRQYXJlbnRoZXNpcyIsImRlZmluaXRpb25UaXRsZSIsImRlZmluaXRpb25UaXRsZU1hcmtlciIsInRva2VuaXplSGFyZEJyZWFrRXNjYXBlIiwiaGVhZGluZ0F0eCIsInRva2VuaXplSGVhZGluZ0F0eCIsInJlc29sdmVIZWFkaW5nQXR4IiwiYXR4SGVhZGluZ1RleHQiLCJjaHVua1RleHQiLCJjb250ZW50VHlwZVRleHQiLCJmZW5jZU9wZW5JbnNpZGUiLCJhdHhIZWFkaW5nT3BlbmluZ0ZlbmNlU2l6ZU1heCIsImhlYWRpbmdCcmVhayIsImh0bWxCbG9ja05hbWVzIiwiaHRtbFJhd05hbWVzIiwidG9rZW5pemVIdG1sRmxvdyIsInJlc29sdmVUbyIsInJlc29sdmVUb0h0bWxGbG93IiwibmV4dEJsYW5rQ29uc3RydWN0IiwidG9rZW5pemVOZXh0QmxhbmsiLCJraW5kIiwic3RhcnRUYWciLCJleGNsYW1hdGlvbk1hcmsiLCJkZWNsYXJhdGlvblN0YXJ0Iiwic2xhc2giLCJ0YWdDbG9zZVN0YXJ0IiwicXVlc3Rpb25NYXJrIiwiaHRtbEluc3RydWN0aW9uIiwiY29udGludWF0aW9uRGVjbGFyYXRpb25JbnNpZGUiLCJodG1sQ29tbWVudCIsImNvbW1lbnRPcGVuSW5zaWRlIiwiaHRtbENkYXRhIiwiY2RhdGFPcGVuaW5nU3RyaW5nIiwiY2RhdGFPcGVuSW5zaWRlIiwiaHRtbERlY2xhcmF0aW9uIiwiaHRtbFJhdyIsImh0bWxCYXNpYyIsImJhc2ljU2VsZkNsb3NpbmciLCJodG1sQ29tcGxldGUiLCJjb21wbGV0ZUF0dHJpYnV0ZU5hbWVCZWZvcmUiLCJjb21wbGV0ZUNsb3NpbmdUYWdBZnRlciIsImNvbXBsZXRlRW5kIiwiY29tcGxldGVBdHRyaWJ1dGVOYW1lIiwiY29tcGxldGVBdHRyaWJ1dGVOYW1lQWZ0ZXIiLCJjb21wbGV0ZUF0dHJpYnV0ZVZhbHVlQmVmb3JlIiwiY29tcGxldGVBdHRyaWJ1dGVWYWx1ZVF1b3RlZCIsImNvbXBsZXRlQXR0cmlidXRlVmFsdWVVbnF1b3RlZCIsImNvbXBsZXRlQXR0cmlidXRlVmFsdWVRdW90ZWRBZnRlciIsImNvbXBsZXRlQWZ0ZXIiLCJjb250aW51YXRpb25Db21tZW50SW5zaWRlIiwiY29udGludWF0aW9uUmF3VGFnT3BlbiIsImNvbnRpbnVhdGlvbkNsb3NlIiwicmlnaHRTcXVhcmVCcmFja2V0IiwiY29udGludWF0aW9uQ2hhcmFjdGVyRGF0YUluc2lkZSIsImNvbnRpbnVhdGlvbkF0TGluZUVuZGluZyIsImh0bWxDb250aW51ZVN0YXJ0IiwiaHRtbExpbmVFbmQiLCJjb250aW51YXRpb25SYXdFbmRUYWciLCJodG1sUmF3U2l6ZU1heCIsInRva2VuaXplSHRtbFRleHQiLCJyZXR1cm5TdGF0ZSIsImRlY2xhcmF0aW9uT3BlbiIsImluc3RydWN0aW9uIiwidGFnT3BlbiIsImNvbW1lbnRPcGVuIiwiY2RhdGFPcGVuIiwiY29tbWVudFN0YXJ0IiwiY29tbWVudFN0YXJ0RGFzaCIsImNvbW1lbnRDbG9zZSIsImF0TGluZUVuZGluZyIsImNkYXRhIiwiY2RhdGFDbG9zZSIsImNkYXRhRW5kIiwiaW5zdHJ1Y3Rpb25DbG9zZSIsInRhZ0Nsb3NlIiwidGFnQ2xvc2VCZXR3ZWVuIiwidGFnT3BlbkJldHdlZW4iLCJ0YWdPcGVuQXR0cmlidXRlTmFtZSIsInRhZ09wZW5BdHRyaWJ1dGVOYW1lQWZ0ZXIiLCJ0YWdPcGVuQXR0cmlidXRlVmFsdWVCZWZvcmUiLCJ0YWdPcGVuQXR0cmlidXRlVmFsdWVRdW90ZWQiLCJ0YWdPcGVuQXR0cmlidXRlVmFsdWVVbnF1b3RlZCIsInRhZ09wZW5BdHRyaWJ1dGVWYWx1ZVF1b3RlZEFmdGVyIiwibGFiZWxFbmQiLCJ0b2tlbml6ZUxhYmVsRW5kIiwicmVzb2x2ZVRvTGFiZWxFbmQiLCJyZXNvbHZlQWxsTGFiZWxFbmQiLCJyZXNvdXJjZUNvbnN0cnVjdCIsInRva2VuaXplUmVzb3VyY2UiLCJmdWxsUmVmZXJlbmNlQ29uc3RydWN0IiwidG9rZW5pemVGdWxsUmVmZXJlbmNlIiwiY29sbGFwc2VkUmVmZXJlbmNlQ29uc3RydWN0IiwidG9rZW5pemVDb2xsYXBzZWRSZWZlcmVuY2UiLCJsYWJlbEltYWdlIiwibGFiZWxMaW5rIiwibWVkaWEiLCJfaW5hY3RpdmUiLCJfYmFsYW5jZWQiLCJsYWJlbFN0YXJ0IiwiYmFsYW5jZWQiLCJsYWJlbE1hcmtlciIsImFmdGVyTGFiZWxFbmQiLCJyZXNvdXJjZU1hcmtlciIsInJpZ2h0UGFyZW50aGVzaXMiLCJkZXN0aW5hdGlvbkFmdGVyIiwicmVzb3VyY2VEZXN0aW5hdGlvbiIsInJlc291cmNlRGVzdGluYXRpb25MaXRlcmFsIiwicmVzb3VyY2VEZXN0aW5hdGlvbkxpdGVyYWxNYXJrZXIiLCJyZXNvdXJjZURlc3RpbmF0aW9uUmF3IiwibGlua1Jlc291cmNlRGVzdGluYXRpb25CYWxhbmNlTWF4IiwiYmV0d2VlbiIsInJlc291cmNlVGl0bGUiLCJyZXNvdXJjZVRpdGxlTWFya2VyIiwiYWZ0ZXJMYWJlbCIsInJlZmVyZW5jZU1hcmtlciIsImxhYmVsU3RhcnRJbWFnZSIsInRva2VuaXplTGFiZWxTdGFydEltYWdlIiwibGFiZWxJbWFnZU1hcmtlciIsImNhcmV0IiwibGFiZWxTdGFydExpbmsiLCJ0b2tlbml6ZUxhYmVsU3RhcnRMaW5rIiwidG9rZW5pemVMaW5lRW5kaW5nIiwidG9rZW5pemVMaXN0U3RhcnQiLCJ0b2tlbml6ZUxpc3RDb250aW51YXRpb24iLCJ0b2tlbml6ZUxpc3RFbmQiLCJsaXN0SXRlbVByZWZpeFdoaXRlc3BhY2VDb25zdHJ1Y3QiLCJ0b2tlbml6ZUxpc3RJdGVtUHJlZml4V2hpdGVzcGFjZSIsImluZGVudENvbnN0cnVjdCIsInRva2VuaXplSW5kZW50IiwiaW5pdGlhbFNpemUiLCJkaWdpdDEiLCJpbnNpZGUiLCJsaXN0SXRlbVZhbHVlU2l6ZU1heCIsIm9uQmxhbmsiLCJlbmRPZlByZWZpeCIsIm90aGVyUHJlZml4IiwiaW5pdGlhbEJsYW5rTGluZSIsIl9jbG9zZUZsb3ciLCJub3RCbGFuayIsImZ1cnRoZXJCbGFua0xpbmVzIiwibm90SW5DdXJyZW50SXRlbSIsInNldGV4dFVuZGVybGluZSIsInRva2VuaXplU2V0ZXh0VW5kZXJsaW5lIiwicmVzb2x2ZVRvU2V0ZXh0VW5kZXJsaW5lIiwic2V0ZXh0SGVhZGluZ0xpbmUiLCJsaW5lU3VmZml4IiwidG9rZW5pemVUaGVtYXRpY0JyZWFrIiwiYXRCcmVhayIsInRoZW1hdGljQnJlYWtTZXF1ZW5jZSIsInRoZW1hdGljQnJlYWtNYXJrZXJDb3VudE1pbiIsImxpdGVyYWxUeXBlIiwibGl0ZXJhbE1hcmtlclR5cGUiLCJyYXdUeXBlIiwic3RyaW5nVHlwZSIsImxpbWl0IiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJiYWxhbmNlIiwiZGVzdGluYXRpb25FbmNsb3NlZEJlZm9yZSIsImRlc3RpbmF0aW9uUmF3IiwiZGVzdGluYXRpb25FbmNsb3NlZCIsImRlc3RpbmF0aW9uRW5jbG9zZWRFc2NhcGUiLCJkZXN0aW5hdGlvblJhd0VzY2FwZSIsIm1hcmtlclR5cGUiLCJsaW5rUmVmZXJlbmNlU2l6ZU1heCIsImxhYmVsRXNjYXBlIiwicHJlZml4IiwiYXRGaXJzdFRpdGxlQnJlYWsiLCJhdFRpdGxlQnJlYWsiLCJ0aXRsZUVzY2FwZSIsInNlZW4iLCJ1bmljb2RlUHVuY3R1YXRpb25SZWdleCIsInJlZ2V4Q2hlY2siLCJkZWwiLCJudWwiLCJob3Jpem9udGFsVGFiIiwidmlydHVhbFNwYWNlIiwidW5pY29kZVdoaXRlc3BhY2UiLCJ1bmljb2RlUHVuY3R1YXRpb24iLCJyZWdleCIsInJlbW92ZSIsIml0ZW1zIiwiY2h1bmtTdGFydCIsInBhcmFtZXRlcnMiLCJ2OE1heFNhZmVDaHVua1NpemUiLCJjaGFyYWN0ZXJHcm91cFdoaXRlc3BhY2UiLCJjb21iaW5lRXh0ZW5zaW9ucyIsInN5bnRheEV4dGVuc2lvbiIsImhvb2siLCJtYXliZSIsImV4aXN0aW5nIiwiYWRkIiwiY29tYmluZUh0bWxFeHRlbnNpb25zIiwiaHRtbEV4dGVuc2lvbnMiLCJodG1sRXh0ZW5zaW9uIiwiYmFzZSIsImh0IiwidnQiLCJjciIsInJlcGxhY2VtZW50Q2hhcmFjdGVyIiwiY2hhcmFjdGVyRXNjYXBlT3JSZWZlcmVuY2UiLCJkZWNvZGUiLCIkMCIsIiQyIiwiaGV4IiwiY2hhcmFjdGVyUmVmZXJlbmNlcyIsImVuY29kZSIsImNhbGxlZCIsInNhbml0aXplVXJpIiwicHJvdG9jb2wiLCJza2lwIiwicGVyY2VudFNpZ24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJqdW1wcyIsIm90aGVySW5kZXgiLCJvdGhlckV2ZW50Iiwic3ViZXZlbnRzIiwibW9yZSIsImNodW5rRmxvdyIsIl90b2tlbml6ZXIiLCJfaXNJbkZpcnN0Q29udGVudE9mTGlzdEl0ZW0iLCJzdWJjb250ZW50IiwiZXZlbnRJbmRleCIsInN0YXJ0UG9zaXRpb24iLCJzdGFydFBvc2l0aW9ucyIsInRva2VuaXplciIsImNoaWxkRXZlbnRzIiwiZ2FwcyIsInN0cmVhbSIsImN1cnJlbnQiLCJhZGp1c3QiLCJicmVha3MiLCJzbGljZVN0cmVhbSIsImRlZmluZVNraXAiLCJfZ2ZtVGFza2xpc3RGaXJzdENvbnRlbnRPZkxpc3RJdGVtIiwiY2FycmlhZ2VSZXR1cm4iLCJsaW5lRmVlZCIsImNhcnJpYWdlUmV0dXJuTGluZUZlZWQiLCJzb2giLCJzdHgiLCJldHgiLCJlb3QiLCJlbnEiLCJhY2siLCJiZWwiLCJicyIsImxmIiwiZmYiLCJzbyIsInNpIiwiZGxlIiwiZGMxIiwiZGMyIiwiZGMzIiwiZGM0IiwibmFrIiwic3luIiwiZXRiIiwiY2FuIiwiZW0iLCJzdWIiLCJlc2MiLCJmcyIsImdzIiwicnMiLCJ1cyIsImRvbGxhclNpZ24iLCJjb21tYSIsImRpZ2l0MCIsImRpZ2l0MiIsImRpZ2l0MyIsImRpZ2l0NCIsImRpZ2l0NSIsImRpZ2l0NiIsImRpZ2l0NyIsImRpZ2l0OCIsImRpZ2l0OSIsInVwcGVyY2FzZUEiLCJ1cHBlcmNhc2VCIiwidXBwZXJjYXNlQyIsInVwcGVyY2FzZUQiLCJ1cHBlcmNhc2VFIiwidXBwZXJjYXNlRiIsInVwcGVyY2FzZUciLCJ1cHBlcmNhc2VIIiwidXBwZXJjYXNlSSIsInVwcGVyY2FzZUoiLCJ1cHBlcmNhc2VLIiwidXBwZXJjYXNlTCIsInVwcGVyY2FzZU0iLCJ1cHBlcmNhc2VOIiwidXBwZXJjYXNlTyIsInVwcGVyY2FzZVAiLCJ1cHBlcmNhc2VRIiwidXBwZXJjYXNlUiIsInVwcGVyY2FzZVMiLCJ1cHBlcmNhc2VUIiwidXBwZXJjYXNlVSIsInVwcGVyY2FzZVYiLCJ1cHBlcmNhc2VXIiwidXBwZXJjYXNlWSIsInVwcGVyY2FzZVoiLCJsb3dlcmNhc2VBIiwibG93ZXJjYXNlQiIsImxvd2VyY2FzZUMiLCJsb3dlcmNhc2VEIiwibG93ZXJjYXNlRSIsImxvd2VyY2FzZUYiLCJsb3dlcmNhc2VHIiwibG93ZXJjYXNlSCIsImxvd2VyY2FzZUkiLCJsb3dlcmNhc2VKIiwibG93ZXJjYXNlSyIsImxvd2VyY2FzZUwiLCJsb3dlcmNhc2VNIiwibG93ZXJjYXNlTiIsImxvd2VyY2FzZU8iLCJsb3dlcmNhc2VQIiwibG93ZXJjYXNlUSIsImxvd2VyY2FzZVIiLCJsb3dlcmNhc2VTIiwibG93ZXJjYXNlVCIsImxvd2VyY2FzZVUiLCJsb3dlcmNhc2VWIiwibG93ZXJjYXNlVyIsImxvd2VyY2FzZVkiLCJsb3dlcmNhc2VaIiwibGVmdEN1cmx5QnJhY2UiLCJ2ZXJ0aWNhbEJhciIsInJpZ2h0Q3VybHlCcmFjZSIsImJ5dGVPcmRlck1hcmtlciIsImF0dGVudGlvblNpZGVCZWZvcmUiLCJhdHRlbnRpb25TaWRlQWZ0ZXIiLCJjb250ZW50VHlwZURvY3VtZW50IiwiY29udGVudFR5cGVGbG93IiwiaGFyZEJyZWFrUHJlZml4U2l6ZU1pbiIsImNodW5rRG9jdW1lbnQiLCJyZXNvbHZlciIsInJlc29sdmVUZXh0IiwiY29udGVudEluaXRpYWwiLCJmbG93SW5pdGlhbCIsImNyZWF0ZVRva2VuaXplciIsImluaXRpYWxpemUiLCJfaW5kZXgiLCJjb2x1bW5TdGFydCIsInJlc29sdmVBbGxDb25zdHJ1Y3RzIiwiY2h1bmtzIiwiY29uc3VtZWQiLCJjb25zdHJ1Y3RGYWN0b3J5Iiwib25zdWNjZXNzZnVsY29uc3RydWN0Iiwib25zdWNjZXNzZnVsY2hlY2siLCJleHBlY3RlZENvZGUiLCJtYWluIiwiYWRkUmVzdWx0IiwiZXhwYW5kVGFicyIsInNlcmlhbGl6ZUNodW5rcyIsInNsaWNlQ2h1bmtzIiwiYWNjb3VudEZvclBvdGVudGlhbFNraXAiLCJjaHVua0luZGV4IiwiY2h1bmsiLCJnbyIsImZpZWxkcyIsImNvbnN0cnVjdCIsIl8iLCJyZXN0b3JlIiwib25yZXR1cm4iLCJib2d1c1N0YXRlIiwibGlzdE9mQ29uc3RydWN0cyIsImNvbnN0cnVjdEluZGV4IiwiY3VycmVudENvbnN0cnVjdCIsImhhbmRsZUxpc3RPZkNvbnN0cnVjdHMiLCJoYW5kbGVNYXBPZkNvbnN0cnVjdHMiLCJoYW5kbGVDb25zdHJ1Y3QiLCJzdG9yZSIsInN0YXJ0UG9pbnQiLCJzdGFydFByZXZpb3VzIiwic3RhcnRDdXJyZW50Q29uc3RydWN0Iiwic3RhcnRFdmVudHNJbmRleCIsInN0YXJ0U3RhY2siLCJzdGFydEluZGV4Iiwic3RhcnRCdWZmZXJJbmRleCIsImVuZEluZGV4IiwiZW5kQnVmZmVySW5kZXgiLCJ2aWV3IiwiYXRUYWIiLCJpbml0aWFsaXplQ29udGVudCIsImFmdGVyQ29udGVudFN0YXJ0Q29uc3RydWN0IiwicGFyYWdyYXBoSW5pdGlhbCIsImluaXRpYWxpemVEb2N1bWVudCIsImNvbnRhaW5lckNvbnN0cnVjdCIsInRva2VuaXplQ29udGFpbmVyIiwiY29udGludWVkIiwiY2hpbGRGbG93IiwiY2hpbGRUb2tlbiIsImxpbmVTdGFydE9mZnNldCIsIml0ZW0iLCJkb2N1bWVudENvbnRpbnVlIiwiY2hlY2tOZXdDb250YWluZXJzIiwiY2xvc2VGbG93IiwiaW5kZXhCZWZvcmVFeGl0cyIsImluZGV4QmVmb3JlRmxvdyIsImV4aXRDb250YWluZXJzIiwiZG9jdW1lbnRDb250aW51ZWQiLCJmbG93U3RhcnQiLCJfZ2ZtVGFibGVEeW5hbWljSW50ZXJydXB0SGFjayIsInRoZXJlSXNBTmV3Q29udGFpbmVyIiwidGhlcmVJc05vTmV3Q29udGFpbmVyIiwiY29udGFpbmVyQ29udGludWUiLCJmbG93Q29udGludWUiLCJ3cml0ZVRvQ2hpbGQiLCJpbml0aWFsaXplRmxvdyIsImluaXRpYWwiLCJhdEJsYW5rRW5kaW5nIiwiYWZ0ZXJDb25zdHJ1Y3QiLCJjcmVhdGVSZXNvbHZlciIsImluaXRpYWxpemVGYWN0b3J5IiwiZmllbGQiLCJpbml0aWFsaXplVGV4dCIsInJlc29sdmVBbGxMaW5lU3VmZml4ZXMiLCJub3RUZXh0IiwiZXh0cmFSZXNvbHZlciIsInJlc29sdmVBbGxUZXh0IiwiYnVmZmVySW5kZXgiLCJ0YWJzIiwiZGVmYXVsdENvbnN0cnVjdHMiLCJjb25jYXQiLCJjcmVhdG9yIiwic2VhcmNoIiwiYXRDYXJyaWFnZVJldHVybiIsInByZXByb2Nlc3NvciIsImVuZFBvc2l0aW9uIiwibGFzdEluZGV4IiwiY2VpbCIsIm1lcmdlIiwieGxpbmsiLCJ4bWwiLCJ4bWxucyIsImFyaWEiLCJodG1sQmFzZSIsInN2ZyIsInN2Z0Jhc2UiLCJmaW5kIiwiaGFzdFRvUmVhY3QiLCJub3JtYWxpemUiLCJib29sZWFuaXNoIiwic3BhY2VTZXBhcmF0ZWQiLCJ0cmFuc2Zvcm0iLCJhcmlhQWN0aXZlRGVzY2VuZGFudCIsImFyaWFBdG9taWMiLCJhcmlhQXV0b0NvbXBsZXRlIiwiYXJpYUJ1c3kiLCJhcmlhQ2hlY2tlZCIsImFyaWFDb2xDb3VudCIsImFyaWFDb2xJbmRleCIsImFyaWFDb2xTcGFuIiwiYXJpYUNvbnRyb2xzIiwiYXJpYUN1cnJlbnQiLCJhcmlhRGV0YWlscyIsImFyaWFEaXNhYmxlZCIsImFyaWFEcm9wRWZmZWN0IiwiYXJpYUVycm9yTWVzc2FnZSIsImFyaWFFeHBhbmRlZCIsImFyaWFGbG93VG8iLCJhcmlhR3JhYmJlZCIsImFyaWFIYXNQb3B1cCIsImFyaWFIaWRkZW4iLCJhcmlhSW52YWxpZCIsImFyaWFLZXlTaG9ydGN1dHMiLCJhcmlhTGFiZWxsZWRCeSIsImFyaWFMZXZlbCIsImFyaWFMaXZlIiwiYXJpYU1vZGFsIiwiYXJpYU11bHRpTGluZSIsImFyaWFNdWx0aVNlbGVjdGFibGUiLCJhcmlhT3JpZW50YXRpb24iLCJhcmlhT3ducyIsImFyaWFQbGFjZWhvbGRlciIsImFyaWFQb3NJblNldCIsImFyaWFQcmVzc2VkIiwiYXJpYVJlYWRPbmx5IiwiYXJpYVJlbGV2YW50IiwiYXJpYVJlcXVpcmVkIiwiYXJpYVJvbGVEZXNjcmlwdGlvbiIsImFyaWFSb3dDb3VudCIsImFyaWFSb3dJbmRleCIsImFyaWFSb3dTcGFuIiwiYXJpYVNlbGVjdGVkIiwiYXJpYVNldFNpemUiLCJhcmlhU29ydCIsImFyaWFWYWx1ZU1heCIsImFyaWFWYWx1ZU1pbiIsImFyaWFWYWx1ZU5vdyIsImFyaWFWYWx1ZVRleHQiLCJyb2xlIiwiRGVmaW5lZEluZm8iLCJJbmZvIiwidmFsaWQiLCJjYXAiLCJzY2hlbWEiLCJub3JtYWwiLCJUeXBlIiwicmVzdCIsImNhbWVsY2FzZSIsImRhc2hlcyIsImtlYmFiIiwiY2xhc3NJZCIsImRhdGFUeXBlIiwiaXRlbUlkIiwic3Ryb2tlRGFzaEFycmF5Iiwic3Ryb2tlRGFzaE9mZnNldCIsInN0cm9rZUxpbmVDYXAiLCJzdHJva2VMaW5lSm9pbiIsInN0cm9rZU1pdGVyTGltaXQiLCJ4TGlua0FjdHVhdGUiLCJ4TGlua0FyY1JvbGUiLCJ4TGlua0hyZWYiLCJ4TGlua1JvbGUiLCJ4TGlua1Nob3ciLCJ4TGlua1RpdGxlIiwieExpbmtUeXBlIiwieG1sbnNYTGluayIsImJvb2xlYW4iLCJvdmVybG9hZGVkQm9vbGVhbiIsImNvbW1hU2VwYXJhdGVkIiwiY2FzZUluc2Vuc2l0aXZlVHJhbnNmb3JtIiwiYXR0cmlidXRlcyIsImFjY2VwdGNoYXJzZXQiLCJjbGFzc25hbWUiLCJodG1sZm9yIiwiaHR0cGVxdWl2IiwibXVzdFVzZVByb3BlcnR5IiwiYWJiciIsImFjY2VwdCIsImFjY2VwdENoYXJzZXQiLCJhY2Nlc3NLZXkiLCJhY3Rpb24iLCJhbGxvdyIsImFsbG93RnVsbFNjcmVlbiIsImFsbG93UGF5bWVudFJlcXVlc3QiLCJhbGxvd1VzZXJNZWRpYSIsImFzIiwiYXN5bmMiLCJhdXRvQ2FwaXRhbGl6ZSIsImF1dG9Db21wbGV0ZSIsImF1dG9Gb2N1cyIsImF1dG9QbGF5IiwiY2FwdHVyZSIsImNoYXJTZXQiLCJjaXRlIiwiY29scyIsImNvbFNwYW4iLCJjb250ZW50RWRpdGFibGUiLCJjb250cm9scyIsImNvbnRyb2xzTGlzdCIsImNvb3JkcyIsImNyb3NzT3JpZ2luIiwiZGF0ZVRpbWUiLCJkZWNvZGluZyIsImRlZmVyIiwiZGlyIiwiZGlyTmFtZSIsImRvd25sb2FkIiwiZHJhZ2dhYmxlIiwiZW5jVHlwZSIsImVudGVyS2V5SGludCIsImZvcm0iLCJmb3JtQWN0aW9uIiwiZm9ybUVuY1R5cGUiLCJmb3JtTWV0aG9kIiwiZm9ybU5vVmFsaWRhdGUiLCJmb3JtVGFyZ2V0IiwiaGVhZGVycyIsImhlaWdodCIsImhpZGRlbiIsImhpZ2giLCJocmVmTGFuZyIsImh0bWxGb3IiLCJodHRwRXF1aXYiLCJpbWFnZVNpemVzIiwiaW1hZ2VTcmNTZXQiLCJpbnB1dE1vZGUiLCJpbnRlZ3JpdHkiLCJpc01hcCIsIml0ZW1Qcm9wIiwiaXRlbVJlZiIsIml0ZW1TY29wZSIsIml0ZW1UeXBlIiwibGFuZ3VhZ2UiLCJsb2FkaW5nIiwibG9vcCIsImxvdyIsIm1hbmlmZXN0IiwibWF4TGVuZ3RoIiwibWV0aG9kIiwibWluIiwibWluTGVuZ3RoIiwibXVsdGlwbGUiLCJtdXRlZCIsIm5vbmNlIiwibm9Nb2R1bGUiLCJub1ZhbGlkYXRlIiwib25BYm9ydCIsIm9uQWZ0ZXJQcmludCIsIm9uQXV4Q2xpY2siLCJvbkJlZm9yZU1hdGNoIiwib25CZWZvcmVQcmludCIsIm9uQmVmb3JlVW5sb2FkIiwib25CbHVyIiwib25DYW5jZWwiLCJvbkNhblBsYXkiLCJvbkNhblBsYXlUaHJvdWdoIiwib25DaGFuZ2UiLCJvbkNsaWNrIiwib25DbG9zZSIsIm9uQ29udGV4dExvc3QiLCJvbkNvbnRleHRNZW51Iiwib25Db250ZXh0UmVzdG9yZWQiLCJvbkNvcHkiLCJvbkN1ZUNoYW5nZSIsIm9uQ3V0Iiwib25EYmxDbGljayIsIm9uRHJhZyIsIm9uRHJhZ0VuZCIsIm9uRHJhZ0VudGVyIiwib25EcmFnRXhpdCIsIm9uRHJhZ0xlYXZlIiwib25EcmFnT3ZlciIsIm9uRHJhZ1N0YXJ0Iiwib25Ecm9wIiwib25EdXJhdGlvbkNoYW5nZSIsIm9uRW1wdGllZCIsIm9uRW5kZWQiLCJvbkVycm9yIiwib25Gb2N1cyIsIm9uRm9ybURhdGEiLCJvbkhhc2hDaGFuZ2UiLCJvbklucHV0Iiwib25JbnZhbGlkIiwib25LZXlEb3duIiwib25LZXlQcmVzcyIsIm9uS2V5VXAiLCJvbkxhbmd1YWdlQ2hhbmdlIiwib25Mb2FkIiwib25Mb2FkZWREYXRhIiwib25Mb2FkZWRNZXRhZGF0YSIsIm9uTG9hZEVuZCIsIm9uTG9hZFN0YXJ0Iiwib25NZXNzYWdlIiwib25NZXNzYWdlRXJyb3IiLCJvbk1vdXNlRG93biIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsIm9uTW91c2VNb3ZlIiwib25Nb3VzZU91dCIsIm9uTW91c2VPdmVyIiwib25Nb3VzZVVwIiwib25PZmZsaW5lIiwib25PbmxpbmUiLCJvblBhZ2VIaWRlIiwib25QYWdlU2hvdyIsIm9uUGFzdGUiLCJvblBhdXNlIiwib25QbGF5Iiwib25QbGF5aW5nIiwib25Qb3BTdGF0ZSIsIm9uUHJvZ3Jlc3MiLCJvblJhdGVDaGFuZ2UiLCJvblJlamVjdGlvbkhhbmRsZWQiLCJvblJlc2V0Iiwib25SZXNpemUiLCJvblNjcm9sbCIsIm9uU2Nyb2xsRW5kIiwib25TZWN1cml0eVBvbGljeVZpb2xhdGlvbiIsIm9uU2Vla2VkIiwib25TZWVraW5nIiwib25TZWxlY3QiLCJvblNsb3RDaGFuZ2UiLCJvblN0YWxsZWQiLCJvblN0b3JhZ2UiLCJvblN1Ym1pdCIsIm9uU3VzcGVuZCIsIm9uVGltZVVwZGF0ZSIsIm9uVG9nZ2xlIiwib25VbmhhbmRsZWRSZWplY3Rpb24iLCJvblVubG9hZCIsIm9uVm9sdW1lQ2hhbmdlIiwib25XYWl0aW5nIiwib25XaGVlbCIsIm9wdGltdW0iLCJwYXR0ZXJuIiwicGluZyIsInBsYWNlaG9sZGVyIiwicGxheXNJbmxpbmUiLCJwb3N0ZXIiLCJwcmVsb2FkIiwicmVhZE9ubHkiLCJyZWZlcnJlclBvbGljeSIsInJlbCIsInJlcXVpcmVkIiwicmV2ZXJzZWQiLCJyb3dTcGFuIiwic2FuZGJveCIsInNjb3BlIiwic2NvcGVkIiwic2VhbWxlc3MiLCJzZWxlY3RlZCIsInNpemVzIiwic2xvdCIsInNwYW4iLCJzcGVsbENoZWNrIiwic3JjRG9jIiwic3JjTGFuZyIsInNyY1NldCIsInRhYkluZGV4IiwidHJhbnNsYXRlIiwidHlwZU11c3RNYXRjaCIsInVzZU1hcCIsIndpZHRoIiwiYUxpbmsiLCJhcmNoaXZlIiwiYXhpcyIsImJhY2tncm91bmQiLCJiZ0NvbG9yIiwiYm9yZGVyIiwiYm9yZGVyQ29sb3IiLCJib3R0b21NYXJnaW4iLCJjZWxsUGFkZGluZyIsImNlbGxTcGFjaW5nIiwiY2hhck9mZiIsImNsZWFyIiwiY29kZUJhc2UiLCJjb2RlVHlwZSIsImNvbXBhY3QiLCJkZWNsYXJlIiwiZmFjZSIsImZyYW1lIiwiZnJhbWVCb3JkZXIiLCJoU3BhY2UiLCJsZWZ0TWFyZ2luIiwibG9uZ0Rlc2MiLCJsb3dTcmMiLCJtYXJnaW5IZWlnaHQiLCJtYXJnaW5XaWR0aCIsIm5vUmVzaXplIiwibm9IcmVmIiwibm9TaGFkZSIsIm5vV3JhcCIsInByb2ZpbGUiLCJwcm9tcHQiLCJyZXYiLCJyaWdodE1hcmdpbiIsInNjaGVtZSIsInNjcm9sbGluZyIsInN0YW5kYnkiLCJzdW1tYXJ5IiwidG9wTWFyZ2luIiwidmFsdWVUeXBlIiwidmVyc2lvbiIsInZBbGlnbiIsInZMaW5rIiwidlNwYWNlIiwiYWxsb3dUcmFuc3BhcmVuY3kiLCJhdXRvQ29ycmVjdCIsImF1dG9TYXZlIiwiZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUiLCJkaXNhYmxlUmVtb3RlUGxheWJhY2siLCJzZWN1cml0eSIsInVuc2VsZWN0YWJsZSIsImNvbW1hT3JTcGFjZVNlcGFyYXRlZCIsImNhc2VTZW5zaXRpdmVUcmFuc2Zvcm0iLCJhY2NlbnRIZWlnaHQiLCJhbGlnbm1lbnRCYXNlbGluZSIsImFyYWJpY0Zvcm0iLCJiYXNlbGluZVNoaWZ0IiwiY2FwSGVpZ2h0IiwiY2xpcFBhdGgiLCJjbGlwUnVsZSIsImNvbG9ySW50ZXJwb2xhdGlvbiIsImNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnMiLCJjb2xvclByb2ZpbGUiLCJjb2xvclJlbmRlcmluZyIsImRvbWluYW50QmFzZWxpbmUiLCJlbmFibGVCYWNrZ3JvdW5kIiwiZmlsbE9wYWNpdHkiLCJmaWxsUnVsZSIsImZsb29kQ29sb3IiLCJmbG9vZE9wYWNpdHkiLCJmb250RmFtaWx5IiwiZm9udFNpemUiLCJmb250U2l6ZUFkanVzdCIsImZvbnRTdHJldGNoIiwiZm9udFN0eWxlIiwiZm9udFZhcmlhbnQiLCJmb250V2VpZ2h0IiwiZ2x5cGhOYW1lIiwiZ2x5cGhPcmllbnRhdGlvbkhvcml6b250YWwiLCJnbHlwaE9yaWVudGF0aW9uVmVydGljYWwiLCJob3JpekFkdlgiLCJob3Jpek9yaWdpblgiLCJob3Jpek9yaWdpblkiLCJpbWFnZVJlbmRlcmluZyIsImxldHRlclNwYWNpbmciLCJsaWdodGluZ0NvbG9yIiwibWFya2VyRW5kIiwibWFya2VyTWlkIiwibWFya2VyU3RhcnQiLCJuYXZEb3duIiwibmF2RG93bkxlZnQiLCJuYXZEb3duUmlnaHQiLCJuYXZMZWZ0IiwibmF2TmV4dCIsIm5hdlByZXYiLCJuYXZSaWdodCIsIm5hdlVwIiwibmF2VXBMZWZ0IiwibmF2VXBSaWdodCIsIm9uQWN0aXZhdGUiLCJvbkJlZ2luIiwib25FbmQiLCJvbkZvY3VzSW4iLCJvbkZvY3VzT3V0Iiwib25Nb3VzZVdoZWVsIiwib25SZXBlYXQiLCJvblNob3ciLCJvblpvb20iLCJvdmVybGluZVBvc2l0aW9uIiwib3ZlcmxpbmVUaGlja25lc3MiLCJwYWludE9yZGVyIiwicGFub3NlMSIsInBvaW50ZXJFdmVudHMiLCJyZW5kZXJpbmdJbnRlbnQiLCJzaGFwZVJlbmRlcmluZyIsInN0b3BDb2xvciIsInN0b3BPcGFjaXR5Iiwic3RyaWtldGhyb3VnaFBvc2l0aW9uIiwic3RyaWtldGhyb3VnaFRoaWNrbmVzcyIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInRleHRBbmNob3IiLCJ0ZXh0RGVjb3JhdGlvbiIsInRleHRSZW5kZXJpbmciLCJ1bmRlcmxpbmVQb3NpdGlvbiIsInVuZGVybGluZVRoaWNrbmVzcyIsInVuaWNvZGVCaWRpIiwidW5pY29kZVJhbmdlIiwidW5pdHNQZXJFbSIsInZBbHBoYWJldGljIiwidkhhbmdpbmciLCJ2SWRlb2dyYXBoaWMiLCJ2TWF0aGVtYXRpY2FsIiwidmVjdG9yRWZmZWN0IiwidmVydEFkdlkiLCJ2ZXJ0T3JpZ2luWCIsInZlcnRPcmlnaW5ZIiwid29yZFNwYWNpbmciLCJ3cml0aW5nTW9kZSIsInhIZWlnaHQiLCJwbGF5YmFja09yZGVyIiwidGltZWxpbmVCZWdpbiIsImFib3V0IiwiYWNjdW11bGF0ZSIsImFkZGl0aXZlIiwiYWxwaGFiZXRpYyIsImFtcGxpdHVkZSIsImFzY2VudCIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVUeXBlIiwiYXppbXV0aCIsImJhbmR3aWR0aCIsImJhc2VGcmVxdWVuY3kiLCJiYXNlUHJvZmlsZSIsImJib3giLCJiZWdpbiIsImJpYXMiLCJieSIsImNhbGNNb2RlIiwiY2xpcCIsImNsaXBQYXRoVW5pdHMiLCJjb250ZW50U2NyaXB0VHlwZSIsImNvbnRlbnRTdHlsZVR5cGUiLCJjdXJzb3IiLCJjeCIsImN5IiwiZGVmYXVsdEFjdGlvbiIsImRlc2NlbnQiLCJkaWZmdXNlQ29uc3RhbnQiLCJkaXJlY3Rpb24iLCJkaXNwbGF5IiwiZHVyIiwiZGl2aXNvciIsImR4IiwiZHkiLCJlZGdlTW9kZSIsImVkaXRhYmxlIiwiZWxldmF0aW9uIiwiZXhwb25lbnQiLCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkIiwiZmlsbCIsImZpbHRlciIsImZpbHRlclJlcyIsImZpbHRlclVuaXRzIiwiZm9jdXNhYmxlIiwiZm9jdXNIaWdobGlnaHQiLCJmciIsImZ4IiwiZnkiLCJnMSIsImcyIiwiZ2x5cGhSZWYiLCJncmFkaWVudFRyYW5zZm9ybSIsImdyYWRpZW50VW5pdHMiLCJoYW5naW5nIiwiaGF0Y2hDb250ZW50VW5pdHMiLCJoYXRjaFVuaXRzIiwiaWRlb2dyYXBoaWMiLCJpbml0aWFsVmlzaWJpbGl0eSIsImluIiwiaW4yIiwiaW50ZXJjZXB0IiwiayIsImsxIiwiazIiLCJrMyIsIms0Iiwia2VybmVsTWF0cml4Iiwia2VybmVsVW5pdExlbmd0aCIsImtleVBvaW50cyIsImtleVNwbGluZXMiLCJrZXlUaW1lcyIsImtlcm5pbmciLCJsZW5ndGhBZGp1c3QiLCJsaW1pdGluZ0NvbmVBbmdsZSIsImxvY2FsIiwibWFya2VySGVpZ2h0IiwibWFya2VyVW5pdHMiLCJtYXJrZXJXaWR0aCIsIm1hc2siLCJtYXNrQ29udGVudFVuaXRzIiwibWFza1VuaXRzIiwibWF0aGVtYXRpY2FsIiwibWVkaWFDaGFyYWN0ZXJFbmNvZGluZyIsIm1lZGlhQ29udGVudEVuY29kaW5ncyIsIm1lZGlhU2l6ZSIsIm1lZGlhVGltZSIsIm1vZGUiLCJudW1PY3RhdmVzIiwib2JzZXJ2ZXIiLCJvcGFjaXR5Iiwib3BlcmF0b3IiLCJvcmRlciIsIm9yaWVudCIsIm9yaWVudGF0aW9uIiwib3JpZ2luIiwib3ZlcmZsb3ciLCJvdmVybGF5IiwicGF0aCIsInBhdGhMZW5ndGgiLCJwYXR0ZXJuQ29udGVudFVuaXRzIiwicGF0dGVyblRyYW5zZm9ybSIsInBhdHRlcm5Vbml0cyIsInBoYXNlIiwicGl0Y2giLCJwb2ludHMiLCJwb2ludHNBdFgiLCJwb2ludHNBdFkiLCJwb2ludHNBdFoiLCJwcmVzZXJ2ZUFscGhhIiwicHJlc2VydmVBc3BlY3RSYXRpbyIsInByaW1pdGl2ZVVuaXRzIiwicHJvcGFnYXRlIiwicmFkaXVzIiwicmVmWCIsInJlZlkiLCJyZXBlYXRDb3VudCIsInJlcGVhdER1ciIsInJlcXVpcmVkRXh0ZW5zaW9ucyIsInJlcXVpcmVkRmVhdHVyZXMiLCJyZXF1aXJlZEZvbnRzIiwicmVxdWlyZWRGb3JtYXRzIiwicmVzdGFydCIsInJvdGF0ZSIsInJ4IiwicnkiLCJzY2FsZSIsInNlZWQiLCJzaWRlIiwic2xvcGUiLCJzbmFwc2hvdFRpbWUiLCJzcGVjdWxhckNvbnN0YW50Iiwic3BlY3VsYXJFeHBvbmVudCIsInNwcmVhZE1ldGhvZCIsInNwYWNpbmciLCJzdGFydE9mZnNldCIsInN0ZERldmlhdGlvbiIsInN0ZW1oIiwic3RlbXYiLCJzdGl0Y2hUaWxlcyIsInN0cm9rZSIsInN1cmZhY2VTY2FsZSIsInN5bmNCZWhhdmlvciIsInN5bmNCZWhhdmlvckRlZmF1bHQiLCJzeW5jTWFzdGVyIiwic3luY1RvbGVyYW5jZSIsInN5bmNUb2xlcmFuY2VEZWZhdWx0Iiwic3lzdGVtTGFuZ3VhZ2UiLCJ0YWJsZVZhbHVlcyIsInRhcmdldFgiLCJ0YXJnZXRZIiwidGV4dExlbmd0aCIsInRyYW5zZm9ybUJlaGF2aW9yIiwidTEiLCJ1MiIsInVuaWNvZGUiLCJ2aWV3Qm94Iiwidmlld1RhcmdldCIsInZpc2liaWxpdHkiLCJ3aWR0aHMiLCJ4MSIsIngyIiwieENoYW5uZWxTZWxlY3RvciIsInkxIiwieTIiLCJ5Q2hhbm5lbFNlbGVjdG9yIiwieiIsInpvb21BbmRQYW4iLCJhdHRyaWJ1dGUiLCJTY2hlbWEiLCJjaGVja3MiLCJtYXJrIiwicG93ZXJzIiwiaW5jcmVtZW50IiwieG1sTGFuZyIsInhtbEJhc2UiLCJ4bWxTcGFjZSIsInhtbG5zeGxpbmsiLCJSZWFjdCIsInNwYWNlcyIsImNvbW1hcyIsInVyaVRyYW5zZm9ybWVyIiwidGFibGVFbGVtZW50cyIsIlNldCIsImNoaWxkcmVuVG9SZWFjdCIsImNoaWxkSW5kZXgiLCJ0b1JlYWN0Iiwic2tpcEh0bWwiLCJ0cmFuc2Zvcm1MaW5rVXJpIiwicGFyZW50U2NoZW1hIiwiYWRkUHJvcGVydHkiLCJsaXN0RGVwdGgiLCJjb21wb25lbnQiLCJjb21wb25lbnRzIiwiYmFzaWMiLCJsaW5rVGFyZ2V0IiwiaW5saW5lIiwibGV2ZWwiLCJ0cmFuc2Zvcm1JbWFnZVVyaSIsImdldElucHV0RWxlbWVudCIsImdldEVsZW1lbnRzQmVmb3JlQ291bnQiLCJ0ZXh0QWxpZ24iLCJpc0hlYWRlciIsInNvdXJjZVBvcyIsImZsYXR0ZW5Qb3NpdGlvbiIsInJhd1NvdXJjZVBvcyIsInNvdXJjZVBvc2l0aW9uIiwiaW5jbHVkZUVsZW1lbnRJbmRleCIsInNpYmxpbmdDb3VudCIsImNvdW50IiwicGFyc2VTdHlsZSIsInN0eWxlUmVwbGFjZXIiLCJWRmlsZSIsInVuaWZpZWQiLCJyZW1hcmtQYXJzZSIsInJlbWFya1JlaHlwZSIsInJlaHlwZUZpbHRlciIsImNoYW5nZWxvZyIsImRlcHJlY2F0ZWQiLCJwbHVnaW5zIiwicmVuZGVyZXJzIiwiYXN0UGx1Z2lucyIsImVzY2FwZUh0bWwiLCJhbGxvd05vZGUiLCJhbGxvd2VkVHlwZXMiLCJkaXNhbGxvd2VkVHlwZXMiLCJpbmNsdWRlTm9kZUluZGV4IiwiUmVhY3RNYXJrZG93biIsImRlcHJlY2F0aW9uIiwicHJvY2Vzc29yIiwicmVtYXJrUGx1Z2lucyIsInJlbWFya1JlaHlwZU9wdGlvbnMiLCJyZWh5cGVQbHVnaW5zIiwiZmlsZSIsImhhc3ROb2RlIiwicnVuU3luYyIsInByb3BUeXBlcyIsImFsbG93RWxlbWVudCIsImFsbG93ZWRFbGVtZW50cyIsImRpc2FsbG93ZWRFbGVtZW50cyIsInVud3JhcERpc2FsbG93ZWQiLCJwYXJlbnRfIiwicHJvdG9jb2xzIiwidXJpIiwiZmlyc3QiLCJkb2MiLCJQYXJzZXIiLCJkZXN0aW5hdGlvbiIsImJyaWRnZSIsIm11dGF0ZSIsInJ1biIsInRhYiIsImxhc3QiLCJ0cmltTGluZSIsImNvZGVQb2ludEF0IiwidHJvdWdoIiwiZm5zIiwicGlwZWxpbmUiLCJtaWRkbGV3YXJlSW5kZXgiLCJjYWxsYmFjayIsImZuIiwiX2xlbjIiLCJfa2V5MiIsIm1pZGRlbHdhcmUiLCJtaWRkbGV3YXJlIiwid3JhcHBlZCIsIl9sZW4zIiwiX2tleTMiLCJmbkV4cGVjdHNDYWxsYmFjayIsIlByb21pc2UiLCJ0aGVuIiwiX2xlbjQiLCJfa2V5NCIsImlzUGxhaW5PYmoiLCJmcmVlemUiLCJ0cmFuc2Zvcm1lcnMiLCJhdHRhY2hlcnMiLCJmcm96ZW4iLCJmcmVlemVJbmRleCIsIkNvbXBpbGVyIiwicHJvY2Vzc1N5bmMiLCJhc3NlcnRVbmZyb3plbiIsImF0dGFjaGVyIiwidHJhbnNmb3JtZXIiLCJhZGRQbHVnaW4iLCJhZGRMaXN0IiwiYWRkUHJlc2V0IiwicGx1Z2luIiwidmZpbGUiLCJhc3NlcnRQYXJzZXIiLCJuZXdhYmxlIiwiYXNzZXJ0Q29tcGlsZXIiLCJhc3NlcnROb2RlIiwiZXhlY3V0b3IiLCJyZWplY3QiLCJjb21wbGV0ZSIsImFzc2VydERvbmUiLCJsb29rc0xpa2VBVkZpbGVWYWx1ZSIsImFzeW5jTmFtZSIsImxvb2tzTGlrZUFWRmlsZSIsImdldFByb3RvdHlwZU9mIiwidG9TdHJpbmdUYWciLCJjb252ZXJ0IiwidHlwZUZhY3RvcnkiLCJhbnlGYWN0b3J5IiwicHJvcHNGYWN0b3J5IiwiY2FzdEZhY3RvcnkiLCJ0ZXN0cyIsImFzc2VydGlvbiIsIkNPTlRJTlVFIiwiRVhJVCIsIlNLSVAiLCJ2aXNpdFBhcmVudHMiLCJ2aXNpdG9yIiwicmV2ZXJzZSIsImZhY3RvcnkiLCJwYXJlbnRzIiwic3VicmVzdWx0IiwiZ3JhbmRwYXJlbnRzIiwidG9SZXN1bHQiLCJvdmVybG9hZCIsIlZGaWxlTWVzc2FnZSIsInBsYWNlIiwicGFydHMiLCJmYXRhbCIsInJ1bGVJZCIsImFjdHVhbCIsImV4cGVjdGVkIiwibm90ZSIsImJ1ZmZlckxpa2UiLCJwcm9jIiwidXJsVG9QYXRoIiwiaXNVcmwiLCJtZXNzYWdlcyIsImhpc3RvcnkiLCJjd2QiLCJzdG9yZWQiLCJhc3NlcnROb25FbXB0eSIsImRpcm5hbWUiLCJhc3NlcnRQYXRoIiwiYmFzZW5hbWUiLCJhc3NlcnRQYXJ0IiwiZXh0bmFtZSIsInN0ZW0iLCJmYWlsIiwicGFydCIsInNlcCIsImV4dCIsInNlZW5Ob25TbGFzaCIsImZpcnN0Tm9uU2xhc2hFbmQiLCJleHRJbmRleCIsInVubWF0Y2hlZFNsYXNoIiwic3RhcnRQYXJ0Iiwic3RhcnREb3QiLCJwcmVEb3RTdGF0ZSIsImpvaW5lZCIsInNlZ21lbnRzIiwiYWJzb2x1dGUiLCJub3JtYWxpemVTdHJpbmciLCJhbGxvd0Fib3ZlUm9vdCIsImxhc3RTZWdtZW50TGVuZ3RoIiwibGFzdFNsYXNoIiwiZG90cyIsImxhc3RTbGFzaEluZGV4IiwiVVJMIiwiZ2V0UGF0aEZyb21VUkxQb3NpeCIsImhvc3RuYW1lIiwicGF0aG5hbWUiLCJ0aGlyZCIsImRlY29kZVVSSUNvbXBvbmVudCIsImZpbGVVcmxPclBhdGgiXSwic291cmNlUm9vdCI6IiJ9